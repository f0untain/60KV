
Stm32F103RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd60  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800bf48  0800bf48  0001bf48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c534  0800c534  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800c534  0800c534  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c534  0800c534  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800c53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000344  0800c880  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  0800c880  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e164  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000252a  00000000  00000000  0002e514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00030a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b598  00000000  00000000  0003255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012027  00000000  00000000  0004daf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c33d  00000000  00000000  0005fb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005620  00000000  00000000  000fbe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0010147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000344 	.word	0x20000344
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bf30 	.word	0x0800bf30

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000348 	.word	0x20000348
 8000224:	0800bf30 	.word	0x0800bf30

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fmul>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d06f      	beq.n	8000f68 <__aeabi_fmul+0xf8>
 8000e88:	441a      	add	r2, r3
 8000e8a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8e:	0240      	lsls	r0, r0, #9
 8000e90:	bf18      	it	ne
 8000e92:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e96:	d01e      	beq.n	8000ed6 <__aeabi_fmul+0x66>
 8000e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e9c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ea4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ea8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb0:	bf3e      	ittt	cc
 8000eb2:	0049      	lslcc	r1, r1, #1
 8000eb4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eb8:	005b      	lslcc	r3, r3, #1
 8000eba:	ea40 0001 	orr.w	r0, r0, r1
 8000ebe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ec2:	2afd      	cmp	r2, #253	; 0xfd
 8000ec4:	d81d      	bhi.n	8000f02 <__aeabi_fmul+0x92>
 8000ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ece:	bf08      	it	eq
 8000ed0:	f020 0001 	biceq.w	r0, r0, #1
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ede:	bf08      	it	eq
 8000ee0:	0249      	lsleq	r1, r1, #9
 8000ee2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eea:	3a7f      	subs	r2, #127	; 0x7f
 8000eec:	bfc2      	ittt	gt
 8000eee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef6:	4770      	bxgt	lr
 8000ef8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	3a01      	subs	r2, #1
 8000f02:	dc5d      	bgt.n	8000fc0 <__aeabi_fmul+0x150>
 8000f04:	f112 0f19 	cmn.w	r2, #25
 8000f08:	bfdc      	itt	le
 8000f0a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f0e:	4770      	bxle	lr
 8000f10:	f1c2 0200 	rsb	r2, r2, #0
 8000f14:	0041      	lsls	r1, r0, #1
 8000f16:	fa21 f102 	lsr.w	r1, r1, r2
 8000f1a:	f1c2 0220 	rsb	r2, r2, #32
 8000f1e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f22:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f26:	f140 0000 	adc.w	r0, r0, #0
 8000f2a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f2e:	bf08      	it	eq
 8000f30:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f34:	4770      	bx	lr
 8000f36:	f092 0f00 	teq	r2, #0
 8000f3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f3e:	bf02      	ittt	eq
 8000f40:	0040      	lsleq	r0, r0, #1
 8000f42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f46:	3a01      	subeq	r2, #1
 8000f48:	d0f9      	beq.n	8000f3e <__aeabi_fmul+0xce>
 8000f4a:	ea40 000c 	orr.w	r0, r0, ip
 8000f4e:	f093 0f00 	teq	r3, #0
 8000f52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0049      	lsleq	r1, r1, #1
 8000f5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f5e:	3b01      	subeq	r3, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fmul+0xe6>
 8000f62:	ea41 010c 	orr.w	r1, r1, ip
 8000f66:	e78f      	b.n	8000e88 <__aeabi_fmul+0x18>
 8000f68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	bf18      	it	ne
 8000f72:	ea93 0f0c 	teqne	r3, ip
 8000f76:	d00a      	beq.n	8000f8e <__aeabi_fmul+0x11e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1d8      	bne.n	8000f36 <__aeabi_fmul+0xc6>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	4770      	bx	lr
 8000f8e:	f090 0f00 	teq	r0, #0
 8000f92:	bf17      	itett	ne
 8000f94:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f98:	4608      	moveq	r0, r1
 8000f9a:	f091 0f00 	teqne	r1, #0
 8000f9e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fa2:	d014      	beq.n	8000fce <__aeabi_fmul+0x15e>
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d101      	bne.n	8000fae <__aeabi_fmul+0x13e>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d10f      	bne.n	8000fce <__aeabi_fmul+0x15e>
 8000fae:	ea93 0f0c 	teq	r3, ip
 8000fb2:	d103      	bne.n	8000fbc <__aeabi_fmul+0x14c>
 8000fb4:	024b      	lsls	r3, r1, #9
 8000fb6:	bf18      	it	ne
 8000fb8:	4608      	movne	r0, r1
 8000fba:	d108      	bne.n	8000fce <__aeabi_fmul+0x15e>
 8000fbc:	ea80 0001 	eor.w	r0, r0, r1
 8000fc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fcc:	4770      	bx	lr
 8000fce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fd6:	4770      	bx	lr

08000fd8 <__aeabi_fdiv>:
 8000fd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe0:	bf1e      	ittt	ne
 8000fe2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fe6:	ea92 0f0c 	teqne	r2, ip
 8000fea:	ea93 0f0c 	teqne	r3, ip
 8000fee:	d069      	beq.n	80010c4 <__aeabi_fdiv+0xec>
 8000ff0:	eba2 0203 	sub.w	r2, r2, r3
 8000ff4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ff8:	0249      	lsls	r1, r1, #9
 8000ffa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ffe:	d037      	beq.n	8001070 <__aeabi_fdiv+0x98>
 8001000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001004:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001008:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800100c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001010:	428b      	cmp	r3, r1
 8001012:	bf38      	it	cc
 8001014:	005b      	lslcc	r3, r3, #1
 8001016:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800101a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800101e:	428b      	cmp	r3, r1
 8001020:	bf24      	itt	cs
 8001022:	1a5b      	subcs	r3, r3, r1
 8001024:	ea40 000c 	orrcs.w	r0, r0, ip
 8001028:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800102c:	bf24      	itt	cs
 800102e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001032:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001036:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800103a:	bf24      	itt	cs
 800103c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001040:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001044:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001048:	bf24      	itt	cs
 800104a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800104e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	bf18      	it	ne
 8001056:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800105a:	d1e0      	bne.n	800101e <__aeabi_fdiv+0x46>
 800105c:	2afd      	cmp	r2, #253	; 0xfd
 800105e:	f63f af50 	bhi.w	8000f02 <__aeabi_fmul+0x92>
 8001062:	428b      	cmp	r3, r1
 8001064:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001068:	bf08      	it	eq
 800106a:	f020 0001 	biceq.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001074:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001078:	327f      	adds	r2, #127	; 0x7f
 800107a:	bfc2      	ittt	gt
 800107c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001080:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001084:	4770      	bxgt	lr
 8001086:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	3a01      	subs	r2, #1
 8001090:	e737      	b.n	8000f02 <__aeabi_fmul+0x92>
 8001092:	f092 0f00 	teq	r2, #0
 8001096:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800109a:	bf02      	ittt	eq
 800109c:	0040      	lsleq	r0, r0, #1
 800109e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010a2:	3a01      	subeq	r2, #1
 80010a4:	d0f9      	beq.n	800109a <__aeabi_fdiv+0xc2>
 80010a6:	ea40 000c 	orr.w	r0, r0, ip
 80010aa:	f093 0f00 	teq	r3, #0
 80010ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010b2:	bf02      	ittt	eq
 80010b4:	0049      	lsleq	r1, r1, #1
 80010b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010ba:	3b01      	subeq	r3, #1
 80010bc:	d0f9      	beq.n	80010b2 <__aeabi_fdiv+0xda>
 80010be:	ea41 010c 	orr.w	r1, r1, ip
 80010c2:	e795      	b.n	8000ff0 <__aeabi_fdiv+0x18>
 80010c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010c8:	ea92 0f0c 	teq	r2, ip
 80010cc:	d108      	bne.n	80010e0 <__aeabi_fdiv+0x108>
 80010ce:	0242      	lsls	r2, r0, #9
 80010d0:	f47f af7d 	bne.w	8000fce <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	f47f af70 	bne.w	8000fbc <__aeabi_fmul+0x14c>
 80010dc:	4608      	mov	r0, r1
 80010de:	e776      	b.n	8000fce <__aeabi_fmul+0x15e>
 80010e0:	ea93 0f0c 	teq	r3, ip
 80010e4:	d104      	bne.n	80010f0 <__aeabi_fdiv+0x118>
 80010e6:	024b      	lsls	r3, r1, #9
 80010e8:	f43f af4c 	beq.w	8000f84 <__aeabi_fmul+0x114>
 80010ec:	4608      	mov	r0, r1
 80010ee:	e76e      	b.n	8000fce <__aeabi_fmul+0x15e>
 80010f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010f4:	bf18      	it	ne
 80010f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010fa:	d1ca      	bne.n	8001092 <__aeabi_fdiv+0xba>
 80010fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001100:	f47f af5c 	bne.w	8000fbc <__aeabi_fmul+0x14c>
 8001104:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001108:	f47f af3c 	bne.w	8000f84 <__aeabi_fmul+0x114>
 800110c:	e75f      	b.n	8000fce <__aeabi_fmul+0x15e>
 800110e:	bf00      	nop

08001110 <__gesf2>:
 8001110:	f04f 3cff 	mov.w	ip, #4294967295
 8001114:	e006      	b.n	8001124 <__cmpsf2+0x4>
 8001116:	bf00      	nop

08001118 <__lesf2>:
 8001118:	f04f 0c01 	mov.w	ip, #1
 800111c:	e002      	b.n	8001124 <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__cmpsf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001128:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800112c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001130:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001134:	bf18      	it	ne
 8001136:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800113a:	d011      	beq.n	8001160 <__cmpsf2+0x40>
 800113c:	b001      	add	sp, #4
 800113e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001142:	bf18      	it	ne
 8001144:	ea90 0f01 	teqne	r0, r1
 8001148:	bf58      	it	pl
 800114a:	ebb2 0003 	subspl.w	r0, r2, r3
 800114e:	bf88      	it	hi
 8001150:	17c8      	asrhi	r0, r1, #31
 8001152:	bf38      	it	cc
 8001154:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001158:	bf18      	it	ne
 800115a:	f040 0001 	orrne.w	r0, r0, #1
 800115e:	4770      	bx	lr
 8001160:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001164:	d102      	bne.n	800116c <__cmpsf2+0x4c>
 8001166:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800116a:	d105      	bne.n	8001178 <__cmpsf2+0x58>
 800116c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001170:	d1e4      	bne.n	800113c <__cmpsf2+0x1c>
 8001172:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001176:	d0e1      	beq.n	800113c <__cmpsf2+0x1c>
 8001178:	f85d 0b04 	ldr.w	r0, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_cfrcmple>:
 8001180:	4684      	mov	ip, r0
 8001182:	4608      	mov	r0, r1
 8001184:	4661      	mov	r1, ip
 8001186:	e7ff      	b.n	8001188 <__aeabi_cfcmpeq>

08001188 <__aeabi_cfcmpeq>:
 8001188:	b50f      	push	{r0, r1, r2, r3, lr}
 800118a:	f7ff ffc9 	bl	8001120 <__cmpsf2>
 800118e:	2800      	cmp	r0, #0
 8001190:	bf48      	it	mi
 8001192:	f110 0f00 	cmnmi.w	r0, #0
 8001196:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001198 <__aeabi_fcmpeq>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff fff4 	bl	8001188 <__aeabi_cfcmpeq>
 80011a0:	bf0c      	ite	eq
 80011a2:	2001      	moveq	r0, #1
 80011a4:	2000      	movne	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmplt>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffea 	bl	8001188 <__aeabi_cfcmpeq>
 80011b4:	bf34      	ite	cc
 80011b6:	2001      	movcc	r0, #1
 80011b8:	2000      	movcs	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmple>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffe0 	bl	8001188 <__aeabi_cfcmpeq>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpge>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffd2 	bl	8001180 <__aeabi_cfrcmple>
 80011dc:	bf94      	ite	ls
 80011de:	2001      	movls	r0, #1
 80011e0:	2000      	movhi	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_fcmpgt>:
 80011e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011ec:	f7ff ffc8 	bl	8001180 <__aeabi_cfrcmple>
 80011f0:	bf34      	ite	cc
 80011f2:	2001      	movcc	r0, #1
 80011f4:	2000      	movcs	r0, #0
 80011f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011fa:	bf00      	nop

080011fc <__aeabi_f2iz>:
 80011fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001200:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001204:	d30f      	bcc.n	8001226 <__aeabi_f2iz+0x2a>
 8001206:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800120e:	d90d      	bls.n	800122c <__aeabi_f2iz+0x30>
 8001210:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001218:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	bf18      	it	ne
 8001222:	4240      	negne	r0, r0
 8001224:	4770      	bx	lr
 8001226:	f04f 0000 	mov.w	r0, #0
 800122a:	4770      	bx	lr
 800122c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001230:	d101      	bne.n	8001236 <__aeabi_f2iz+0x3a>
 8001232:	0242      	lsls	r2, r0, #9
 8001234:	d105      	bne.n	8001242 <__aeabi_f2iz+0x46>
 8001236:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800123a:	bf08      	it	eq
 800123c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001240:	4770      	bx	lr
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	4770      	bx	lr

08001248 <__aeabi_f2uiz>:
 8001248:	0042      	lsls	r2, r0, #1
 800124a:	d20e      	bcs.n	800126a <__aeabi_f2uiz+0x22>
 800124c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001250:	d30b      	bcc.n	800126a <__aeabi_f2uiz+0x22>
 8001252:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001256:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800125a:	d409      	bmi.n	8001270 <__aeabi_f2uiz+0x28>
 800125c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001264:	fa23 f002 	lsr.w	r0, r3, r2
 8001268:	4770      	bx	lr
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	4770      	bx	lr
 8001270:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001274:	d101      	bne.n	800127a <__aeabi_f2uiz+0x32>
 8001276:	0242      	lsls	r2, r0, #9
 8001278:	d102      	bne.n	8001280 <__aeabi_f2uiz+0x38>
 800127a:	f04f 30ff 	mov.w	r0, #4294967295
 800127e:	4770      	bx	lr
 8001280:	f04f 0000 	mov.w	r0, #0
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <__aeabi_d2lz>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4605      	mov	r5, r0
 800128c:	460c      	mov	r4, r1
 800128e:	2200      	movs	r2, #0
 8001290:	2300      	movs	r3, #0
 8001292:	4628      	mov	r0, r5
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff fc07 	bl	8000aa8 <__aeabi_dcmplt>
 800129a:	b928      	cbnz	r0, 80012a8 <__aeabi_d2lz+0x20>
 800129c:	4628      	mov	r0, r5
 800129e:	4621      	mov	r1, r4
 80012a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012a4:	f000 b80a 	b.w	80012bc <__aeabi_d2ulz>
 80012a8:	4628      	mov	r0, r5
 80012aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80012ae:	f000 f805 	bl	80012bc <__aeabi_d2ulz>
 80012b2:	4240      	negs	r0, r0
 80012b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	bf00      	nop

080012bc <__aeabi_d2ulz>:
 80012bc:	b5d0      	push	{r4, r6, r7, lr}
 80012be:	2200      	movs	r2, #0
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <__aeabi_d2ulz+0x34>)
 80012c2:	4606      	mov	r6, r0
 80012c4:	460f      	mov	r7, r1
 80012c6:	f7ff f97d 	bl	80005c4 <__aeabi_dmul>
 80012ca:	f7ff fc53 	bl	8000b74 <__aeabi_d2uiz>
 80012ce:	4604      	mov	r4, r0
 80012d0:	f7ff f8fe 	bl	80004d0 <__aeabi_ui2d>
 80012d4:	2200      	movs	r2, #0
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <__aeabi_d2ulz+0x38>)
 80012d8:	f7ff f974 	bl	80005c4 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4630      	mov	r0, r6
 80012e2:	4639      	mov	r1, r7
 80012e4:	f7fe ffb6 	bl	8000254 <__aeabi_dsub>
 80012e8:	f7ff fc44 	bl	8000b74 <__aeabi_d2uiz>
 80012ec:	4621      	mov	r1, r4
 80012ee:	bdd0      	pop	{r4, r6, r7, pc}
 80012f0:	3df00000 	.word	0x3df00000
 80012f4:	41f00000 	.word	0x41f00000

080012f8 <VcDecOrSet>:
 * @brief Decrease 2-bit vertical counter where mask = 1, or set counters to 0b11 where mask = 0.
 * @param high High byte of the counter.
 * @param low Low byte of the counter.
 * @param mask Mask indicating which counters to decrease or set.
 */
void VcDecOrSet(uint8_t high, uint8_t low, uint8_t mask) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	460b      	mov	r3, r1
 8001304:	71bb      	strb	r3, [r7, #6]
 8001306:	4613      	mov	r3, r2
 8001308:	717b      	strb	r3, [r7, #5]
    low = ~(low & mask);
 800130a:	79ba      	ldrb	r2, [r7, #6]
 800130c:	797b      	ldrb	r3, [r7, #5]
 800130e:	4013      	ands	r3, r2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	71bb      	strb	r3, [r7, #6]
	high = low ^ (high & mask);
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	4013      	ands	r3, r2
 800131c:	b2da      	uxtb	r2, r3
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	4053      	eors	r3, r2
 8001322:	71fb      	strb	r3, [r7, #7]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <Debounce>:
*
* @details This function checks the state of the buttons and updates the `buttonsButtonRelease` variable
* if a debounced button press or ButtonRelease is detected. It should be called approximately 100 times per second.
*/
void Debounce(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	static uint8_t buttonState = 0;

	/**
	* @brief XOR with `buttonState` to detect state changes.
	*/
	uint8_t stateChanged = (KEY_READ) ^ buttonState;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <Debounce+0x90>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	0a9b      	lsrs	r3, r3, #10
 800133c:	b25b      	sxtb	r3, r3
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	b25a      	sxtb	r2, r3
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <Debounce+0x94>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	0adb      	lsrs	r3, r3, #11
 800134a:	b25b      	sxtb	r3, r3
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	b25b      	sxtb	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b25a      	sxtb	r2, r3
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <Debounce+0x98>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	4053      	eors	r3, r2
 800135e:	b25b      	sxtb	r3, r3
 8001360:	71fb      	strb	r3, [r7, #7]

	/* Decrease counters where stateChanged = 1, set the others to 0b11. */
	VcDecOrSet(vcountHigh, vcountLow, stateChanged);
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <Debounce+0x9c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <Debounce+0xa0>)
 8001368:	7811      	ldrb	r1, [r2, #0]
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ffc3 	bl	80012f8 <VcDecOrSet>

	/* Update stateChanged to have a 1 only if the counter overflowed. */
	stateChanged &= vcountLow & vcountHigh;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <Debounce+0xa0>)
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <Debounce+0x9c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4013      	ands	r3, r2
 800137c:	b2da      	uxtb	r2, r3
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4013      	ands	r3, r2
 8001382:	71fb      	strb	r3, [r7, #7]

	/* Change buttonState for the buttons whose counters rolled over. */
	buttonState ^= stateChanged;
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <Debounce+0x98>)
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4053      	eors	r3, r2
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <Debounce+0x98>)
 8001390:	701a      	strb	r2, [r3, #0]

	/* Update buttonsButtonRelease with buttons whose counters rolled over
	* and are still in state 0 (ButtonReleased).
	*/
	buttonRelease |= (buttonState & (KEY_RELEASE_MASK)) & stateChanged; // ButtonRelease action.
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <Debounce+0x98>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4013      	ands	r3, r2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <Debounce+0xa4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <Debounce+0xa4>)
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010800 	.word	0x40010800
 80013c4:	40011000 	.word	0x40011000
 80013c8:	20000361 	.word	0x20000361
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000001 	.word	0x20000001
 80013d4:	20000360 	.word	0x20000360

080013d8 <ToggleBuzzer>:
 * this array must be initialized when need to buzzer toggled.
 */
volatile uint8_t buzzer[2];

static inline void ToggleBuzzer(volatile uint8_t buzzer[2])
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	static uint8_t number = 0;
	static uint8_t count10ms = 0;

	if (count10ms == 0) /* buzzer[BUZZ_DELAY]/10 = number of count10ms */
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <ToggleBuzzer+0x94>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d132      	bne.n	800144e <ToggleBuzzer+0x76>
	{
		if (number < buzzer[BUZZ_NUM] * 2)	/* buzzer[BUZZ_NUM]*2 = number of (buzzer_off + buzzer_on) BUT
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <ToggleBuzzer+0x98>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	429a      	cmp	r2, r3
 80013f8:	da16      	bge.n	8001428 <ToggleBuzzer+0x50>
											   buzzer[BUZZ_NUM]	  = number of buzzer_on */
		{
			//BUZZ_TGL;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	481d      	ldr	r0, [pc, #116]	; (8001474 <ToggleBuzzer+0x9c>)
 8001400:	f001 faf2 	bl	80029e8 <HAL_GPIO_TogglePin>
			number++;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <ToggleBuzzer+0x98>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <ToggleBuzzer+0x98>)
 800140e:	701a      	strb	r2, [r3, #0]
			count10ms = (buzzer[BUZZ_DELAY] / 10);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <ToggleBuzzer+0xa0>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	08db      	lsrs	r3, r3, #3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <ToggleBuzzer+0x94>)
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e012      	b.n	800144e <ToggleBuzzer+0x76>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142e:	4811      	ldr	r0, [pc, #68]	; (8001474 <ToggleBuzzer+0x9c>)
 8001430:	f001 fac2 	bl	80029b8 <HAL_GPIO_WritePin>
			number = 0;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <ToggleBuzzer+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
			count10ms = 0;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <ToggleBuzzer+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_NUM] = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 0;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3301      	adds	r3, #1
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (buzzer[BUZZ_NUM])
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <ToggleBuzzer+0x8c>
	{
		count10ms--;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <ToggleBuzzer+0x94>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <ToggleBuzzer+0x94>)
 8001462:	701a      	strb	r2, [r3, #0]
	}
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200004b2 	.word	0x200004b2
 8001470:	200004b3 	.word	0x200004b3
 8001474:	40010c00 	.word	0x40010c00
 8001478:	cccccccd 	.word	0xcccccccd

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001482:	f000 ff71 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001486:	f000 f939 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148a:	f000 fab1 	bl	80019f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800148e:	f000 f97b 	bl	8001788 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001492:	f000 f9a7 	bl	80017e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001496:	f000 f9fd 	bl	8001894 <MX_TIM3_Init>
  MX_TIM7_Init();
 800149a:	f000 fa73 	bl	8001984 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  /*first uncomment ValuInit_Write_EE() to write initial values,
  then comment it and upload the program again on the micro*/
  //InitValueWriteToEeprom();
  InitValueReadFromEeprom();
 800149e:	f006 f8c7 	bl	8007630 <InitValueReadFromEeprom>

  /*start encoder timer 1 for reading rotary encoder */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80014a2:	213c      	movs	r1, #60	; 0x3c
 80014a4:	487e      	ldr	r0, [pc, #504]	; (80016a0 <main+0x224>)
 80014a6:	f003 fa7f 	bl	80049a8 <HAL_TIM_Encoder_Start>
  TIM1->CNT = 2000;
 80014aa:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <main+0x228>)
 80014ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* create different flags base on 1ms timer 7 */
  //__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE );
  HAL_TIM_Base_Start_IT(&htim7);
 80014b2:	487d      	ldr	r0, [pc, #500]	; (80016a8 <main+0x22c>)
 80014b4:	f002 ff58 	bl	8004368 <HAL_TIM_Base_Start_IT>

  /* Create PWM and change Frequency and Duty Cycle */
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE );
 80014b8:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <main+0x230>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	4b7b      	ldr	r3, [pc, #492]	; (80016ac <main+0x230>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim3);
 80014c8:	4878      	ldr	r0, [pc, #480]	; (80016ac <main+0x230>)
 80014ca:	f002 ff4d 	bl	8004368 <HAL_TIM_Base_Start_IT>
  uint8_t j;

  char (*pStateFunc)(char);

  /* Initial state variables */
  uint8_t state = ST_STANDBY;
 80014ce:	2314      	movs	r3, #20
 80014d0:	70fb      	strb	r3, [r7, #3]
  pStateFunc = StandBy;
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <main+0x234>)
 80014d4:	607b      	str	r3, [r7, #4]

  /* Lcd initial start */
  LcdInit();
 80014d6:	f004 faeb 	bl	8005ab0 <LcdInit>
  LcdClear();
 80014da:	f004 fb3d 	bl	8005b58 <LcdClear>
  LcdDisplayOn();
 80014de:	f004 fb45 	bl	8005b6c <LcdDisplayOn>
  LcdBackLightSet();
 80014e2:	f004 fa8f 	bl	8005a04 <LcdBackLightSet>
  {
	  //HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_15);
	  //HAL_Delay(1000);

	  /* Read rotary encoder and find the direction */
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/ROTARY_SPC;
 80014e6:	4b6e      	ldr	r3, [pc, #440]	; (80016a0 <main+0x224>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	085b      	lsrs	r3, r3, #1
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <main+0x238>)
 80014f2:	601a      	str	r2, [r3, #0]
		diff = encoder_counter - last_count;  // Calculate the difference between the current count and the last count
 80014f4:	4b6f      	ldr	r3, [pc, #444]	; (80016b4 <main+0x238>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <main+0x23c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4a6f      	ldr	r2, [pc, #444]	; (80016bc <main+0x240>)
 8001500:	6013      	str	r3, [r2, #0]

		if (diff != 0)
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <main+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d018      	beq.n	800153c <main+0xc0>
		{
			if (diff > 0)
 800150a:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <main+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	dd06      	ble.n	8001520 <main+0xa4>
			{
				flagRotaryCW = true; //Clockwise rotation
 8001512:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <main+0x244>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = false;
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <main+0x248>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e009      	b.n	8001534 <main+0xb8>
			}
			else if (diff < 0)
 8001520:	4b66      	ldr	r3, [pc, #408]	; (80016bc <main+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	da05      	bge.n	8001534 <main+0xb8>
			{
				flagRotaryCW = false;
 8001528:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <main+0x244>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = true; //Counter-clockwise rotation
 800152e:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <main+0x248>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
			}

			last_count = encoder_counter; //Update the last count
 8001534:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <main+0x238>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <main+0x23c>)
 800153a:	6013      	str	r3, [r2, #0]
		}

		/* Every 10 mS check */
		if ( flag10ms == true )
 800153c:	4b62      	ldr	r3, [pc, #392]	; (80016c8 <main+0x24c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00c      	beq.n	8001560 <main+0xe4>
		{
			Debounce();  // Update button_state.
 8001546:	f7ff fef3 	bl	8001330 <Debounce>

			if (buzzer[BUZZ_NUM])
 800154a:	4b60      	ldr	r3, [pc, #384]	; (80016cc <main+0x250>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <main+0xde>
				ToggleBuzzer(buzzer);
 8001554:	485d      	ldr	r0, [pc, #372]	; (80016cc <main+0x250>)
 8001556:	f7ff ff3f 	bl	80013d8 <ToggleBuzzer>

			flag10ms = false;
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <main+0x24c>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
		}

		if (flag1s == true)
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <main+0x254>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01d      	beq.n	80015a6 <main+0x12a>
		{

            if (flagRythm == true)
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <main+0x258>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d015      	beq.n	80015a0 <main+0x124>
            {
            	CountRunTime++;
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <main+0x25c>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <main+0x25c>)
 800157e:	801a      	strh	r2, [r3, #0]
            	if (CountRunTime >= RunTime)
 8001580:	4b55      	ldr	r3, [pc, #340]	; (80016d8 <main+0x25c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <main+0x260>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	db08      	blt.n	80015a0 <main+0x124>
            	{
            		CountRunTime = 0;
 800158e:	4b52      	ldr	r3, [pc, #328]	; (80016d8 <main+0x25c>)
 8001590:	2200      	movs	r2, #0
 8001592:	801a      	strh	r2, [r3, #0]
					flagStopPwm = true;
 8001594:	4b52      	ldr	r3, [pc, #328]	; (80016e0 <main+0x264>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
					flagRythm = false;
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <main+0x258>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
            	}
            }
            flag1s = false;
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <main+0x254>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
		}

		/* Read input and change states */
		buttonMask=KEY_MASK;
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <main+0x268>)
 80015a8:	220f      	movs	r2, #15
 80015aa:	701a      	strb	r2, [r3, #0]
		buttonMask &= buttonRelease;
 80015ac:	4b4e      	ldr	r3, [pc, #312]	; (80016e8 <main+0x26c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <main+0x268>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <main+0x268>)
 80015be:	701a      	strb	r2, [r3, #0]
		buttonRelease ^= buttonMask;
 80015c0:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <main+0x268>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <main+0x26c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4053      	eors	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <main+0x26c>)
 80015d2:	701a      	strb	r2, [r3, #0]
		input = buttonMask | ((flagRotaryCCW*ROTARY_CCW_DIR)) | ((flagRotaryCW*ROTARY_CW_DIR)); // Read buttons
 80015d4:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <main+0x248>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <main+0x268>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <main+0x244>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <main+0x270>)
 8001600:	701a      	strb	r2, [r3, #0]
		flagRotaryCW = false;
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <main+0x244>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		flagRotaryCCW = false;
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <main+0x248>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]

	    /* Set buzzer to beep if one button is pressed */
		if (input)
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <main+0x270>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <main+0x1a8>
		{
			buzzer[BUZZ_NUM] = 1;
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <main+0x250>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 10;
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <main+0x250>)
 8001620:	220a      	movs	r2, #10
 8001622:	705a      	strb	r2, [r3, #1]
		}

		//if (tapChangerState == 0 || errorVar != 0)
		//{
			/* When in this state, we must call the state function */
			nextState = pStateFunc(input);
 8001624:	4b31      	ldr	r3, [pc, #196]	; (80016ec <main+0x270>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4610      	mov	r0, r2
 800162e:	4798      	blx	r3
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <main+0x274>)
 8001636:	701a      	strb	r2, [r3, #0]
			if(errorVar != 0)
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <main+0x278>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <main+0x1ca>
				nextState = ST_ERRORS;
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <main+0x274>)
 8001642:	225a      	movs	r2, #90	; 0x5a
 8001644:	701a      	strb	r2, [r3, #0]
			if (nextState != state)
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <main+0x274>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	429a      	cmp	r2, r3
 8001650:	f43f af49 	beq.w	80014e6 <main+0x6a>
			{
				state = nextState;
 8001654:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <main+0x274>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	70fb      	strb	r3, [r7, #3]

				for (uint8_t n = 0; (j=MenuState[n].state); n++)
 800165a:	2300      	movs	r3, #0
 800165c:	70bb      	strb	r3, [r7, #2]
 800165e:	e011      	b.n	8001684 <main+0x208>
				{
					if (j == state)
 8001660:	787a      	ldrb	r2, [r7, #1]
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	429a      	cmp	r2, r3
 8001666:	d10a      	bne.n	800167e <main+0x202>
					{
						pStateFunc = MenuState[n].pFunc;
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	4923      	ldr	r1, [pc, #140]	; (80016f8 <main+0x27c>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3308      	adds	r3, #8
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	607b      	str	r3, [r7, #4]
						break;
 800167c:	e00e      	b.n	800169c <main+0x220>
				for (uint8_t n = 0; (j=MenuState[n].state); n++)
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	3301      	adds	r3, #1
 8001682:	70bb      	strb	r3, [r7, #2]
 8001684:	78ba      	ldrb	r2, [r7, #2]
 8001686:	491c      	ldr	r1, [pc, #112]	; (80016f8 <main+0x27c>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	707b      	strb	r3, [r7, #1]
 8001696:	787b      	ldrb	r3, [r7, #1]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e1      	bne.n	8001660 <main+0x1e4>
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/ROTARY_SPC;
 800169c:	e723      	b.n	80014e6 <main+0x6a>
 800169e:	bf00      	nop
 80016a0:	200003b8 	.word	0x200003b8
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	20000448 	.word	0x20000448
 80016ac:	20000400 	.word	0x20000400
 80016b0:	08006285 	.word	0x08006285
 80016b4:	200004a4 	.word	0x200004a4
 80016b8:	20000004 	.word	0x20000004
 80016bc:	200004a8 	.word	0x200004a8
 80016c0:	2000049f 	.word	0x2000049f
 80016c4:	200004a0 	.word	0x200004a0
 80016c8:	20000491 	.word	0x20000491
 80016cc:	200004b0 	.word	0x200004b0
 80016d0:	20000494 	.word	0x20000494
 80016d4:	2000049d 	.word	0x2000049d
 80016d8:	20000508 	.word	0x20000508
 80016dc:	200004fc 	.word	0x200004fc
 80016e0:	2000049e 	.word	0x2000049e
 80016e4:	200004ac 	.word	0x200004ac
 80016e8:	20000360 	.word	0x20000360
 80016ec:	200004ad 	.word	0x200004ad
 80016f0:	200004ae 	.word	0x200004ae
 80016f4:	200004e2 	.word	0x200004e2
 80016f8:	20000008 	.word	0x20000008

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	2228      	movs	r2, #40	; 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f007 f869 	bl	80087e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	2302      	movs	r3, #2
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800173a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4618      	mov	r0, r3
 8001746:	f002 f9c3 	bl	8003ad0 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001750:	f000 fb90 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2302      	movs	r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fc30 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800177a:	f000 fb7b 	bl	8001e74 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3740      	adds	r7, #64	; 0x40
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_I2C1_Init+0x50>)
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <MX_I2C1_Init+0x54>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_I2C1_Init+0x50>)
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x58>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017c6:	f001 f929 	bl	8002a1c <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f000 fb50 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000364 	.word	0x20000364
 80017dc:	40005400 	.word	0x40005400
 80017e0:	000186a0 	.word	0x000186a0

080017e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 fff5 	bl	80087e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_TIM1_Init+0xa8>)
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <MX_TIM1_Init+0xac>)
 8001804:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_TIM1_Init+0xa8>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_TIM1_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <MX_TIM1_Init+0xa8>)
 8001814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001818:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_TIM1_Init+0xa8>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM1_Init+0xa8>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM1_Init+0xa8>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800182c:	2303      	movs	r3, #3
 800182e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001834:	2301      	movs	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800183c:	2305      	movs	r3, #5
 800183e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800184c:	2305      	movs	r3, #5
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_TIM1_Init+0xa8>)
 8001858:	f003 f804 	bl	8004864 <HAL_TIM_Encoder_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001862:	f000 fb07 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <MX_TIM1_Init+0xa8>)
 8001874:	f003 febc 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800187e:	f000 faf9 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	3730      	adds	r7, #48	; 0x30
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200003b8 	.word	0x200003b8
 8001890:	40012c00 	.word	0x40012c00

08001894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MX_TIM3_Init+0xe8>)
 80018c6:	4a2e      	ldr	r2, [pc, #184]	; (8001980 <MX_TIM3_Init+0xec>)
 80018c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 700-1;
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <MX_TIM3_Init+0xe8>)
 80018cc:	f240 22bb 	movw	r2, #699	; 0x2bb
 80018d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <MX_TIM3_Init+0xe8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <MX_TIM3_Init+0xe8>)
 80018da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <MX_TIM3_Init+0xe8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <MX_TIM3_Init+0xe8>)
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ec:	4823      	ldr	r0, [pc, #140]	; (800197c <MX_TIM3_Init+0xe8>)
 80018ee:	f002 fceb 	bl	80042c8 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018f8:	f000 fabc 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	4619      	mov	r1, r3
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <MX_TIM3_Init+0xe8>)
 800190a:	f003 faa5 	bl	8004e58 <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001914:	f000 faae 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001918:	4818      	ldr	r0, [pc, #96]	; (800197c <MX_TIM3_Init+0xe8>)
 800191a:	f002 fd85 	bl	8004428 <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001924:	f000 faa6 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4619      	mov	r1, r3
 8001936:	4811      	ldr	r0, [pc, #68]	; (800197c <MX_TIM3_Init+0xe8>)
 8001938:	f003 fe5a 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001942:	f000 fa97 	bl	8001e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	; 0x60
 8001948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2208      	movs	r2, #8
 800195a:	4619      	mov	r1, r3
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <MX_TIM3_Init+0xe8>)
 800195e:	f003 f9b9 	bl	8004cd4 <HAL_TIM_PWM_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001968:	f000 fa84 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <MX_TIM3_Init+0xe8>)
 800196e:	f000 fb8b 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001972:	bf00      	nop
 8001974:	3738      	adds	r7, #56	; 0x38
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000400 	.word	0x20000400
 8001980:	40000400 	.word	0x40000400

08001984 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM7_Init+0x64>)
 8001994:	4a15      	ldr	r2, [pc, #84]	; (80019ec <MX_TIM7_Init+0x68>)
 8001996:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_TIM7_Init+0x64>)
 800199a:	2247      	movs	r2, #71	; 0x47
 800199c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_TIM7_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_TIM7_Init+0x64>)
 80019a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_TIM7_Init+0x64>)
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM7_Init+0x64>)
 80019b4:	f002 fc88 	bl	80042c8 <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80019be:	f000 fa59 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM7_Init+0x64>)
 80019d0:	f003 fe0e 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80019da:	f000 fa4b 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000448 	.word	0x20000448
 80019ec:	40001400 	.word	0x40001400

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a56      	ldr	r2, [pc, #344]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a0a:	f043 0310 	orr.w	r3, r3, #16
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1c:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a50      	ldr	r2, [pc, #320]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a44      	ldr	r2, [pc, #272]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LcdBackLight_Pin|Lcd4_Pin|Lcd5_Pin|Lcd6_Pin
 8001a64:	2200      	movs	r2, #0
 8001a66:	f643 610f 	movw	r1, #15887	; 0x3e0f
 8001a6a:	483f      	ldr	r0, [pc, #252]	; (8001b68 <MX_GPIO_Init+0x178>)
 8001a6c:	f000 ffa4 	bl	80029b8 <HAL_GPIO_WritePin>
                          |Lcd7_Pin|RelayLow_Pin|Led1_Pin|Led2_Pin
                          |Led3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdEn_Pin|LcdRs_Pin|RelayMed_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f248 0184 	movw	r1, #32900	; 0x8084
 8001a76:	483d      	ldr	r0, [pc, #244]	; (8001b6c <MX_GPIO_Init+0x17c>)
 8001a78:	f000 ff9e 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|RelayHigh_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001a82:	483b      	ldr	r0, [pc, #236]	; (8001b70 <MX_GPIO_Init+0x180>)
 8001a84:	f000 ff98 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	4839      	ldr	r0, [pc, #228]	; (8001b74 <MX_GPIO_Init+0x184>)
 8001a8e:	f000 ff93 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LcdBackLight_Pin Led1_Pin Led2_Pin Led3_Pin */
  GPIO_InitStruct.Pin = LcdBackLight_Pin|Led1_Pin|Led2_Pin|Led3_Pin;
 8001a92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	482f      	ldr	r0, [pc, #188]	; (8001b68 <MX_GPIO_Init+0x178>)
 8001aac:	f000 fdf0 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : KeyStart_Pin */
  GPIO_InitStruct.Pin = KeyStart_Pin;
 8001ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KeyStart_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4828      	ldr	r0, [pc, #160]	; (8001b68 <MX_GPIO_Init+0x178>)
 8001ac6:	f000 fde3 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lcd4_Pin Lcd5_Pin Lcd6_Pin Lcd7_Pin
                           RelayLow_Pin */
  GPIO_InitStruct.Pin = Lcd4_Pin|Lcd5_Pin|Lcd6_Pin|Lcd7_Pin
 8001aca:	f240 230f 	movw	r3, #527	; 0x20f
 8001ace:	613b      	str	r3, [r7, #16]
                          |RelayLow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_GPIO_Init+0x178>)
 8001ae4:	f000 fdd4 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LcdEn_Pin LcdRs_Pin RelayMed_Pin */
  GPIO_InitStruct.Pin = LcdEn_Pin|LcdRs_Pin|RelayMed_Pin;
 8001ae8:	f248 0384 	movw	r3, #32900	; 0x8084
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <MX_GPIO_Init+0x17c>)
 8001b02:	f000 fdc5 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin RelayHigh_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|RelayHigh_Pin;
 8001b06:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <MX_GPIO_Init+0x180>)
 8001b20:	f000 fdb6 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : KeyRotaryMiddle_Pin KeyStandby_Pin KeyBack_Pin */
  GPIO_InitStruct.Pin = KeyRotaryMiddle_Pin|KeyStandby_Pin|KeyBack_Pin;
 8001b24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_GPIO_Init+0x17c>)
 8001b3a:	f000 fda9 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led4_Pin */
  GPIO_InitStruct.Pin = Led4_Pin;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led4_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_GPIO_Init+0x184>)
 8001b56:	f000 fd9b 	bl	8002690 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40010c00 	.word	0x40010c00
 8001b74:	40011400 	.word	0x40011400

08001b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* create differents time for delay */
  if (htim->Instance == TIM7) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a9a      	ldr	r2, [pc, #616]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d171      	bne.n	8001c6e <HAL_TIM_PeriodElapsedCallback+0xf6>
	volatile static uint32_t count1ms = 0;
	count1ms++;
 8001b8a:	4b9a      	ldr	r3, [pc, #616]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a98      	ldr	r2, [pc, #608]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b92:	6013      	str	r3, [r2, #0]
	flag1ms = true;
 8001b94:	4b98      	ldr	r3, [pc, #608]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]

	if ( (count1ms % 10) == 0 )
 8001b9a:	4b96      	ldr	r3, [pc, #600]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	4b97      	ldr	r3, [pc, #604]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ba0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	1aca      	subs	r2, r1, r3
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d15c      	bne.n	8001c6e <HAL_TIM_PeriodElapsedCallback+0xf6>
	{
		//if ( (count1ms % 10) == 0 )
		//{
			flag10ms = true;
 8001bb4:	4b92      	ldr	r3, [pc, #584]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
			flcd10ms = true;
 8001bba:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
		//}
		if ( (count1ms % 100) == 0 )
 8001bc0:	4b8c      	ldr	r3, [pc, #560]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b90      	ldr	r3, [pc, #576]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2164      	movs	r1, #100	; 0x64
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d108      	bne.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			flag100ms = true;
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
			flcd100ms = true;
 8001bde:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
			f2lcd100ms = true;
 8001be4:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
		}
		if ( (count1ms % 300) == 0 )
 8001bea:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b8a      	ldr	r3, [pc, #552]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x98>
		{
			flag300ms = true;
 8001c04:	4b85      	ldr	r3, [pc, #532]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
			flcd300ms = true;
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
		}
		if ( (count1ms % 500) == 0 )
 8001c10:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c16:	fba3 1302 	umull	r1, r3, r3, r2
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			flagRefreshValue500ms = true;
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
			flcd500ms = true;
 8001c30:	4b7e      	ldr	r3, [pc, #504]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]

		}
		if ( (count1ms % 1000) == 0 )
 8001c36:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			//flagZeroDetectEr1s = true;
			flag1s = true;
 8001c50:	4b77      	ldr	r3, [pc, #476]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
			flcd1s = true;
 8001c56:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
		}
		if (count1ms == 10000)
 8001c5c:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d102      	bne.n	8001c6e <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			//fErr2s = true;
			count1ms = 0;
 8001c68:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
		}
	}
  }

  if (htim->Instance == TIM3 /*&& ((flagRampStart == true) || (flagStopPwm == true))*/)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d16e      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x1de>
  {
       //SetRamp(); //check for start/stop ramp
		//static float CountRamp = 0;

		if (flagRampStart == true)
 8001c78:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d02c      	beq.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x164>
		{
			CountRamp+=StepRamp;
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe ffe7 	bl	8000c60 <__addsf3>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c98:	601a      	str	r2, [r3, #0]
			if( CountRamp > TimeOn )
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fa9f 	bl	80011e8 <__aeabi_fcmpgt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00f      	beq.n	8001cd0 <HAL_TIM_PeriodElapsedCallback+0x158>
			{
				CountRamp = TimeOn;
 8001cb0:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a62      	ldr	r2, [pc, #392]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cb6:	6013      	str	r3, [r2, #0]
				flagRampStart = false;
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
				flagRythm = true;
 8001cbe:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
				SetDutyCycle( CountRamp );
 8001cc4:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f895 	bl	8005df8 <SetDutyCycle>
 8001cce:	e042      	b.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x1de>
			}
			else
			    SetDutyCycle( CountRamp );
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 f88f 	bl	8005df8 <SetDutyCycle>
 8001cda:	e03c      	b.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x1de>
		}
		else if (flagStopPwm == true)
 8001cdc:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d037      	beq.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x1de>
		{
			CountRamp-=StepRamp;
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a56      	ldr	r2, [pc, #344]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ffb3 	bl	8000c5c <__aeabi_fsub>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cfc:	601a      	str	r2, [r3, #0]
			if( CountRamp <= 0 )
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fa5a 	bl	80011c0 <__aeabi_fcmple>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01c      	beq.n	8001d4c <HAL_TIM_PeriodElapsedCallback+0x1d4>
			{
				CountRamp = 0;
 8001d12:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
				SetDutyCycle( CountRamp );
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 f86a 	bl	8005df8 <SetDutyCycle>
				HAL_TIM_PWM_Stop_IT(&htim3, PwmCh);
 8001d24:	2108      	movs	r1, #8
 8001d26:	484b      	ldr	r0, [pc, #300]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001d28:	f002 fcde 	bl	80046e8 <HAL_TIM_PWM_Stop_IT>
				flagStopPwm = false;
 8001d2c:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
				buzzer[BUZZ_NUM] = 20;
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001d34:	2214      	movs	r2, #20
 8001d36:	701a      	strb	r2, [r3, #0]
				buzzer[BUZZ_DELAY] = 10;
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001d3a:	220a      	movs	r2, #10
 8001d3c:	705a      	strb	r2, [r3, #1]
				Led1(0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d44:	4845      	ldr	r0, [pc, #276]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001d46:	f000 fe37 	bl	80029b8 <HAL_GPIO_WritePin>
 8001d4a:	e004      	b.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x1de>
				//enterFunction = 1;
			}
			else
				SetDutyCycle( CountRamp );
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 f851 	bl	8005df8 <SetDutyCycle>
		}
  }
  if (htim->Instance == TIM3 && RythmOff!=0 && flagRythm==true)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d142      	bne.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x26e>
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d03e      	beq.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x26e>
 8001d68:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d039      	beq.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x26e>
  {
	  PeriodCount++;
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001d7c:	801a      	strh	r2, [r3, #0]
	  if (PwmActive == true && PeriodCount>=RythmOn)
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x232>
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	db0a      	blt.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x232>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, PwmCh, 0);
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
		  PeriodCount=0;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	801a      	strh	r2, [r3, #0]
		  //SetDutyCycle( PeriodCount );
		  PwmActive=false;
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
		  PeriodCount=0;
		  PwmActive=true;
	  }
  }
  /* USER CODE END Callback 1 */
}
 8001da8:	e01d      	b.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x26e>
	  else if (PwmActive==false && PeriodCount>=RythmOff)
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d016      	beq.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x26e>
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	db0f      	blt.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x26e>
		  SetFrequency(Frequency);  //VA_FREQUENCY
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fffa 	bl	8005dc4 <SetFrequency>
		  SetDutyCycle(TimeOn);     //VA_TIME
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 f80f 	bl	8005df8 <SetDutyCycle>
		  PeriodCount=0;
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]
		  PwmActive=true;
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40001400 	.word	0x40001400
 8001df4:	200004b4 	.word	0x200004b4
 8001df8:	20000490 	.word	0x20000490
 8001dfc:	cccccccd 	.word	0xcccccccd
 8001e00:	20000491 	.word	0x20000491
 8001e04:	20000495 	.word	0x20000495
 8001e08:	51eb851f 	.word	0x51eb851f
 8001e0c:	20000492 	.word	0x20000492
 8001e10:	20000496 	.word	0x20000496
 8001e14:	20000497 	.word	0x20000497
 8001e18:	1b4e81b5 	.word	0x1b4e81b5
 8001e1c:	20000493 	.word	0x20000493
 8001e20:	20000498 	.word	0x20000498
 8001e24:	10624dd3 	.word	0x10624dd3
 8001e28:	2000049b 	.word	0x2000049b
 8001e2c:	20000499 	.word	0x20000499
 8001e30:	20000494 	.word	0x20000494
 8001e34:	2000049a 	.word	0x2000049a
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	2000049c 	.word	0x2000049c
 8001e40:	2000050c 	.word	0x2000050c
 8001e44:	20000504 	.word	0x20000504
 8001e48:	200004f0 	.word	0x200004f0
 8001e4c:	2000049d 	.word	0x2000049d
 8001e50:	2000049e 	.word	0x2000049e
 8001e54:	20000400 	.word	0x20000400
 8001e58:	200004b0 	.word	0x200004b0
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	200004f8 	.word	0x200004f8
 8001e64:	20000510 	.word	0x20000510
 8001e68:	20000066 	.word	0x20000066
 8001e6c:	200004f4 	.word	0x200004f4
 8001e70:	200004e8 	.word	0x200004e8

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_MspInit+0x5c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_MspInit+0x5c>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x5c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x5c>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_MspInit+0x60>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_MspInit+0x60>)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_I2C_MspInit+0x90>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d132      	bne.n	8001f6a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f22:	2312      	movs	r3, #18
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4812      	ldr	r0, [pc, #72]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f32:	f000 fbad 	bl	8002690 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_I2C_MspInit+0x9c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_I2C_MspInit+0x9c>)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40005400 	.word	0x40005400
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010c00 	.word	0x40010c00
 8001f80:	40010000 	.word	0x40010000

08001f84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d124      	bne.n	8001fee <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x78>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x78>)
 8001faa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x78>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x78>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x78>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x78>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RotaryA_Pin|RotaryB_Pin;
 8001fd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001fea:	f000 fb51 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001fee:	bf00      	nop
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010800 	.word	0x40010800

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_TIM_Base_MspInit+0x78>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d114      	bne.n	8002040 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	201d      	movs	r0, #29
 8002034:	f000 faf5 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002038:	201d      	movs	r0, #29
 800203a:	f000 fb0e 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800203e:	e018      	b.n	8002072 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d113      	bne.n	8002072 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2037      	movs	r0, #55	; 0x37
 8002068:	f000 fadb 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800206c:	2037      	movs	r0, #55	; 0x37
 800206e:	f000 faf4 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400
 8002080:	40021000 	.word	0x40021000
 8002084:	40001400 	.word	0x40001400

08002088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_TIM_MspPostInit+0x80>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d12a      	bne.n	80020fe <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_TIM_MspPostInit+0x84>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_TIM_MspPostInit+0x84>)
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_TIM_MspPostInit+0x84>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Pwm_Pin;
 80020c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Pwm_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	480e      	ldr	r0, [pc, #56]	; (8002110 <HAL_TIM_MspPostInit+0x88>)
 80020d6:	f000 fadb 	bl	8002690 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_TIM_MspPostInit+0x8c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_TIM_MspPostInit+0x8c>)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40000400 	.word	0x40000400
 800210c:	40021000 	.word	0x40021000
 8002110:	40011000 	.word	0x40011000
 8002114:	40010000 	.word	0x40010000

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	e7fe      	b.n	800211c <NMI_Handler+0x4>

0800211e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <MemManage_Handler+0x4>

0800212a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <BusFault_Handler+0x4>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <UsageFault_Handler+0x4>

08002136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215e:	f000 f949 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM3_IRQHandler+0x10>)
 800216e:	f002 fca9 	bl	8004ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000400 	.word	0x20000400

0800217c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM7_IRQHandler+0x10>)
 8002182:	f002 fc9f 	bl	8004ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000448 	.word	0x20000448

08002190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return 1;
 8002194:	2301      	movs	r3, #1
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <_kill>:

int _kill(int pid, int sig)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021a8:	f006 fb7e 	bl	80088a8 <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2216      	movs	r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
  return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_exit>:

void _exit (int status)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021c6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffe7 	bl	800219e <_kill>
  while (1) {}    /* Make sure we hang here */
 80021d0:	e7fe      	b.n	80021d0 <_exit+0x12>

080021d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e00a      	b.n	80021fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021e4:	f3af 8000 	nop.w
 80021e8:	4601      	mov	r1, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	60ba      	str	r2, [r7, #8]
 80021f0:	b2ca      	uxtb	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbf0      	blt.n	80021e4 <_read+0x12>
  }

  return len;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e009      	b.n	8002232 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	dbf1      	blt.n	800221e <_write+0x12>
  }
  return len;
 800223a:	687b      	ldr	r3, [r7, #4]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_close>:

int _close(int file)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800226a:	605a      	str	r2, [r3, #4]
  return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <_isatty>:

int _isatty(int file)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f006 fae8 	bl	80088a8 <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20010000 	.word	0x20010000
 8002304:	00000400 	.word	0x00000400
 8002308:	200004b8 	.word	0x200004b8
 800230c:	20000780 	.word	0x20000780

08002310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800231c:	f7ff fff8 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002322:	490c      	ldr	r1, [pc, #48]	; (8002354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002338:	4c09      	ldr	r4, [pc, #36]	; (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002346:	f006 fab5 	bl	80088b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234a:	f7ff f897 	bl	800147c <main>
  bx lr
 800234e:	4770      	bx	lr
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002358:	0800c53c 	.word	0x0800c53c
  ldr r2, =_sbss
 800235c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8002360:	20000780 	.word	0x20000780

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>
	...

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_Init+0x28>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_Init+0x28>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f947 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fd7c 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f95f 	bl	8002676 <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 f927 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000005c 	.word	0x2000005c
 80023ec:	20000064 	.word	0x20000064
 80023f0:	20000060 	.word	0x20000060

080023f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_IncTick+0x1c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x20>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a03      	ldr	r2, [pc, #12]	; (8002414 <HAL_IncTick+0x20>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000064 	.word	0x20000064
 8002414:	200004bc 	.word	0x200004bc

08002418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <HAL_GetTick+0x10>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	200004bc 	.word	0x200004bc

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fff0 	bl	8002418 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_Delay+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffe0 	bl	8002418 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000064 	.word	0x20000064

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4906      	ldr	r1, [pc, #24]	; (800250c <__NVIC_EnableIRQ+0x34>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100

08002510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	db0a      	blt.n	800253a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	490c      	ldr	r1, [pc, #48]	; (800255c <__NVIC_SetPriority+0x4c>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	440b      	add	r3, r1
 8002534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002538:	e00a      	b.n	8002550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4908      	ldr	r1, [pc, #32]	; (8002560 <__NVIC_SetPriority+0x50>)
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3b04      	subs	r3, #4
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	440b      	add	r3, r1
 800254e:	761a      	strb	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f1c3 0307 	rsb	r3, r3, #7
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf28      	it	cs
 8002582:	2304      	movcs	r3, #4
 8002584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3304      	adds	r3, #4
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <NVIC_EncodePriority+0x30>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3b03      	subs	r3, #3
 8002592:	e000      	b.n	8002596 <NVIC_EncodePriority+0x32>
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	4313      	orrs	r3, r2
         );
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff90 	bl	8002510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff2d 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff42 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff90 	bl	8002564 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5f 	bl	8002510 <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff35 	bl	80024d8 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e179      	b.n	8002998 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a4:	2201      	movs	r2, #1
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8168 	bne.w	8002992 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a96      	ldr	r2, [pc, #600]	; (8002920 <HAL_GPIO_Init+0x290>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026cc:	4a94      	ldr	r2, [pc, #592]	; (8002920 <HAL_GPIO_Init+0x290>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d875      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026d2:	4a94      	ldr	r2, [pc, #592]	; (8002924 <HAL_GPIO_Init+0x294>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d058      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026d8:	4a92      	ldr	r2, [pc, #584]	; (8002924 <HAL_GPIO_Init+0x294>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d86f      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026de:	4a92      	ldr	r2, [pc, #584]	; (8002928 <HAL_GPIO_Init+0x298>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d052      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026e4:	4a90      	ldr	r2, [pc, #576]	; (8002928 <HAL_GPIO_Init+0x298>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d869      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026ea:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_GPIO_Init+0x29c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04c      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026f0:	4a8e      	ldr	r2, [pc, #568]	; (800292c <HAL_GPIO_Init+0x29c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d863      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026f6:	4a8e      	ldr	r2, [pc, #568]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026fc:	4a8c      	ldr	r2, [pc, #560]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d85d      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d82a      	bhi.n	800275c <HAL_GPIO_Init+0xcc>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d859      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_GPIO_Init+0x80>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	0800278b 	.word	0x0800278b
 8002714:	08002765 	.word	0x08002765
 8002718:	08002777 	.word	0x08002777
 800271c:	080027b9 	.word	0x080027b9
 8002720:	080027bf 	.word	0x080027bf
 8002724:	080027bf 	.word	0x080027bf
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027bf 	.word	0x080027bf
 800273c:	080027bf 	.word	0x080027bf
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027bf 	.word	0x080027bf
 8002748:	080027bf 	.word	0x080027bf
 800274c:	080027bf 	.word	0x080027bf
 8002750:	080027bf 	.word	0x080027bf
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002781 	.word	0x08002781
 800275c:	4a75      	ldr	r2, [pc, #468]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e029      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e024      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01f      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e01a      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e013      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          break;
 80027be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d801      	bhi.n	80027ca <HAL_GPIO_Init+0x13a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_Init+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d802      	bhi.n	80027dc <HAL_GPIO_Init+0x14c>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x152>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3b08      	subs	r3, #8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	210f      	movs	r1, #15
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80c1 	beq.w	8002992 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002810:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002828:	4a44      	ldr	r2, [pc, #272]	; (800293c <HAL_GPIO_Init+0x2ac>)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d01f      	beq.n	8002894 <HAL_GPIO_Init+0x204>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3b      	ldr	r2, [pc, #236]	; (8002944 <HAL_GPIO_Init+0x2b4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d019      	beq.n	8002890 <HAL_GPIO_Init+0x200>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3a      	ldr	r2, [pc, #232]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <HAL_GPIO_Init+0x1fc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a39      	ldr	r2, [pc, #228]	; (800294c <HAL_GPIO_Init+0x2bc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_GPIO_Init+0x1f8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_GPIO_Init+0x2c0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_Init+0x1f4>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a37      	ldr	r2, [pc, #220]	; (8002954 <HAL_GPIO_Init+0x2c4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_GPIO_Init+0x1f0>
 800287c:	2305      	movs	r3, #5
 800287e:	e00a      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002880:	2306      	movs	r3, #6
 8002882:	e008      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002884:	2304      	movs	r3, #4
 8002886:	e006      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002888:	2303      	movs	r3, #3
 800288a:	e004      	b.n	8002896 <HAL_GPIO_Init+0x206>
 800288c:	2302      	movs	r3, #2
 800288e:	e002      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002894:	2300      	movs	r3, #0
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	f002 0203 	and.w	r2, r2, #3
 800289c:	0092      	lsls	r2, r2, #2
 800289e:	4093      	lsls	r3, r2
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028a6:	4925      	ldr	r1, [pc, #148]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	4924      	ldr	r1, [pc, #144]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4920      	ldr	r1, [pc, #128]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028d8:	4013      	ands	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	491a      	ldr	r1, [pc, #104]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 8002900:	4013      	ands	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d025      	beq.n	800295c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4910      	ldr	r1, [pc, #64]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e025      	b.n	800296a <HAL_GPIO_Init+0x2da>
 800291e:	bf00      	nop
 8002920:	10320000 	.word	0x10320000
 8002924:	10310000 	.word	0x10310000
 8002928:	10220000 	.word	0x10220000
 800292c:	10210000 	.word	0x10210000
 8002930:	10120000 	.word	0x10120000
 8002934:	10110000 	.word	0x10110000
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	40010800 	.word	0x40010800
 8002944:	40010c00 	.word	0x40010c00
 8002948:	40011000 	.word	0x40011000
 800294c:	40011400 	.word	0x40011400
 8002950:	40011800 	.word	0x40011800
 8002954:	40011c00 	.word	0x40011c00
 8002958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_GPIO_Init+0x324>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	43db      	mvns	r3, r3
 8002964:	4913      	ldr	r1, [pc, #76]	; (80029b4 <HAL_GPIO_Init+0x324>)
 8002966:	4013      	ands	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_GPIO_Init+0x324>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_GPIO_Init+0x324>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
 8002982:	e006      	b.n	8002992 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_GPIO_Init+0x324>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	43db      	mvns	r3, r3
 800298c:	4909      	ldr	r1, [pc, #36]	; (80029b4 <HAL_GPIO_Init+0x324>)
 800298e:	4013      	ands	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	3301      	adds	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f ae7e 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	372c      	adds	r7, #44	; 0x2c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43d9      	mvns	r1, r3
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	400b      	ands	r3, r1
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e12b      	b.n	8002c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fa4e 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a80:	f001 fbf0 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8002a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a81      	ldr	r2, [pc, #516]	; (8002c90 <HAL_I2C_Init+0x274>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d807      	bhi.n	8002aa0 <HAL_I2C_Init+0x84>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a80      	ldr	r2, [pc, #512]	; (8002c94 <HAL_I2C_Init+0x278>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e006      	b.n	8002aae <HAL_I2C_Init+0x92>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <HAL_I2C_Init+0x27c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0e7      	b.n	8002c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a78      	ldr	r2, [pc, #480]	; (8002c9c <HAL_I2C_Init+0x280>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_I2C_Init+0x274>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d802      	bhi.n	8002af0 <HAL_I2C_Init+0xd4>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	e009      	b.n	8002b04 <HAL_I2C_Init+0xe8>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <HAL_I2C_Init+0x284>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	3301      	adds	r3, #1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	495c      	ldr	r1, [pc, #368]	; (8002c90 <HAL_I2C_Init+0x274>)
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d819      	bhi.n	8002b58 <HAL_I2C_Init+0x13c>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e59      	subs	r1, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b32:	1c59      	adds	r1, r3, #1
 8002b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b38:	400b      	ands	r3, r1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_I2C_Init+0x138>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e59      	subs	r1, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	e051      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e04f      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <HAL_I2C_Init+0x168>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e012      	b.n	8002baa <HAL_I2C_Init+0x18e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	0099      	lsls	r1, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Init+0x196>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e022      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_I2C_Init+0x1bc>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e58      	subs	r0, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	440b      	add	r3, r1
 8002bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	e00f      	b.n	8002bf8 <HAL_I2C_Init+0x1dc>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	0099      	lsls	r1, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	6809      	ldr	r1, [r1, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6911      	ldr	r1, [r2, #16]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	000186a0 	.word	0x000186a0
 8002c94:	001e847f 	.word	0x001e847f
 8002c98:	003d08ff 	.word	0x003d08ff
 8002c9c:	431bde83 	.word	0x431bde83
 8002ca0:	10624dd3 	.word	0x10624dd3

08002ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cbe:	f7ff fbab 	bl	8002418 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	f040 80d9 	bne.w	8002e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2319      	movs	r3, #25
 8002cd8:	2201      	movs	r2, #1
 8002cda:	496d      	ldr	r1, [pc, #436]	; (8002e90 <HAL_I2C_Mem_Write+0x1ec>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fcc1 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0cc      	b.n	8002e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2C_Mem_Write+0x56>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0c5      	b.n	8002e86 <HAL_I2C_Mem_Write+0x1e2>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d007      	beq.n	8002d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2221      	movs	r2, #33	; 0x21
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2240      	movs	r2, #64	; 0x40
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a4d      	ldr	r2, [pc, #308]	; (8002e94 <HAL_I2C_Mem_Write+0x1f0>)
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d62:	88f8      	ldrh	r0, [r7, #6]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4603      	mov	r3, r0
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 faf8 	bl	8003368 <I2C_RequestMemoryWrite>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d052      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e081      	b.n	8002e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fd86 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11b      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x180>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1aa      	bne.n	8002d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fd79 	bl	8003928 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d107      	bne.n	8002e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e016      	b.n	8002e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	00100002 	.word	0x00100002
 8002e94:	ffff0000 	.word	0xffff0000

08002e98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eb6:	f7ff faaf 	bl	8002418 <HAL_GetTick>
 8002eba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	f040 8244 	bne.w	8003352 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2319      	movs	r3, #25
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4982      	ldr	r1, [pc, #520]	; (80030dc <HAL_I2C_Mem_Read+0x244>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fbc5 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e237      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x5a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e230      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d007      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2222      	movs	r2, #34	; 0x22
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a62      	ldr	r2, [pc, #392]	; (80030e0 <HAL_I2C_Mem_Read+0x248>)
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f5a:	88f8      	ldrh	r0, [r7, #6]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4603      	mov	r3, r0
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa92 	bl	8003494 <I2C_RequestMemoryRead>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1ec      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d113      	bne.n	8002faa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e1c0      	b.n	800332c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc2:	b672      	cpsid	i
}
 8002fc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fec:	b662      	cpsie	i
}
 8002fee:	e035      	b.n	800305c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11e      	bne.n	8003036 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003032:	b662      	cpsie	i
}
 8003034:	e012      	b.n	800305c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800305c:	e166      	b.n	800332c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	2b03      	cmp	r3, #3
 8003064:	f200 811f 	bhi.w	80032a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fc9f 	bl	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e167      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b6:	e139      	b.n	800332c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d152      	bne.n	8003166 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	2200      	movs	r2, #0
 80030c8:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_I2C_Mem_Read+0x24c>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 faca 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e13c      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800312e:	b662      	cpsie	i
}
 8003130:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003164:	e0e2      	b.n	800332c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	2200      	movs	r2, #0
 800316e:	497b      	ldr	r1, [pc, #492]	; (800335c <HAL_I2C_Mem_Read+0x4c4>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fa77 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0e9      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003190:	b672      	cpsid	i
}
 8003192:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031c6:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_I2C_Mem_Read+0x4c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	4a65      	ldr	r2, [pc, #404]	; (8003364 <HAL_I2C_Mem_Read+0x4cc>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a1a      	lsrs	r2, r3, #8
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800320e:	b662      	cpsie	i
}
 8003210:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e09a      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d1d9      	bne.n	80031e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800326e:	b662      	cpsie	i
}
 8003270:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032a4:	e042      	b.n	800332c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fb84 	bl	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e04c      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d118      	bne.n	800332c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f ae94 	bne.w	800305e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010004 	.word	0x00010004
 8003360:	2000005c 	.word	0x2000005c
 8003364:	14f8b589 	.word	0x14f8b589

08003368 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	460b      	mov	r3, r1
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2200      	movs	r2, #0
 800339a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f960 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b8:	d103      	bne.n	80033c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e05f      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6a3a      	ldr	r2, [r7, #32]
 80033da:	492d      	ldr	r1, [pc, #180]	; (8003490 <I2C_RequestMemoryWrite+0x128>)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f9bb 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e04c      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fa46 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b04      	cmp	r3, #4
 8003418:	d107      	bne.n	800342a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e02b      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e021      	b.n	8003484 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fa20 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b04      	cmp	r3, #4
 8003464:	d107      	bne.n	8003476 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e005      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800347a:	893b      	ldrh	r3, [r7, #8]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8c2 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d103      	bne.n	80034fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0aa      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	4952      	ldr	r1, [pc, #328]	; (8003660 <I2C_RequestMemoryRead+0x1cc>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f91d 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e097      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f9a8 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e076      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003570:	893b      	ldrh	r3, [r7, #8]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]
 800357a:	e021      	b.n	80035c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800357c:	893b      	ldrh	r3, [r7, #8]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	6a39      	ldr	r1, [r7, #32]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f982 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d107      	bne.n	80035b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e050      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	6a39      	ldr	r1, [r7, #32]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f967 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e035      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2200      	movs	r2, #0
 8003604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f82b 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d103      	bne.n	800362c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e013      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003630:	897b      	ldrh	r3, [r7, #10]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6a3a      	ldr	r2, [r7, #32]
 8003644:	4906      	ldr	r1, [pc, #24]	; (8003660 <I2C_RequestMemoryRead+0x1cc>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f886 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00010002 	.word	0x00010002

08003664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003674:	e048      	b.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d044      	beq.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe fecb 	bl	8002418 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d139      	bne.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0c1b      	lsrs	r3, r3, #16
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10d      	bne.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	43da      	mvns	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	e00c      	b.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	43da      	mvns	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d116      	bne.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e023      	b.n	8003750 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10d      	bne.n	800372e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	e00c      	b.n	8003748 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	429a      	cmp	r2, r3
 800374c:	d093      	beq.n	8003676 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003766:	e071      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d123      	bne.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0204 	orr.w	r2, r3, #4
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e067      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d041      	beq.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c8:	f7fe fe26 	bl	8002418 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d136      	bne.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10c      	bne.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e00b      	b.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e021      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10c      	bne.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	43da      	mvns	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4013      	ands	r3, r2
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e00b      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f af6d 	bne.w	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a4:	e034      	b.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f8e3 	bl	8003a72 <I2C_IsAcknowledgeFailed>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e034      	b.n	8003920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d028      	beq.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fe fdab 	bl	8002418 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11d      	bne.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d016      	beq.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e007      	b.n	8003920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d1c3      	bne.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003934:	e034      	b.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f89b 	bl	8003a72 <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e034      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d028      	beq.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe fd63 	bl	8002418 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11d      	bne.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d016      	beq.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e007      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d1c3      	bne.n	8003936 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c4:	e049      	b.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d119      	bne.n	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0210 	mvn.w	r2, #16
 80039dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e030      	b.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fe fd06 	bl	8002418 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d016      	beq.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e007      	b.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d1ae      	bne.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d11b      	bne.n	8003ac2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e272      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af0:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003afc:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d112      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5e>
 8003b08:	4b8c      	ldr	r3, [pc, #560]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d06c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x12c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e24c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x76>
 8003b38:	4b80      	ldr	r3, [pc, #512]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7f      	ldr	r2, [pc, #508]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e02e      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b7b      	ldr	r3, [pc, #492]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7a      	ldr	r2, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b78      	ldr	r3, [pc, #480]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a77      	ldr	r2, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0xbc>
 8003b72:	4b72      	ldr	r3, [pc, #456]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a71      	ldr	r2, [pc, #452]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6e      	ldr	r2, [pc, #440]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b8c:	4b6b      	ldr	r3, [pc, #428]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a67      	ldr	r2, [pc, #412]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fc34 	bl	8002418 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fc30 	bl	8002418 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e200      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe4>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fc20 	bl	8002418 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fc1c 	bl	8002418 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1ec      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x10c>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x18c>
 8003c22:	4b46      	ldr	r3, [pc, #280]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1c0      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4939      	ldr	r1, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e03a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe fbd5 	bl	8002418 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fe fbd1 	bl	8002418 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1a1      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4927      	ldr	r1, [pc, #156]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	e015      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fbb4 	bl	8002418 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fbb0 	bl	8002418 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e180      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d03a      	beq.n	8003d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d019      	beq.n	8003d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fe fb94 	bl	8002418 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fb90 	bl	8002418 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e160      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f000 faba 	bl	800428c <RCC_Delay>
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fe fb7a 	bl	8002418 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d26:	e00f      	b.n	8003d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fe fb76 	bl	8002418 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d908      	bls.n	8003d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e146      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	42420000 	.word	0x42420000
 8003d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	4b92      	ldr	r3, [pc, #584]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e9      	bne.n	8003d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a6 	beq.w	8003eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d66:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10d      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	4b88      	ldr	r3, [pc, #544]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4a87      	ldr	r2, [pc, #540]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	61d3      	str	r3, [r2, #28]
 8003d7e:	4b85      	ldr	r3, [pc, #532]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b82      	ldr	r3, [pc, #520]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7e      	ldr	r2, [pc, #504]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fe fb37 	bl	8002418 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe fb33 	bl	8002418 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e103      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b75      	ldr	r3, [pc, #468]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x312>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	e02d      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x334>
 8003dea:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a69      	ldr	r2, [pc, #420]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a66      	ldr	r2, [pc, #408]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
 8003e02:	e01c      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x356>
 8003e0c:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4a60      	ldr	r2, [pc, #384]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	6213      	str	r3, [r2, #32]
 8003e18:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4a5d      	ldr	r2, [pc, #372]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6213      	str	r3, [r2, #32]
 8003e24:	e00b      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a5a      	ldr	r2, [pc, #360]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a57      	ldr	r2, [pc, #348]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe fae7 	bl	8002418 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe fae3 	bl	8002418 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0b1      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	4b4b      	ldr	r3, [pc, #300]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ee      	beq.n	8003e4e <HAL_RCC_OscConfig+0x37e>
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fe fad1 	bl	8002418 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe facd 	bl	8002418 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e09b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	4b40      	ldr	r3, [pc, #256]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ee      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8087 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d061      	beq.n	8003f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d146      	bne.n	8003f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe faa1 	bl	8002418 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe fa9d 	bl	8002418 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e06d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d108      	bne.n	8003f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4921      	ldr	r1, [pc, #132]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a19      	ldr	r1, [r3, #32]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	430b      	orrs	r3, r1
 8003f26:	491b      	ldr	r1, [pc, #108]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fe fa71 	bl	8002418 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fe fa6d 	bl	8002418 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e03d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x46a>
 8003f58:	e035      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x4cc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe fa5a 	bl	8002418 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fa56 	bl	8002418 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e026      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x498>
 8003f86:	e01e      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e019      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_OscConfig+0x500>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d0      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b6a      	ldr	r3, [pc, #424]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d910      	bls.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b67      	ldr	r3, [pc, #412]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	4965      	ldr	r1, [pc, #404]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0b8      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d020      	beq.n	8004066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004030:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800403a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004048:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	494d      	ldr	r1, [pc, #308]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d040      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d115      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e07f      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e073      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e06b      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4936      	ldr	r1, [pc, #216]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c4:	f7fe f9a8 	bl	8002418 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fe f9a4 	bl	8002418 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e053      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 020c 	and.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d1eb      	bne.n	80040cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d210      	bcs.n	8004124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0207 	bic.w	r2, r3, #7
 800410a:	4922      	ldr	r1, [pc, #136]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e032      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4916      	ldr	r1, [pc, #88]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004162:	f000 f821 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004166:	4602      	mov	r2, r0
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	490a      	ldr	r1, [pc, #40]	; (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	5ccb      	ldrb	r3, [r1, r3]
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1cc>)
 800417c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f906 	bl	8002394 <HAL_InitTick>

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40022000 	.word	0x40022000
 8004198:	40021000 	.word	0x40021000
 800419c:	0800bffc 	.word	0x0800bffc
 80041a0:	2000005c 	.word	0x2000005c
 80041a4:	20000060 	.word	0x20000060

080041a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_GetSysClockFreq+0x94>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x30>
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d003      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x36>
 80041d6:	e027      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_GetSysClockFreq+0x98>)
 80041da:	613b      	str	r3, [r7, #16]
      break;
 80041dc:	e027      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	0c9b      	lsrs	r3, r3, #18
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d010      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCC_GetSysClockFreq+0x94>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0c5b      	lsrs	r3, r3, #17
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_RCC_GetSysClockFreq+0x98>)
 800420a:	fb03 f202 	mul.w	r2, r3, r2
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e004      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a0c      	ldr	r2, [pc, #48]	; (800424c <HAL_RCC_GetSysClockFreq+0xa4>)
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	613b      	str	r3, [r7, #16]
      break;
 8004226:	e002      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetSysClockFreq+0x98>)
 800422a:	613b      	str	r3, [r7, #16]
      break;
 800422c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422e:	693b      	ldr	r3, [r7, #16]
}
 8004230:	4618      	mov	r0, r3
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	007a1200 	.word	0x007a1200
 8004244:	0800c014 	.word	0x0800c014
 8004248:	0800c024 	.word	0x0800c024
 800424c:	003d0900 	.word	0x003d0900

08004250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <HAL_RCC_GetHCLKFreq+0x10>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	2000005c 	.word	0x2000005c

08004264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004268:	f7ff fff2 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4903      	ldr	r1, [pc, #12]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	0800c00c 	.word	0x0800c00c

0800428c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <RCC_Delay+0x34>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <RCC_Delay+0x38>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a5b      	lsrs	r3, r3, #9
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042a8:	bf00      	nop
  }
  while (Delay --);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <RCC_Delay+0x1c>
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	2000005c 	.word	0x2000005c
 80042c4:	10624dd3 	.word	0x10624dd3

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e041      	b.n	800435e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fe88 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fe92 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e044      	b.n	800440a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <HAL_TIM_Base_Start_IT+0xac>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_TIM_Base_Start_IT+0xb0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b4:	d00e      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_TIM_Base_Start_IT+0xb4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_TIM_Base_Start_IT+0xb8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_TIM_Base_Start_IT+0xbc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d111      	bne.n	80043f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d010      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e007      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40013400 	.word	0x40013400
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00

08004428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e041      	b.n	80044be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f839 	bl	80044c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 fde2 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d109      	bne.n	8004500 <HAL_TIM_PWM_Start_IT+0x28>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e022      	b.n	8004546 <HAL_TIM_PWM_Start_IT+0x6e>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b04      	cmp	r3, #4
 8004504:	d109      	bne.n	800451a <HAL_TIM_PWM_Start_IT+0x42>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	e015      	b.n	8004546 <HAL_TIM_PWM_Start_IT+0x6e>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d109      	bne.n	8004534 <HAL_TIM_PWM_Start_IT+0x5c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e008      	b.n	8004546 <HAL_TIM_PWM_Start_IT+0x6e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0bd      	b.n	80046ca <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start_IT+0x86>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455c:	e013      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0xae>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start_IT+0x96>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800456c:	e00b      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0xae>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start_IT+0xa6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457c:	e003      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0xae>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d841      	bhi.n	8004610 <HAL_TIM_PWM_Start_IT+0x138>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_TIM_PWM_Start_IT+0xbc>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045c9 	.word	0x080045c9
 8004598:	08004611 	.word	0x08004611
 800459c:	08004611 	.word	0x08004611
 80045a0:	08004611 	.word	0x08004611
 80045a4:	080045db 	.word	0x080045db
 80045a8:	08004611 	.word	0x08004611
 80045ac:	08004611 	.word	0x08004611
 80045b0:	08004611 	.word	0x08004611
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004611 	.word	0x08004611
 80045c0:	08004611 	.word	0x08004611
 80045c4:	080045ff 	.word	0x080045ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0202 	orr.w	r2, r2, #2
 80045d6:	60da      	str	r2, [r3, #12]
      break;
 80045d8:	e01d      	b.n	8004616 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0204 	orr.w	r2, r2, #4
 80045e8:	60da      	str	r2, [r3, #12]
      break;
 80045ea:	e014      	b.n	8004616 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	60da      	str	r2, [r3, #12]
      break;
 80045fc:	e00b      	b.n	8004616 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0210 	orr.w	r2, r2, #16
 800460c:	60da      	str	r2, [r3, #12]
      break;
 800460e:	e002      	b.n	8004616 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      break;
 8004614:	bf00      	nop
  }

  if (status == HAL_OK)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d155      	bne.n	80046c8 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ffbf 	bl	80055a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_TIM_PWM_Start_IT+0x166>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <HAL_TIM_PWM_Start_IT+0x200>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_TIM_PWM_Start_IT+0x16a>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_TIM_PWM_Start_IT+0x16c>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_PWM_Start_IT+0x1bc>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_TIM_PWM_Start_IT+0x200>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_PWM_Start_IT+0x1bc>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_PWM_Start_IT+0x1bc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_TIM_PWM_Start_IT+0x204>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_PWM_Start_IT+0x1bc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_TIM_PWM_Start_IT+0x208>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_PWM_Start_IT+0x1bc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_TIM_PWM_Start_IT+0x20c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00

080046e8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d841      	bhi.n	8004780 <HAL_TIM_PWM_Stop_IT+0x98>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004739 	.word	0x08004739
 8004708:	08004781 	.word	0x08004781
 800470c:	08004781 	.word	0x08004781
 8004710:	08004781 	.word	0x08004781
 8004714:	0800474b 	.word	0x0800474b
 8004718:	08004781 	.word	0x08004781
 800471c:	08004781 	.word	0x08004781
 8004720:	08004781 	.word	0x08004781
 8004724:	0800475d 	.word	0x0800475d
 8004728:	08004781 	.word	0x08004781
 800472c:	08004781 	.word	0x08004781
 8004730:	08004781 	.word	0x08004781
 8004734:	0800476f 	.word	0x0800476f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0202 	bic.w	r2, r2, #2
 8004746:	60da      	str	r2, [r3, #12]
      break;
 8004748:	e01d      	b.n	8004786 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	60da      	str	r2, [r3, #12]
      break;
 800475a:	e014      	b.n	8004786 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0208 	bic.w	r2, r2, #8
 800476a:	60da      	str	r2, [r3, #12]
      break;
 800476c:	e00b      	b.n	8004786 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0210 	bic.w	r2, r2, #16
 800477c:	60da      	str	r2, [r3, #12]
      break;
 800477e:	e002      	b.n	8004786 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	bf00      	nop
  }

  if (status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d161      	bne.n	8004850 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 ff07 	bl	80055a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2f      	ldr	r2, [pc, #188]	; (800485c <HAL_TIM_PWM_Stop_IT+0x174>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_PWM_Stop_IT+0xc6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_TIM_PWM_Stop_IT+0x178>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_PWM_Stop_IT+0xca>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	f241 1311 	movw	r3, #4369	; 0x1111
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <HAL_TIM_PWM_Stop_IT+0x100>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f240 4344 	movw	r3, #1092	; 0x444
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <HAL_TIM_PWM_Stop_IT+0x100>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10f      	bne.n	8004818 <HAL_TIM_PWM_Stop_IT+0x130>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	f240 4344 	movw	r3, #1092	; 0x444
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_TIM_PWM_Stop_IT+0x130>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_TIM_PWM_Stop_IT+0x140>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004826:	e013      	b.n	8004850 <HAL_TIM_PWM_Stop_IT+0x168>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d104      	bne.n	8004838 <HAL_TIM_PWM_Stop_IT+0x150>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004836:	e00b      	b.n	8004850 <HAL_TIM_PWM_Stop_IT+0x168>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b08      	cmp	r3, #8
 800483c:	d104      	bne.n	8004848 <HAL_TIM_PWM_Stop_IT+0x160>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004846:	e003      	b.n	8004850 <HAL_TIM_PWM_Stop_IT+0x168>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40013400 	.word	0x40013400

08004864 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e093      	b.n	80049a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fd fb79 	bl	8001f84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a8:	f023 0307 	bic.w	r3, r3, #7
 80048ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f000 fbb9 	bl	8005030 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	4313      	orrs	r3, r2
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004904:	f023 030c 	bic.w	r3, r3, #12
 8004908:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	4313      	orrs	r3, r2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	011a      	lsls	r2, r3, #4
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	031b      	lsls	r3, r3, #12
 8004934:	4313      	orrs	r3, r2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4313      	orrs	r3, r2
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049de:	7b7b      	ldrb	r3, [r7, #13]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e069      	b.n	8004abc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f8:	e031      	b.n	8004a5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d110      	bne.n	8004a22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a00:	7bbb      	ldrb	r3, [r7, #14]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a06:	7b3b      	ldrb	r3, [r7, #12]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e055      	b.n	8004abc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a20:	e01d      	b.n	8004a5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d108      	bne.n	8004a3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d105      	bne.n	8004a3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a2e:	7b7b      	ldrb	r3, [r7, #13]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d102      	bne.n	8004a3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a34:	7b3b      	ldrb	r3, [r7, #12]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e03e      	b.n	8004abc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_Encoder_Start+0xc4>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d008      	beq.n	8004a7c <HAL_TIM_Encoder_Start+0xd4>
 8004a6a:	e00f      	b.n	8004a8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fd97 	bl	80055a8 <TIM_CCxChannelCmd>
      break;
 8004a7a:	e016      	b.n	8004aaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	2104      	movs	r1, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd8f 	bl	80055a8 <TIM_CCxChannelCmd>
      break;
 8004a8a:	e00e      	b.n	8004aaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fd87 	bl	80055a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fd80 	bl	80055a8 <TIM_CCxChannelCmd>
      break;
 8004aa8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0202 	mvn.w	r2, #2
 8004af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa76 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa69 	bl	8004fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa78 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0204 	mvn.w	r2, #4
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa4c 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa3f 	bl	8004fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa4e 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0208 	mvn.w	r2, #8
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa22 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa15 	bl	8004fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa24 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9f8 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9eb 	bl	8004fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9fa 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10e      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0201 	mvn.w	r2, #1
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc ff98 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d10e      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fd33 	bl	80056da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d10e      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f9be 	bl	800501c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0220 	mvn.w	r2, #32
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fcfe 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ccc:	bf00      	nop
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0ae      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	f200 809f 	bhi.w	8004e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004e41 	.word	0x08004e41
 8004d10:	08004e41 	.word	0x08004e41
 8004d14:	08004e41 	.word	0x08004e41
 8004d18:	08004d7d 	.word	0x08004d7d
 8004d1c:	08004e41 	.word	0x08004e41
 8004d20:	08004e41 	.word	0x08004e41
 8004d24:	08004e41 	.word	0x08004e41
 8004d28:	08004dbf 	.word	0x08004dbf
 8004d2c:	08004e41 	.word	0x08004e41
 8004d30:	08004e41 	.word	0x08004e41
 8004d34:	08004e41 	.word	0x08004e41
 8004d38:	08004dff 	.word	0x08004dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f9ee 	bl	8005124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	619a      	str	r2, [r3, #24]
      break;
 8004d7a:	e064      	b.n	8004e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa3e 	bl	8005204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	619a      	str	r2, [r3, #24]
      break;
 8004dbc:	e043      	b.n	8004e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa91 	bl	80052ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0208 	orr.w	r2, r2, #8
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0204 	bic.w	r2, r2, #4
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	61da      	str	r2, [r3, #28]
      break;
 8004dfc:	e023      	b.n	8004e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fae5 	bl	80053d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	021a      	lsls	r2, r3, #8
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	61da      	str	r2, [r3, #28]
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
      break;
 8004e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_ConfigClockSource+0x1c>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e0b4      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x186>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eac:	d03e      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0xd4>
 8004eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb2:	f200 8087 	bhi.w	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eba:	f000 8086 	beq.w	8004fca <HAL_TIM_ConfigClockSource+0x172>
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec2:	d87f      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec4:	2b70      	cmp	r3, #112	; 0x70
 8004ec6:	d01a      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0xa6>
 8004ec8:	2b70      	cmp	r3, #112	; 0x70
 8004eca:	d87b      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b60      	cmp	r3, #96	; 0x60
 8004ece:	d050      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x11a>
 8004ed0:	2b60      	cmp	r3, #96	; 0x60
 8004ed2:	d877      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b50      	cmp	r3, #80	; 0x50
 8004ed6:	d03c      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0xfa>
 8004ed8:	2b50      	cmp	r3, #80	; 0x50
 8004eda:	d873      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d058      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0x13a>
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d86f      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b30      	cmp	r3, #48	; 0x30
 8004ee6:	d064      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee8:	2b30      	cmp	r3, #48	; 0x30
 8004eea:	d86b      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d060      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d867      	bhi.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05c      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d05a      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004efc:	e062      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	f000 fb2c 	bl	800556a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]
      break;
 8004f2a:	e04f      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f3c:	f000 fb15 	bl	800556a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4e:	609a      	str	r2, [r3, #8]
      break;
 8004f50:	e03c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f000 fa8c 	bl	800547c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2150      	movs	r1, #80	; 0x50
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fae3 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004f70:	e02c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f000 faaa 	bl	80054d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2160      	movs	r1, #96	; 0x60
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fad3 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004f90:	e01c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 fa6c 	bl	800547c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2140      	movs	r1, #64	; 0x40
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fac3 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e00c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 faba 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004fc2:	e003      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc8:	e000      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
	...

08005030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a33      	ldr	r2, [pc, #204]	; (8005110 <TIM_Base_SetConfig+0xe0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a32      	ldr	r2, [pc, #200]	; (8005114 <TIM_Base_SetConfig+0xe4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2f      	ldr	r2, [pc, #188]	; (8005118 <TIM_Base_SetConfig+0xe8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2e      	ldr	r2, [pc, #184]	; (800511c <TIM_Base_SetConfig+0xec>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <TIM_Base_SetConfig+0xf0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a22      	ldr	r2, [pc, #136]	; (8005110 <TIM_Base_SetConfig+0xe0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <TIM_Base_SetConfig+0x82>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a21      	ldr	r2, [pc, #132]	; (8005114 <TIM_Base_SetConfig+0xe4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_Base_SetConfig+0x82>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0x82>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <TIM_Base_SetConfig+0xe8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0x82>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <TIM_Base_SetConfig+0xec>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0x82>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <TIM_Base_SetConfig+0xf0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a09      	ldr	r2, [pc, #36]	; (8005110 <TIM_Base_SetConfig+0xe0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0xc8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a08      	ldr	r2, [pc, #32]	; (8005114 <TIM_Base_SetConfig+0xe4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00

08005124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 0201 	bic.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a20      	ldr	r2, [pc, #128]	; (80051fc <TIM_OC1_SetConfig+0xd8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_OC1_SetConfig+0x64>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <TIM_OC1_SetConfig+0xdc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10c      	bne.n	80051a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0308 	bic.w	r3, r3, #8
 800518e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a15      	ldr	r2, [pc, #84]	; (80051fc <TIM_OC1_SetConfig+0xd8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC1_SetConfig+0x8e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <TIM_OC1_SetConfig+0xdc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40013400 	.word	0x40013400

08005204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f023 0210 	bic.w	r2, r3, #16
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0320 	bic.w	r3, r3, #32
 800524e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <TIM_OC2_SetConfig+0xe0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC2_SetConfig+0x68>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <TIM_OC2_SetConfig+0xe4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10d      	bne.n	8005288 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <TIM_OC2_SetConfig+0xe0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC2_SetConfig+0x94>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <TIM_OC2_SetConfig+0xe4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d113      	bne.n	80052c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800529e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400

080052ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <TIM_OC3_SetConfig+0xe0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_OC3_SetConfig+0x66>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <TIM_OC3_SetConfig+0xe4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10d      	bne.n	800536e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <TIM_OC3_SetConfig+0xe0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC3_SetConfig+0x92>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <TIM_OC3_SetConfig+0xe4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d113      	bne.n	80053a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40013400 	.word	0x40013400

080053d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800541e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	031b      	lsls	r3, r3, #12
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a11      	ldr	r2, [pc, #68]	; (8005474 <TIM_OC4_SetConfig+0xa0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_OC4_SetConfig+0x68>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a10      	ldr	r2, [pc, #64]	; (8005478 <TIM_OC4_SetConfig+0xa4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d109      	bne.n	8005450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40013400 	.word	0x40013400

0800547c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 030a 	bic.w	r3, r3, #10
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0210 	bic.w	r2, r3, #16
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005514:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	f043 0307 	orr.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	021a      	lsls	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	431a      	orrs	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2201      	movs	r2, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	431a      	orrs	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e050      	b.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d018      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d00e      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a15      	ldr	r2, [pc, #84]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a14      	ldr	r2, [pc, #80]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a12      	ldr	r2, [pc, #72]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d10c      	bne.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4313      	orrs	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40013400 	.word	0x40013400
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <CalculateBytesToWrite>:
 * @param  size The size of the data to write in bytes.
 * @param  offset The starting byte offset within the page.
 * @return The number of bytes to write.
 */
uint16_t CalculateBytesToWrite(uint16_t size, uint16_t offset)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	460a      	mov	r2, r1
 80056f6:	80fb      	strh	r3, [r7, #6]
 80056f8:	4613      	mov	r3, r2
 80056fa:	80bb      	strh	r3, [r7, #4]
    return ((size + offset) < EEPROM_PAGE_SIZE) ? size : (EEPROM_PAGE_SIZE - offset);
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	88bb      	ldrh	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	2b3f      	cmp	r3, #63	; 0x3f
 8005704:	dd04      	ble.n	8005710 <CalculateBytesToWrite+0x24>
 8005706:	88bb      	ldrh	r3, [r7, #4]
 8005708:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800570c:	b29b      	uxth	r3, r3
 800570e:	e000      	b.n	8005712 <CalculateBytesToWrite+0x26>
 8005710:	88fb      	ldrh	r3, [r7, #6]
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <WriteToEeprom>:
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data Pointer to the data buffer to be written.
 * @param  size The size of the data in bytes.
 */
void WriteToEeprom(uint16_t page, uint16_t offset, uint8_t* data, uint16_t size)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af04      	add	r7, sp, #16
 8005722:	60ba      	str	r2, [r7, #8]
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	81fb      	strh	r3, [r7, #14]
 800572a:	460b      	mov	r3, r1
 800572c:	81bb      	strh	r3, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
    // Calculate the bit position where page addressing starts
    int pageAddressShift = log(EEPROM_PAGE_SIZE) / log(2);
 8005732:	2306      	movs	r3, #6
 8005734:	61fb      	str	r3, [r7, #28]

    // Calculate the start and end page numbers
    uint16_t startPage = page;
 8005736:	89fb      	ldrh	r3, [r7, #14]
 8005738:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t endPage = page + ((size + offset) / EEPROM_PAGE_SIZE);
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	89bb      	ldrh	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	da00      	bge.n	8005746 <WriteToEeprom+0x2a>
 8005744:	333f      	adds	r3, #63	; 0x3f
 8005746:	119b      	asrs	r3, r3, #6
 8005748:	b29a      	uxth	r2, r3
 800574a:	89fb      	ldrh	r3, [r7, #14]
 800574c:	4413      	add	r3, r2
 800574e:	837b      	strh	r3, [r7, #26]

    // Number of pages to be written
    uint16_t numberOfPages = (endPage - startPage) + 1;
 8005750:	8b7a      	ldrh	r2, [r7, #26]
 8005752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	b29b      	uxth	r3, r3
 8005758:	3301      	adds	r3, #1
 800575a:	833b      	strh	r3, [r7, #24]
    uint16_t dataPosition = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Write data to EEPROM
    for (int i = 0; i < numberOfPages; i++)
 8005760:	2300      	movs	r3, #0
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	e034      	b.n	80057d0 <WriteToEeprom+0xb4>
    {
        // Calculate memory address by combining page and byte addresses
        uint16_t memoryAddress = (startPage << pageAddressShift) | offset;
 8005766:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	b21a      	sxth	r2, r3
 8005770:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	b21b      	sxth	r3, r3
 8005778:	82fb      	strh	r3, [r7, #22]
        uint16_t bytesRemaining = CalculateBytesToWrite(size, offset);
 800577a:	89ba      	ldrh	r2, [r7, #12]
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff ffb3 	bl	80056ec <CalculateBytesToWrite>
 8005786:	4603      	mov	r3, r0
 8005788:	82bb      	strh	r3, [r7, #20]

        HAL_I2C_Mem_Write(EEPROM_I2C_HANDLE, EEPROM_I2C_ADDRESS, memoryAddress, 2, &data[dataPosition], bytesRemaining, 1000);
 800578a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4413      	add	r3, r2
 8005790:	8af9      	ldrh	r1, [r7, #22]
 8005792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005796:	9202      	str	r2, [sp, #8]
 8005798:	8aba      	ldrh	r2, [r7, #20]
 800579a:	9201      	str	r2, [sp, #4]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2302      	movs	r3, #2
 80057a0:	460a      	mov	r2, r1
 80057a2:	21a0      	movs	r1, #160	; 0xa0
 80057a4:	480f      	ldr	r0, [pc, #60]	; (80057e4 <WriteToEeprom+0xc8>)
 80057a6:	f7fd fa7d 	bl	8002ca4 <HAL_I2C_Mem_Write>

        // Move to the next page
        startPage++;
 80057aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057ac:	3301      	adds	r3, #1
 80057ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        offset = 0;  // Reset offset for new page
 80057b0:	2300      	movs	r3, #0
 80057b2:	81bb      	strh	r3, [r7, #12]
        size -= bytesRemaining;  // Reduce size by bytes written
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	8abb      	ldrh	r3, [r7, #20]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	80fb      	strh	r3, [r7, #6]
        dataPosition += bytesRemaining;  // Update data buffer position
 80057bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057be:	8abb      	ldrh	r3, [r7, #20]
 80057c0:	4413      	add	r3, r2
 80057c2:	84bb      	strh	r3, [r7, #36]	; 0x24

        HAL_Delay(5);  // Write cycle delay (5 ms)
 80057c4:	2005      	movs	r0, #5
 80057c6:	f7fc fe31 	bl	800242c <HAL_Delay>
    for (int i = 0; i < numberOfPages; i++)
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	3301      	adds	r3, #1
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	8b3b      	ldrh	r3, [r7, #24]
 80057d2:	6a3a      	ldr	r2, [r7, #32]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	dbc6      	blt.n	8005766 <WriteToEeprom+0x4a>
    }
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3728      	adds	r7, #40	; 0x28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000364 	.word	0x20000364

080057e8 <FloatToByteArray>:
 * @brief  Converts a floating-point number to a byte array.
 * @param  byteArray Pointer to the array where the converted bytes will be stored.
 * @param  floatValue The floating-point value to convert.
 */
void FloatToByteArray(uint8_t* byteArray, float floatValue)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
    union {
        float floatVal;
        uint8_t bytes[4];
    } floatUnion;

    floatUnion.floatVal = floatValue;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
 80057fa:	e00b      	b.n	8005814 <FloatToByteArray+0x2c>
    {
        byteArray[i] = floatUnion.bytes[i];
 80057fc:	7bfa      	ldrb	r2, [r7, #15]
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	440b      	add	r3, r1
 8005804:	3210      	adds	r2, #16
 8005806:	443a      	add	r2, r7
 8005808:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800580c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	3301      	adds	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d9f0      	bls.n	80057fc <FloatToByteArray+0x14>
    }
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <ByteArrayToFloat>:
 * @brief  Converts a byte array to a floating-point number.
 * @param  byteArray Pointer to the byte array containing the data.
 * @return The floating-point number obtained from the byte array.
 */
float ByteArrayToFloat(uint8_t* byteArray)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
    union {
        float floatVal;
        uint8_t bytes[4];
    } floatUnion;

    for (uint8_t i = 0; i < 4; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
 8005832:	e00b      	b.n	800584c <ByteArrayToFloat+0x26>
    {
        floatUnion.bytes[i] = byteArray[i];
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	441a      	add	r2, r3
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	3310      	adds	r3, #16
 8005840:	443b      	add	r3, r7
 8005842:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = 0; i < 4; i++)
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	3301      	adds	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d9f0      	bls.n	8005834 <ByteArrayToFloat+0xe>
    }

    return floatUnion.floatVal;
 8005852:	68bb      	ldr	r3, [r7, #8]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
	...

08005860 <WriteFloatToEeprom>:
 * @param  page The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data The floating-point number to be written.
 */
void WriteFloatToEeprom(uint16_t page, uint16_t offset, float data)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	603a      	str	r2, [r7, #0]
 800586a:	80fb      	strh	r3, [r7, #6]
 800586c:	460b      	mov	r3, r1
 800586e:	80bb      	strh	r3, [r7, #4]
    FloatToByteArray(tempByteArray, data);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	4806      	ldr	r0, [pc, #24]	; (800588c <WriteFloatToEeprom+0x2c>)
 8005874:	f7ff ffb8 	bl	80057e8 <FloatToByteArray>
    WriteToEeprom(page, offset, tempByteArray, 4);
 8005878:	88b9      	ldrh	r1, [r7, #4]
 800587a:	88f8      	ldrh	r0, [r7, #6]
 800587c:	2304      	movs	r3, #4
 800587e:	4a03      	ldr	r2, [pc, #12]	; (800588c <WriteFloatToEeprom+0x2c>)
 8005880:	f7ff ff4c 	bl	800571c <WriteToEeprom>
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200004c0 	.word	0x200004c0

08005890 <ReadFloatFromEeprom>:
 * @param  page The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @return The floating-point number read from the EEPROM.
 */
float ReadFloatFromEeprom(uint16_t page, uint16_t offset)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	460a      	mov	r2, r1
 800589a:	80fb      	strh	r3, [r7, #6]
 800589c:	4613      	mov	r3, r2
 800589e:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[4];
    ReadFromEeprom(page, offset, buffer, 4);
 80058a0:	f107 020c 	add.w	r2, r7, #12
 80058a4:	88b9      	ldrh	r1, [r7, #4]
 80058a6:	88f8      	ldrh	r0, [r7, #6]
 80058a8:	2304      	movs	r3, #4
 80058aa:	f000 f80b 	bl	80058c4 <ReadFromEeprom>
    return ByteArrayToFloat(buffer);
 80058ae:	f107 030c 	add.w	r3, r7, #12
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ffb7 	bl	8005826 <ByteArrayToFloat>
 80058b8:	4603      	mov	r3, r0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <ReadFromEeprom>:
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data Pointer to the buffer where the read data will be stored.
 * @param  size The number of bytes to read.
 */
void ReadFromEeprom(uint16_t page, uint16_t offset, uint8_t* data, uint16_t size)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af04      	add	r7, sp, #16
 80058ca:	60ba      	str	r2, [r7, #8]
 80058cc:	461a      	mov	r2, r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	81fb      	strh	r3, [r7, #14]
 80058d2:	460b      	mov	r3, r1
 80058d4:	81bb      	strh	r3, [r7, #12]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
    int pageAddressShift = log(EEPROM_PAGE_SIZE) / log(2);
 80058da:	2306      	movs	r3, #6
 80058dc:	61fb      	str	r3, [r7, #28]

    uint16_t startPage = page;
 80058de:	89fb      	ldrh	r3, [r7, #14]
 80058e0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t endPage = page + ((size + offset) / EEPROM_PAGE_SIZE);
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	89bb      	ldrh	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da00      	bge.n	80058ee <ReadFromEeprom+0x2a>
 80058ec:	333f      	adds	r3, #63	; 0x3f
 80058ee:	119b      	asrs	r3, r3, #6
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	4413      	add	r3, r2
 80058f6:	837b      	strh	r3, [r7, #26]

    uint16_t numberOfPages = (endPage - startPage) + 1;
 80058f8:	8b7a      	ldrh	r2, [r7, #26]
 80058fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3301      	adds	r3, #1
 8005902:	833b      	strh	r3, [r7, #24]
    uint16_t dataPosition = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (int i = 0; i < numberOfPages; i++)
 8005908:	2300      	movs	r3, #0
 800590a:	623b      	str	r3, [r7, #32]
 800590c:	e031      	b.n	8005972 <ReadFromEeprom+0xae>
    {
        uint16_t memoryAddress = (startPage << pageAddressShift) | offset;
 800590e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	b21a      	sxth	r2, r3
 8005918:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	b21b      	sxth	r3, r3
 8005920:	82fb      	strh	r3, [r7, #22]
        uint16_t bytesRemaining = CalculateBytesToWrite(size, offset);
 8005922:	89ba      	ldrh	r2, [r7, #12]
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fedf 	bl	80056ec <CalculateBytesToWrite>
 800592e:	4603      	mov	r3, r0
 8005930:	82bb      	strh	r3, [r7, #20]
	    HAL_I2C_Mem_Read(EEPROM_I2C_HANDLE, EEPROM_I2C_ADDRESS, memoryAddress, 2, &data[dataPosition], bytesRemaining, 1000);
 8005932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4413      	add	r3, r2
 8005938:	8af9      	ldrh	r1, [r7, #22]
 800593a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800593e:	9202      	str	r2, [sp, #8]
 8005940:	8aba      	ldrh	r2, [r7, #20]
 8005942:	9201      	str	r2, [sp, #4]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2302      	movs	r3, #2
 8005948:	460a      	mov	r2, r1
 800594a:	21a0      	movs	r1, #160	; 0xa0
 800594c:	480d      	ldr	r0, [pc, #52]	; (8005984 <ReadFromEeprom+0xc0>)
 800594e:	f7fd faa3 	bl	8002e98 <HAL_I2C_Mem_Read>

        startPage++;
 8005952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005954:	3301      	adds	r3, #1
 8005956:	84fb      	strh	r3, [r7, #38]	; 0x26
        offset = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	81bb      	strh	r3, [r7, #12]
        size -= bytesRemaining;
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	8abb      	ldrh	r3, [r7, #20]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	80fb      	strh	r3, [r7, #6]
        dataPosition += bytesRemaining;
 8005964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005966:	8abb      	ldrh	r3, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	84bb      	strh	r3, [r7, #36]	; 0x24
    for (int i = 0; i < numberOfPages; i++)
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	3301      	adds	r3, #1
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	8b3b      	ldrh	r3, [r7, #24]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	429a      	cmp	r2, r3
 8005978:	dbc9      	blt.n	800590e <ReadFromEeprom+0x4a>
    }
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000364 	.word	0x20000364

08005988 <LcdRstLow>:
LcdOption Options;

/**
 * @brief  Set the reset pin low.
 */
void LcdRstLow(void){ HAL_GPIO_WritePin(LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); }
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	4802      	ldr	r0, [pc, #8]	; (800599c <LcdRstLow+0x14>)
 8005992:	f7fd f811 	bl	80029b8 <HAL_GPIO_WritePin>
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40010800 	.word	0x40010800

080059a0 <LcdRstHigh>:

/**
 * @brief  Set the reset pin high.
 */
void LcdRstHigh(void){ HAL_GPIO_WritePin(LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET); }
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	2201      	movs	r2, #1
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	4802      	ldr	r0, [pc, #8]	; (80059b4 <LcdRstHigh+0x14>)
 80059aa:	f7fd f805 	bl	80029b8 <HAL_GPIO_WritePin>
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40010800 	.word	0x40010800

080059b8 <LcdEnLow>:

/**
 * @brief  Set the enable pin low.
 */
void LcdEnLow(void){ HAL_GPIO_WritePin(LcdEn_GPIO_Port, LcdEn_Pin, GPIO_PIN_RESET); }
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	2200      	movs	r2, #0
 80059be:	2104      	movs	r1, #4
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <LcdEnLow+0x14>)
 80059c2:	f7fc fff9 	bl	80029b8 <HAL_GPIO_WritePin>
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40010800 	.word	0x40010800

080059d0 <LcdEnHigh>:

/**
 * @brief  Set the enable pin high.
 */
void LcdEnHigh(void){ HAL_GPIO_WritePin(LcdEn_GPIO_Port, LcdEn_Pin, GPIO_PIN_SET); }
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	2201      	movs	r2, #1
 80059d6:	2104      	movs	r1, #4
 80059d8:	4802      	ldr	r0, [pc, #8]	; (80059e4 <LcdEnHigh+0x14>)
 80059da:	f7fc ffed 	bl	80029b8 <HAL_GPIO_WritePin>
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40010800 	.word	0x40010800

080059e8 <LcdEnBlink>:

/**
 * @brief  Enable blinking.
 */
void LcdEnBlink(void){ LcdEnHigh(); LcdDelay_us(50); LcdEnLow(); LcdDelay_us(50); }
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	f7ff fff0 	bl	80059d0 <LcdEnHigh>
 80059f0:	2032      	movs	r0, #50	; 0x32
 80059f2:	f000 f813 	bl	8005a1c <LcdDelay_us>
 80059f6:	f7ff ffdf 	bl	80059b8 <LcdEnLow>
 80059fa:	2032      	movs	r0, #50	; 0x32
 80059fc:	f000 f80e 	bl	8005a1c <LcdDelay_us>
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <LcdBackLightSet>:

/**
 * @brief  Set the backlight.
 */
void LcdBackLightSet(void){ HAL_GPIO_WritePin(LcdBackLight_GPIO_Port, LcdBackLight_Pin, GPIO_PIN_SET); };
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a0e:	4802      	ldr	r0, [pc, #8]	; (8005a18 <LcdBackLightSet+0x14>)
 8005a10:	f7fc ffd2 	bl	80029b8 <HAL_GPIO_WritePin>
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40011000 	.word	0x40011000

08005a1c <LcdDelay_us>:
/**
 * @brief  Delay for a specified number of microseconds.
 * @param  us The number of microseconds to delay.
 */
void LcdDelay_us(uint16_t us)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	80fb      	strh	r3, [r7, #6]
  uint32_t  Div = (SysTick->LOAD+1)/1000;
 8005a26:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <LcdDelay_us+0x70>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <LcdDelay_us+0x74>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	60fb      	str	r3, [r7, #12]
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
 8005a36:	f7fc fcef 	bl	8002418 <HAL_GetTick>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a40:	fb03 f202 	mul.w	r2, r3, r2
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <LcdDelay_us+0x70>)
 8005a46:	6899      	ldr	r1, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005a54:	60bb      	str	r3, [r7, #8]
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));  
 8005a56:	bf00      	nop
 8005a58:	f7fc fcde 	bl	8002418 <HAL_GetTick>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a62:	fb03 f202 	mul.w	r2, r3, r2
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <LcdDelay_us+0x70>)
 8005a68:	6899      	ldr	r1, [r3, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a70:	1ad2      	subs	r2, r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3eb      	bcc.n	8005a58 <LcdDelay_us+0x3c>
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	e000e010 	.word	0xe000e010
 8005a90:	10624dd3 	.word	0x10624dd3

08005a94 <LcdDelay_ms>:
/**
 * @brief  Delay for a specified number of milliseconds.
 * @param  ms The number of milliseconds to delay.
 */
void LcdDelay_ms(uint8_t ms)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	71fb      	strb	r3, [r7, #7]
  //#if _LCD_USE_FREERTOS==1
  //osDelay(ms);
  //#else
  HAL_Delay(ms);
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fc fcc3 	bl	800242c <HAL_Delay>
  //#endif
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <LcdInit>:

/**
 * @brief  Initialize the LCD.
 */
void LcdInit(void)
{	
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
	while(HAL_GetTick()<200)
 8005ab4:	e002      	b.n	8005abc <LcdInit+0xc>
	   LcdDelay_ms(1);
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7ff ffec 	bl	8005a94 <LcdDelay_ms>
	while(HAL_GetTick()<200)
 8005abc:	f7fc fcac 	bl	8002418 <HAL_GetTick>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2bc7      	cmp	r3, #199	; 0xc7
 8005ac4:	d9f7      	bls.n	8005ab6 <LcdInit+0x6>
	/* Set cursor pointer to beginning for LCD */
	Options.currentX = 0;
 8005ac6:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <LcdInit+0xa4>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	70da      	strb	r2, [r3, #3]
	Options.currentY = 0;
 8005acc:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <LcdInit+0xa4>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	711a      	strb	r2, [r3, #4]
	Options.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 8005ad2:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <LcdInit+0xa4>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	705a      	strb	r2, [r3, #1]
	if (_LCD_ROWS > 1)
		Options.DisplayFunction |= LCD_2LINE;
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <LcdInit+0xa4>)
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	f043 0308 	orr.w	r3, r3, #8
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <LcdInit+0xa4>)
 8005ae4:	705a      	strb	r2, [r3, #1]
	/* Try to set 4bit mode */
	LcdCmd4bit(0x03);
 8005ae6:	2003      	movs	r0, #3
 8005ae8:	f000 f8f4 	bl	8005cd4 <LcdCmd4bit>
	LcdDelay_ms(5);
 8005aec:	2005      	movs	r0, #5
 8005aee:	f7ff ffd1 	bl	8005a94 <LcdDelay_ms>
	/* Second try */
	LcdCmd4bit(0x03);
 8005af2:	2003      	movs	r0, #3
 8005af4:	f000 f8ee 	bl	8005cd4 <LcdCmd4bit>
	LcdDelay_ms(5);
 8005af8:	2005      	movs	r0, #5
 8005afa:	f7ff ffcb 	bl	8005a94 <LcdDelay_ms>
	/* Third goo! */
	LcdCmd4bit(0x03);
 8005afe:	2003      	movs	r0, #3
 8005b00:	f000 f8e8 	bl	8005cd4 <LcdCmd4bit>
	LcdDelay_ms(5);
 8005b04:	2005      	movs	r0, #5
 8005b06:	f7ff ffc5 	bl	8005a94 <LcdDelay_ms>
	/* Set 4-bit interface */
	LcdCmd4bit(0x02);
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	f000 f8e2 	bl	8005cd4 <LcdCmd4bit>
	LcdDelay_ms(5);
 8005b10:	2005      	movs	r0, #5
 8005b12:	f7ff ffbf 	bl	8005a94 <LcdDelay_ms>
	/* Set # lines, font size, etc. */
	LcdCmd(LCD_FUNCTIONSET | Options.DisplayFunction);
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <LcdInit+0xa4>)
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	f043 0320 	orr.w	r3, r3, #32
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f8be 	bl	8005ca2 <LcdCmd>
	/* Turn the display on with no cursor or blinking default */
	Options.DisplayControl = LCD_DISPLAYON;
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <LcdInit+0xa4>)
 8005b28:	2204      	movs	r2, #4
 8005b2a:	701a      	strb	r2, [r3, #0]
	LcdDisplayOn();
 8005b2c:	f000 f81e 	bl	8005b6c <LcdDisplayOn>
	LcdClear();
 8005b30:	f000 f812 	bl	8005b58 <LcdClear>
	/* Default font directions */
	Options.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <LcdInit+0xa4>)
 8005b36:	2202      	movs	r2, #2
 8005b38:	709a      	strb	r2, [r3, #2]
	LcdCmd(LCD_ENTRYMODESET | Options.DisplayMode);
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <LcdInit+0xa4>)
 8005b3c:	789b      	ldrb	r3, [r3, #2]
 8005b3e:	f043 0304 	orr.w	r3, r3, #4
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f8ac 	bl	8005ca2 <LcdCmd>
	LcdDelay_ms(5);
 8005b4a:	2005      	movs	r0, #5
 8005b4c:	f7ff ffa2 	bl	8005a94 <LcdDelay_ms>
}
 8005b50:	bf00      	nop
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200004c4 	.word	0x200004c4

08005b58 <LcdClear>:

/**
 * @brief  Clear the display.
 */
void LcdClear(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
	LcdCmd(LCD_CLEARDISPLAY);
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	f000 f8a0 	bl	8005ca2 <LcdCmd>
	LcdDelay_ms(5);
 8005b62:	2005      	movs	r0, #5
 8005b64:	f7ff ff96 	bl	8005a94 <LcdDelay_ms>
}
 8005b68:	bf00      	nop
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <LcdDisplayOn>:

/**
 * @brief  Turn the display on.
 */
void LcdDisplayOn(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
	Options.DisplayControl |= LCD_DISPLAYON;
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <LcdDisplayOn+0x28>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f043 0304 	orr.w	r3, r3, #4
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <LcdDisplayOn+0x28>)
 8005b7c:	701a      	strb	r2, [r3, #0]
	LcdCmd(LCD_DISPLAYCONTROL | Options.DisplayControl);
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <LcdDisplayOn+0x28>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f043 0308 	orr.w	r3, r3, #8
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f88a 	bl	8005ca2 <LcdCmd>
}
 8005b8e:	bf00      	nop
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200004c4 	.word	0x200004c4

08005b98 <LcdPuts>:
 * @param  x The X position to start printing.
 * @param  y The Y position to start printing.
 * @param  str The string to print.
 */
void LcdPuts(uint8_t x, uint8_t y, char const *str)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	603a      	str	r2, [r7, #0]
 8005ba2:	71fb      	strb	r3, [r7, #7]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	71bb      	strb	r3, [r7, #6]
	LcdCursorSet(x, y);
 8005ba8:	79ba      	ldrb	r2, [r7, #6]
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f8da 	bl	8005d68 <LcdCursorSet>
	while (*str)
 8005bb4:	e040      	b.n	8005c38 <LcdPuts+0xa0>
    {
		if (Options.currentX >= _LCD_COLS)
 8005bb6:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <LcdPuts+0xb4>)
 8005bb8:	78db      	ldrb	r3, [r3, #3]
 8005bba:	2b13      	cmp	r3, #19
 8005bbc:	d910      	bls.n	8005be0 <LcdPuts+0x48>
       {
			Options.currentX = 0;
 8005bbe:	4b23      	ldr	r3, [pc, #140]	; (8005c4c <LcdPuts+0xb4>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	70da      	strb	r2, [r3, #3]
			Options.currentY++;
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <LcdPuts+0xb4>)
 8005bc6:	791b      	ldrb	r3, [r3, #4]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <LcdPuts+0xb4>)
 8005bce:	711a      	strb	r2, [r3, #4]
			LcdCursorSet(Options.currentX, Options.currentY);
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <LcdPuts+0xb4>)
 8005bd2:	78db      	ldrb	r3, [r3, #3]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <LcdPuts+0xb4>)
 8005bd6:	7912      	ldrb	r2, [r2, #4]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f8c4 	bl	8005d68 <LcdCursorSet>
		}
		if (*str == '\n')
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b0a      	cmp	r3, #10
 8005be6:	d10e      	bne.n	8005c06 <LcdPuts+0x6e>
        {
			Options.currentY++;
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <LcdPuts+0xb4>)
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <LcdPuts+0xb4>)
 8005bf2:	711a      	strb	r2, [r3, #4]
			LcdCursorSet(Options.currentX, Options.currentY);
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <LcdPuts+0xb4>)
 8005bf6:	78db      	ldrb	r3, [r3, #3]
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <LcdPuts+0xb4>)
 8005bfa:	7912      	ldrb	r2, [r2, #4]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f8b2 	bl	8005d68 <LcdCursorSet>
 8005c04:	e015      	b.n	8005c32 <LcdPuts+0x9a>
		}
		else if (*str == '\r')
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b0d      	cmp	r3, #13
 8005c0c:	d106      	bne.n	8005c1c <LcdPuts+0x84>
		{
			LcdCursorSet(0, Options.currentY);
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <LcdPuts+0xb4>)
 8005c10:	791b      	ldrb	r3, [r3, #4]
 8005c12:	4619      	mov	r1, r3
 8005c14:	2000      	movs	r0, #0
 8005c16:	f000 f8a7 	bl	8005d68 <LcdCursorSet>
 8005c1a:	e00a      	b.n	8005c32 <LcdPuts+0x9a>
		}
		else
		{
			LcdData(*str);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f889 	bl	8005d38 <LcdData>
			Options.currentX++;
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <LcdPuts+0xb4>)
 8005c28:	78db      	ldrb	r3, [r3, #3]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <LcdPuts+0xb4>)
 8005c30:	70da      	strb	r2, [r3, #3]
		}
		str++;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	603b      	str	r3, [r7, #0]
	while (*str)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1ba      	bne.n	8005bb6 <LcdPuts+0x1e>
	}
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200004c4 	.word	0x200004c4

08005c50 <LcdCreateChar>:
 * @brief  Create a custom character.
 * @param  location The location of the custom character.
 * @param  data The data for the custom character.
 */
void LcdCreateChar(uint8_t location, uint8_t const *data)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	6039      	str	r1, [r7, #0]
 8005c5a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* We have 8 locations available for custom characters */
	location &= 0x07;
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	71fb      	strb	r3, [r7, #7]
	LcdCmd(LCD_SETCGRAMADDR | (location << 3));
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c6e:	b25b      	sxtb	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f815 	bl	8005ca2 <LcdCmd>
	
	for (i = 0; i < 8; i++) {
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	e009      	b.n	8005c92 <LcdCreateChar+0x42>
		LcdData(data[i]);
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	4413      	add	r3, r2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f856 	bl	8005d38 <LcdData>
	for (i = 0; i < 8; i++) {
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b07      	cmp	r3, #7
 8005c96:	d9f2      	bls.n	8005c7e <LcdCreateChar+0x2e>
	}
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <LcdCmd>:
/**
 * @brief  Send a command to the LCD.
 * @param  cmd The command to send.
 */
void LcdCmd(uint8_t cmd)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	4603      	mov	r3, r0
 8005caa:	71fb      	strb	r3, [r7, #7]
	LcdRstLow();
 8005cac:	f7ff fe6c 	bl	8005988 <LcdRstLow>
	LcdCmd4bit(cmd >> 4);
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f80c 	bl	8005cd4 <LcdCmd4bit>
	LcdCmd4bit(cmd & 0x0F);
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 f805 	bl	8005cd4 <LcdCmd4bit>
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <LcdCmd4bit>:
/**
 * @brief  Send a 4-bit command to the LCD.
 * @param  cmd The 4-bit command to send.
 */
void LcdCmd4bit(uint8_t cmd)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Lcd7_GPIO_Port, Lcd7_Pin, (GPIO_PinState)(cmd & 0x08));
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	2108      	movs	r1, #8
 8005cea:	4812      	ldr	r0, [pc, #72]	; (8005d34 <LcdCmd4bit+0x60>)
 8005cec:	f7fc fe64 	bl	80029b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd6_GPIO_Port, Lcd6_Pin, (GPIO_PinState)(cmd & 0x04));
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	480d      	ldr	r0, [pc, #52]	; (8005d34 <LcdCmd4bit+0x60>)
 8005cfe:	f7fc fe5b 	bl	80029b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd5_GPIO_Port, Lcd5_Pin, (GPIO_PinState)(cmd & 0x02));
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	4809      	ldr	r0, [pc, #36]	; (8005d34 <LcdCmd4bit+0x60>)
 8005d10:	f7fc fe52 	bl	80029b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd4_GPIO_Port, Lcd4_Pin, (GPIO_PinState)(cmd & 0x01));
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4804      	ldr	r0, [pc, #16]	; (8005d34 <LcdCmd4bit+0x60>)
 8005d22:	f7fc fe49 	bl	80029b8 <HAL_GPIO_WritePin>
	LcdEnBlink();
 8005d26:	f7ff fe5f 	bl	80059e8 <LcdEnBlink>
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40011000 	.word	0x40011000

08005d38 <LcdData>:
/**
 * @brief  Send data to the LCD.
 * @param  data The data to send.
 */
void LcdData(uint8_t data)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	71fb      	strb	r3, [r7, #7]
	LcdRstHigh();
 8005d42:	f7ff fe2d 	bl	80059a0 <LcdRstHigh>
	LcdCmd4bit(data >> 4);
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ffc1 	bl	8005cd4 <LcdCmd4bit>
	LcdCmd4bit(data & 0x0F);
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff ffba 	bl	8005cd4 <LcdCmd4bit>
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <LcdCursorSet>:
 * @brief  Set the cursor position.
 * @param  col The column position.
 * @param  row The row position.
 */
void LcdCursorSet(uint8_t col, uint8_t row)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460a      	mov	r2, r1
 8005d72:	71fb      	strb	r3, [r7, #7]
 8005d74:	4613      	mov	r3, r2
 8005d76:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8005d78:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <LcdCursorSet+0x54>)
 8005d7a:	60fb      	str	r3, [r7, #12]
	if (row >= _LCD_ROWS)
 8005d7c:	79bb      	ldrb	r3, [r7, #6]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d901      	bls.n	8005d86 <LcdCursorSet+0x1e>
		row = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	71bb      	strb	r3, [r7, #6]
	Options.currentX = col;
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <LcdCursorSet+0x58>)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	70d3      	strb	r3, [r2, #3]
	Options.currentY = row;
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <LcdCursorSet+0x58>)
 8005d8e:	79bb      	ldrb	r3, [r7, #6]
 8005d90:	7113      	strb	r3, [r2, #4]
	LcdCmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8005d92:	79bb      	ldrb	r3, [r7, #6]
 8005d94:	3310      	adds	r3, #16
 8005d96:	443b      	add	r3, r7
 8005d98:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	4413      	add	r3, r2
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff ff78 	bl	8005ca2 <LcdCmd>
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	54144000 	.word	0x54144000
 8005dc0:	200004c4 	.word	0x200004c4

08005dc4 <SetFrequency>:
/**
 * @brief This function change frequency of your PWM.
 * @param frequency Is period of the PWM.
 */
void SetFrequency(int frequency)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	 * Frequency_PWM = It is the input of function that user want to set
	 * Frequency_CLK = 72 MHz
	 * APRx = Auto-reload register
	 * PSCx = The value of prescaler */
	volatile static uint32_t PWM_APR;
	PWM_APR = (PWM_CLK/frequency) /*- 1*/ ;
 8005dcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <SetFrequency+0x2c>)
 8005dda:	601a      	str	r2, [r3, #0]
	TIM3->ARR = PWM_APR;
 8005ddc:	4a05      	ldr	r2, [pc, #20]	; (8005df4 <SetFrequency+0x30>)
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <SetFrequency+0x2c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000620 	.word	0x20000620
 8005df4:	40000400 	.word	0x40000400

08005df8 <SetDutyCycle>:
/**
 * @brief This function change Ton/Width of the PWM.
 * @param Ton Is width that set for PWM.
 */
void SetDutyCycle(float Ton)
{
 8005df8:	b5b0      	push	{r4, r5, r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	/* DutyCycle = CCRx/APRx = Ton/(Ton + Toff)
	 * CCRx = The value for compare */
	float dutycycle = ((Ton/1000.000) * (Frequency/1.000));
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fa fb87 	bl	8000514 <__aeabi_f2d>
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <SetDutyCycle+0x100>)
 8005e0c:	f7fa fd04 	bl	8000818 <__aeabi_ddiv>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	4b38      	ldr	r3, [pc, #224]	; (8005efc <SetDutyCycle+0x104>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa fb67 	bl	80004f0 <__aeabi_i2d>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fbcb 	bl	80005c4 <__aeabi_dmul>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	f7fa febd 	bl	8000bb4 <__aeabi_d2f>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	60bb      	str	r3, [r7, #8]

	assert(((dutycycle*100) >= 0.0F) && ((dutycycle*100) <= 100.0F));
 8005e3e:	4930      	ldr	r1, [pc, #192]	; (8005f00 <SetDutyCycle+0x108>)
 8005e40:	68b8      	ldr	r0, [r7, #8]
 8005e42:	f7fb f815 	bl	8000e70 <__aeabi_fmul>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fb f9bf 	bl	80011d4 <__aeabi_fcmpge>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <SetDutyCycle+0x68>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	461c      	mov	r4, r3
 8005e60:	b2e3      	uxtb	r3, r4
 8005e62:	f083 0301 	eor.w	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <SetDutyCycle+0xa0>
 8005e6c:	4924      	ldr	r1, [pc, #144]	; (8005f00 <SetDutyCycle+0x108>)
 8005e6e:	68b8      	ldr	r0, [r7, #8]
 8005e70:	f7fa fffe 	bl	8000e70 <__aeabi_fmul>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2201      	movs	r2, #1
 8005e78:	4614      	mov	r4, r2
 8005e7a:	4921      	ldr	r1, [pc, #132]	; (8005f00 <SetDutyCycle+0x108>)
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fb f99f 	bl	80011c0 <__aeabi_fcmple>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <SetDutyCycle+0x94>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	461c      	mov	r4, r3
 8005e8c:	b2e3      	uxtb	r3, r4
 8005e8e:	f083 0301 	eor.w	r3, r3, #1
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <SetDutyCycle+0xac>
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <SetDutyCycle+0x10c>)
 8005e9a:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <SetDutyCycle+0x110>)
 8005e9c:	219d      	movs	r1, #157	; 0x9d
 8005e9e:	481b      	ldr	r0, [pc, #108]	; (8005f0c <SetDutyCycle+0x114>)
 8005ea0:	f001 fc22 	bl	80076e8 <__assert_func>

	uint32_t newRegVal = (uint32_t)roundf((float)(TIM3->ARR /*+ 1*/) * dutycycle);
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <SetDutyCycle+0x118>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fa ff89 	bl	8000dc0 <__aeabi_ui2f>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa ffdc 	bl	8000e70 <__aeabi_fmul>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f006 f814 	bl	800bee8 <roundf>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fb f9c0 	bl	8001248 <__aeabi_f2uiz>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]

    //In case of the dutycycle being calculated as higher than the reload register, cap it to the reload register
	if(newRegVal > TIM3->ARR)
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <SetDutyCycle+0x118>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d902      	bls.n	8005edc <SetDutyCycle+0xe4>
		newRegVal = TIM3->ARR;
 8005ed6:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <SetDutyCycle+0x118>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	60fb      	str	r3, [r7, #12]

	// If using Channel 1 change it to CCR1
	TIM3->CCR3 = (uint32_t)(roundf(newRegVal));
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7fa ff6f 	bl	8000dc0 <__aeabi_ui2f>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4c0a      	ldr	r4, [pc, #40]	; (8005f10 <SetDutyCycle+0x118>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fb f9ae 	bl	8001248 <__aeabi_f2uiz>
 8005eec:	4603      	mov	r3, r0
 8005eee:	63e3      	str	r3, [r4, #60]	; 0x3c
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, TIM3->CCR1);
}
 8005ef0:	bf00      	nop
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef8:	408f4000 	.word	0x408f4000
 8005efc:	200004e8 	.word	0x200004e8
 8005f00:	42c80000 	.word	0x42c80000
 8005f04:	0800bf48 	.word	0x0800bf48
 8005f08:	0800c100 	.word	0x0800c100
 8005f0c:	0800bf84 	.word	0x0800bf84
 8005f10:	40000400 	.word	0x40000400

08005f14 <HLine>:

/**
 * @brief It draws lines in lcd.
 */
void HLine(char x, char y, uint8_t KindofLine, char mem8)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	71fb      	strb	r3, [r7, #7]
 8005f26:	4603      	mov	r3, r0
 8005f28:	71bb      	strb	r3, [r7, #6]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	717b      	strb	r3, [r7, #5]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	713b      	strb	r3, [r7, #4]
	LcdCreateChar(mem8, Line[KindofLine]);
 8005f32:	797b      	ldrb	r3, [r7, #5]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4a0a      	ldr	r2, [pc, #40]	; (8005f60 <HLine+0x4c>)
 8005f38:	441a      	add	r2, r3
 8005f3a:	793b      	ldrb	r3, [r7, #4]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fe86 	bl	8005c50 <LcdCreateChar>
	LcdCursorSet(x, y);
 8005f44:	79ba      	ldrb	r2, [r7, #6]
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff ff0c 	bl	8005d68 <LcdCursorSet>
	LcdData(mem8);
 8005f50:	793b      	ldrb	r3, [r7, #4]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fef0 	bl	8005d38 <LcdData>
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}
 8005f60:	0800c058 	.word	0x0800c058

08005f64 <ContactUs>:
 * @brief It runs when the user select contact us menu
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char ContactUs(char input)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
	static uint8_t enterFunction = 1;
	if (enterFunction == 1)
 8005f6e:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <ContactUs+0x7c>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d115      	bne.n	8005fa2 <ContactUs+0x3e>
	{
		LcdClear();
 8005f76:	f7ff fdef 	bl	8005b58 <LcdClear>
		LcdPuts(1, LCD_LINE1, "Tel:021-66760674");
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <ContactUs+0x80>)
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7ff fe0a 	bl	8005b98 <LcdPuts>
		LcdPuts(1, LCD_LINE2, "Tel:09191143937");
 8005f84:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <ContactUs+0x84>)
 8005f86:	2101      	movs	r1, #1
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f7ff fe05 	bl	8005b98 <LcdPuts>
		LcdPuts(1, LCD_LINE3, "website");
 8005f8e:	4a17      	ldr	r2, [pc, #92]	; (8005fec <ContactUs+0x88>)
 8005f90:	2102      	movs	r1, #2
 8005f92:	2001      	movs	r0, #1
 8005f94:	f7ff fe00 	bl	8005b98 <LcdPuts>
		LcdPuts(2, LCD_LINE4, "Nekoorad.com");
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <ContactUs+0x8c>)
 8005f9a:	2103      	movs	r1, #3
 8005f9c:	2002      	movs	r0, #2
 8005f9e:	f7ff fdfb 	bl	8005b98 <LcdPuts>
	}
	enterFunction = 0;
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <ContactUs+0x7c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
	if (input == KEY_STANDBY)
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d104      	bne.n	8005fb8 <ContactUs+0x54>
	{
		enterFunction = 1;
 8005fae:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <ContactUs+0x7c>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8005fb4:	2314      	movs	r3, #20
 8005fb6:	e00e      	b.n	8005fd6 <ContactUs+0x72>
	}
	else if (input == KEY_BACK)
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d10a      	bne.n	8005fd4 <ContactUs+0x70>
	{
		refreshLcd = true; // atention to DisplyRunMenu	function
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <ContactUs+0x90>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]
		variable = ST_CHANGE_MENU;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <ContactUs+0x94>)
 8005fc6:	2250      	movs	r2, #80	; 0x50
 8005fc8:	701a      	strb	r2, [r3, #0]
		enterFunction = 1;
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <ContactUs+0x7c>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 8005fd0:	231e      	movs	r3, #30
 8005fd2:	e000      	b.n	8005fd6 <ContactUs+0x72>
	}

	return ST_CONTACT_US;
 8005fd4:	2364      	movs	r3, #100	; 0x64
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000174 	.word	0x20000174
 8005fe4:	0800bf94 	.word	0x0800bf94
 8005fe8:	0800bfa8 	.word	0x0800bfa8
 8005fec:	0800bfb8 	.word	0x0800bfb8
 8005ff0:	0800bfc0 	.word	0x0800bfc0
 8005ff4:	200004e0 	.word	0x200004e0
 8005ff8:	200004c9 	.word	0x200004c9

08005ffc <WeldDisplay>:

/**
 * @brief It shows weld animation.
 */
void WeldDisplay(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
	uint8_t ArcNumber = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	71fb      	strb	r3, [r7, #7]
	while (ArcNumber < 5)
 8006006:	e019      	b.n	800603c <WeldDisplay+0x40>
	{
		if (flcd100ms)
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <WeldDisplay+0x50>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d014      	beq.n	800603c <WeldDisplay+0x40>
		{
			LcdCreateChar(LCD_Mem7, arcSymbol[ArcNumber]);
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <WeldDisplay+0x54>)
 8006018:	4413      	add	r3, r2
 800601a:	4619      	mov	r1, r3
 800601c:	2007      	movs	r0, #7
 800601e:	f7ff fe17 	bl	8005c50 <LcdCreateChar>
			LcdCursorSet(10, LCD_LINE1);
 8006022:	2100      	movs	r1, #0
 8006024:	200a      	movs	r0, #10
 8006026:	f7ff fe9f 	bl	8005d68 <LcdCursorSet>
			LcdData(LCD_Mem7);
 800602a:	2007      	movs	r0, #7
 800602c:	f7ff fe84 	bl	8005d38 <LcdData>
			ArcNumber++;
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	3301      	adds	r3, #1
 8006034:	71fb      	strb	r3, [r7, #7]
			flcd100ms = false;
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <WeldDisplay+0x50>)
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
	while (ArcNumber < 5)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d9e2      	bls.n	8006008 <WeldDisplay+0xc>
		}

	}
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000496 	.word	0x20000496
 8006050:	0800c030 	.word	0x0800c030

08006054 <DisplayRunMenu>:
/**
 * @brief This function displays LCD texts.
 * @note This function displays LCD texts each 500 mS or if when a change in data occurs.
 */
void DisplayRunMenu(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
	char lcdBuffer[12];

	if (flagRefreshValue500ms == true)
 800605a:	4b60      	ldr	r3, [pc, #384]	; (80061dc <DisplayRunMenu+0x188>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d04f      	beq.n	8006104 <DisplayRunMenu+0xb0>
	{
		for (uint8_t n = 0; n < 4; n++)
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]
 8006068:	e049      	b.n	80060fe <DisplayRunMenu+0xaa>
		{
			/* Display values */
			switch (elementType[n])
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	4a5c      	ldr	r2, [pc, #368]	; (80061e0 <DisplayRunMenu+0x18c>)
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d02c      	beq.n	80060ce <DisplayRunMenu+0x7a>
 8006074:	2b04      	cmp	r3, #4
 8006076:	dc3c      	bgt.n	80060f2 <DisplayRunMenu+0x9e>
 8006078:	2b01      	cmp	r3, #1
 800607a:	d002      	beq.n	8006082 <DisplayRunMenu+0x2e>
 800607c:	2b03      	cmp	r3, #3
 800607e:	d015      	beq.n	80060ac <DisplayRunMenu+0x58>
 8006080:	e037      	b.n	80060f2 <DisplayRunMenu+0x9e>
			{
			case ET_FLT:	sprintf(lcdBuffer, "%-4.1f", pValues[n]->fval);
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	4a57      	ldr	r2, [pc, #348]	; (80061e4 <DisplayRunMenu+0x190>)
 8006086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fa41 	bl	8000514 <__aeabi_f2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4638      	mov	r0, r7
 8006098:	4953      	ldr	r1, [pc, #332]	; (80061e8 <DisplayRunMenu+0x194>)
 800609a:	f002 fb3f 	bl	800871c <siprintf>
			    LcdPuts(14, n, lcdBuffer);
 800609e:	463a      	mov	r2, r7
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	4619      	mov	r1, r3
 80060a4:	200e      	movs	r0, #14
 80060a6:	f7ff fd77 	bl	8005b98 <LcdPuts>
				break;
 80060aa:	e022      	b.n	80060f2 <DisplayRunMenu+0x9e>

			case ET_INT:
				sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	4a4d      	ldr	r2, [pc, #308]	; (80061e4 <DisplayRunMenu+0x190>)
 80060b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	463b      	mov	r3, r7
 80060b8:	494c      	ldr	r1, [pc, #304]	; (80061ec <DisplayRunMenu+0x198>)
 80060ba:	4618      	mov	r0, r3
 80060bc:	f002 fb2e 	bl	800871c <siprintf>
				LcdPuts(14, n, lcdBuffer);
 80060c0:	463a      	mov	r2, r7
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	4619      	mov	r1, r3
 80060c6:	200e      	movs	r0, #14
 80060c8:	f7ff fd66 	bl	8005b98 <LcdPuts>
				break;
 80060cc:	e011      	b.n	80060f2 <DisplayRunMenu+0x9e>

			case ET_FSTR:
				LcdPuts(14, n, pValues[n]->pText[pValues[n]->strNum]);
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	4a44      	ldr	r2, [pc, #272]	; (80061e4 <DisplayRunMenu+0x190>)
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	4942      	ldr	r1, [pc, #264]	; (80061e4 <DisplayRunMenu+0x190>)
 80060da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80060de:	f992 2010 	ldrsb.w	r2, [r2, #16]
 80060e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	4619      	mov	r1, r3
 80060ea:	200e      	movs	r0, #14
 80060ec:	f7ff fd54 	bl	8005b98 <LcdPuts>
				break;
 80060f0:	bf00      	nop
				/*case ET_ULNG:	sprintf(lcdBuffer, "%lu", pValues[n]->ulval);
								LCD_Puts(14,n, lcdBuffer);
								break;*/

			}
			flagRefreshValue500ms = false;
 80060f2:	4b3a      	ldr	r3, [pc, #232]	; (80061dc <DisplayRunMenu+0x188>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
		for (uint8_t n = 0; n < 4; n++)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	3301      	adds	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d9b2      	bls.n	800606a <DisplayRunMenu+0x16>
		}
	}

	// Plain menu text
	if (refreshLcd == true)
 8006104:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <DisplayRunMenu+0x19c>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d163      	bne.n	80061d4 <DisplayRunMenu+0x180>
	{
		LcdClear();
 800610c:	f7ff fd24 	bl	8005b58 <LcdClear>
		LcdCursorSet(0, cursorLine);
 8006110:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <DisplayRunMenu+0x1a0>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	4619      	mov	r1, r3
 8006116:	2000      	movs	r0, #0
 8006118:	f7ff fe26 	bl	8005d68 <LcdCursorSet>
		LcdData(0x7E); //  "->" character
 800611c:	207e      	movs	r0, #126	; 0x7e
 800611e:	f7ff fe0b 	bl	8005d38 <LcdData>

		for (uint8_t n = 0; n < 4; n++)
 8006122:	2300      	movs	r3, #0
 8006124:	73bb      	strb	r3, [r7, #14]
 8006126:	e04f      	b.n	80061c8 <DisplayRunMenu+0x174>
		{
			// refresh 
			LcdPuts(1, n, statetext[n]);
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	4a33      	ldr	r2, [pc, #204]	; (80061f8 <DisplayRunMenu+0x1a4>)
 800612c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	4619      	mov	r1, r3
 8006134:	2001      	movs	r0, #1
 8006136:	f7ff fd2f 	bl	8005b98 <LcdPuts>

			/* Display values */
			switch (elementType[n])
 800613a:	7bbb      	ldrb	r3, [r7, #14]
 800613c:	4a28      	ldr	r2, [pc, #160]	; (80061e0 <DisplayRunMenu+0x18c>)
 800613e:	5cd3      	ldrb	r3, [r2, r3]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d02c      	beq.n	800619e <DisplayRunMenu+0x14a>
 8006144:	2b04      	cmp	r3, #4
 8006146:	dc3c      	bgt.n	80061c2 <DisplayRunMenu+0x16e>
 8006148:	2b01      	cmp	r3, #1
 800614a:	d002      	beq.n	8006152 <DisplayRunMenu+0xfe>
 800614c:	2b03      	cmp	r3, #3
 800614e:	d015      	beq.n	800617c <DisplayRunMenu+0x128>
 8006150:	e037      	b.n	80061c2 <DisplayRunMenu+0x16e>
			{
			case ET_FLT:	sprintf(lcdBuffer, "%-4.1f", pValues[n]->fval);
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	4a23      	ldr	r2, [pc, #140]	; (80061e4 <DisplayRunMenu+0x190>)
 8006156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f7fa f9d9 	bl	8000514 <__aeabi_f2d>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4638      	mov	r0, r7
 8006168:	491f      	ldr	r1, [pc, #124]	; (80061e8 <DisplayRunMenu+0x194>)
 800616a:	f002 fad7 	bl	800871c <siprintf>
			                LcdPuts(14, n, lcdBuffer);
 800616e:	463a      	mov	r2, r7
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	4619      	mov	r1, r3
 8006174:	200e      	movs	r0, #14
 8006176:	f7ff fd0f 	bl	8005b98 <LcdPuts>
				            break;
 800617a:	e022      	b.n	80061c2 <DisplayRunMenu+0x16e>

			case ET_INT:	sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <DisplayRunMenu+0x190>)
 8006180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	463b      	mov	r3, r7
 8006188:	4918      	ldr	r1, [pc, #96]	; (80061ec <DisplayRunMenu+0x198>)
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fac6 	bl	800871c <siprintf>
			                LcdPuts(14, n, lcdBuffer);
 8006190:	463a      	mov	r2, r7
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	4619      	mov	r1, r3
 8006196:	200e      	movs	r0, #14
 8006198:	f7ff fcfe 	bl	8005b98 <LcdPuts>
				            break;
 800619c:	e011      	b.n	80061c2 <DisplayRunMenu+0x16e>

			case ET_FSTR:	LcdPuts(14, n, pValues[n]->pText[pValues[n]->strNum]);
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <DisplayRunMenu+0x190>)
 80061a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a6:	7bba      	ldrb	r2, [r7, #14]
 80061a8:	490e      	ldr	r1, [pc, #56]	; (80061e4 <DisplayRunMenu+0x190>)
 80061aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80061ae:	f992 2010 	ldrsb.w	r2, [r2, #16]
 80061b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	4619      	mov	r1, r3
 80061ba:	200e      	movs	r0, #14
 80061bc:	f7ff fcec 	bl	8005b98 <LcdPuts>
				            break;
 80061c0:	bf00      	nop
		for (uint8_t n = 0; n < 4; n++)
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	3301      	adds	r3, #1
 80061c6:	73bb      	strb	r3, [r7, #14]
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d9ac      	bls.n	8006128 <DisplayRunMenu+0xd4>
				                LCD_Puts(14,n, lcdBuffer);
								break;*/
			}
		}

		refreshLcd = false;
 80061ce:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <DisplayRunMenu+0x19c>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
	}
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	2000049b 	.word	0x2000049b
 80061e0:	200004dc 	.word	0x200004dc
 80061e4:	20000514 	.word	0x20000514
 80061e8:	0800bfd0 	.word	0x0800bfd0
 80061ec:	0800bfd8 	.word	0x0800bfd8
 80061f0:	200004e0 	.word	0x200004e0
 80061f4:	200004ca 	.word	0x200004ca
 80061f8:	200004cc 	.word	0x200004cc

080061fc <VariableMachine>:
 * @brief This function shifts between the different variables.
 * @param stimuli is Button input.
 * @return nextState is next state according to the current state and button input.
 */
unsigned char VariableMachine(unsigned char stimuli)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
	unsigned char nextVariable = variable; // Default stay in same state
 8006206:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <VariableMachine+0x7c>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	73fb      	strb	r3, [r7, #15]
	unsigned char i, j;
	uint8_t cursorBuffer;

	for (i = 0; (j = StateNextVariable[i].variable); i++)
 800620c:	2300      	movs	r3, #0
 800620e:	73bb      	strb	r3, [r7, #14]
 8006210:	e022      	b.n	8006258 <VariableMachine+0x5c>
	{
		if (j == variable &&
 8006212:	4b19      	ldr	r3, [pc, #100]	; (8006278 <VariableMachine+0x7c>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	7b7a      	ldrb	r2, [r7, #13]
 8006218:	429a      	cmp	r2, r3
 800621a:	d11a      	bne.n	8006252 <VariableMachine+0x56>
				StateNextVariable[i].input == stimuli)
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	4a17      	ldr	r2, [pc, #92]	; (800627c <VariableMachine+0x80>)
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	785b      	ldrb	r3, [r3, #1]
		if (j == variable &&
 8006226:	79fa      	ldrb	r2, [r7, #7]
 8006228:	429a      	cmp	r2, r3
 800622a:	d112      	bne.n	8006252 <VariableMachine+0x56>

		{
			nextVariable = StateNextVariable[i].nextVariable;
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	4a13      	ldr	r2, [pc, #76]	; (800627c <VariableMachine+0x80>)
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	789b      	ldrb	r3, [r3, #2]
 8006236:	73fb      	strb	r3, [r7, #15]
			cursorBuffer = StateNextVariable[i].cursorLine;
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	4a10      	ldr	r2, [pc, #64]	; (800627c <VariableMachine+0x80>)
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	78db      	ldrb	r3, [r3, #3]
 8006242:	733b      	strb	r3, [r7, #12]

			if (cursorBuffer != LCD_LINE_RECENT)
 8006244:	7b3b      	ldrb	r3, [r7, #12]
 8006246:	2b04      	cmp	r3, #4
 8006248:	d00f      	beq.n	800626a <VariableMachine+0x6e>
				cursorLine = cursorBuffer;
 800624a:	4a0d      	ldr	r2, [pc, #52]	; (8006280 <VariableMachine+0x84>)
 800624c:	7b3b      	ldrb	r3, [r7, #12]
 800624e:	7013      	strb	r3, [r2, #0]

			break;
 8006250:	e00b      	b.n	800626a <VariableMachine+0x6e>
	for (i = 0; (j = StateNextVariable[i].variable); i++)
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	3301      	adds	r3, #1
 8006256:	73bb      	strb	r3, [r7, #14]
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	4a08      	ldr	r2, [pc, #32]	; (800627c <VariableMachine+0x80>)
 800625c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8006260:	737b      	strb	r3, [r7, #13]
 8006262:	7b7b      	ldrb	r3, [r7, #13]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1d4      	bne.n	8006212 <VariableMachine+0x16>
 8006268:	e000      	b.n	800626c <VariableMachine+0x70>
			break;
 800626a:	bf00      	nop
		}
	}
	return nextVariable;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr
 8006278:	200004c9 	.word	0x200004c9
 800627c:	20000068 	.word	0x20000068
 8006280:	200004ca 	.word	0x200004ca

08006284 <StandBy>:
 * @brief This function run when is in standby mode.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char StandBy(char input)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
	Led1(0);
 800628e:	2200      	movs	r2, #0
 8006290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006294:	489f      	ldr	r0, [pc, #636]	; (8006514 <StandBy+0x290>)
 8006296:	f7fc fb8f 	bl	80029b8 <HAL_GPIO_WritePin>
	Led2(0);
 800629a:	2200      	movs	r2, #0
 800629c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062a0:	489c      	ldr	r0, [pc, #624]	; (8006514 <StandBy+0x290>)
 80062a2:	f7fc fb89 	bl	80029b8 <HAL_GPIO_WritePin>
	Led3(0);
 80062a6:	2200      	movs	r2, #0
 80062a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062ac:	4899      	ldr	r0, [pc, #612]	; (8006514 <StandBy+0x290>)
 80062ae:	f7fc fb83 	bl	80029b8 <HAL_GPIO_WritePin>
	Led4(0);
 80062b2:	2200      	movs	r2, #0
 80062b4:	2104      	movs	r1, #4
 80062b6:	4898      	ldr	r0, [pc, #608]	; (8006518 <StandBy+0x294>)
 80062b8:	f7fc fb7e 	bl	80029b8 <HAL_GPIO_WritePin>

    RealyLow(0);
 80062bc:	2200      	movs	r2, #0
 80062be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062c2:	4894      	ldr	r0, [pc, #592]	; (8006514 <StandBy+0x290>)
 80062c4:	f7fc fb78 	bl	80029b8 <HAL_GPIO_WritePin>
    RealyMed(0);
 80062c8:	2200      	movs	r2, #0
 80062ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ce:	4893      	ldr	r0, [pc, #588]	; (800651c <StandBy+0x298>)
 80062d0:	f7fc fb72 	bl	80029b8 <HAL_GPIO_WritePin>
    RealyHigh(0);
 80062d4:	2200      	movs	r2, #0
 80062d6:	2108      	movs	r1, #8
 80062d8:	4891      	ldr	r0, [pc, #580]	; (8006520 <StandBy+0x29c>)
 80062da:	f7fc fb6d 	bl	80029b8 <HAL_GPIO_WritePin>

    CountRunTime = 0;
 80062de:	4b91      	ldr	r3, [pc, #580]	; (8006524 <StandBy+0x2a0>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	801a      	strh	r2, [r3, #0]
    CountRamp = 0;
 80062e4:	4b90      	ldr	r3, [pc, #576]	; (8006528 <StandBy+0x2a4>)
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
    PeriodCount = 0;
 80062ec:	4b8f      	ldr	r3, [pc, #572]	; (800652c <StandBy+0x2a8>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	801a      	strh	r2, [r3, #0]
    PwmActive = true;
 80062f2:	4b8f      	ldr	r3, [pc, #572]	; (8006530 <StandBy+0x2ac>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	701a      	strb	r2, [r3, #0]

	flagRythm = false;
 80062f8:	4b8e      	ldr	r3, [pc, #568]	; (8006534 <StandBy+0x2b0>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
	flagRampStart = false;
 80062fe:	4b8e      	ldr	r3, [pc, #568]	; (8006538 <StandBy+0x2b4>)
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
	flagStopPwm = false;
 8006304:	4b8d      	ldr	r3, [pc, #564]	; (800653c <StandBy+0x2b8>)
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]

	SetDutyCycle(0);
 800630a:	f04f 0000 	mov.w	r0, #0
 800630e:	f7ff fd73 	bl	8005df8 <SetDutyCycle>
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8006312:	2108      	movs	r1, #8
 8006314:	488a      	ldr	r0, [pc, #552]	; (8006540 <StandBy+0x2bc>)
 8006316:	f7fe f9e7 	bl	80046e8 <HAL_TIM_PWM_Stop_IT>

	static char x1_dot = 0/*,count1=0*/;
	static uint8_t showARMWELD = 1; // ARMWELD animation in standBy.
	static uint8_t	enterFunction = 1;

	if (enterFunction == 1)
 800631a:	4b8a      	ldr	r3, [pc, #552]	; (8006544 <StandBy+0x2c0>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d108      	bne.n	8006334 <StandBy+0xb0>
	{
		buzzer[BUZZ_NUM] = 1;
 8006322:	4b89      	ldr	r3, [pc, #548]	; (8006548 <StandBy+0x2c4>)
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_DELAY] = 255;
 8006328:	4b87      	ldr	r3, [pc, #540]	; (8006548 <StandBy+0x2c4>)
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	705a      	strb	r2, [r3, #1]
		enterFunction = 0;
 800632e:	4b85      	ldr	r3, [pc, #532]	; (8006544 <StandBy+0x2c0>)
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
	}


	if (reWarning == 0 || warningVar == 0)	//need for show after some second warning occured or not any warnings.
 8006334:	4b85      	ldr	r3, [pc, #532]	; (800654c <StandBy+0x2c8>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <StandBy+0xc2>
 800633c:	4b84      	ldr	r3, [pc, #528]	; (8006550 <StandBy+0x2cc>)
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 80a4 	bne.w	800648e <StandBy+0x20a>
	{
		if (f2lcd100ms)
 8006346:	4b83      	ldr	r3, [pc, #524]	; (8006554 <StandBy+0x2d0>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d075      	beq.n	800643c <StandBy+0x1b8>
		{

			// display animation of medinalTeb first time when turn on after that show "STANDBY"
			if (x1_dot >= 6 && count1 < 19)
 8006350:	4b81      	ldr	r3, [pc, #516]	; (8006558 <StandBy+0x2d4>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b05      	cmp	r3, #5
 8006356:	d958      	bls.n	800640a <StandBy+0x186>
 8006358:	4b80      	ldr	r3, [pc, #512]	; (800655c <StandBy+0x2d8>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b12      	cmp	r3, #18
 800635e:	d854      	bhi.n	800640a <StandBy+0x186>
			{
				count1++;
 8006360:	4b7e      	ldr	r3, [pc, #504]	; (800655c <StandBy+0x2d8>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	b2da      	uxtb	r2, r3
 8006368:	4b7c      	ldr	r3, [pc, #496]	; (800655c <StandBy+0x2d8>)
 800636a:	701a      	strb	r2, [r3, #0]
				if (count1 <= 5)
 800636c:	4b7b      	ldr	r3, [pc, #492]	; (800655c <StandBy+0x2d8>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b05      	cmp	r3, #5
 8006372:	d813      	bhi.n	800639c <StandBy+0x118>
				{
					HLine(9 + count1, LCD_LINE3, LCD_UpLine, LCD_Mem0);
 8006374:	4b79      	ldr	r3, [pc, #484]	; (800655c <StandBy+0x2d8>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	3309      	adds	r3, #9
 800637a:	b2d8      	uxtb	r0, r3
 800637c:	2300      	movs	r3, #0
 800637e:	2202      	movs	r2, #2
 8006380:	2102      	movs	r1, #2
 8006382:	f7ff fdc7 	bl	8005f14 <HLine>
					HLine(10 - count1, LCD_LINE3, LCD_UpLine, LCD_Mem0);
 8006386:	4b75      	ldr	r3, [pc, #468]	; (800655c <StandBy+0x2d8>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	f1c3 030a 	rsb	r3, r3, #10
 800638e:	b2d8      	uxtb	r0, r3
 8006390:	2300      	movs	r3, #0
 8006392:	2202      	movs	r2, #2
 8006394:	2102      	movs	r1, #2
 8006396:	f7ff fdbd 	bl	8005f14 <HLine>
				if (count1 <= 5)
 800639a:	e04b      	b.n	8006434 <StandBy+0x1b0>
				}
				else if (count1 == 6)
 800639c:	4b6f      	ldr	r3, [pc, #444]	; (800655c <StandBy+0x2d8>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d113      	bne.n	80063cc <StandBy+0x148>
				{
					HLine(9 + count1, LCD_LINE2, LCD_RightLine, LCD_Mem1);
 80063a4:	4b6d      	ldr	r3, [pc, #436]	; (800655c <StandBy+0x2d8>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	3309      	adds	r3, #9
 80063aa:	b2d8      	uxtb	r0, r3
 80063ac:	2301      	movs	r3, #1
 80063ae:	2201      	movs	r2, #1
 80063b0:	2101      	movs	r1, #1
 80063b2:	f7ff fdaf 	bl	8005f14 <HLine>
					HLine(10 - count1, LCD_LINE2, LCD_LeftLine, LCD_Mem2);
 80063b6:	4b69      	ldr	r3, [pc, #420]	; (800655c <StandBy+0x2d8>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f1c3 030a 	rsb	r3, r3, #10
 80063be:	b2d8      	uxtb	r0, r3
 80063c0:	2302      	movs	r3, #2
 80063c2:	2203      	movs	r2, #3
 80063c4:	2101      	movs	r1, #1
 80063c6:	f7ff fda5 	bl	8005f14 <HLine>
				if (count1 <= 5)
 80063ca:	e033      	b.n	8006434 <StandBy+0x1b0>
				}
				else if (count1 <= 11)
 80063cc:	4b63      	ldr	r3, [pc, #396]	; (800655c <StandBy+0x2d8>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b0b      	cmp	r3, #11
 80063d2:	d813      	bhi.n	80063fc <StandBy+0x178>
				{
					HLine(21 - count1, LCD_LINE1, LCD_DownLine, LCD_Mem3);
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <StandBy+0x2d8>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f1c3 0315 	rsb	r3, r3, #21
 80063dc:	b2d8      	uxtb	r0, r3
 80063de:	2303      	movs	r3, #3
 80063e0:	2200      	movs	r2, #0
 80063e2:	2100      	movs	r1, #0
 80063e4:	f7ff fd96 	bl	8005f14 <HLine>
					HLine(count1 - 2, LCD_LINE1, LCD_DownLine, LCD_Mem3);
 80063e8:	4b5c      	ldr	r3, [pc, #368]	; (800655c <StandBy+0x2d8>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	3b02      	subs	r3, #2
 80063ee:	b2d8      	uxtb	r0, r3
 80063f0:	2303      	movs	r3, #3
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	f7ff fd8d 	bl	8005f14 <HLine>
				if (count1 <= 5)
 80063fa:	e01b      	b.n	8006434 <StandBy+0x1b0>
				}
				else if (count1 <= 12)
 80063fc:	4b57      	ldr	r3, [pc, #348]	; (800655c <StandBy+0x2d8>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d817      	bhi.n	8006434 <StandBy+0x1b0>
					WeldDisplay();
 8006404:	f7ff fdfa 	bl	8005ffc <WeldDisplay>
				if (count1 <= 5)
 8006408:	e014      	b.n	8006434 <StandBy+0x1b0>

			}
			else if (count1 == 19)
 800640a:	4b54      	ldr	r3, [pc, #336]	; (800655c <StandBy+0x2d8>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b13      	cmp	r3, #19
 8006410:	d111      	bne.n	8006436 <StandBy+0x1b2>
			{
				LcdClear();
 8006412:	f7ff fba1 	bl	8005b58 <LcdClear>
				LcdPuts(7, LCD_LINE2, "STANDBY");
 8006416:	4a52      	ldr	r2, [pc, #328]	; (8006560 <StandBy+0x2dc>)
 8006418:	2101      	movs	r1, #1
 800641a:	2007      	movs	r0, #7
 800641c:	f7ff fbbc 	bl	8005b98 <LcdPuts>
				showARMWELD = false;
 8006420:	4b50      	ldr	r3, [pc, #320]	; (8006564 <StandBy+0x2e0>)
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
				//					WELD_FAN_OFF;   // turn off fan when ARMWELD animation finish.
				count1++; // it runs just first time this (if).
 8006426:	4b4d      	ldr	r3, [pc, #308]	; (800655c <StandBy+0x2d8>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	b2da      	uxtb	r2, r3
 800642e:	4b4b      	ldr	r3, [pc, #300]	; (800655c <StandBy+0x2d8>)
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e000      	b.n	8006436 <StandBy+0x1b2>
				if (count1 <= 5)
 8006434:	bf00      	nop
			}
			f2lcd100ms = false;
 8006436:	4b47      	ldr	r3, [pc, #284]	; (8006554 <StandBy+0x2d0>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
		}

		if (flcd500ms)
 800643c:	4b4a      	ldr	r3, [pc, #296]	; (8006568 <StandBy+0x2e4>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d023      	beq.n	800648e <StandBy+0x20a>
		{
			if (showARMWELD == true)
 8006446:	4b47      	ldr	r3, [pc, #284]	; (8006564 <StandBy+0x2e0>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d11c      	bne.n	8006488 <StandBy+0x204>
			{
				//					WELD_FAN_ON;   // turn on fan when the device  is turning on.
				if (x1_dot < 6)
 800644e:	4b42      	ldr	r3, [pc, #264]	; (8006558 <StandBy+0x2d4>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d807      	bhi.n	8006466 <StandBy+0x1e2>
				{
					LcdClear();
 8006456:	f7ff fb7f 	bl	8005b58 <LcdClear>
					x1_dot++;
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <StandBy+0x2d4>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <StandBy+0x2d4>)
 8006464:	701a      	strb	r2, [r3, #0]
				}
				LcdPuts(x1_dot, 1, "NEKOO");
 8006466:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <StandBy+0x2d4>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	4a40      	ldr	r2, [pc, #256]	; (800656c <StandBy+0x2e8>)
 800646c:	2101      	movs	r1, #1
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fb92 	bl	8005b98 <LcdPuts>
				LcdPuts((17 - x1_dot), 1, "RAD");
 8006474:	4b38      	ldr	r3, [pc, #224]	; (8006558 <StandBy+0x2d4>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f1c3 0311 	rsb	r3, r3, #17
 800647c:	b2db      	uxtb	r3, r3
 800647e:	4a3c      	ldr	r2, [pc, #240]	; (8006570 <StandBy+0x2ec>)
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fb88 	bl	8005b98 <LcdPuts>
			}
			flcd500ms = false;
 8006488:	4b37      	ldr	r3, [pc, #220]	; (8006568 <StandBy+0x2e4>)
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
		}

	}
	if (input == KEY_STANDBY)
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	2b08      	cmp	r3, #8
 8006492:	d13a      	bne.n	800650a <StandBy+0x286>
	{
		enterFunction = 1;
 8006494:	4b2b      	ldr	r3, [pc, #172]	; (8006544 <StandBy+0x2c0>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
		showARMWELD = false; // because of don't show ARMWELD when come from RunMeno.
 800649a:	4b32      	ldr	r3, [pc, #200]	; (8006564 <StandBy+0x2e0>)
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
		if(values[1].strNum==VOL_LEVEL_LOW)
 80064a0:	4b34      	ldr	r3, [pc, #208]	; (8006574 <StandBy+0x2f0>)
 80064a2:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10c      	bne.n	80064c4 <StandBy+0x240>
		{
			Led2(1);
 80064aa:	2201      	movs	r2, #1
 80064ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064b0:	4818      	ldr	r0, [pc, #96]	; (8006514 <StandBy+0x290>)
 80064b2:	f7fc fa81 	bl	80029b8 <HAL_GPIO_WritePin>
		    RealyLow(1);
 80064b6:	2201      	movs	r2, #1
 80064b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064bc:	4815      	ldr	r0, [pc, #84]	; (8006514 <StandBy+0x290>)
 80064be:	f7fc fa7b 	bl	80029b8 <HAL_GPIO_WritePin>
 80064c2:	e020      	b.n	8006506 <StandBy+0x282>
		}
		else if(values[1].strNum==VOL_LEVEL_MED)
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <StandBy+0x2f0>)
 80064c6:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d10c      	bne.n	80064e8 <StandBy+0x264>
		{
			Led3(1);
 80064ce:	2201      	movs	r2, #1
 80064d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064d4:	480f      	ldr	r0, [pc, #60]	; (8006514 <StandBy+0x290>)
 80064d6:	f7fc fa6f 	bl	80029b8 <HAL_GPIO_WritePin>
		    RealyMed(1);
 80064da:	2201      	movs	r2, #1
 80064dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064e0:	480e      	ldr	r0, [pc, #56]	; (800651c <StandBy+0x298>)
 80064e2:	f7fc fa69 	bl	80029b8 <HAL_GPIO_WritePin>
 80064e6:	e00e      	b.n	8006506 <StandBy+0x282>
		}
		else if(values[1].strNum==VOL_LEVEL_HIGH)
 80064e8:	4b22      	ldr	r3, [pc, #136]	; (8006574 <StandBy+0x2f0>)
 80064ea:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d109      	bne.n	8006506 <StandBy+0x282>
		{
			Led4(1);
 80064f2:	2201      	movs	r2, #1
 80064f4:	2104      	movs	r1, #4
 80064f6:	4808      	ldr	r0, [pc, #32]	; (8006518 <StandBy+0x294>)
 80064f8:	f7fc fa5e 	bl	80029b8 <HAL_GPIO_WritePin>
		    RealyHigh(1);
 80064fc:	2201      	movs	r2, #1
 80064fe:	2108      	movs	r1, #8
 8006500:	4807      	ldr	r0, [pc, #28]	; (8006520 <StandBy+0x29c>)
 8006502:	f7fc fa59 	bl	80029b8 <HAL_GPIO_WritePin>
		}
		return ST_MAIN_STATE;
 8006506:	231e      	movs	r3, #30
 8006508:	e000      	b.n	800650c <StandBy+0x288>
	}

	return ST_STANDBY;
 800650a:	2314      	movs	r3, #20
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40011000 	.word	0x40011000
 8006518:	40011400 	.word	0x40011400
 800651c:	40010800 	.word	0x40010800
 8006520:	40010c00 	.word	0x40010c00
 8006524:	20000508 	.word	0x20000508
 8006528:	2000050c 	.word	0x2000050c
 800652c:	20000510 	.word	0x20000510
 8006530:	20000066 	.word	0x20000066
 8006534:	2000049d 	.word	0x2000049d
 8006538:	2000049c 	.word	0x2000049c
 800653c:	2000049e 	.word	0x2000049e
 8006540:	20000400 	.word	0x20000400
 8006544:	20000175 	.word	0x20000175
 8006548:	200004b0 	.word	0x200004b0
 800654c:	20000065 	.word	0x20000065
 8006550:	200004e4 	.word	0x200004e4
 8006554:	20000497 	.word	0x20000497
 8006558:	20000624 	.word	0x20000624
 800655c:	200004e6 	.word	0x200004e6
 8006560:	0800bfe0 	.word	0x0800bfe0
 8006564:	20000176 	.word	0x20000176
 8006568:	20000499 	.word	0x20000499
 800656c:	0800bfe8 	.word	0x0800bfe8
 8006570:	0800bff0 	.word	0x0800bff0
 8006574:	20000524 	.word	0x20000524

08006578 <MainMenu>:
 * @brief This function run when is in menue or submenu untill one of the values choose.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char MainMenu(char input)
{
 8006578:	b590      	push	{r4, r7, lr}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	71fb      	strb	r3, [r7, #7]
	uint8_t j;
	static uint8_t nextVariable = VA_FIRST_VARIABLE;
	static uint8_t adjustState = ST_MAIN_STATE;
	//static char enterFunction = 1;

	if (nextVariable != variable)
 8006582:	4b6e      	ldr	r3, [pc, #440]	; (800673c <MainMenu+0x1c4>)
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	4b6e      	ldr	r3, [pc, #440]	; (8006740 <MainMenu+0x1c8>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d071      	beq.n	8006672 <MainMenu+0xfa>
	{
		variable = nextVariable;
 800658e:	4b6b      	ldr	r3, [pc, #428]	; (800673c <MainMenu+0x1c4>)
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	4b6b      	ldr	r3, [pc, #428]	; (8006740 <MainMenu+0x1c8>)
 8006594:	701a      	strb	r2, [r3, #0]
		refreshLcd = true; // atention to DisplyRunMenu	function
 8006596:	4b6b      	ldr	r3, [pc, #428]	; (8006744 <MainMenu+0x1cc>)
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
		for (uint8_t currentVariable = 0; (j = StateVariable[currentVariable].variable); currentVariable++)
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	e051      	b.n	8006646 <MainMenu+0xce>
		{
			/* macro to determine which variable must be displayed in first line in  */
            #define FIRST_LINE_VAR		currentVariable-cursorLine

			if (j == variable)
 80065a2:	4b67      	ldr	r3, [pc, #412]	; (8006740 <MainMenu+0x1c8>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	7b7a      	ldrb	r2, [r7, #13]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d149      	bne.n	8006640 <MainMenu+0xc8>
			{
				adjustState = StateVariable[currentVariable].adjustState;
 80065ac:	7bfa      	ldrb	r2, [r7, #15]
 80065ae:	4966      	ldr	r1, [pc, #408]	; (8006748 <MainMenu+0x1d0>)
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	3308      	adds	r3, #8
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	4b63      	ldr	r3, [pc, #396]	; (800674c <MainMenu+0x1d4>)
 80065c0:	701a      	strb	r2, [r3, #0]
				for (uint8_t n = 0; n < 4; n++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	73bb      	strb	r3, [r7, #14]
 80065c6:	e037      	b.n	8006638 <MainMenu+0xc0>
				{
					statetext[n]  = StateVariable[FIRST_LINE_VAR + n].pText;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	4a61      	ldr	r2, [pc, #388]	; (8006750 <MainMenu+0x1d8>)
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	1a9a      	subs	r2, r3, r2
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	441a      	add	r2, r3
 80065d4:	7bb9      	ldrb	r1, [r7, #14]
 80065d6:	485c      	ldr	r0, [pc, #368]	; (8006748 <MainMenu+0x1d0>)
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4403      	add	r3, r0
 80065e2:	3304      	adds	r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5b      	ldr	r2, [pc, #364]	; (8006754 <MainMenu+0x1dc>)
 80065e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					elementType[n] = StateVariable[FIRST_LINE_VAR + n].elementType;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	4a58      	ldr	r2, [pc, #352]	; (8006750 <MainMenu+0x1d8>)
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	1a9a      	subs	r2, r3, r2
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	441a      	add	r2, r3
 80065f8:	7bb9      	ldrb	r1, [r7, #14]
 80065fa:	4853      	ldr	r0, [pc, #332]	; (8006748 <MainMenu+0x1d0>)
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4403      	add	r3, r0
 8006606:	3310      	adds	r3, #16
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <MainMenu+0x1e0>)
 800660c:	545a      	strb	r2, [r3, r1]
					pValues[n] = (ValueStruct*)StateVariable[FIRST_LINE_VAR + n].pValueStruct;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	4a4f      	ldr	r2, [pc, #316]	; (8006750 <MainMenu+0x1d8>)
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	1a9a      	subs	r2, r3, r2
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	441a      	add	r2, r3
 800661a:	7bb9      	ldrb	r1, [r7, #14]
 800661c:	484a      	ldr	r0, [pc, #296]	; (8006748 <MainMenu+0x1d0>)
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4403      	add	r3, r0
 8006628:	330c      	adds	r3, #12
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a4b      	ldr	r2, [pc, #300]	; (800675c <MainMenu+0x1e4>)
 800662e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				for (uint8_t n = 0; n < 4; n++)
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	3301      	adds	r3, #1
 8006636:	73bb      	strb	r3, [r7, #14]
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b03      	cmp	r3, #3
 800663c:	d9c4      	bls.n	80065c8 <MainMenu+0x50>
				}
				break;
 800663e:	e00e      	b.n	800665e <MainMenu+0xe6>
		for (uint8_t currentVariable = 0; (j = StateVariable[currentVariable].variable); currentVariable++)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	3301      	adds	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	493f      	ldr	r1, [pc, #252]	; (8006748 <MainMenu+0x1d0>)
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	737b      	strb	r3, [r7, #13]
 8006658:	7b7b      	ldrb	r3, [r7, #13]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1a1      	bne.n	80065a2 <MainMenu+0x2a>
			}
		}
		if (reWarning == 0 || warningVar == 0)	//need for show after some second warning occured or not any warnings.
 800665e:	4b40      	ldr	r3, [pc, #256]	; (8006760 <MainMenu+0x1e8>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <MainMenu+0xf6>
 8006666:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <MainMenu+0x1ec>)
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <MainMenu+0xfa>
			DisplayRunMenu();
 800666e:	f7ff fcf1 	bl	8006054 <DisplayRunMenu>
	}
	if (input == KEY_STANDBY /*&& PwmStop?*/ )
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d10d      	bne.n	8006694 <MainMenu+0x11c>
	{
		count1 = 19;
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <MainMenu+0x1f0>)
 800667a:	2213      	movs	r2, #19
 800667c:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 800667e:	4b2f      	ldr	r3, [pc, #188]	; (800673c <MainMenu+0x1c4>)
 8006680:	2201      	movs	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 8006684:	4b32      	ldr	r3, [pc, #200]	; (8006750 <MainMenu+0x1d8>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
		variable = VA_SECOND_VARIABLE;
 800668a:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <MainMenu+0x1c8>)
 800668c:	2202      	movs	r2, #2
 800668e:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8006690:	2314      	movs	r3, #20
 8006692:	e04e      	b.n	8006732 <MainMenu+0x1ba>
	}
	else if (input == KEY_ACCEPT)
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d102      	bne.n	80066a0 <MainMenu+0x128>
	{
		return adjustState;
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <MainMenu+0x1d4>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	e048      	b.n	8006732 <MainMenu+0x1ba>
	{
		//nextVariable = cursorLine+1;
		nextVariable = VA_FIRST_VARIABLE;
		return ST_MAIN_STATE;
	}*/
	else if (input == KEY_START)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d139      	bne.n	800671a <MainMenu+0x1a2>
	{
			// Act like Start Buttom
			//if (enterFunction == 1)  // If it is the first time the button is pushed and the variables of frequency and time-on(duty cycle) are set
			//{
				NumberOfRampPulse = Frequency*Ramp/1000;
 80066a6:	4b31      	ldr	r3, [pc, #196]	; (800676c <MainMenu+0x1f4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a31      	ldr	r2, [pc, #196]	; (8006770 <MainMenu+0x1f8>)
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	4a30      	ldr	r2, [pc, #192]	; (8006774 <MainMenu+0x1fc>)
 80066b4:	fb82 1203 	smull	r1, r2, r2, r3
 80066b8:	1192      	asrs	r2, r2, #6
 80066ba:	17db      	asrs	r3, r3, #31
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	b29a      	uxth	r2, r3
 80066c0:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <MainMenu+0x200>)
 80066c2:	801a      	strh	r2, [r3, #0]
				StepRamp = TimeOn/NumberOfRampPulse;
 80066c4:	4b2d      	ldr	r3, [pc, #180]	; (800677c <MainMenu+0x204>)
 80066c6:	681c      	ldr	r4, [r3, #0]
 80066c8:	4b2b      	ldr	r3, [pc, #172]	; (8006778 <MainMenu+0x200>)
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fa fb7b 	bl	8000dc8 <__aeabi_i2f>
 80066d2:	4603      	mov	r3, r0
 80066d4:	4619      	mov	r1, r3
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7fa fc7e 	bl	8000fd8 <__aeabi_fdiv>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <MainMenu+0x208>)
 80066e2:	601a      	str	r2, [r3, #0]
				TIM3->CNT = 0;
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <MainMenu+0x20c>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
				SetFrequency(Frequency);
 80066ea:	4b20      	ldr	r3, [pc, #128]	; (800676c <MainMenu+0x1f4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fb68 	bl	8005dc4 <SetFrequency>
				SetDutyCycle(0);
 80066f4:	f04f 0000 	mov.w	r0, #0
 80066f8:	f7ff fb7e 	bl	8005df8 <SetDutyCycle>
				HAL_TIM_PWM_Start_IT(&htim3, PwmCh);
 80066fc:	2108      	movs	r1, #8
 80066fe:	4822      	ldr	r0, [pc, #136]	; (8006788 <MainMenu+0x210>)
 8006700:	f7fd feea 	bl	80044d8 <HAL_TIM_PWM_Start_IT>
				Led1(1);
 8006704:	2201      	movs	r2, #1
 8006706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800670a:	4820      	ldr	r0, [pc, #128]	; (800678c <MainMenu+0x214>)
 800670c:	f7fc f954 	bl	80029b8 <HAL_GPIO_WritePin>
				flagRampStart = true;
 8006710:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <MainMenu+0x218>)
 8006712:	2201      	movs	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
				Led1(0);
				flagStopPwm=true;
				flagRythm = false;
				enterFunction = 1;
			}*/
		return ST_MAIN_STATE;
 8006716:	231e      	movs	r3, #30
 8006718:	e00b      	b.n	8006732 <MainMenu+0x1ba>
	}
	else if (input != KEY_NULL)
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <MainMenu+0x1b8>
	{
		// Plain menu, clock the state machine
		nextVariable = VariableMachine(input);
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fd6a 	bl	80061fc <VariableMachine>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <MainMenu+0x1c4>)
 800672e:	701a      	strb	r2, [r3, #0]
	}

	return ST_MAIN_STATE;
 8006730:	231e      	movs	r3, #30
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bd90      	pop	{r4, r7, pc}
 800673a:	bf00      	nop
 800673c:	20000177 	.word	0x20000177
 8006740:	200004c9 	.word	0x200004c9
 8006744:	200004e0 	.word	0x200004e0
 8006748:	200000ac 	.word	0x200000ac
 800674c:	20000178 	.word	0x20000178
 8006750:	200004ca 	.word	0x200004ca
 8006754:	200004cc 	.word	0x200004cc
 8006758:	200004dc 	.word	0x200004dc
 800675c:	20000514 	.word	0x20000514
 8006760:	20000065 	.word	0x20000065
 8006764:	200004e4 	.word	0x200004e4
 8006768:	200004e6 	.word	0x200004e6
 800676c:	200004e8 	.word	0x200004e8
 8006770:	200004ec 	.word	0x200004ec
 8006774:	10624dd3 	.word	0x10624dd3
 8006778:	20000500 	.word	0x20000500
 800677c:	200004f0 	.word	0x200004f0
 8006780:	20000504 	.word	0x20000504
 8006784:	40000400 	.word	0x40000400
 8006788:	20000400 	.word	0x20000400
 800678c:	40011000 	.word	0x40011000
 8006790:	2000049c 	.word	0x2000049c

08006794 <IntAdjust>:
 * @brief This function adjusts integer values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char IntAdjust(char input)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
	//uint8_t j = 1;
	static char enterFunction = 1;

	char lcdBufferIA[15];

	if (enterFunction == 1)
 800679e:	4b87      	ldr	r3, [pc, #540]	; (80069bc <IntAdjust+0x228>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10c      	bne.n	80067c0 <IntAdjust+0x2c>
	{
		//pValues[cursorLine]->ival=values[cursorLine+1].ival;
		TIM1->CNT = (pValues[cursorLine]->ival)*ROTARY_SPC; //The amount of variable(that cursor point it)  return to CNT of timer or QDEC .
 80067a6:	4b86      	ldr	r3, [pc, #536]	; (80069c0 <IntAdjust+0x22c>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	4b85      	ldr	r3, [pc, #532]	; (80069c4 <IntAdjust+0x230>)
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	005a      	lsls	r2, r3, #1
 80067b6:	4b84      	ldr	r3, [pc, #528]	; (80069c8 <IntAdjust+0x234>)
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24
		enterFunction = 0;
 80067ba:	4b80      	ldr	r3, [pc, #512]	; (80069bc <IntAdjust+0x228>)
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
	}
	LcdCreateChar(0, UpDownCharacter); // "<>" character
 80067c0:	4982      	ldr	r1, [pc, #520]	; (80069cc <IntAdjust+0x238>)
 80067c2:	2000      	movs	r0, #0
 80067c4:	f7ff fa44 	bl	8005c50 <LcdCreateChar>
	LcdCursorSet(13, cursorLine);
 80067c8:	4b7d      	ldr	r3, [pc, #500]	; (80069c0 <IntAdjust+0x22c>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	200d      	movs	r0, #13
 80067d0:	f7ff faca 	bl	8005d68 <LcdCursorSet>
	LcdData(0); //  "<>" character
 80067d4:	2000      	movs	r0, #0
 80067d6:	f7ff faaf 	bl	8005d38 <LcdData>


	/* Check timer valueIA to be in range. */
	valueIA = (int16_t)TIM1->CNT / ROTARY_SPC; // int16_t to avoid of roll over timer valueIA from bottom to top.
 80067da:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <IntAdjust+0x234>)
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	b21b      	sxth	r3, r3
 80067e0:	0fda      	lsrs	r2, r3, #31
 80067e2:	4413      	add	r3, r2
 80067e4:	105b      	asrs	r3, r3, #1
 80067e6:	83fb      	strh	r3, [r7, #30]

	if (valueIA > (int16_t)pValues[cursorLine]->upLimit)
 80067e8:	4b75      	ldr	r3, [pc, #468]	; (80069c0 <IntAdjust+0x22c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	4b75      	ldr	r3, [pc, #468]	; (80069c4 <IntAdjust+0x230>)
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fa fd00 	bl	80011fc <__aeabi_f2iz>
 80067fc:	4603      	mov	r3, r0
 80067fe:	b21b      	sxth	r3, r3
 8006800:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006804:	429a      	cmp	r2, r3
 8006806:	dd0f      	ble.n	8006828 <IntAdjust+0x94>
		TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 8006808:	4b6d      	ldr	r3, [pc, #436]	; (80069c0 <IntAdjust+0x22c>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	4b6d      	ldr	r3, [pc, #436]	; (80069c4 <IntAdjust+0x230>)
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fa fcf0 	bl	80011fc <__aeabi_f2iz>
 800681c:	4603      	mov	r3, r0
 800681e:	b21b      	sxth	r3, r3
 8006820:	005a      	lsls	r2, r3, #1
 8006822:	4b69      	ldr	r3, [pc, #420]	; (80069c8 <IntAdjust+0x234>)
 8006824:	625a      	str	r2, [r3, #36]	; 0x24
 8006826:	e01e      	b.n	8006866 <IntAdjust+0xd2>

	else if (valueIA < (int16_t)pValues[cursorLine]->downLimit)
 8006828:	4b65      	ldr	r3, [pc, #404]	; (80069c0 <IntAdjust+0x22c>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	4b65      	ldr	r3, [pc, #404]	; (80069c4 <IntAdjust+0x230>)
 8006830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fa fce0 	bl	80011fc <__aeabi_f2iz>
 800683c:	4603      	mov	r3, r0
 800683e:	b21b      	sxth	r3, r3
 8006840:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006844:	429a      	cmp	r2, r3
 8006846:	da0e      	bge.n	8006866 <IntAdjust+0xd2>
		TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 8006848:	4b5d      	ldr	r3, [pc, #372]	; (80069c0 <IntAdjust+0x22c>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	4b5d      	ldr	r3, [pc, #372]	; (80069c4 <IntAdjust+0x230>)
 8006850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4618      	mov	r0, r3
 8006858:	f7fa fcd0 	bl	80011fc <__aeabi_f2iz>
 800685c:	4603      	mov	r3, r0
 800685e:	b21b      	sxth	r3, r3
 8006860:	005a      	lsls	r2, r3, #1
 8006862:	4b59      	ldr	r3, [pc, #356]	; (80069c8 <IntAdjust+0x234>)
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

	// Ensure TIM1->CNT is never negative
	if ((int16_t)TIM1->CNT < 0) {
 8006866:	4b58      	ldr	r3, [pc, #352]	; (80069c8 <IntAdjust+0x234>)
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	b21b      	sxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	da02      	bge.n	8006876 <IntAdjust+0xe2>
	    TIM1->CNT = 0;
 8006870:	4b55      	ldr	r3, [pc, #340]	; (80069c8 <IntAdjust+0x234>)
 8006872:	2200      	movs	r2, #0
 8006874:	625a      	str	r2, [r3, #36]	; 0x24
	}

	sprintf(lcdBufferIA, "%-3d", TIM1->CNT / ROTARY_SPC);
 8006876:	4b54      	ldr	r3, [pc, #336]	; (80069c8 <IntAdjust+0x234>)
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	085a      	lsrs	r2, r3, #1
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	4953      	ldr	r1, [pc, #332]	; (80069d0 <IntAdjust+0x23c>)
 8006882:	4618      	mov	r0, r3
 8006884:	f001 ff4a 	bl	800871c <siprintf>
	LcdPuts(14, cursorLine, lcdBufferIA);
 8006888:	4b4d      	ldr	r3, [pc, #308]	; (80069c0 <IntAdjust+0x22c>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f107 020c 	add.w	r2, r7, #12
 8006890:	4619      	mov	r1, r3
 8006892:	200e      	movs	r0, #14
 8006894:	f7ff f980 	bl	8005b98 <LcdPuts>

	switch (input)
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	2b08      	cmp	r3, #8
 800689c:	d07b      	beq.n	8006996 <IntAdjust+0x202>
 800689e:	2b08      	cmp	r3, #8
 80068a0:	f300 8087 	bgt.w	80069b2 <IntAdjust+0x21e>
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d002      	beq.n	80068ae <IntAdjust+0x11a>
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d066      	beq.n	800697a <IntAdjust+0x1e6>
 80068ac:	e081      	b.n	80069b2 <IntAdjust+0x21e>
	{
	case KEY_ACCEPT:
		pValues[cursorLine]->ival = TIM1->CNT / ROTARY_SPC;
 80068ae:	4b46      	ldr	r3, [pc, #280]	; (80069c8 <IntAdjust+0x234>)
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	085a      	lsrs	r2, r3, #1
 80068b4:	4b42      	ldr	r3, [pc, #264]	; (80069c0 <IntAdjust+0x22c>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	4619      	mov	r1, r3
 80068ba:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <IntAdjust+0x230>)
 80068bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068c0:	601a      	str	r2, [r3, #0]
		if (variable == VA_FREQUENCY)
 80068c2:	4b44      	ldr	r3, [pc, #272]	; (80069d4 <IntAdjust+0x240>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d109      	bne.n	80068de <IntAdjust+0x14a>
		{
			Frequency = pValues[cursorLine]->ival;
 80068ca:	4b3d      	ldr	r3, [pc, #244]	; (80069c0 <IntAdjust+0x22c>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	4b3c      	ldr	r3, [pc, #240]	; (80069c4 <IntAdjust+0x230>)
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a3f      	ldr	r2, [pc, #252]	; (80069d8 <IntAdjust+0x244>)
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	e03a      	b.n	8006954 <IntAdjust+0x1c0>
		}
		else if (variable == VA_RAMP /*&& pValues[cursorLine]->ival==3*/)
 80068de:	4b3d      	ldr	r3, [pc, #244]	; (80069d4 <IntAdjust+0x240>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d10d      	bne.n	8006902 <IntAdjust+0x16e>
		{
			Ramp = (pValues[cursorLine]->ival * 1000) ;
 80068e6:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <IntAdjust+0x22c>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <IntAdjust+0x230>)
 80068ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068f8:	fb02 f303 	mul.w	r3, r2, r3
 80068fc:	4a37      	ldr	r2, [pc, #220]	; (80069dc <IntAdjust+0x248>)
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e028      	b.n	8006954 <IntAdjust+0x1c0>
		}
		else if (variable == VA_RYTHM_ON)
 8006902:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <IntAdjust+0x240>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b05      	cmp	r3, #5
 8006908:	d109      	bne.n	800691e <IntAdjust+0x18a>
		{
			RythmOn = pValues[cursorLine]->ival;
 800690a:	4b2d      	ldr	r3, [pc, #180]	; (80069c0 <IntAdjust+0x22c>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	4b2c      	ldr	r3, [pc, #176]	; (80069c4 <IntAdjust+0x230>)
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a31      	ldr	r2, [pc, #196]	; (80069e0 <IntAdjust+0x24c>)
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	e01a      	b.n	8006954 <IntAdjust+0x1c0>
		}
		else if (variable == VA_RYTHM_OFF)
 800691e:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <IntAdjust+0x240>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d109      	bne.n	800693a <IntAdjust+0x1a6>
		{
			RythmOff = pValues[cursorLine]->ival;
 8006926:	4b26      	ldr	r3, [pc, #152]	; (80069c0 <IntAdjust+0x22c>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <IntAdjust+0x230>)
 800692e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <IntAdjust+0x250>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e00c      	b.n	8006954 <IntAdjust+0x1c0>
		}
		else if (variable == VA_RUN)
 800693a:	4b26      	ldr	r3, [pc, #152]	; (80069d4 <IntAdjust+0x240>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b07      	cmp	r3, #7
 8006940:	d108      	bne.n	8006954 <IntAdjust+0x1c0>
		{
			RunTime = pValues[cursorLine]->ival;
 8006942:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <IntAdjust+0x22c>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <IntAdjust+0x230>)
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <IntAdjust+0x254>)
 8006952:	6013      	str	r3, [r2, #0]
			//MiddleTime=RunTime-(2*(Ramp/1000));
		}
		//if (enterFunction == 0 && variable != VA_RAMP) // change variables in the RUN time
			//flagUpdatePwm = true;

		WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);
 8006954:	2209      	movs	r2, #9
 8006956:	4925      	ldr	r1, [pc, #148]	; (80069ec <IntAdjust+0x258>)
 8006958:	2000      	movs	r0, #0
 800695a:	f000 fe01 	bl	8007560 <WriteValueStructArrayToEeprom>

		enterFunction = 1;
 800695e:	4b17      	ldr	r3, [pc, #92]	; (80069bc <IntAdjust+0x228>)
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8006964:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <IntAdjust+0x22c>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	4619      	mov	r1, r3
 800696a:	200d      	movs	r0, #13
 800696c:	f7ff f9fc 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8006970:	2020      	movs	r0, #32
 8006972:	f7ff f9e1 	bl	8005d38 <LcdData>
		return ST_MAIN_STATE;
 8006976:	231e      	movs	r3, #30
 8006978:	e01c      	b.n	80069b4 <IntAdjust+0x220>

		case KEY_BACK:
			enterFunction = 1;
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <IntAdjust+0x228>)
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <IntAdjust+0x22c>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	200d      	movs	r0, #13
 8006988:	f7ff f9ee 	bl	8005d68 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 800698c:	2020      	movs	r0, #32
 800698e:	f7ff f9d3 	bl	8005d38 <LcdData>
			return ST_MAIN_STATE;
 8006992:	231e      	movs	r3, #30
 8006994:	e00e      	b.n	80069b4 <IntAdjust+0x220>

	case KEY_STANDBY:
		enterFunction = 1;
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <IntAdjust+0x228>)
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 800699c:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <IntAdjust+0x22c>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	4619      	mov	r1, r3
 80069a2:	200d      	movs	r0, #13
 80069a4:	f7ff f9e0 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 80069a8:	2020      	movs	r0, #32
 80069aa:	f7ff f9c5 	bl	8005d38 <LcdData>
		return ST_STANDBY;
 80069ae:	2314      	movs	r3, #20
 80069b0:	e000      	b.n	80069b4 <IntAdjust+0x220>
	}
	return ST_INT_ADJUST;
 80069b2:	2332      	movs	r3, #50	; 0x32
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000179 	.word	0x20000179
 80069c0:	200004ca 	.word	0x200004ca
 80069c4:	20000514 	.word	0x20000514
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	0800c028 	.word	0x0800c028
 80069d0:	0800bfd8 	.word	0x0800bfd8
 80069d4:	200004c9 	.word	0x200004c9
 80069d8:	200004e8 	.word	0x200004e8
 80069dc:	200004ec 	.word	0x200004ec
 80069e0:	200004f4 	.word	0x200004f4
 80069e4:	200004f8 	.word	0x200004f8
 80069e8:	200004fc 	.word	0x200004fc
 80069ec:	20000524 	.word	0x20000524

080069f0 <StringChange>:
 * @brief This function adjusts string values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char StringChange(char input)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	71fb      	strb	r3, [r7, #7]
	Led2(0);
 80069fa:	2200      	movs	r2, #0
 80069fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a00:	48be      	ldr	r0, [pc, #760]	; (8006cfc <StringChange+0x30c>)
 8006a02:	f7fb ffd9 	bl	80029b8 <HAL_GPIO_WritePin>
	Led3(0);
 8006a06:	2200      	movs	r2, #0
 8006a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a0c:	48bb      	ldr	r0, [pc, #748]	; (8006cfc <StringChange+0x30c>)
 8006a0e:	f7fb ffd3 	bl	80029b8 <HAL_GPIO_WritePin>
	Led4(0);
 8006a12:	2200      	movs	r2, #0
 8006a14:	2104      	movs	r1, #4
 8006a16:	48ba      	ldr	r0, [pc, #744]	; (8006d00 <StringChange+0x310>)
 8006a18:	f7fb ffce 	bl	80029b8 <HAL_GPIO_WritePin>

    RealyLow(0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a22:	48b6      	ldr	r0, [pc, #728]	; (8006cfc <StringChange+0x30c>)
 8006a24:	f7fb ffc8 	bl	80029b8 <HAL_GPIO_WritePin>
    RealyMed(0);
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a2e:	48b5      	ldr	r0, [pc, #724]	; (8006d04 <StringChange+0x314>)
 8006a30:	f7fb ffc2 	bl	80029b8 <HAL_GPIO_WritePin>
    RealyHigh(0);
 8006a34:	2200      	movs	r2, #0
 8006a36:	2108      	movs	r1, #8
 8006a38:	48b3      	ldr	r0, [pc, #716]	; (8006d08 <StringChange+0x318>)
 8006a3a:	f7fb ffbd 	bl	80029b8 <HAL_GPIO_WritePin>

	static char enterFunction = 1;
	static int8_t strNumTemp;
	if (enterFunction == 1)
 8006a3e:	4bb3      	ldr	r3, [pc, #716]	; (8006d0c <StringChange+0x31c>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10c      	bne.n	8006a60 <StringChange+0x70>
	{
		strNumTemp = pValues[cursorLine]->strNum;
 8006a46:	4bb2      	ldr	r3, [pc, #712]	; (8006d10 <StringChange+0x320>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4bb1      	ldr	r3, [pc, #708]	; (8006d14 <StringChange+0x324>)
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8006a56:	4bb0      	ldr	r3, [pc, #704]	; (8006d18 <StringChange+0x328>)
 8006a58:	701a      	strb	r2, [r3, #0]
		enterFunction = 0;
 8006a5a:	4bac      	ldr	r3, [pc, #688]	; (8006d0c <StringChange+0x31c>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
	}

	switch (input)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	2b1f      	cmp	r3, #31
 8006a66:	f200 80de 	bhi.w	8006c26 <StringChange+0x236>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <StringChange+0x80>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006b19 	.word	0x08006b19
 8006a74:	08006c27 	.word	0x08006c27
 8006a78:	08006c27 	.word	0x08006c27
 8006a7c:	08006bef 	.word	0x08006bef
 8006a80:	08006c27 	.word	0x08006c27
 8006a84:	08006c27 	.word	0x08006c27
 8006a88:	08006c27 	.word	0x08006c27
 8006a8c:	08006c0b 	.word	0x08006c0b
 8006a90:	08006c27 	.word	0x08006c27
 8006a94:	08006c27 	.word	0x08006c27
 8006a98:	08006c27 	.word	0x08006c27
 8006a9c:	08006c27 	.word	0x08006c27
 8006aa0:	08006c27 	.word	0x08006c27
 8006aa4:	08006c27 	.word	0x08006c27
 8006aa8:	08006c27 	.word	0x08006c27
 8006aac:	08006af1 	.word	0x08006af1
 8006ab0:	08006c27 	.word	0x08006c27
 8006ab4:	08006c27 	.word	0x08006c27
 8006ab8:	08006c27 	.word	0x08006c27
 8006abc:	08006c27 	.word	0x08006c27
 8006ac0:	08006c27 	.word	0x08006c27
 8006ac4:	08006c27 	.word	0x08006c27
 8006ac8:	08006c27 	.word	0x08006c27
 8006acc:	08006c27 	.word	0x08006c27
 8006ad0:	08006c27 	.word	0x08006c27
 8006ad4:	08006c27 	.word	0x08006c27
 8006ad8:	08006c27 	.word	0x08006c27
 8006adc:	08006c27 	.word	0x08006c27
 8006ae0:	08006c27 	.word	0x08006c27
 8006ae4:	08006c27 	.word	0x08006c27
 8006ae8:	08006c27 	.word	0x08006c27
 8006aec:	08006b05 	.word	0x08006b05
	{
	case ROTARY_CW_DIR:		strNumTemp++; break;
 8006af0:	4b89      	ldr	r3, [pc, #548]	; (8006d18 <StringChange+0x328>)
 8006af2:	f993 3000 	ldrsb.w	r3, [r3]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	3301      	adds	r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	b25a      	sxtb	r2, r3
 8006afe:	4b86      	ldr	r3, [pc, #536]	; (8006d18 <StringChange+0x328>)
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e090      	b.n	8006c26 <StringChange+0x236>

	case ROTARY_CCW_DIR:	strNumTemp--; break;
 8006b04:	4b84      	ldr	r3, [pc, #528]	; (8006d18 <StringChange+0x328>)
 8006b06:	f993 3000 	ldrsb.w	r3, [r3]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	b25a      	sxtb	r2, r3
 8006b12:	4b81      	ldr	r3, [pc, #516]	; (8006d18 <StringChange+0x328>)
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e086      	b.n	8006c26 <StringChange+0x236>

	case KEY_ACCEPT:

		// store the temporary adjusted value to the global variable
		pValues[cursorLine]->strNum = strNumTemp;
 8006b18:	4b7d      	ldr	r3, [pc, #500]	; (8006d10 <StringChange+0x320>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4b7d      	ldr	r3, [pc, #500]	; (8006d14 <StringChange+0x324>)
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	4a7c      	ldr	r2, [pc, #496]	; (8006d18 <StringChange+0x328>)
 8006b26:	f992 2000 	ldrsb.w	r2, [r2]
 8006b2a:	741a      	strb	r2, [r3, #16]

		if (variable == VA_VOLTAGE && pValues[cursorLine]->strNum==VOL_LEVEL_LOW)
 8006b2c:	4b7b      	ldr	r3, [pc, #492]	; (8006d1c <StringChange+0x32c>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d116      	bne.n	8006b62 <StringChange+0x172>
 8006b34:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <StringChange+0x320>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4b76      	ldr	r3, [pc, #472]	; (8006d14 <StringChange+0x324>)
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d10c      	bne.n	8006b62 <StringChange+0x172>
		{
			Led2(1);
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b4e:	486b      	ldr	r0, [pc, #428]	; (8006cfc <StringChange+0x30c>)
 8006b50:	f7fb ff32 	bl	80029b8 <HAL_GPIO_WritePin>
		    RealyLow(1);
 8006b54:	2201      	movs	r2, #1
 8006b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b5a:	4868      	ldr	r0, [pc, #416]	; (8006cfc <StringChange+0x30c>)
 8006b5c:	f7fb ff2c 	bl	80029b8 <HAL_GPIO_WritePin>
 8006b60:	e032      	b.n	8006bc8 <StringChange+0x1d8>
		}
		else if (variable == VA_VOLTAGE && pValues[cursorLine]->strNum==VOL_LEVEL_MED)
 8006b62:	4b6e      	ldr	r3, [pc, #440]	; (8006d1c <StringChange+0x32c>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d116      	bne.n	8006b98 <StringChange+0x1a8>
 8006b6a:	4b69      	ldr	r3, [pc, #420]	; (8006d10 <StringChange+0x320>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <StringChange+0x324>)
 8006b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b76:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d10c      	bne.n	8006b98 <StringChange+0x1a8>
		{
			Led3(1);
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b84:	485d      	ldr	r0, [pc, #372]	; (8006cfc <StringChange+0x30c>)
 8006b86:	f7fb ff17 	bl	80029b8 <HAL_GPIO_WritePin>
		    RealyMed(1);
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b90:	485c      	ldr	r0, [pc, #368]	; (8006d04 <StringChange+0x314>)
 8006b92:	f7fb ff11 	bl	80029b8 <HAL_GPIO_WritePin>
 8006b96:	e017      	b.n	8006bc8 <StringChange+0x1d8>
		}
		else if (variable == VA_VOLTAGE && pValues[cursorLine]->strNum==VOL_LEVEL_HIGH)
 8006b98:	4b60      	ldr	r3, [pc, #384]	; (8006d1c <StringChange+0x32c>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d113      	bne.n	8006bc8 <StringChange+0x1d8>
 8006ba0:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <StringChange+0x320>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <StringChange+0x324>)
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d109      	bne.n	8006bc8 <StringChange+0x1d8>
		{
			Led4(1);
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	4851      	ldr	r0, [pc, #324]	; (8006d00 <StringChange+0x310>)
 8006bba:	f7fb fefd 	bl	80029b8 <HAL_GPIO_WritePin>
		    RealyHigh(1);
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	2108      	movs	r1, #8
 8006bc2:	4851      	ldr	r0, [pc, #324]	; (8006d08 <StringChange+0x318>)
 8006bc4:	f7fb fef8 	bl	80029b8 <HAL_GPIO_WritePin>
		}
		WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);
 8006bc8:	2209      	movs	r2, #9
 8006bca:	4955      	ldr	r1, [pc, #340]	; (8006d20 <StringChange+0x330>)
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f000 fcc7 	bl	8007560 <WriteValueStructArrayToEeprom>

		enterFunction = 1;
 8006bd2:	4b4e      	ldr	r3, [pc, #312]	; (8006d0c <StringChange+0x31c>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8006bd8:	4b4d      	ldr	r3, [pc, #308]	; (8006d10 <StringChange+0x320>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	200d      	movs	r0, #13
 8006be0:	f7ff f8c2 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8006be4:	2020      	movs	r0, #32
 8006be6:	f7ff f8a7 	bl	8005d38 <LcdData>

		return ST_MAIN_STATE;
 8006bea:	231e      	movs	r3, #30
 8006bec:	e081      	b.n	8006cf2 <StringChange+0x302>

		case KEY_BACK:
			enterFunction = 1;
 8006bee:	4b47      	ldr	r3, [pc, #284]	; (8006d0c <StringChange+0x31c>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 8006bf4:	4b46      	ldr	r3, [pc, #280]	; (8006d10 <StringChange+0x320>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	200d      	movs	r0, #13
 8006bfc:	f7ff f8b4 	bl	8005d68 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 8006c00:	2020      	movs	r0, #32
 8006c02:	f7ff f899 	bl	8005d38 <LcdData>
			return ST_MAIN_STATE;
 8006c06:	231e      	movs	r3, #30
 8006c08:	e073      	b.n	8006cf2 <StringChange+0x302>

	case KEY_STANDBY:
		enterFunction = 1;
 8006c0a:	4b40      	ldr	r3, [pc, #256]	; (8006d0c <StringChange+0x31c>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8006c10:	4b3f      	ldr	r3, [pc, #252]	; (8006d10 <StringChange+0x320>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	200d      	movs	r0, #13
 8006c18:	f7ff f8a6 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8006c1c:	2020      	movs	r0, #32
 8006c1e:	f7ff f88b 	bl	8005d38 <LcdData>
		return ST_STANDBY;
 8006c22:	2314      	movs	r3, #20
 8006c24:	e065      	b.n	8006cf2 <StringChange+0x302>
	}

	LcdCreateChar(0, UpDownCharacter); // "<>" character
 8006c26:	493f      	ldr	r1, [pc, #252]	; (8006d24 <StringChange+0x334>)
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f7ff f811 	bl	8005c50 <LcdCreateChar>
	LcdCursorSet(13, cursorLine);
 8006c2e:	4b38      	ldr	r3, [pc, #224]	; (8006d10 <StringChange+0x320>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	4619      	mov	r1, r3
 8006c34:	200d      	movs	r0, #13
 8006c36:	f7ff f897 	bl	8005d68 <LcdCursorSet>
	LcdData(0); //  "<>" character
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f7ff f87c 	bl	8005d38 <LcdData>


	if (strNumTemp > pValues[cursorLine]->upLimit)
 8006c40:	4b35      	ldr	r3, [pc, #212]	; (8006d18 <StringChange+0x328>)
 8006c42:	f993 3000 	ldrsb.w	r3, [r3]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fa f8be 	bl	8000dc8 <__aeabi_i2f>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b30      	ldr	r3, [pc, #192]	; (8006d10 <StringChange+0x320>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <StringChange+0x324>)
 8006c56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fa fac2 	bl	80011e8 <__aeabi_fcmpgt>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <StringChange+0x298>
	{
		strNumTemp = pValues[cursorLine]->upLimit;
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <StringChange+0x320>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <StringChange+0x324>)
 8006c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fa fabf 	bl	80011fc <__aeabi_f2iz>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	b25a      	sxtb	r2, r3
 8006c82:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <StringChange+0x328>)
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e022      	b.n	8006cce <StringChange+0x2de>
	}
	else if (strNumTemp < pValues[cursorLine]->downLimit)
 8006c88:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <StringChange+0x328>)
 8006c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa f89a 	bl	8000dc8 <__aeabi_i2f>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <StringChange+0x320>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <StringChange+0x324>)
 8006c9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7fa fa80 	bl	80011ac <__aeabi_fcmplt>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <StringChange+0x2de>
	{
		strNumTemp = pValues[cursorLine]->downLimit;
 8006cb2:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <StringChange+0x320>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <StringChange+0x324>)
 8006cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fa fa9b 	bl	80011fc <__aeabi_f2iz>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	b25a      	sxtb	r2, r3
 8006cca:	4b13      	ldr	r3, [pc, #76]	; (8006d18 <StringChange+0x328>)
 8006ccc:	701a      	strb	r2, [r3, #0]
	}
	LcdPuts(14, cursorLine, pValues[cursorLine]->pText[strNumTemp]);
 8006cce:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <StringChange+0x320>)
 8006cd0:	7819      	ldrb	r1, [r3, #0]
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <StringChange+0x320>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <StringChange+0x324>)
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	4a0e      	ldr	r2, [pc, #56]	; (8006d18 <StringChange+0x328>)
 8006ce0:	f992 2000 	ldrsb.w	r2, [r2]
 8006ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	200e      	movs	r0, #14
 8006cec:	f7fe ff54 	bl	8005b98 <LcdPuts>

	return ST_STR_CHANGE;
 8006cf0:	2346      	movs	r3, #70	; 0x46
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40011000 	.word	0x40011000
 8006d00:	40011400 	.word	0x40011400
 8006d04:	40010800 	.word	0x40010800
 8006d08:	40010c00 	.word	0x40010c00
 8006d0c:	2000017a 	.word	0x2000017a
 8006d10:	200004ca 	.word	0x200004ca
 8006d14:	20000514 	.word	0x20000514
 8006d18:	20000625 	.word	0x20000625
 8006d1c:	200004c9 	.word	0x200004c9
 8006d20:	20000524 	.word	0x20000524
 8006d24:	0800c028 	.word	0x0800c028

08006d28 <FloatAdjust>:
 * @brief This function adjusts float values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char FloatAdjust(char input)
{
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	71fb      	strb	r3, [r7, #7]
	//uint8_t j = 1;
	char lcdBufferIA[15];
	//int16_t UpLimit_DEC;
	//int16_t DownLimit_DEC;

	if (enterFunction == 1)
 8006d32:	4b61      	ldr	r3, [pc, #388]	; (8006eb8 <FloatAdjust+0x190>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d142      	bne.n	8006dc0 <FloatAdjust+0x98>
	{
		//FloatTemp[DECIMAL_PART] = modf(pValues[cursorLine]->fval, &FloatTemp[INTEGER_PART]);
		FloatTemp[INTEGER_PART] = (int) pValues[cursorLine]->fval;
 8006d3a:	4b60      	ldr	r3, [pc, #384]	; (8006ebc <FloatAdjust+0x194>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4b5f      	ldr	r3, [pc, #380]	; (8006ec0 <FloatAdjust+0x198>)
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fa fa57 	bl	80011fc <__aeabi_f2iz>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4a5c      	ldr	r2, [pc, #368]	; (8006ec4 <FloatAdjust+0x19c>)
 8006d52:	6013      	str	r3, [r2, #0]
		FloatTemp[DECIMAL_PART] = round((pValues[cursorLine]->fval - FloatTemp[INTEGER_PART]) * 10);
 8006d54:	4b59      	ldr	r3, [pc, #356]	; (8006ebc <FloatAdjust+0x194>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <FloatAdjust+0x198>)
 8006d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d60:	681c      	ldr	r4, [r3, #0]
 8006d62:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <FloatAdjust+0x19c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fa f82e 	bl	8000dc8 <__aeabi_i2f>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7f9 ff73 	bl	8000c5c <__aeabi_fsub>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4953      	ldr	r1, [pc, #332]	; (8006ec8 <FloatAdjust+0x1a0>)
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fa f878 	bl	8000e70 <__aeabi_fmul>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7f9 fbc6 	bl	8000514 <__aeabi_f2d>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f005 f864 	bl	800be5c <round>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f7f9 fec2 	bl	8000b24 <__aeabi_d2iz>
 8006da0:	4603      	mov	r3, r0
 8006da2:	4a48      	ldr	r2, [pc, #288]	; (8006ec4 <FloatAdjust+0x19c>)
 8006da4:	6053      	str	r3, [r2, #4]

		//UpLimit_DEC = round((pValues[cursorLine]->upLimit - (int)pValues[cursorLine]->upLimit)*10);
		//DownLimit_DEC = round((pValues[cursorLine]->downLimit - (int)pValues[cursorLine]->downLimit) * 10);

		if (mode == INTEGER_PART)
 8006da6:	4b49      	ldr	r3, [pc, #292]	; (8006ecc <FloatAdjust+0x1a4>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <FloatAdjust+0x92>
		{
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 8006dae:	4b45      	ldr	r3, [pc, #276]	; (8006ec4 <FloatAdjust+0x19c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	b21b      	sxth	r3, r3
 8006db4:	005a      	lsls	r2, r3, #1
 8006db6:	4b46      	ldr	r3, [pc, #280]	; (8006ed0 <FloatAdjust+0x1a8>)
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		/*else if ( mode == DECIMAL_PART)
		{
			TIM1->CNT = ((int16_t)(FloatTemp[DECIMAL_PART])*10)*ROTARY_SPC;
		}*/
		enterFunction = 0;
 8006dba:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <FloatAdjust+0x190>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
	}
	if (mode == INTEGER_PART)
 8006dc0:	4b42      	ldr	r3, [pc, #264]	; (8006ecc <FloatAdjust+0x1a4>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d15f      	bne.n	8006e88 <FloatAdjust+0x160>
	{
		FloatTemp[INTEGER_PART] = (int16_t)TIM1->CNT / ROTARY_SPC;
 8006dc8:	4b41      	ldr	r3, [pc, #260]	; (8006ed0 <FloatAdjust+0x1a8>)
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	b21b      	sxth	r3, r3
 8006dce:	0fda      	lsrs	r2, r3, #31
 8006dd0:	4413      	add	r3, r2
 8006dd2:	105b      	asrs	r3, r3, #1
 8006dd4:	b21b      	sxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4b3a      	ldr	r3, [pc, #232]	; (8006ec4 <FloatAdjust+0x19c>)
 8006dda:	601a      	str	r2, [r3, #0]
		if (FloatTemp[INTEGER_PART] > (int16_t)pValues[cursorLine]->upLimit)
 8006ddc:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <FloatAdjust+0x19c>)
 8006dde:	681c      	ldr	r4, [r3, #0]
 8006de0:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <FloatAdjust+0x194>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <FloatAdjust+0x198>)
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fa fa04 	bl	80011fc <__aeabi_f2iz>
 8006df4:	4603      	mov	r3, r0
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	dd0f      	ble.n	8006e1c <FloatAdjust+0xf4>
			TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 8006dfc:	4b2f      	ldr	r3, [pc, #188]	; (8006ebc <FloatAdjust+0x194>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <FloatAdjust+0x198>)
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fa f9f6 	bl	80011fc <__aeabi_f2iz>
 8006e10:	4603      	mov	r3, r0
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	005a      	lsls	r2, r3, #1
 8006e16:	4b2e      	ldr	r3, [pc, #184]	; (8006ed0 <FloatAdjust+0x1a8>)
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24
 8006e1a:	e01e      	b.n	8006e5a <FloatAdjust+0x132>

		else if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit)
 8006e1c:	4b29      	ldr	r3, [pc, #164]	; (8006ec4 <FloatAdjust+0x19c>)
 8006e1e:	681c      	ldr	r4, [r3, #0]
 8006e20:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <FloatAdjust+0x194>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	4b26      	ldr	r3, [pc, #152]	; (8006ec0 <FloatAdjust+0x198>)
 8006e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fa f9e4 	bl	80011fc <__aeabi_f2iz>
 8006e34:	4603      	mov	r3, r0
 8006e36:	b21b      	sxth	r3, r3
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	da0e      	bge.n	8006e5a <FloatAdjust+0x132>
			TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 8006e3c:	4b1f      	ldr	r3, [pc, #124]	; (8006ebc <FloatAdjust+0x194>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <FloatAdjust+0x198>)
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa f9d6 	bl	80011fc <__aeabi_f2iz>
 8006e50:	4603      	mov	r3, r0
 8006e52:	b21b      	sxth	r3, r3
 8006e54:	005a      	lsls	r2, r3, #1
 8006e56:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <FloatAdjust+0x1a8>)
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24

		LcdCreateChar(0, UpDownCharacter); // "<>" character
 8006e5a:	491e      	ldr	r1, [pc, #120]	; (8006ed4 <FloatAdjust+0x1ac>)
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7fe fef7 	bl	8005c50 <LcdCreateChar>
		   
		LcdCursorSet(19, cursorLine);
 8006e62:	4b16      	ldr	r3, [pc, #88]	; (8006ebc <FloatAdjust+0x194>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	2013      	movs	r0, #19
 8006e6a:	f7fe ff7d 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8006e6e:	2020      	movs	r0, #32
 8006e70:	f7fe ff62 	bl	8005d38 <LcdData>
		   
		LcdCursorSet(13, cursorLine);
 8006e74:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <FloatAdjust+0x194>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	200d      	movs	r0, #13
 8006e7c:	f7fe ff74 	bl	8005d68 <LcdCursorSet>
		LcdData(0); //  "<>" character
 8006e80:	2000      	movs	r0, #0
 8006e82:	f7fe ff59 	bl	8005d38 <LcdData>
 8006e86:	e0c9      	b.n	800701c <FloatAdjust+0x2f4>
	}
	else if (mode == DECIMAL_PART)
 8006e88:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <FloatAdjust+0x1a4>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 80c5 	bne.w	800701c <FloatAdjust+0x2f4>
	{
		FloatTemp[DECIMAL_PART] = (int16_t)TIM1->CNT / ROTARY_SPC;
 8006e92:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <FloatAdjust+0x1a8>)
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b21b      	sxth	r3, r3
 8006e98:	0fda      	lsrs	r2, r3, #31
 8006e9a:	4413      	add	r3, r2
 8006e9c:	105b      	asrs	r3, r3, #1
 8006e9e:	b21b      	sxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <FloatAdjust+0x19c>)
 8006ea4:	605a      	str	r2, [r3, #4]
		if (FloatTemp[DECIMAL_PART] > 9)
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <FloatAdjust+0x19c>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b09      	cmp	r3, #9
 8006eac:	dd14      	ble.n	8006ed8 <FloatAdjust+0x1b0>
			TIM1->CNT = 9*ROTARY_SPC;
 8006eae:	4b08      	ldr	r3, [pc, #32]	; (8006ed0 <FloatAdjust+0x1a8>)
 8006eb0:	2212      	movs	r2, #18
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb4:	e017      	b.n	8006ee6 <FloatAdjust+0x1be>
 8006eb6:	bf00      	nop
 8006eb8:	2000017b 	.word	0x2000017b
 8006ebc:	200004ca 	.word	0x200004ca
 8006ec0:	20000514 	.word	0x20000514
 8006ec4:	20000628 	.word	0x20000628
 8006ec8:	41200000 	.word	0x41200000
 8006ecc:	20000630 	.word	0x20000630
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	0800c028 	.word	0x0800c028

		else if (FloatTemp[DECIMAL_PART] < 0)
 8006ed8:	4b99      	ldr	r3, [pc, #612]	; (8007140 <FloatAdjust+0x418>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da02      	bge.n	8006ee6 <FloatAdjust+0x1be>
			TIM1->CNT = 0*ROTARY_SPC;
 8006ee0:	4b98      	ldr	r3, [pc, #608]	; (8007144 <FloatAdjust+0x41c>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

        //The value of the float number should not be below downlimit of the value
		//else if (FloatTemp[DECIMAL_PART] == 0 && FloatTemp[INTEGER_PART] == 0)
			//TIM1->CNT = DownLimit_DEC*ROTARY_SPC;

		if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit ||
 8006ee6:	4b96      	ldr	r3, [pc, #600]	; (8007140 <FloatAdjust+0x418>)
 8006ee8:	681c      	ldr	r4, [r3, #0]
 8006eea:	4b97      	ldr	r3, [pc, #604]	; (8007148 <FloatAdjust+0x420>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4b96      	ldr	r3, [pc, #600]	; (800714c <FloatAdjust+0x424>)
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fa f97f 	bl	80011fc <__aeabi_f2iz>
 8006efe:	4603      	mov	r3, r0
 8006f00:	b21b      	sxth	r3, r3
 8006f02:	429c      	cmp	r4, r3
 8006f04:	db39      	blt.n	8006f7a <FloatAdjust+0x252>
		    (FloatTemp[INTEGER_PART] == (int16_t)pValues[cursorLine]->downLimit &&
 8006f06:	4b8e      	ldr	r3, [pc, #568]	; (8007140 <FloatAdjust+0x418>)
 8006f08:	681c      	ldr	r4, [r3, #0]
 8006f0a:	4b8f      	ldr	r3, [pc, #572]	; (8007148 <FloatAdjust+0x420>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	4b8e      	ldr	r3, [pc, #568]	; (800714c <FloatAdjust+0x424>)
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fa f96f 	bl	80011fc <__aeabi_f2iz>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	b21b      	sxth	r3, r3
		if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit ||
 8006f22:	429c      	cmp	r4, r3
 8006f24:	d164      	bne.n	8006ff0 <FloatAdjust+0x2c8>
		     FloatTemp[DECIMAL_PART] < (int16_t)((pValues[cursorLine]->downLimit - (int16_t)pValues[cursorLine]->downLimit) * 10)))
 8006f26:	4b86      	ldr	r3, [pc, #536]	; (8007140 <FloatAdjust+0x418>)
 8006f28:	685c      	ldr	r4, [r3, #4]
 8006f2a:	4b87      	ldr	r3, [pc, #540]	; (8007148 <FloatAdjust+0x420>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	4b86      	ldr	r3, [pc, #536]	; (800714c <FloatAdjust+0x424>)
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	695d      	ldr	r5, [r3, #20]
 8006f38:	4b83      	ldr	r3, [pc, #524]	; (8007148 <FloatAdjust+0x420>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4b83      	ldr	r3, [pc, #524]	; (800714c <FloatAdjust+0x424>)
 8006f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fa f958 	bl	80011fc <__aeabi_f2iz>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 ff39 	bl	8000dc8 <__aeabi_i2f>
 8006f56:	4603      	mov	r3, r0
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7f9 fe7e 	bl	8000c5c <__aeabi_fsub>
 8006f60:	4603      	mov	r3, r0
 8006f62:	497b      	ldr	r1, [pc, #492]	; (8007150 <FloatAdjust+0x428>)
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7f9 ff83 	bl	8000e70 <__aeabi_fmul>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fa f945 	bl	80011fc <__aeabi_f2iz>
 8006f72:	4603      	mov	r3, r0
 8006f74:	b21b      	sxth	r3, r3
		    (FloatTemp[INTEGER_PART] == (int16_t)pValues[cursorLine]->downLimit &&
 8006f76:	429c      	cmp	r4, r3
 8006f78:	da3a      	bge.n	8006ff0 <FloatAdjust+0x2c8>
		{
		    FloatTemp[INTEGER_PART] = (int16_t)pValues[cursorLine]->downLimit;
 8006f7a:	4b73      	ldr	r3, [pc, #460]	; (8007148 <FloatAdjust+0x420>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4b72      	ldr	r3, [pc, #456]	; (800714c <FloatAdjust+0x424>)
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fa f937 	bl	80011fc <__aeabi_f2iz>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	b21b      	sxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	4b6a      	ldr	r3, [pc, #424]	; (8007140 <FloatAdjust+0x418>)
 8006f96:	601a      	str	r2, [r3, #0]
		    FloatTemp[DECIMAL_PART] = (int16_t)((pValues[cursorLine]->downLimit - FloatTemp[INTEGER_PART]) * 10);
 8006f98:	4b6b      	ldr	r3, [pc, #428]	; (8007148 <FloatAdjust+0x420>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b6b      	ldr	r3, [pc, #428]	; (800714c <FloatAdjust+0x424>)
 8006fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa4:	695c      	ldr	r4, [r3, #20]
 8006fa6:	4b66      	ldr	r3, [pc, #408]	; (8007140 <FloatAdjust+0x418>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7f9 ff0c 	bl	8000dc8 <__aeabi_i2f>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7f9 fe51 	bl	8000c5c <__aeabi_fsub>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4964      	ldr	r1, [pc, #400]	; (8007150 <FloatAdjust+0x428>)
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 ff56 	bl	8000e70 <__aeabi_fmul>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fa f918 	bl	80011fc <__aeabi_f2iz>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	b21b      	sxth	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b5b      	ldr	r3, [pc, #364]	; (8007140 <FloatAdjust+0x418>)
 8006fd4:	605a      	str	r2, [r3, #4]
		    TIM1->CNT = (FloatTemp[INTEGER_PART] * 10 + FloatTemp[DECIMAL_PART]) * ROTARY_SPC;
 8006fd6:	4b5a      	ldr	r3, [pc, #360]	; (8007140 <FloatAdjust+0x418>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4b56      	ldr	r3, [pc, #344]	; (8007140 <FloatAdjust+0x418>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	005a      	lsls	r2, r3, #1
 8006fec:	4b55      	ldr	r3, [pc, #340]	; (8007144 <FloatAdjust+0x41c>)
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24
		}
		LcdCreateChar(0, UpDownCharacter); // "<>" character
 8006ff0:	4958      	ldr	r1, [pc, #352]	; (8007154 <FloatAdjust+0x42c>)
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f7fe fe2c 	bl	8005c50 <LcdCreateChar>

		LcdCursorSet(19, cursorLine);
 8006ff8:	4b53      	ldr	r3, [pc, #332]	; (8007148 <FloatAdjust+0x420>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2013      	movs	r0, #19
 8007000:	f7fe feb2 	bl	8005d68 <LcdCursorSet>
		LcdData(0); //  "<>" character
 8007004:	2000      	movs	r0, #0
 8007006:	f7fe fe97 	bl	8005d38 <LcdData>

		LcdCursorSet(13, cursorLine);
 800700a:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <FloatAdjust+0x420>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	200d      	movs	r0, #13
 8007012:	f7fe fea9 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8007016:	2020      	movs	r0, #32
 8007018:	f7fe fe8e 	bl	8005d38 <LcdData>
	}

	// store the temporary adjusted value to the global variable
	pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART] / 10.0f));
 800701c:	4b48      	ldr	r3, [pc, #288]	; (8007140 <FloatAdjust+0x418>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f7f9 fed1 	bl	8000dc8 <__aeabi_i2f>
 8007026:	4605      	mov	r5, r0
 8007028:	4b45      	ldr	r3, [pc, #276]	; (8007140 <FloatAdjust+0x418>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 fecb 	bl	8000dc8 <__aeabi_i2f>
 8007032:	4603      	mov	r3, r0
 8007034:	4946      	ldr	r1, [pc, #280]	; (8007150 <FloatAdjust+0x428>)
 8007036:	4618      	mov	r0, r3
 8007038:	f7f9 ffce 	bl	8000fd8 <__aeabi_fdiv>
 800703c:	4603      	mov	r3, r0
 800703e:	4619      	mov	r1, r3
 8007040:	4b41      	ldr	r3, [pc, #260]	; (8007148 <FloatAdjust+0x420>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	4b41      	ldr	r3, [pc, #260]	; (800714c <FloatAdjust+0x424>)
 8007048:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800704c:	4628      	mov	r0, r5
 800704e:	f7f9 fe07 	bl	8000c60 <__addsf3>
 8007052:	4603      	mov	r3, r0
 8007054:	6023      	str	r3, [r4, #0]
	sprintf(lcdBufferIA, "%-4.1f ", pValues[cursorLine]->fval);
 8007056:	4b3c      	ldr	r3, [pc, #240]	; (8007148 <FloatAdjust+0x420>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	4b3b      	ldr	r3, [pc, #236]	; (800714c <FloatAdjust+0x424>)
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f7f9 fa55 	bl	8000514 <__aeabi_f2d>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	f107 0008 	add.w	r0, r7, #8
 8007072:	4939      	ldr	r1, [pc, #228]	; (8007158 <FloatAdjust+0x430>)
 8007074:	f001 fb52 	bl	800871c <siprintf>
	LcdPuts(14, cursorLine, lcdBufferIA);
 8007078:	4b33      	ldr	r3, [pc, #204]	; (8007148 <FloatAdjust+0x420>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f107 0208 	add.w	r2, r7, #8
 8007080:	4619      	mov	r1, r3
 8007082:	200e      	movs	r0, #14
 8007084:	f7fe fd88 	bl	8005b98 <LcdPuts>

	switch (input)
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	3b01      	subs	r3, #1
 800708c:	2b1f      	cmp	r3, #31
 800708e:	f200 80ee 	bhi.w	800726e <FloatAdjust+0x546>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <FloatAdjust+0x370>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	08007161 	.word	0x08007161
 800709c:	0800726f 	.word	0x0800726f
 80070a0:	0800726f 	.word	0x0800726f
 80070a4:	0800721b 	.word	0x0800721b
 80070a8:	0800726f 	.word	0x0800726f
 80070ac:	0800726f 	.word	0x0800726f
 80070b0:	0800726f 	.word	0x0800726f
 80070b4:	08007253 	.word	0x08007253
 80070b8:	0800726f 	.word	0x0800726f
 80070bc:	0800726f 	.word	0x0800726f
 80070c0:	0800726f 	.word	0x0800726f
 80070c4:	0800726f 	.word	0x0800726f
 80070c8:	0800726f 	.word	0x0800726f
 80070cc:	0800726f 	.word	0x0800726f
 80070d0:	0800726f 	.word	0x0800726f
 80070d4:	08007119 	.word	0x08007119
 80070d8:	0800726f 	.word	0x0800726f
 80070dc:	0800726f 	.word	0x0800726f
 80070e0:	0800726f 	.word	0x0800726f
 80070e4:	0800726f 	.word	0x0800726f
 80070e8:	0800726f 	.word	0x0800726f
 80070ec:	0800726f 	.word	0x0800726f
 80070f0:	0800726f 	.word	0x0800726f
 80070f4:	0800726f 	.word	0x0800726f
 80070f8:	0800726f 	.word	0x0800726f
 80070fc:	0800726f 	.word	0x0800726f
 8007100:	0800726f 	.word	0x0800726f
 8007104:	0800726f 	.word	0x0800726f
 8007108:	0800726f 	.word	0x0800726f
 800710c:	0800726f 	.word	0x0800726f
 8007110:	0800726f 	.word	0x0800726f
 8007114:	0800712d 	.word	0x0800712d
	{
	case ROTARY_CW_DIR:  FloatTemp[mode]++; break;
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <FloatAdjust+0x434>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	4a08      	ldr	r2, [pc, #32]	; (8007140 <FloatAdjust+0x418>)
 800711e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007122:	3201      	adds	r2, #1
 8007124:	4906      	ldr	r1, [pc, #24]	; (8007140 <FloatAdjust+0x418>)
 8007126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800712a:	e0a0      	b.n	800726e <FloatAdjust+0x546>

	case ROTARY_CCW_DIR:  FloatTemp[mode]--; break;
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <FloatAdjust+0x434>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4a03      	ldr	r2, [pc, #12]	; (8007140 <FloatAdjust+0x418>)
 8007132:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007136:	3a01      	subs	r2, #1
 8007138:	4901      	ldr	r1, [pc, #4]	; (8007140 <FloatAdjust+0x418>)
 800713a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800713e:	e096      	b.n	800726e <FloatAdjust+0x546>
 8007140:	20000628 	.word	0x20000628
 8007144:	40012c00 	.word	0x40012c00
 8007148:	200004ca 	.word	0x200004ca
 800714c:	20000514 	.word	0x20000514
 8007150:	41200000 	.word	0x41200000
 8007154:	0800c028 	.word	0x0800c028
 8007158:	0800bff4 	.word	0x0800bff4
 800715c:	20000630 	.word	0x20000630

	case KEY_ACCEPT:

		pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART] / 10.0));
 8007160:	4b45      	ldr	r3, [pc, #276]	; (8007278 <FloatAdjust+0x550>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f7f9 f9c3 	bl	80004f0 <__aeabi_i2d>
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	4b42      	ldr	r3, [pc, #264]	; (8007278 <FloatAdjust+0x550>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	4618      	mov	r0, r3
 8007174:	f7f9 f9bc 	bl	80004f0 <__aeabi_i2d>
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	4b3f      	ldr	r3, [pc, #252]	; (800727c <FloatAdjust+0x554>)
 800717e:	f7f9 fb4b 	bl	8000818 <__aeabi_ddiv>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f9 f865 	bl	8000258 <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	493b      	ldr	r1, [pc, #236]	; (8007280 <FloatAdjust+0x558>)
 8007194:	7809      	ldrb	r1, [r1, #0]
 8007196:	4608      	mov	r0, r1
 8007198:	493a      	ldr	r1, [pc, #232]	; (8007284 <FloatAdjust+0x55c>)
 800719a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	f7f9 fd07 	bl	8000bb4 <__aeabi_d2f>
 80071a6:	4603      	mov	r3, r0
 80071a8:	6023      	str	r3, [r4, #0]
		if (mode == INTEGER_PART)
 80071aa:	4b37      	ldr	r3, [pc, #220]	; (8007288 <FloatAdjust+0x560>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10c      	bne.n	80071cc <FloatAdjust+0x4a4>
		{
			mode++;
 80071b2:	4b35      	ldr	r3, [pc, #212]	; (8007288 <FloatAdjust+0x560>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	4b33      	ldr	r3, [pc, #204]	; (8007288 <FloatAdjust+0x560>)
 80071bc:	701a      	strb	r2, [r3, #0]
			TIM1->CNT = (int16_t)(FloatTemp[DECIMAL_PART])*ROTARY_SPC;
 80071be:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <FloatAdjust+0x550>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b21b      	sxth	r3, r3
 80071c4:	005a      	lsls	r2, r3, #1
 80071c6:	4b31      	ldr	r3, [pc, #196]	; (800728c <FloatAdjust+0x564>)
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80071ca:	e050      	b.n	800726e <FloatAdjust+0x546>
		}
		else if (mode == DECIMAL_PART)
 80071cc:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <FloatAdjust+0x560>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d122      	bne.n	800721a <FloatAdjust+0x4f2>
		{
			if (variable == VA_TIME)
 80071d4:	4b2e      	ldr	r3, [pc, #184]	; (8007290 <FloatAdjust+0x568>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d108      	bne.n	80071ee <FloatAdjust+0x4c6>
			{
				//TIM3->CCR1=0;
				TimeOn = (pValues[cursorLine]->fval / 1.000);
 80071dc:	4b28      	ldr	r3, [pc, #160]	; (8007280 <FloatAdjust+0x558>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b28      	ldr	r3, [pc, #160]	; (8007284 <FloatAdjust+0x55c>)
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <FloatAdjust+0x56c>)
 80071ec:	6013      	str	r3, [r2, #0]
			}

			WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);
 80071ee:	2209      	movs	r2, #9
 80071f0:	4929      	ldr	r1, [pc, #164]	; (8007298 <FloatAdjust+0x570>)
 80071f2:	2000      	movs	r0, #0
 80071f4:	f000 f9b4 	bl	8007560 <WriteValueStructArrayToEeprom>

			mode = INTEGER_PART;
 80071f8:	4b23      	ldr	r3, [pc, #140]	; (8007288 <FloatAdjust+0x560>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
			enterFunction = 1;
 80071fe:	4b27      	ldr	r3, [pc, #156]	; (800729c <FloatAdjust+0x574>)
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(19, cursorLine);
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <FloatAdjust+0x558>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	4619      	mov	r1, r3
 800720a:	2013      	movs	r0, #19
 800720c:	f7fe fdac 	bl	8005d68 <LcdCursorSet>
			LcdData(0x20); //  "blank" character
 8007210:	2020      	movs	r0, #32
 8007212:	f7fe fd91 	bl	8005d38 <LcdData>
			return ST_MAIN_STATE;
 8007216:	231e      	movs	r3, #30
 8007218:	e02a      	b.n	8007270 <FloatAdjust+0x548>
		}

    case KEY_BACK:
		if (mode == DECIMAL_PART)
 800721a:	4b1b      	ldr	r3, [pc, #108]	; (8007288 <FloatAdjust+0x560>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d109      	bne.n	8007236 <FloatAdjust+0x50e>
		{
			mode=INTEGER_PART;
 8007222:	4b19      	ldr	r3, [pc, #100]	; (8007288 <FloatAdjust+0x560>)
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <FloatAdjust+0x550>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	b21b      	sxth	r3, r3
 800722e:	005a      	lsls	r2, r3, #1
 8007230:	4b16      	ldr	r3, [pc, #88]	; (800728c <FloatAdjust+0x564>)
 8007232:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8007234:	e01b      	b.n	800726e <FloatAdjust+0x546>
		}

		else
		{
			enterFunction = 1;
 8007236:	4b19      	ldr	r3, [pc, #100]	; (800729c <FloatAdjust+0x574>)
 8007238:	2201      	movs	r2, #1
 800723a:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <FloatAdjust+0x558>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	4619      	mov	r1, r3
 8007242:	200d      	movs	r0, #13
 8007244:	f7fe fd90 	bl	8005d68 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 8007248:	2020      	movs	r0, #32
 800724a:	f7fe fd75 	bl	8005d38 <LcdData>
			return ST_MAIN_STATE;
 800724e:	231e      	movs	r3, #30
 8007250:	e00e      	b.n	8007270 <FloatAdjust+0x548>
		}

	case KEY_STANDBY:
		enterFunction = 1;
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <FloatAdjust+0x574>)
 8007254:	2201      	movs	r2, #1
 8007256:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8007258:	4b09      	ldr	r3, [pc, #36]	; (8007280 <FloatAdjust+0x558>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	4619      	mov	r1, r3
 800725e:	200d      	movs	r0, #13
 8007260:	f7fe fd82 	bl	8005d68 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8007264:	2020      	movs	r0, #32
 8007266:	f7fe fd67 	bl	8005d38 <LcdData>
		return ST_STANDBY;
 800726a:	2314      	movs	r3, #20
 800726c:	e000      	b.n	8007270 <FloatAdjust+0x548>
	}

	return ST_FLT_ADJUST;
 800726e:	233c      	movs	r3, #60	; 0x3c
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bdb0      	pop	{r4, r5, r7, pc}
 8007278:	20000628 	.word	0x20000628
 800727c:	40240000 	.word	0x40240000
 8007280:	200004ca 	.word	0x200004ca
 8007284:	20000514 	.word	0x20000514
 8007288:	20000630 	.word	0x20000630
 800728c:	40012c00 	.word	0x40012c00
 8007290:	200004c9 	.word	0x200004c9
 8007294:	200004f0 	.word	0x200004f0
 8007298:	20000524 	.word	0x20000524
 800729c:	2000017b 	.word	0x2000017b

080072a0 <WriteValueStructToEeprom>:
 * @param page The page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param data Pointer to the ValueStruct to be written.
 */
void WriteValueStructToEeprom(uint16_t page, uint16_t offset, ValueStruct* data)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	603a      	str	r2, [r7, #0]
 80072aa:	80fb      	strh	r3, [r7, #6]
 80072ac:	460b      	mov	r3, r1
 80072ae:	80bb      	strh	r3, [r7, #4]
    uint16_t currentOffset = offset;
 80072b0:	88bb      	ldrh	r3, [r7, #4]
 80072b2:	82fb      	strh	r3, [r7, #22]

    // Write strNum
    WriteToEeprom(page, currentOffset, (uint8_t*)&data->strNum, sizeof(int8_t));
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f103 0210 	add.w	r2, r3, #16
 80072ba:	8af9      	ldrh	r1, [r7, #22]
 80072bc:	88f8      	ldrh	r0, [r7, #6]
 80072be:	2301      	movs	r3, #1
 80072c0:	f7fe fa2c 	bl	800571c <WriteToEeprom>
    currentOffset += sizeof(int8_t);
 80072c4:	8afb      	ldrh	r3, [r7, #22]
 80072c6:	3301      	adds	r3, #1
 80072c8:	82fb      	strh	r3, [r7, #22]

    // Write downLimit
    WriteFloatToEeprom(page, currentOffset, data->downLimit);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695a      	ldr	r2, [r3, #20]
 80072ce:	8af9      	ldrh	r1, [r7, #22]
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fac4 	bl	8005860 <WriteFloatToEeprom>
    currentOffset += sizeof(float);
 80072d8:	8afb      	ldrh	r3, [r7, #22]
 80072da:	3304      	adds	r3, #4
 80072dc:	82fb      	strh	r3, [r7, #22]

    // Write upLimit
    WriteFloatToEeprom(page, currentOffset, data->upLimit);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	8af9      	ldrh	r1, [r7, #22]
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe faba 	bl	8005860 <WriteFloatToEeprom>
    currentOffset += sizeof(float);
 80072ec:	8afb      	ldrh	r3, [r7, #22]
 80072ee:	3304      	adds	r3, #4
 80072f0:	82fb      	strh	r3, [r7, #22]

    // Write union data based on strNum
    if (data->strNum >= 0 && data->strNum <= 3) {
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db44      	blt.n	8007386 <WriteValueStructToEeprom+0xe6>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8007302:	2b03      	cmp	r3, #3
 8007304:	dc3f      	bgt.n	8007386 <WriteValueStructToEeprom+0xe6>
        // Write pText array
        for (int i = 0; i < 4; i++) {
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	e038      	b.n	800737e <WriteValueStructToEeprom+0xde>
            if (data->pText[i] != NULL) {
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d023      	beq.n	8007360 <WriteValueStructToEeprom+0xc0>
                uint8_t len = strlen(data->pText[i]);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	4618      	mov	r0, r3
 8007322:	f7f8 ff8b 	bl	800023c <strlen>
 8007326:	4603      	mov	r3, r0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	73fb      	strb	r3, [r7, #15]
                WriteToEeprom(page, currentOffset, &len, sizeof(uint8_t));
 800732c:	f107 020f 	add.w	r2, r7, #15
 8007330:	8af9      	ldrh	r1, [r7, #22]
 8007332:	88f8      	ldrh	r0, [r7, #6]
 8007334:	2301      	movs	r3, #1
 8007336:	f7fe f9f1 	bl	800571c <WriteToEeprom>
                currentOffset += sizeof(uint8_t);
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	3301      	adds	r3, #1
 800733e:	82fb      	strh	r3, [r7, #22]
                WriteToEeprom(page, currentOffset, (uint8_t*)data->pText[i], len);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	b29b      	uxth	r3, r3
 800734c:	8af9      	ldrh	r1, [r7, #22]
 800734e:	88f8      	ldrh	r0, [r7, #6]
 8007350:	f7fe f9e4 	bl	800571c <WriteToEeprom>
                currentOffset += len;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	b29a      	uxth	r2, r3
 8007358:	8afb      	ldrh	r3, [r7, #22]
 800735a:	4413      	add	r3, r2
 800735c:	82fb      	strh	r3, [r7, #22]
 800735e:	e00b      	b.n	8007378 <WriteValueStructToEeprom+0xd8>
            } else {
                uint8_t len = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	73bb      	strb	r3, [r7, #14]
                WriteToEeprom(page, currentOffset, &len, sizeof(uint8_t));
 8007364:	f107 020e 	add.w	r2, r7, #14
 8007368:	8af9      	ldrh	r1, [r7, #22]
 800736a:	88f8      	ldrh	r0, [r7, #6]
 800736c:	2301      	movs	r3, #1
 800736e:	f7fe f9d5 	bl	800571c <WriteToEeprom>
                currentOffset += sizeof(uint8_t);
 8007372:	8afb      	ldrh	r3, [r7, #22]
 8007374:	3301      	adds	r3, #1
 8007376:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 4; i++) {
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3301      	adds	r3, #1
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b03      	cmp	r3, #3
 8007382:	ddc3      	ble.n	800730c <WriteValueStructToEeprom+0x6c>
 8007384:	e018      	b.n	80073b8 <WriteValueStructToEeprom+0x118>
            }
        }
    } else if (data->strNum == 10) {
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800738c:	2b0a      	cmp	r3, #10
 800738e:	d107      	bne.n	80073a0 <WriteValueStructToEeprom+0x100>
        // Write fval
        WriteFloatToEeprom(page, currentOffset, data->fval);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	8af9      	ldrh	r1, [r7, #22]
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fa61 	bl	8005860 <WriteFloatToEeprom>
    } else if (data->strNum == 20){
        // Write ival
        WriteToEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
    }
}
 800739e:	e00b      	b.n	80073b8 <WriteValueStructToEeprom+0x118>
    } else if (data->strNum == 20){
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80073a6:	2b14      	cmp	r3, #20
 80073a8:	d106      	bne.n	80073b8 <WriteValueStructToEeprom+0x118>
        WriteToEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	8af9      	ldrh	r1, [r7, #22]
 80073ae:	88f8      	ldrh	r0, [r7, #6]
 80073b0:	2304      	movs	r3, #4
 80073b2:	f7fe f9b3 	bl	800571c <WriteToEeprom>
}
 80073b6:	e7ff      	b.n	80073b8 <WriteValueStructToEeprom+0x118>
 80073b8:	bf00      	nop
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <ReadValueStructFromEeprom>:
 * @param page The page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param data Pointer to the ValueStruct where the read data will be stored.
 */
void ReadValueStructFromEeprom(uint16_t page, uint16_t offset, ValueStruct* data)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	603a      	str	r2, [r7, #0]
 80073ca:	80fb      	strh	r3, [r7, #6]
 80073cc:	460b      	mov	r3, r1
 80073ce:	80bb      	strh	r3, [r7, #4]
    uint16_t currentOffset = offset;
 80073d0:	88bb      	ldrh	r3, [r7, #4]
 80073d2:	82fb      	strh	r3, [r7, #22]

    // Read strNum
    ReadFromEeprom(page, currentOffset, (uint8_t*)&data->strNum, sizeof(int8_t));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f103 0210 	add.w	r2, r3, #16
 80073da:	8af9      	ldrh	r1, [r7, #22]
 80073dc:	88f8      	ldrh	r0, [r7, #6]
 80073de:	2301      	movs	r3, #1
 80073e0:	f7fe fa70 	bl	80058c4 <ReadFromEeprom>
    currentOffset += sizeof(int8_t);
 80073e4:	8afb      	ldrh	r3, [r7, #22]
 80073e6:	3301      	adds	r3, #1
 80073e8:	82fb      	strh	r3, [r7, #22]

    // Read downLimit
    data->downLimit = ReadFloatFromEeprom(page, currentOffset);
 80073ea:	8afa      	ldrh	r2, [r7, #22]
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fa4d 	bl	8005890 <ReadFloatFromEeprom>
 80073f6:	4602      	mov	r2, r0
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	615a      	str	r2, [r3, #20]
    currentOffset += sizeof(float);
 80073fc:	8afb      	ldrh	r3, [r7, #22]
 80073fe:	3304      	adds	r3, #4
 8007400:	82fb      	strh	r3, [r7, #22]

    // Read upLimit
    data->upLimit = ReadFloatFromEeprom(page, currentOffset);
 8007402:	8afa      	ldrh	r2, [r7, #22]
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fa41 	bl	8005890 <ReadFloatFromEeprom>
 800740e:	4602      	mov	r2, r0
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	619a      	str	r2, [r3, #24]
    currentOffset += sizeof(float);
 8007414:	8afb      	ldrh	r3, [r7, #22]
 8007416:	3304      	adds	r3, #4
 8007418:	82fb      	strh	r3, [r7, #22]

    // Read union data based on strNum
    if (data->strNum >= 0 && data->strNum <= 3) {
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	db76      	blt.n	8007512 <ReadValueStructFromEeprom+0x152>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800742a:	2b03      	cmp	r3, #3
 800742c:	dc71      	bgt.n	8007512 <ReadValueStructFromEeprom+0x152>
        // Read pText array
        for (int i = 0; i < 4; i++) {
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	e06a      	b.n	800750a <ReadValueStructFromEeprom+0x14a>
            uint8_t len;
            ReadFromEeprom(page, currentOffset, &len, sizeof(uint8_t));
 8007434:	f107 020b 	add.w	r2, r7, #11
 8007438:	8af9      	ldrh	r1, [r7, #22]
 800743a:	88f8      	ldrh	r0, [r7, #6]
 800743c:	2301      	movs	r3, #1
 800743e:	f7fe fa41 	bl	80058c4 <ReadFromEeprom>
            currentOffset += sizeof(uint8_t);
 8007442:	8afb      	ldrh	r3, [r7, #22]
 8007444:	3301      	adds	r3, #1
 8007446:	82fb      	strh	r3, [r7, #22]

            if (len > 0) {
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d055      	beq.n	80074fa <ReadValueStructFromEeprom+0x13a>
                char* temp = (char*)malloc(len + 1);
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	3301      	adds	r3, #1
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f966 	bl	8007724 <malloc>
 8007458:	4603      	mov	r3, r0
 800745a:	60fb      	str	r3, [r7, #12]
                ReadFromEeprom(page, currentOffset, (uint8_t*)temp, len);
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	b29b      	uxth	r3, r3
 8007460:	8af9      	ldrh	r1, [r7, #22]
 8007462:	88f8      	ldrh	r0, [r7, #6]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	f7fe fa2d 	bl	80058c4 <ReadFromEeprom>
                temp[len] = '\0';
 800746a:	7afb      	ldrb	r3, [r7, #11]
 800746c:	461a      	mov	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4413      	add	r3, r2
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
                currentOffset += len;
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	b29a      	uxth	r2, r3
 800747a:	8afb      	ldrh	r3, [r7, #22]
 800747c:	4413      	add	r3, r2
 800747e:	82fb      	strh	r3, [r7, #22]

                // Match the read string with the constants
                if (strcmp(temp, NON) == 0) data->pText[i] = NON;
 8007480:	4933      	ldr	r1, [pc, #204]	; (8007550 <ReadValueStructFromEeprom+0x190>)
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7f8 fed0 	bl	8000228 <strcmp>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <ReadValueStructFromEeprom+0xda>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	492f      	ldr	r1, [pc, #188]	; (8007550 <ReadValueStructFromEeprom+0x190>)
 8007494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007498:	e02b      	b.n	80074f2 <ReadValueStructFromEeprom+0x132>
                else if (strcmp(temp, LOW) == 0) data->pText[i] = LOW;
 800749a:	492e      	ldr	r1, [pc, #184]	; (8007554 <ReadValueStructFromEeprom+0x194>)
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7f8 fec3 	bl	8000228 <strcmp>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <ReadValueStructFromEeprom+0xf4>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4929      	ldr	r1, [pc, #164]	; (8007554 <ReadValueStructFromEeprom+0x194>)
 80074ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074b2:	e01e      	b.n	80074f2 <ReadValueStructFromEeprom+0x132>
                else if (strcmp(temp, MED) == 0) data->pText[i] = MED;
 80074b4:	4928      	ldr	r1, [pc, #160]	; (8007558 <ReadValueStructFromEeprom+0x198>)
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7f8 feb6 	bl	8000228 <strcmp>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <ReadValueStructFromEeprom+0x10e>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4924      	ldr	r1, [pc, #144]	; (8007558 <ReadValueStructFromEeprom+0x198>)
 80074c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074cc:	e011      	b.n	80074f2 <ReadValueStructFromEeprom+0x132>
                else if (strcmp(temp, HIGH) == 0) data->pText[i] = HIGH;
 80074ce:	4923      	ldr	r1, [pc, #140]	; (800755c <ReadValueStructFromEeprom+0x19c>)
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7f8 fea9 	bl	8000228 <strcmp>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <ReadValueStructFromEeprom+0x128>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	491e      	ldr	r1, [pc, #120]	; (800755c <ReadValueStructFromEeprom+0x19c>)
 80074e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074e6:	e004      	b.n	80074f2 <ReadValueStructFromEeprom+0x132>
                else data->pText[i] = NULL;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	2100      	movs	r1, #0
 80074ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                free(temp);
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f91e 	bl	8007734 <free>
 80074f8:	e004      	b.n	8007504 <ReadValueStructFromEeprom+0x144>
            } else {
                data->pText[i] = NULL;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	2100      	movs	r1, #0
 8007500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < 4; i++) {
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3301      	adds	r3, #1
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b03      	cmp	r3, #3
 800750e:	dd91      	ble.n	8007434 <ReadValueStructFromEeprom+0x74>
 8007510:	e01a      	b.n	8007548 <ReadValueStructFromEeprom+0x188>
            }
        }
    } else if (data->strNum == 10) {
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8007518:	2b0a      	cmp	r3, #10
 800751a:	d109      	bne.n	8007530 <ReadValueStructFromEeprom+0x170>
        // Read fval
        data->fval = ReadFloatFromEeprom(page, currentOffset);
 800751c:	8afa      	ldrh	r2, [r7, #22]
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe f9b4 	bl	8005890 <ReadFloatFromEeprom>
 8007528:	4602      	mov	r2, r0
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	601a      	str	r2, [r3, #0]
    } else if (data->strNum == 20){
        // Read ival
        ReadFromEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
    }
}
 800752e:	e00b      	b.n	8007548 <ReadValueStructFromEeprom+0x188>
    } else if (data->strNum == 20){
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8007536:	2b14      	cmp	r3, #20
 8007538:	d106      	bne.n	8007548 <ReadValueStructFromEeprom+0x188>
        ReadFromEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	8af9      	ldrh	r1, [r7, #22]
 800753e:	88f8      	ldrh	r0, [r7, #6]
 8007540:	2304      	movs	r3, #4
 8007542:	f7fe f9bf 	bl	80058c4 <ReadFromEeprom>
}
 8007546:	e7ff      	b.n	8007548 <ReadValueStructFromEeprom+0x188>
 8007548:	bf00      	nop
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	0800c078 	.word	0x0800c078
 8007554:	0800c080 	.word	0x0800c080
 8007558:	0800c088 	.word	0x0800c088
 800755c:	0800c090 	.word	0x0800c090

08007560 <WriteValueStructArrayToEeprom>:
 * @param startPage The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param data Pointer to the array of ValueStruct to be written.
 * @param arraySize The number of ValueStruct elements in the array.
 */
void WriteValueStructArrayToEeprom(uint16_t startPage, ValueStruct* data, uint16_t arraySize)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	80fb      	strh	r3, [r7, #6]
 800756c:	4613      	mov	r3, r2
 800756e:	80bb      	strh	r3, [r7, #4]
    uint16_t currentPage = startPage;
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	81fb      	strh	r3, [r7, #14]
    uint16_t currentOffset = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < arraySize; i++)
 8007578:	2300      	movs	r3, #0
 800757a:	817b      	strh	r3, [r7, #10]
 800757c:	e01b      	b.n	80075b6 <WriteValueStructArrayToEeprom+0x56>
    {
        WriteValueStructToEeprom(currentPage, currentOffset, &data[i]);
 800757e:	897a      	ldrh	r2, [r7, #10]
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	461a      	mov	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	441a      	add	r2, r3
 800758e:	89b9      	ldrh	r1, [r7, #12]
 8007590:	89fb      	ldrh	r3, [r7, #14]
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fe84 	bl	80072a0 <WriteValueStructToEeprom>

        // Move to the next page if we're close to the end of the current page
        currentOffset += sizeof(ValueStruct);
 8007598:	89bb      	ldrh	r3, [r7, #12]
 800759a:	331c      	adds	r3, #28
 800759c:	81bb      	strh	r3, [r7, #12]
        if (currentOffset + sizeof(ValueStruct) > EEPROM_PAGE_SIZE)
 800759e:	89bb      	ldrh	r3, [r7, #12]
 80075a0:	331c      	adds	r3, #28
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d904      	bls.n	80075b0 <WriteValueStructArrayToEeprom+0x50>
        {
            currentPage++;
 80075a6:	89fb      	ldrh	r3, [r7, #14]
 80075a8:	3301      	adds	r3, #1
 80075aa:	81fb      	strh	r3, [r7, #14]
            currentOffset = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < arraySize; i++)
 80075b0:	897b      	ldrh	r3, [r7, #10]
 80075b2:	3301      	adds	r3, #1
 80075b4:	817b      	strh	r3, [r7, #10]
 80075b6:	897a      	ldrh	r2, [r7, #10]
 80075b8:	88bb      	ldrh	r3, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d3df      	bcc.n	800757e <WriteValueStructArrayToEeprom+0x1e>
        }
    }
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <ReadValueStructArrayFromEeprom>:
 * @param startPage The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param data Pointer to the array where the read ValueStruct elements will be stored.
 * @param arraySize The number of ValueStruct elements to read.
 */
void ReadValueStructArrayFromEeprom(uint16_t startPage, ValueStruct* data, uint16_t arraySize)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	80fb      	strh	r3, [r7, #6]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80bb      	strh	r3, [r7, #4]
    uint16_t currentPage = startPage;
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	81fb      	strh	r3, [r7, #14]
    uint16_t currentOffset = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < arraySize; i++)
 80075e0:	2300      	movs	r3, #0
 80075e2:	817b      	strh	r3, [r7, #10]
 80075e4:	e01b      	b.n	800761e <ReadValueStructArrayFromEeprom+0x56>
    {
        ReadValueStructFromEeprom(currentPage, currentOffset, &data[i]);
 80075e6:	897a      	ldrh	r2, [r7, #10]
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	461a      	mov	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	441a      	add	r2, r3
 80075f6:	89b9      	ldrh	r1, [r7, #12]
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fee0 	bl	80073c0 <ReadValueStructFromEeprom>

        // Move to the next page if we're close to the end of the current page
        currentOffset += sizeof(ValueStruct);
 8007600:	89bb      	ldrh	r3, [r7, #12]
 8007602:	331c      	adds	r3, #28
 8007604:	81bb      	strh	r3, [r7, #12]
        if (currentOffset + sizeof(ValueStruct) > EEPROM_PAGE_SIZE)
 8007606:	89bb      	ldrh	r3, [r7, #12]
 8007608:	331c      	adds	r3, #28
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d904      	bls.n	8007618 <ReadValueStructArrayFromEeprom+0x50>
        {
            currentPage++;
 800760e:	89fb      	ldrh	r3, [r7, #14]
 8007610:	3301      	adds	r3, #1
 8007612:	81fb      	strh	r3, [r7, #14]
            currentOffset = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < arraySize; i++)
 8007618:	897b      	ldrh	r3, [r7, #10]
 800761a:	3301      	adds	r3, #1
 800761c:	817b      	strh	r3, [r7, #10]
 800761e:	897a      	ldrh	r2, [r7, #10]
 8007620:	88bb      	ldrh	r3, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d3df      	bcc.n	80075e6 <ReadValueStructArrayFromEeprom+0x1e>
        }
    }
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <InitValueReadFromEeprom>:

/**
 * @brief read init values from external eeprom.
 */
void InitValueReadFromEeprom(void)
{
 8007630:	b598      	push	{r3, r4, r7, lr}
 8007632:	af00      	add	r7, sp, #0
	ReadValueStructArrayFromEeprom(0,values, NUMBER_OF_VARIABLES+1);
 8007634:	2209      	movs	r2, #9
 8007636:	4922      	ldr	r1, [pc, #136]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 8007638:	2000      	movs	r0, #0
 800763a:	f7ff ffc5 	bl	80075c8 <ReadValueStructArrayFromEeprom>
	Frequency = values[2].ival;
 800763e:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <InitValueReadFromEeprom+0x94>)
 8007644:	6013      	str	r3, [r2, #0]
	TimeOn = values[3].fval;
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <InitValueReadFromEeprom+0x98>)
 800764c:	6013      	str	r3, [r2, #0]
	Ramp = (values[4].ival * 1000) ; //To change Sec to milliSec
 800764e:	4b1c      	ldr	r3, [pc, #112]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007656:	fb02 f303 	mul.w	r3, r2, r3
 800765a:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <InitValueReadFromEeprom+0x9c>)
 800765c:	6013      	str	r3, [r2, #0]
	RythmOn = values[5].ival;
 800765e:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 8007660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007664:	4a1a      	ldr	r2, [pc, #104]	; (80076d0 <InitValueReadFromEeprom+0xa0>)
 8007666:	6013      	str	r3, [r2, #0]
	RythmOff = values[6].ival;
 8007668:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 800766a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800766e:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <InitValueReadFromEeprom+0xa4>)
 8007670:	6013      	str	r3, [r2, #0]
	RunTime = values[7].ival;
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <InitValueReadFromEeprom+0x90>)
 8007674:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007678:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <InitValueReadFromEeprom+0xa8>)
 800767a:	6013      	str	r3, [r2, #0]
	NumberOfRampPulse = Frequency*Ramp/1000;
 800767c:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <InitValueReadFromEeprom+0x94>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a12      	ldr	r2, [pc, #72]	; (80076cc <InitValueReadFromEeprom+0x9c>)
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	fb02 f303 	mul.w	r3, r2, r3
 8007688:	4a14      	ldr	r2, [pc, #80]	; (80076dc <InitValueReadFromEeprom+0xac>)
 800768a:	fb82 1203 	smull	r1, r2, r2, r3
 800768e:	1192      	asrs	r2, r2, #6
 8007690:	17db      	asrs	r3, r3, #31
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	b29a      	uxth	r2, r3
 8007696:	4b12      	ldr	r3, [pc, #72]	; (80076e0 <InitValueReadFromEeprom+0xb0>)
 8007698:	801a      	strh	r2, [r3, #0]
	StepRamp = TimeOn/NumberOfRampPulse;
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <InitValueReadFromEeprom+0x98>)
 800769c:	681c      	ldr	r4, [r3, #0]
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <InitValueReadFromEeprom+0xb0>)
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7f9 fb90 	bl	8000dc8 <__aeabi_i2f>
 80076a8:	4603      	mov	r3, r0
 80076aa:	4619      	mov	r1, r3
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7f9 fc93 	bl	8000fd8 <__aeabi_fdiv>
 80076b2:	4603      	mov	r3, r0
 80076b4:	461a      	mov	r2, r3
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <InitValueReadFromEeprom+0xb4>)
 80076b8:	601a      	str	r2, [r3, #0]
	//MiddleTime=RunTime-(2*(Ramp/1000));
}
 80076ba:	bf00      	nop
 80076bc:	bd98      	pop	{r3, r4, r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000524 	.word	0x20000524
 80076c4:	200004e8 	.word	0x200004e8
 80076c8:	200004f0 	.word	0x200004f0
 80076cc:	200004ec 	.word	0x200004ec
 80076d0:	200004f4 	.word	0x200004f4
 80076d4:	200004f8 	.word	0x200004f8
 80076d8:	200004fc 	.word	0x200004fc
 80076dc:	10624dd3 	.word	0x10624dd3
 80076e0:	20000500 	.word	0x20000500
 80076e4:	20000504 	.word	0x20000504

080076e8 <__assert_func>:
 80076e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ea:	4614      	mov	r4, r2
 80076ec:	461a      	mov	r2, r3
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <__assert_func+0x2c>)
 80076f0:	4605      	mov	r5, r0
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68d8      	ldr	r0, [r3, #12]
 80076f6:	b14c      	cbz	r4, 800770c <__assert_func+0x24>
 80076f8:	4b07      	ldr	r3, [pc, #28]	; (8007718 <__assert_func+0x30>)
 80076fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076fe:	9100      	str	r1, [sp, #0]
 8007700:	462b      	mov	r3, r5
 8007702:	4906      	ldr	r1, [pc, #24]	; (800771c <__assert_func+0x34>)
 8007704:	f000 ffda 	bl	80086bc <fiprintf>
 8007708:	f001 f90e 	bl	8008928 <abort>
 800770c:	4b04      	ldr	r3, [pc, #16]	; (8007720 <__assert_func+0x38>)
 800770e:	461c      	mov	r4, r3
 8007710:	e7f3      	b.n	80076fa <__assert_func+0x12>
 8007712:	bf00      	nop
 8007714:	200001d4 	.word	0x200001d4
 8007718:	0800c10d 	.word	0x0800c10d
 800771c:	0800c11a 	.word	0x0800c11a
 8007720:	0800c148 	.word	0x0800c148

08007724 <malloc>:
 8007724:	4b02      	ldr	r3, [pc, #8]	; (8007730 <malloc+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f000 b82b 	b.w	8007784 <_malloc_r>
 800772e:	bf00      	nop
 8007730:	200001d4 	.word	0x200001d4

08007734 <free>:
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <free+0xc>)
 8007736:	4601      	mov	r1, r0
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f001 bf69 	b.w	8009610 <_free_r>
 800773e:	bf00      	nop
 8007740:	200001d4 	.word	0x200001d4

08007744 <sbrk_aligned>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4e0e      	ldr	r6, [pc, #56]	; (8007780 <sbrk_aligned+0x3c>)
 8007748:	460c      	mov	r4, r1
 800774a:	6831      	ldr	r1, [r6, #0]
 800774c:	4605      	mov	r5, r0
 800774e:	b911      	cbnz	r1, 8007756 <sbrk_aligned+0x12>
 8007750:	f001 f888 	bl	8008864 <_sbrk_r>
 8007754:	6030      	str	r0, [r6, #0]
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f001 f883 	bl	8008864 <_sbrk_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d00a      	beq.n	8007778 <sbrk_aligned+0x34>
 8007762:	1cc4      	adds	r4, r0, #3
 8007764:	f024 0403 	bic.w	r4, r4, #3
 8007768:	42a0      	cmp	r0, r4
 800776a:	d007      	beq.n	800777c <sbrk_aligned+0x38>
 800776c:	1a21      	subs	r1, r4, r0
 800776e:	4628      	mov	r0, r5
 8007770:	f001 f878 	bl	8008864 <_sbrk_r>
 8007774:	3001      	adds	r0, #1
 8007776:	d101      	bne.n	800777c <sbrk_aligned+0x38>
 8007778:	f04f 34ff 	mov.w	r4, #4294967295
 800777c:	4620      	mov	r0, r4
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	20000638 	.word	0x20000638

08007784 <_malloc_r>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	1ccd      	adds	r5, r1, #3
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	2d00      	cmp	r5, #0
 8007798:	4607      	mov	r7, r0
 800779a:	db01      	blt.n	80077a0 <_malloc_r+0x1c>
 800779c:	42a9      	cmp	r1, r5
 800779e:	d905      	bls.n	80077ac <_malloc_r+0x28>
 80077a0:	230c      	movs	r3, #12
 80077a2:	2600      	movs	r6, #0
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4630      	mov	r0, r6
 80077a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007880 <_malloc_r+0xfc>
 80077b0:	f000 f868 	bl	8007884 <__malloc_lock>
 80077b4:	f8d8 3000 	ldr.w	r3, [r8]
 80077b8:	461c      	mov	r4, r3
 80077ba:	bb5c      	cbnz	r4, 8007814 <_malloc_r+0x90>
 80077bc:	4629      	mov	r1, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	f7ff ffc0 	bl	8007744 <sbrk_aligned>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	4604      	mov	r4, r0
 80077c8:	d155      	bne.n	8007876 <_malloc_r+0xf2>
 80077ca:	f8d8 4000 	ldr.w	r4, [r8]
 80077ce:	4626      	mov	r6, r4
 80077d0:	2e00      	cmp	r6, #0
 80077d2:	d145      	bne.n	8007860 <_malloc_r+0xdc>
 80077d4:	2c00      	cmp	r4, #0
 80077d6:	d048      	beq.n	800786a <_malloc_r+0xe6>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	4631      	mov	r1, r6
 80077dc:	4638      	mov	r0, r7
 80077de:	eb04 0903 	add.w	r9, r4, r3
 80077e2:	f001 f83f 	bl	8008864 <_sbrk_r>
 80077e6:	4581      	cmp	r9, r0
 80077e8:	d13f      	bne.n	800786a <_malloc_r+0xe6>
 80077ea:	6821      	ldr	r1, [r4, #0]
 80077ec:	4638      	mov	r0, r7
 80077ee:	1a6d      	subs	r5, r5, r1
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7ff ffa7 	bl	8007744 <sbrk_aligned>
 80077f6:	3001      	adds	r0, #1
 80077f8:	d037      	beq.n	800786a <_malloc_r+0xe6>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	442b      	add	r3, r5
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	f8d8 3000 	ldr.w	r3, [r8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d038      	beq.n	800787a <_malloc_r+0xf6>
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	42a2      	cmp	r2, r4
 800780c:	d12b      	bne.n	8007866 <_malloc_r+0xe2>
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e00f      	b.n	8007834 <_malloc_r+0xb0>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	1b52      	subs	r2, r2, r5
 8007818:	d41f      	bmi.n	800785a <_malloc_r+0xd6>
 800781a:	2a0b      	cmp	r2, #11
 800781c:	d917      	bls.n	800784e <_malloc_r+0xca>
 800781e:	1961      	adds	r1, r4, r5
 8007820:	42a3      	cmp	r3, r4
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	bf18      	it	ne
 8007826:	6059      	strne	r1, [r3, #4]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	bf08      	it	eq
 800782c:	f8c8 1000 	streq.w	r1, [r8]
 8007830:	5162      	str	r2, [r4, r5]
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	4638      	mov	r0, r7
 8007836:	f104 060b 	add.w	r6, r4, #11
 800783a:	f000 f829 	bl	8007890 <__malloc_unlock>
 800783e:	f026 0607 	bic.w	r6, r6, #7
 8007842:	1d23      	adds	r3, r4, #4
 8007844:	1af2      	subs	r2, r6, r3
 8007846:	d0ae      	beq.n	80077a6 <_malloc_r+0x22>
 8007848:	1b9b      	subs	r3, r3, r6
 800784a:	50a3      	str	r3, [r4, r2]
 800784c:	e7ab      	b.n	80077a6 <_malloc_r+0x22>
 800784e:	42a3      	cmp	r3, r4
 8007850:	6862      	ldr	r2, [r4, #4]
 8007852:	d1dd      	bne.n	8007810 <_malloc_r+0x8c>
 8007854:	f8c8 2000 	str.w	r2, [r8]
 8007858:	e7ec      	b.n	8007834 <_malloc_r+0xb0>
 800785a:	4623      	mov	r3, r4
 800785c:	6864      	ldr	r4, [r4, #4]
 800785e:	e7ac      	b.n	80077ba <_malloc_r+0x36>
 8007860:	4634      	mov	r4, r6
 8007862:	6876      	ldr	r6, [r6, #4]
 8007864:	e7b4      	b.n	80077d0 <_malloc_r+0x4c>
 8007866:	4613      	mov	r3, r2
 8007868:	e7cc      	b.n	8007804 <_malloc_r+0x80>
 800786a:	230c      	movs	r3, #12
 800786c:	4638      	mov	r0, r7
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	f000 f80e 	bl	8007890 <__malloc_unlock>
 8007874:	e797      	b.n	80077a6 <_malloc_r+0x22>
 8007876:	6025      	str	r5, [r4, #0]
 8007878:	e7dc      	b.n	8007834 <_malloc_r+0xb0>
 800787a:	605b      	str	r3, [r3, #4]
 800787c:	deff      	udf	#255	; 0xff
 800787e:	bf00      	nop
 8007880:	20000634 	.word	0x20000634

08007884 <__malloc_lock>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__malloc_lock+0x8>)
 8007886:	f001 b83a 	b.w	80088fe <__retarget_lock_acquire_recursive>
 800788a:	bf00      	nop
 800788c:	2000077c 	.word	0x2000077c

08007890 <__malloc_unlock>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__malloc_unlock+0x8>)
 8007892:	f001 b835 	b.w	8008900 <__retarget_lock_release_recursive>
 8007896:	bf00      	nop
 8007898:	2000077c 	.word	0x2000077c

0800789c <__cvt>:
 800789c:	2b00      	cmp	r3, #0
 800789e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a2:	461f      	mov	r7, r3
 80078a4:	bfbb      	ittet	lt
 80078a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80078aa:	461f      	movlt	r7, r3
 80078ac:	2300      	movge	r3, #0
 80078ae:	232d      	movlt	r3, #45	; 0x2d
 80078b0:	b088      	sub	sp, #32
 80078b2:	4614      	mov	r4, r2
 80078b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80078b8:	7013      	strb	r3, [r2, #0]
 80078ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80078c0:	f023 0820 	bic.w	r8, r3, #32
 80078c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078c8:	d005      	beq.n	80078d6 <__cvt+0x3a>
 80078ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078ce:	d100      	bne.n	80078d2 <__cvt+0x36>
 80078d0:	3501      	adds	r5, #1
 80078d2:	2302      	movs	r3, #2
 80078d4:	e000      	b.n	80078d8 <__cvt+0x3c>
 80078d6:	2303      	movs	r3, #3
 80078d8:	aa07      	add	r2, sp, #28
 80078da:	9204      	str	r2, [sp, #16]
 80078dc:	aa06      	add	r2, sp, #24
 80078de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80078e2:	e9cd 3500 	strd	r3, r5, [sp]
 80078e6:	4622      	mov	r2, r4
 80078e8:	463b      	mov	r3, r7
 80078ea:	f001 f8ad 	bl	8008a48 <_dtoa_r>
 80078ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078f2:	4606      	mov	r6, r0
 80078f4:	d102      	bne.n	80078fc <__cvt+0x60>
 80078f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078f8:	07db      	lsls	r3, r3, #31
 80078fa:	d522      	bpl.n	8007942 <__cvt+0xa6>
 80078fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007900:	eb06 0905 	add.w	r9, r6, r5
 8007904:	d110      	bne.n	8007928 <__cvt+0x8c>
 8007906:	7833      	ldrb	r3, [r6, #0]
 8007908:	2b30      	cmp	r3, #48	; 0x30
 800790a:	d10a      	bne.n	8007922 <__cvt+0x86>
 800790c:	2200      	movs	r2, #0
 800790e:	2300      	movs	r3, #0
 8007910:	4620      	mov	r0, r4
 8007912:	4639      	mov	r1, r7
 8007914:	f7f9 f8be 	bl	8000a94 <__aeabi_dcmpeq>
 8007918:	b918      	cbnz	r0, 8007922 <__cvt+0x86>
 800791a:	f1c5 0501 	rsb	r5, r5, #1
 800791e:	f8ca 5000 	str.w	r5, [sl]
 8007922:	f8da 3000 	ldr.w	r3, [sl]
 8007926:	4499      	add	r9, r3
 8007928:	2200      	movs	r2, #0
 800792a:	2300      	movs	r3, #0
 800792c:	4620      	mov	r0, r4
 800792e:	4639      	mov	r1, r7
 8007930:	f7f9 f8b0 	bl	8000a94 <__aeabi_dcmpeq>
 8007934:	b108      	cbz	r0, 800793a <__cvt+0x9e>
 8007936:	f8cd 901c 	str.w	r9, [sp, #28]
 800793a:	2230      	movs	r2, #48	; 0x30
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	454b      	cmp	r3, r9
 8007940:	d307      	bcc.n	8007952 <__cvt+0xb6>
 8007942:	4630      	mov	r0, r6
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007948:	1b9b      	subs	r3, r3, r6
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	b008      	add	sp, #32
 800794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007952:	1c59      	adds	r1, r3, #1
 8007954:	9107      	str	r1, [sp, #28]
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e7f0      	b.n	800793c <__cvt+0xa0>

0800795a <__exponent>:
 800795a:	4603      	mov	r3, r0
 800795c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800795e:	2900      	cmp	r1, #0
 8007960:	f803 2b02 	strb.w	r2, [r3], #2
 8007964:	bfb6      	itet	lt
 8007966:	222d      	movlt	r2, #45	; 0x2d
 8007968:	222b      	movge	r2, #43	; 0x2b
 800796a:	4249      	neglt	r1, r1
 800796c:	2909      	cmp	r1, #9
 800796e:	7042      	strb	r2, [r0, #1]
 8007970:	dd2a      	ble.n	80079c8 <__exponent+0x6e>
 8007972:	f10d 0207 	add.w	r2, sp, #7
 8007976:	4617      	mov	r7, r2
 8007978:	260a      	movs	r6, #10
 800797a:	fb91 f5f6 	sdiv	r5, r1, r6
 800797e:	4694      	mov	ip, r2
 8007980:	fb06 1415 	mls	r4, r6, r5, r1
 8007984:	3430      	adds	r4, #48	; 0x30
 8007986:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800798a:	460c      	mov	r4, r1
 800798c:	2c63      	cmp	r4, #99	; 0x63
 800798e:	4629      	mov	r1, r5
 8007990:	f102 32ff 	add.w	r2, r2, #4294967295
 8007994:	dcf1      	bgt.n	800797a <__exponent+0x20>
 8007996:	3130      	adds	r1, #48	; 0x30
 8007998:	f1ac 0402 	sub.w	r4, ip, #2
 800799c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079a0:	4622      	mov	r2, r4
 80079a2:	1c41      	adds	r1, r0, #1
 80079a4:	42ba      	cmp	r2, r7
 80079a6:	d30a      	bcc.n	80079be <__exponent+0x64>
 80079a8:	f10d 0209 	add.w	r2, sp, #9
 80079ac:	eba2 020c 	sub.w	r2, r2, ip
 80079b0:	42bc      	cmp	r4, r7
 80079b2:	bf88      	it	hi
 80079b4:	2200      	movhi	r2, #0
 80079b6:	4413      	add	r3, r2
 80079b8:	1a18      	subs	r0, r3, r0
 80079ba:	b003      	add	sp, #12
 80079bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80079c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80079c6:	e7ed      	b.n	80079a4 <__exponent+0x4a>
 80079c8:	2330      	movs	r3, #48	; 0x30
 80079ca:	3130      	adds	r1, #48	; 0x30
 80079cc:	7083      	strb	r3, [r0, #2]
 80079ce:	70c1      	strb	r1, [r0, #3]
 80079d0:	1d03      	adds	r3, r0, #4
 80079d2:	e7f1      	b.n	80079b8 <__exponent+0x5e>

080079d4 <_printf_float>:
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	b091      	sub	sp, #68	; 0x44
 80079da:	460c      	mov	r4, r1
 80079dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80079e0:	4616      	mov	r6, r2
 80079e2:	461f      	mov	r7, r3
 80079e4:	4605      	mov	r5, r0
 80079e6:	f000 ff05 	bl	80087f4 <_localeconv_r>
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	9309      	str	r3, [sp, #36]	; 0x24
 80079f0:	f7f8 fc24 	bl	800023c <strlen>
 80079f4:	2300      	movs	r3, #0
 80079f6:	930e      	str	r3, [sp, #56]	; 0x38
 80079f8:	f8d8 3000 	ldr.w	r3, [r8]
 80079fc:	900a      	str	r0, [sp, #40]	; 0x28
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	f103 0208 	add.w	r2, r3, #8
 8007a08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a0c:	f8d4 b000 	ldr.w	fp, [r4]
 8007a10:	f8c8 2000 	str.w	r2, [r8]
 8007a14:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4643      	mov	r3, r8
 8007a1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a20:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	4b9c      	ldr	r3, [pc, #624]	; (8007ca0 <_printf_float+0x2cc>)
 8007a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a30:	f7f9 f862 	bl	8000af8 <__aeabi_dcmpun>
 8007a34:	bb70      	cbnz	r0, 8007a94 <_printf_float+0xc0>
 8007a36:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	4b98      	ldr	r3, [pc, #608]	; (8007ca0 <_printf_float+0x2cc>)
 8007a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a40:	f7f9 f83c 	bl	8000abc <__aeabi_dcmple>
 8007a44:	bb30      	cbnz	r0, 8007a94 <_printf_float+0xc0>
 8007a46:	2200      	movs	r2, #0
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4641      	mov	r1, r8
 8007a4e:	f7f9 f82b 	bl	8000aa8 <__aeabi_dcmplt>
 8007a52:	b110      	cbz	r0, 8007a5a <_printf_float+0x86>
 8007a54:	232d      	movs	r3, #45	; 0x2d
 8007a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5a:	4a92      	ldr	r2, [pc, #584]	; (8007ca4 <_printf_float+0x2d0>)
 8007a5c:	4b92      	ldr	r3, [pc, #584]	; (8007ca8 <_printf_float+0x2d4>)
 8007a5e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a62:	bf94      	ite	ls
 8007a64:	4690      	movls	r8, r2
 8007a66:	4698      	movhi	r8, r3
 8007a68:	2303      	movs	r3, #3
 8007a6a:	f04f 0a00 	mov.w	sl, #0
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	f02b 0304 	bic.w	r3, fp, #4
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	4633      	mov	r3, r6
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	9700      	str	r7, [sp, #0]
 8007a7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a80:	f000 f9d6 	bl	8007e30 <_printf_common>
 8007a84:	3001      	adds	r0, #1
 8007a86:	f040 8090 	bne.w	8007baa <_printf_float+0x1d6>
 8007a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8e:	b011      	add	sp, #68	; 0x44
 8007a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	4652      	mov	r2, sl
 8007a96:	4643      	mov	r3, r8
 8007a98:	4650      	mov	r0, sl
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	f7f9 f82c 	bl	8000af8 <__aeabi_dcmpun>
 8007aa0:	b148      	cbz	r0, 8007ab6 <_printf_float+0xe2>
 8007aa2:	f1b8 0f00 	cmp.w	r8, #0
 8007aa6:	bfb8      	it	lt
 8007aa8:	232d      	movlt	r3, #45	; 0x2d
 8007aaa:	4a80      	ldr	r2, [pc, #512]	; (8007cac <_printf_float+0x2d8>)
 8007aac:	bfb8      	it	lt
 8007aae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ab2:	4b7f      	ldr	r3, [pc, #508]	; (8007cb0 <_printf_float+0x2dc>)
 8007ab4:	e7d3      	b.n	8007a5e <_printf_float+0x8a>
 8007ab6:	6863      	ldr	r3, [r4, #4]
 8007ab8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	d142      	bne.n	8007b46 <_printf_float+0x172>
 8007ac0:	2306      	movs	r3, #6
 8007ac2:	6063      	str	r3, [r4, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	9206      	str	r2, [sp, #24]
 8007ac8:	aa0e      	add	r2, sp, #56	; 0x38
 8007aca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007ace:	aa0d      	add	r2, sp, #52	; 0x34
 8007ad0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007ad4:	9203      	str	r2, [sp, #12]
 8007ad6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007ada:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	4643      	mov	r3, r8
 8007aea:	910b      	str	r1, [sp, #44]	; 0x2c
 8007aec:	f7ff fed6 	bl	800789c <__cvt>
 8007af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007af2:	4680      	mov	r8, r0
 8007af4:	2947      	cmp	r1, #71	; 0x47
 8007af6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007af8:	d108      	bne.n	8007b0c <_printf_float+0x138>
 8007afa:	1cc8      	adds	r0, r1, #3
 8007afc:	db02      	blt.n	8007b04 <_printf_float+0x130>
 8007afe:	6863      	ldr	r3, [r4, #4]
 8007b00:	4299      	cmp	r1, r3
 8007b02:	dd40      	ble.n	8007b86 <_printf_float+0x1b2>
 8007b04:	f1a9 0902 	sub.w	r9, r9, #2
 8007b08:	fa5f f989 	uxtb.w	r9, r9
 8007b0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b10:	d81f      	bhi.n	8007b52 <_printf_float+0x17e>
 8007b12:	464a      	mov	r2, r9
 8007b14:	3901      	subs	r1, #1
 8007b16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b1a:	910d      	str	r1, [sp, #52]	; 0x34
 8007b1c:	f7ff ff1d 	bl	800795a <__exponent>
 8007b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b22:	4682      	mov	sl, r0
 8007b24:	1813      	adds	r3, r2, r0
 8007b26:	2a01      	cmp	r2, #1
 8007b28:	6123      	str	r3, [r4, #16]
 8007b2a:	dc02      	bgt.n	8007b32 <_printf_float+0x15e>
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	07d2      	lsls	r2, r2, #31
 8007b30:	d501      	bpl.n	8007b36 <_printf_float+0x162>
 8007b32:	3301      	adds	r3, #1
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d09b      	beq.n	8007a76 <_printf_float+0xa2>
 8007b3e:	232d      	movs	r3, #45	; 0x2d
 8007b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b44:	e797      	b.n	8007a76 <_printf_float+0xa2>
 8007b46:	2947      	cmp	r1, #71	; 0x47
 8007b48:	d1bc      	bne.n	8007ac4 <_printf_float+0xf0>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1ba      	bne.n	8007ac4 <_printf_float+0xf0>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e7b7      	b.n	8007ac2 <_printf_float+0xee>
 8007b52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b56:	d118      	bne.n	8007b8a <_printf_float+0x1b6>
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	dd0b      	ble.n	8007b76 <_printf_float+0x1a2>
 8007b5e:	6121      	str	r1, [r4, #16]
 8007b60:	b913      	cbnz	r3, 8007b68 <_printf_float+0x194>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	07d0      	lsls	r0, r2, #31
 8007b66:	d502      	bpl.n	8007b6e <_printf_float+0x19a>
 8007b68:	3301      	adds	r3, #1
 8007b6a:	440b      	add	r3, r1
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b74:	e7df      	b.n	8007b36 <_printf_float+0x162>
 8007b76:	b913      	cbnz	r3, 8007b7e <_printf_float+0x1aa>
 8007b78:	6822      	ldr	r2, [r4, #0]
 8007b7a:	07d2      	lsls	r2, r2, #31
 8007b7c:	d501      	bpl.n	8007b82 <_printf_float+0x1ae>
 8007b7e:	3302      	adds	r3, #2
 8007b80:	e7f4      	b.n	8007b6c <_printf_float+0x198>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e7f2      	b.n	8007b6c <_printf_float+0x198>
 8007b86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	db05      	blt.n	8007b9c <_printf_float+0x1c8>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	6121      	str	r1, [r4, #16]
 8007b94:	07d8      	lsls	r0, r3, #31
 8007b96:	d5ea      	bpl.n	8007b6e <_printf_float+0x19a>
 8007b98:	1c4b      	adds	r3, r1, #1
 8007b9a:	e7e7      	b.n	8007b6c <_printf_float+0x198>
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	bfcc      	ite	gt
 8007ba0:	2201      	movgt	r2, #1
 8007ba2:	f1c1 0202 	rsble	r2, r1, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	e7e0      	b.n	8007b6c <_printf_float+0x198>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	055a      	lsls	r2, r3, #21
 8007bae:	d407      	bmi.n	8007bc0 <_printf_float+0x1ec>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	4642      	mov	r2, r8
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d12b      	bne.n	8007c16 <_printf_float+0x242>
 8007bbe:	e764      	b.n	8007a8a <_printf_float+0xb6>
 8007bc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007bc4:	f240 80dd 	bls.w	8007d82 <_printf_float+0x3ae>
 8007bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f7f8 ff60 	bl	8000a94 <__aeabi_dcmpeq>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d033      	beq.n	8007c40 <_printf_float+0x26c>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	4a35      	ldr	r2, [pc, #212]	; (8007cb4 <_printf_float+0x2e0>)
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	f43f af51 	beq.w	8007a8a <_printf_float+0xb6>
 8007be8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bec:	429a      	cmp	r2, r3
 8007bee:	db02      	blt.n	8007bf6 <_printf_float+0x222>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	07d8      	lsls	r0, r3, #31
 8007bf4:	d50f      	bpl.n	8007c16 <_printf_float+0x242>
 8007bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f af42 	beq.w	8007a8a <_printf_float+0xb6>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 091a 	add.w	r9, r4, #26
 8007c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4543      	cmp	r3, r8
 8007c14:	dc09      	bgt.n	8007c2a <_printf_float+0x256>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	079b      	lsls	r3, r3, #30
 8007c1a:	f100 8104 	bmi.w	8007e26 <_printf_float+0x452>
 8007c1e:	68e0      	ldr	r0, [r4, #12]
 8007c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c22:	4298      	cmp	r0, r3
 8007c24:	bfb8      	it	lt
 8007c26:	4618      	movlt	r0, r3
 8007c28:	e731      	b.n	8007a8e <_printf_float+0xba>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	464a      	mov	r2, r9
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	f43f af28 	beq.w	8007a8a <_printf_float+0xb6>
 8007c3a:	f108 0801 	add.w	r8, r8, #1
 8007c3e:	e7e6      	b.n	8007c0e <_printf_float+0x23a>
 8007c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc38      	bgt.n	8007cb8 <_printf_float+0x2e4>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	4a19      	ldr	r2, [pc, #100]	; (8007cb4 <_printf_float+0x2e0>)
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f af1a 	beq.w	8007a8a <_printf_float+0xb6>
 8007c56:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	d102      	bne.n	8007c64 <_printf_float+0x290>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	07d9      	lsls	r1, r3, #31
 8007c62:	d5d8      	bpl.n	8007c16 <_printf_float+0x242>
 8007c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af0b 	beq.w	8007a8a <_printf_float+0xb6>
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	f104 0a1a 	add.w	sl, r4, #26
 8007c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7e:	425b      	negs	r3, r3
 8007c80:	454b      	cmp	r3, r9
 8007c82:	dc01      	bgt.n	8007c88 <_printf_float+0x2b4>
 8007c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c86:	e794      	b.n	8007bb2 <_printf_float+0x1de>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f aef9 	beq.w	8007a8a <_printf_float+0xb6>
 8007c98:	f109 0901 	add.w	r9, r9, #1
 8007c9c:	e7ee      	b.n	8007c7c <_printf_float+0x2a8>
 8007c9e:	bf00      	nop
 8007ca0:	7fefffff 	.word	0x7fefffff
 8007ca4:	0800c149 	.word	0x0800c149
 8007ca8:	0800c14d 	.word	0x0800c14d
 8007cac:	0800c151 	.word	0x0800c151
 8007cb0:	0800c155 	.word	0x0800c155
 8007cb4:	0800c159 	.word	0x0800c159
 8007cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	bfa8      	it	ge
 8007cc0:	461a      	movge	r2, r3
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	4691      	mov	r9, r2
 8007cc6:	dc37      	bgt.n	8007d38 <_printf_float+0x364>
 8007cc8:	f04f 0b00 	mov.w	fp, #0
 8007ccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cd0:	f104 021a 	add.w	r2, r4, #26
 8007cd4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007cd8:	ebaa 0309 	sub.w	r3, sl, r9
 8007cdc:	455b      	cmp	r3, fp
 8007cde:	dc33      	bgt.n	8007d48 <_printf_float+0x374>
 8007ce0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	db3b      	blt.n	8007d60 <_printf_float+0x38c>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	d438      	bmi.n	8007d60 <_printf_float+0x38c>
 8007cee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007cf2:	eba2 0903 	sub.w	r9, r2, r3
 8007cf6:	eba2 020a 	sub.w	r2, r2, sl
 8007cfa:	4591      	cmp	r9, r2
 8007cfc:	bfa8      	it	ge
 8007cfe:	4691      	movge	r9, r2
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	dc34      	bgt.n	8007d70 <_printf_float+0x39c>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d0e:	f104 0a1a 	add.w	sl, r4, #26
 8007d12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	eba3 0309 	sub.w	r3, r3, r9
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	f77f af7a 	ble.w	8007c16 <_printf_float+0x242>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4652      	mov	r2, sl
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f aeac 	beq.w	8007a8a <_printf_float+0xb6>
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	e7ec      	b.n	8007d12 <_printf_float+0x33e>
 8007d38:	4613      	mov	r3, r2
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	d1c0      	bne.n	8007cc8 <_printf_float+0x2f4>
 8007d46:	e6a0      	b.n	8007a8a <_printf_float+0xb6>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f ae99 	beq.w	8007a8a <_printf_float+0xb6>
 8007d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d5a:	f10b 0b01 	add.w	fp, fp, #1
 8007d5e:	e7b9      	b.n	8007cd4 <_printf_float+0x300>
 8007d60:	4631      	mov	r1, r6
 8007d62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d1bf      	bne.n	8007cee <_printf_float+0x31a>
 8007d6e:	e68c      	b.n	8007a8a <_printf_float+0xb6>
 8007d70:	464b      	mov	r3, r9
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	eb08 020a 	add.w	r2, r8, sl
 8007d7a:	47b8      	blx	r7
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d1c2      	bne.n	8007d06 <_printf_float+0x332>
 8007d80:	e683      	b.n	8007a8a <_printf_float+0xb6>
 8007d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d84:	2a01      	cmp	r2, #1
 8007d86:	dc01      	bgt.n	8007d8c <_printf_float+0x3b8>
 8007d88:	07db      	lsls	r3, r3, #31
 8007d8a:	d539      	bpl.n	8007e00 <_printf_float+0x42c>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4642      	mov	r2, r8
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f ae77 	beq.w	8007a8a <_printf_float+0xb6>
 8007d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007da0:	4631      	mov	r1, r6
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b8      	blx	r7
 8007da6:	3001      	adds	r0, #1
 8007da8:	f43f ae6f 	beq.w	8007a8a <_printf_float+0xb6>
 8007dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007db8:	f7f8 fe6c 	bl	8000a94 <__aeabi_dcmpeq>
 8007dbc:	b9d8      	cbnz	r0, 8007df6 <_printf_float+0x422>
 8007dbe:	f109 33ff 	add.w	r3, r9, #4294967295
 8007dc2:	f108 0201 	add.w	r2, r8, #1
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d10e      	bne.n	8007dee <_printf_float+0x41a>
 8007dd0:	e65b      	b.n	8007a8a <_printf_float+0xb6>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	464a      	mov	r2, r9
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae54 	beq.w	8007a8a <_printf_float+0xb6>
 8007de2:	f108 0801 	add.w	r8, r8, #1
 8007de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007de8:	3b01      	subs	r3, #1
 8007dea:	4543      	cmp	r3, r8
 8007dec:	dcf1      	bgt.n	8007dd2 <_printf_float+0x3fe>
 8007dee:	4653      	mov	r3, sl
 8007df0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007df4:	e6de      	b.n	8007bb4 <_printf_float+0x1e0>
 8007df6:	f04f 0800 	mov.w	r8, #0
 8007dfa:	f104 091a 	add.w	r9, r4, #26
 8007dfe:	e7f2      	b.n	8007de6 <_printf_float+0x412>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4642      	mov	r2, r8
 8007e04:	e7df      	b.n	8007dc6 <_printf_float+0x3f2>
 8007e06:	2301      	movs	r3, #1
 8007e08:	464a      	mov	r2, r9
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	f43f ae3a 	beq.w	8007a8a <_printf_float+0xb6>
 8007e16:	f108 0801 	add.w	r8, r8, #1
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e1e:	1a5b      	subs	r3, r3, r1
 8007e20:	4543      	cmp	r3, r8
 8007e22:	dcf0      	bgt.n	8007e06 <_printf_float+0x432>
 8007e24:	e6fb      	b.n	8007c1e <_printf_float+0x24a>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	f104 0919 	add.w	r9, r4, #25
 8007e2e:	e7f4      	b.n	8007e1a <_printf_float+0x446>

08007e30 <_printf_common>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	4616      	mov	r6, r2
 8007e36:	4699      	mov	r9, r3
 8007e38:	688a      	ldr	r2, [r1, #8]
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bfb8      	it	lt
 8007e42:	4613      	movlt	r3, r2
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e50:	b10a      	cbz	r2, 8007e56 <_printf_common+0x26>
 8007e52:	3301      	adds	r3, #1
 8007e54:	6033      	str	r3, [r6, #0]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	0699      	lsls	r1, r3, #26
 8007e5a:	bf42      	ittt	mi
 8007e5c:	6833      	ldrmi	r3, [r6, #0]
 8007e5e:	3302      	addmi	r3, #2
 8007e60:	6033      	strmi	r3, [r6, #0]
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	f015 0506 	ands.w	r5, r5, #6
 8007e68:	d106      	bne.n	8007e78 <_printf_common+0x48>
 8007e6a:	f104 0a19 	add.w	sl, r4, #25
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	6832      	ldr	r2, [r6, #0]
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dc2b      	bgt.n	8007ed0 <_printf_common+0xa0>
 8007e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e7c:	1e13      	subs	r3, r2, #0
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	bf18      	it	ne
 8007e82:	2301      	movne	r3, #1
 8007e84:	0692      	lsls	r2, r2, #26
 8007e86:	d430      	bmi.n	8007eea <_printf_common+0xba>
 8007e88:	4649      	mov	r1, r9
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e90:	47c0      	blx	r8
 8007e92:	3001      	adds	r0, #1
 8007e94:	d023      	beq.n	8007ede <_printf_common+0xae>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	6922      	ldr	r2, [r4, #16]
 8007e9a:	f003 0306 	and.w	r3, r3, #6
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	bf14      	ite	ne
 8007ea2:	2500      	movne	r5, #0
 8007ea4:	6833      	ldreq	r3, [r6, #0]
 8007ea6:	f04f 0600 	mov.w	r6, #0
 8007eaa:	bf08      	it	eq
 8007eac:	68e5      	ldreq	r5, [r4, #12]
 8007eae:	f104 041a 	add.w	r4, r4, #26
 8007eb2:	bf08      	it	eq
 8007eb4:	1aed      	subeq	r5, r5, r3
 8007eb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007eba:	bf08      	it	eq
 8007ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	bfc4      	itt	gt
 8007ec4:	1a9b      	subgt	r3, r3, r2
 8007ec6:	18ed      	addgt	r5, r5, r3
 8007ec8:	42b5      	cmp	r5, r6
 8007eca:	d11a      	bne.n	8007f02 <_printf_common+0xd2>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e008      	b.n	8007ee2 <_printf_common+0xb2>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	47c0      	blx	r8
 8007eda:	3001      	adds	r0, #1
 8007edc:	d103      	bne.n	8007ee6 <_printf_common+0xb6>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	e7c1      	b.n	8007e6e <_printf_common+0x3e>
 8007eea:	2030      	movs	r0, #48	; 0x30
 8007eec:	18e1      	adds	r1, r4, r3
 8007eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ef8:	4422      	add	r2, r4
 8007efa:	3302      	adds	r3, #2
 8007efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f00:	e7c2      	b.n	8007e88 <_printf_common+0x58>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4622      	mov	r2, r4
 8007f06:	4649      	mov	r1, r9
 8007f08:	4638      	mov	r0, r7
 8007f0a:	47c0      	blx	r8
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0e6      	beq.n	8007ede <_printf_common+0xae>
 8007f10:	3601      	adds	r6, #1
 8007f12:	e7d9      	b.n	8007ec8 <_printf_common+0x98>

08007f14 <_printf_i>:
 8007f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	7e0f      	ldrb	r7, [r1, #24]
 8007f1a:	4691      	mov	r9, r2
 8007f1c:	2f78      	cmp	r7, #120	; 0x78
 8007f1e:	4680      	mov	r8, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	469a      	mov	sl, r3
 8007f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f2a:	d807      	bhi.n	8007f3c <_printf_i+0x28>
 8007f2c:	2f62      	cmp	r7, #98	; 0x62
 8007f2e:	d80a      	bhi.n	8007f46 <_printf_i+0x32>
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	f000 80d5 	beq.w	80080e0 <_printf_i+0x1cc>
 8007f36:	2f58      	cmp	r7, #88	; 0x58
 8007f38:	f000 80c1 	beq.w	80080be <_printf_i+0x1aa>
 8007f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f44:	e03a      	b.n	8007fbc <_printf_i+0xa8>
 8007f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f4a:	2b15      	cmp	r3, #21
 8007f4c:	d8f6      	bhi.n	8007f3c <_printf_i+0x28>
 8007f4e:	a101      	add	r1, pc, #4	; (adr r1, 8007f54 <_printf_i+0x40>)
 8007f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f54:	08007fad 	.word	0x08007fad
 8007f58:	08007fc1 	.word	0x08007fc1
 8007f5c:	08007f3d 	.word	0x08007f3d
 8007f60:	08007f3d 	.word	0x08007f3d
 8007f64:	08007f3d 	.word	0x08007f3d
 8007f68:	08007f3d 	.word	0x08007f3d
 8007f6c:	08007fc1 	.word	0x08007fc1
 8007f70:	08007f3d 	.word	0x08007f3d
 8007f74:	08007f3d 	.word	0x08007f3d
 8007f78:	08007f3d 	.word	0x08007f3d
 8007f7c:	08007f3d 	.word	0x08007f3d
 8007f80:	080080c7 	.word	0x080080c7
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	08008081 	.word	0x08008081
 8007f8c:	08007f3d 	.word	0x08007f3d
 8007f90:	08007f3d 	.word	0x08007f3d
 8007f94:	080080e9 	.word	0x080080e9
 8007f98:	08007f3d 	.word	0x08007f3d
 8007f9c:	08007fed 	.word	0x08007fed
 8007fa0:	08007f3d 	.word	0x08007f3d
 8007fa4:	08007f3d 	.word	0x08007f3d
 8007fa8:	08008089 	.word	0x08008089
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	602a      	str	r2, [r5, #0]
 8007fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0a0      	b.n	8008102 <_printf_i+0x1ee>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	0607      	lsls	r7, r0, #24
 8007fc6:	f103 0104 	add.w	r1, r3, #4
 8007fca:	6029      	str	r1, [r5, #0]
 8007fcc:	d501      	bpl.n	8007fd2 <_printf_i+0xbe>
 8007fce:	681e      	ldr	r6, [r3, #0]
 8007fd0:	e003      	b.n	8007fda <_printf_i+0xc6>
 8007fd2:	0646      	lsls	r6, r0, #25
 8007fd4:	d5fb      	bpl.n	8007fce <_printf_i+0xba>
 8007fd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	da03      	bge.n	8007fe6 <_printf_i+0xd2>
 8007fde:	232d      	movs	r3, #45	; 0x2d
 8007fe0:	4276      	negs	r6, r6
 8007fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	4859      	ldr	r0, [pc, #356]	; (8008150 <_printf_i+0x23c>)
 8007fea:	e012      	b.n	8008012 <_printf_i+0xfe>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	6820      	ldr	r0, [r4, #0]
 8007ff0:	1d19      	adds	r1, r3, #4
 8007ff2:	6029      	str	r1, [r5, #0]
 8007ff4:	0605      	lsls	r5, r0, #24
 8007ff6:	d501      	bpl.n	8007ffc <_printf_i+0xe8>
 8007ff8:	681e      	ldr	r6, [r3, #0]
 8007ffa:	e002      	b.n	8008002 <_printf_i+0xee>
 8007ffc:	0641      	lsls	r1, r0, #25
 8007ffe:	d5fb      	bpl.n	8007ff8 <_printf_i+0xe4>
 8008000:	881e      	ldrh	r6, [r3, #0]
 8008002:	2f6f      	cmp	r7, #111	; 0x6f
 8008004:	bf0c      	ite	eq
 8008006:	2308      	moveq	r3, #8
 8008008:	230a      	movne	r3, #10
 800800a:	4851      	ldr	r0, [pc, #324]	; (8008150 <_printf_i+0x23c>)
 800800c:	2100      	movs	r1, #0
 800800e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008012:	6865      	ldr	r5, [r4, #4]
 8008014:	2d00      	cmp	r5, #0
 8008016:	bfa8      	it	ge
 8008018:	6821      	ldrge	r1, [r4, #0]
 800801a:	60a5      	str	r5, [r4, #8]
 800801c:	bfa4      	itt	ge
 800801e:	f021 0104 	bicge.w	r1, r1, #4
 8008022:	6021      	strge	r1, [r4, #0]
 8008024:	b90e      	cbnz	r6, 800802a <_printf_i+0x116>
 8008026:	2d00      	cmp	r5, #0
 8008028:	d04b      	beq.n	80080c2 <_printf_i+0x1ae>
 800802a:	4615      	mov	r5, r2
 800802c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008030:	fb03 6711 	mls	r7, r3, r1, r6
 8008034:	5dc7      	ldrb	r7, [r0, r7]
 8008036:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800803a:	4637      	mov	r7, r6
 800803c:	42bb      	cmp	r3, r7
 800803e:	460e      	mov	r6, r1
 8008040:	d9f4      	bls.n	800802c <_printf_i+0x118>
 8008042:	2b08      	cmp	r3, #8
 8008044:	d10b      	bne.n	800805e <_printf_i+0x14a>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	07de      	lsls	r6, r3, #31
 800804a:	d508      	bpl.n	800805e <_printf_i+0x14a>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	6861      	ldr	r1, [r4, #4]
 8008050:	4299      	cmp	r1, r3
 8008052:	bfde      	ittt	le
 8008054:	2330      	movle	r3, #48	; 0x30
 8008056:	f805 3c01 	strble.w	r3, [r5, #-1]
 800805a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800805e:	1b52      	subs	r2, r2, r5
 8008060:	6122      	str	r2, [r4, #16]
 8008062:	464b      	mov	r3, r9
 8008064:	4621      	mov	r1, r4
 8008066:	4640      	mov	r0, r8
 8008068:	f8cd a000 	str.w	sl, [sp]
 800806c:	aa03      	add	r2, sp, #12
 800806e:	f7ff fedf 	bl	8007e30 <_printf_common>
 8008072:	3001      	adds	r0, #1
 8008074:	d14a      	bne.n	800810c <_printf_i+0x1f8>
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
 800807a:	b004      	add	sp, #16
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	f043 0320 	orr.w	r3, r3, #32
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	2778      	movs	r7, #120	; 0x78
 800808a:	4832      	ldr	r0, [pc, #200]	; (8008154 <_printf_i+0x240>)
 800808c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	6829      	ldr	r1, [r5, #0]
 8008094:	061f      	lsls	r7, r3, #24
 8008096:	f851 6b04 	ldr.w	r6, [r1], #4
 800809a:	d402      	bmi.n	80080a2 <_printf_i+0x18e>
 800809c:	065f      	lsls	r7, r3, #25
 800809e:	bf48      	it	mi
 80080a0:	b2b6      	uxthmi	r6, r6
 80080a2:	07df      	lsls	r7, r3, #31
 80080a4:	bf48      	it	mi
 80080a6:	f043 0320 	orrmi.w	r3, r3, #32
 80080aa:	6029      	str	r1, [r5, #0]
 80080ac:	bf48      	it	mi
 80080ae:	6023      	strmi	r3, [r4, #0]
 80080b0:	b91e      	cbnz	r6, 80080ba <_printf_i+0x1a6>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	f023 0320 	bic.w	r3, r3, #32
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	2310      	movs	r3, #16
 80080bc:	e7a6      	b.n	800800c <_printf_i+0xf8>
 80080be:	4824      	ldr	r0, [pc, #144]	; (8008150 <_printf_i+0x23c>)
 80080c0:	e7e4      	b.n	800808c <_printf_i+0x178>
 80080c2:	4615      	mov	r5, r2
 80080c4:	e7bd      	b.n	8008042 <_printf_i+0x12e>
 80080c6:	682b      	ldr	r3, [r5, #0]
 80080c8:	6826      	ldr	r6, [r4, #0]
 80080ca:	1d18      	adds	r0, r3, #4
 80080cc:	6961      	ldr	r1, [r4, #20]
 80080ce:	6028      	str	r0, [r5, #0]
 80080d0:	0635      	lsls	r5, r6, #24
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	d501      	bpl.n	80080da <_printf_i+0x1c6>
 80080d6:	6019      	str	r1, [r3, #0]
 80080d8:	e002      	b.n	80080e0 <_printf_i+0x1cc>
 80080da:	0670      	lsls	r0, r6, #25
 80080dc:	d5fb      	bpl.n	80080d6 <_printf_i+0x1c2>
 80080de:	8019      	strh	r1, [r3, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	4615      	mov	r5, r2
 80080e4:	6123      	str	r3, [r4, #16]
 80080e6:	e7bc      	b.n	8008062 <_printf_i+0x14e>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	2100      	movs	r1, #0
 80080ec:	1d1a      	adds	r2, r3, #4
 80080ee:	602a      	str	r2, [r5, #0]
 80080f0:	681d      	ldr	r5, [r3, #0]
 80080f2:	6862      	ldr	r2, [r4, #4]
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 fc04 	bl	8008902 <memchr>
 80080fa:	b108      	cbz	r0, 8008100 <_printf_i+0x1ec>
 80080fc:	1b40      	subs	r0, r0, r5
 80080fe:	6060      	str	r0, [r4, #4]
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	6123      	str	r3, [r4, #16]
 8008104:	2300      	movs	r3, #0
 8008106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800810a:	e7aa      	b.n	8008062 <_printf_i+0x14e>
 800810c:	462a      	mov	r2, r5
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	6923      	ldr	r3, [r4, #16]
 8008114:	47d0      	blx	sl
 8008116:	3001      	adds	r0, #1
 8008118:	d0ad      	beq.n	8008076 <_printf_i+0x162>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	079b      	lsls	r3, r3, #30
 800811e:	d413      	bmi.n	8008148 <_printf_i+0x234>
 8008120:	68e0      	ldr	r0, [r4, #12]
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	4298      	cmp	r0, r3
 8008126:	bfb8      	it	lt
 8008128:	4618      	movlt	r0, r3
 800812a:	e7a6      	b.n	800807a <_printf_i+0x166>
 800812c:	2301      	movs	r3, #1
 800812e:	4632      	mov	r2, r6
 8008130:	4649      	mov	r1, r9
 8008132:	4640      	mov	r0, r8
 8008134:	47d0      	blx	sl
 8008136:	3001      	adds	r0, #1
 8008138:	d09d      	beq.n	8008076 <_printf_i+0x162>
 800813a:	3501      	adds	r5, #1
 800813c:	68e3      	ldr	r3, [r4, #12]
 800813e:	9903      	ldr	r1, [sp, #12]
 8008140:	1a5b      	subs	r3, r3, r1
 8008142:	42ab      	cmp	r3, r5
 8008144:	dcf2      	bgt.n	800812c <_printf_i+0x218>
 8008146:	e7eb      	b.n	8008120 <_printf_i+0x20c>
 8008148:	2500      	movs	r5, #0
 800814a:	f104 0619 	add.w	r6, r4, #25
 800814e:	e7f5      	b.n	800813c <_printf_i+0x228>
 8008150:	0800c15b 	.word	0x0800c15b
 8008154:	0800c16c 	.word	0x0800c16c

08008158 <_scanf_float>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	b087      	sub	sp, #28
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	688b      	ldr	r3, [r1, #8]
 8008162:	4617      	mov	r7, r2
 8008164:	1e5a      	subs	r2, r3, #1
 8008166:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800816a:	bf85      	ittet	hi
 800816c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008170:	195b      	addhi	r3, r3, r5
 8008172:	2300      	movls	r3, #0
 8008174:	9302      	strhi	r3, [sp, #8]
 8008176:	bf88      	it	hi
 8008178:	f240 135d 	movwhi	r3, #349	; 0x15d
 800817c:	468b      	mov	fp, r1
 800817e:	f04f 0500 	mov.w	r5, #0
 8008182:	bf8c      	ite	hi
 8008184:	608b      	strhi	r3, [r1, #8]
 8008186:	9302      	strls	r3, [sp, #8]
 8008188:	680b      	ldr	r3, [r1, #0]
 800818a:	4680      	mov	r8, r0
 800818c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008190:	f84b 3b1c 	str.w	r3, [fp], #28
 8008194:	460c      	mov	r4, r1
 8008196:	465e      	mov	r6, fp
 8008198:	46aa      	mov	sl, r5
 800819a:	46a9      	mov	r9, r5
 800819c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081a0:	9501      	str	r5, [sp, #4]
 80081a2:	68a2      	ldr	r2, [r4, #8]
 80081a4:	b152      	cbz	r2, 80081bc <_scanf_float+0x64>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b4e      	cmp	r3, #78	; 0x4e
 80081ac:	d864      	bhi.n	8008278 <_scanf_float+0x120>
 80081ae:	2b40      	cmp	r3, #64	; 0x40
 80081b0:	d83c      	bhi.n	800822c <_scanf_float+0xd4>
 80081b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80081b6:	b2c8      	uxtb	r0, r1
 80081b8:	280e      	cmp	r0, #14
 80081ba:	d93a      	bls.n	8008232 <_scanf_float+0xda>
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	d003      	beq.n	80081ca <_scanf_float+0x72>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081ce:	f1ba 0f01 	cmp.w	sl, #1
 80081d2:	f200 8113 	bhi.w	80083fc <_scanf_float+0x2a4>
 80081d6:	455e      	cmp	r6, fp
 80081d8:	f200 8105 	bhi.w	80083e6 <_scanf_float+0x28e>
 80081dc:	2501      	movs	r5, #1
 80081de:	4628      	mov	r0, r5
 80081e0:	b007      	add	sp, #28
 80081e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081ea:	2a0d      	cmp	r2, #13
 80081ec:	d8e6      	bhi.n	80081bc <_scanf_float+0x64>
 80081ee:	a101      	add	r1, pc, #4	; (adr r1, 80081f4 <_scanf_float+0x9c>)
 80081f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081f4:	08008333 	.word	0x08008333
 80081f8:	080081bd 	.word	0x080081bd
 80081fc:	080081bd 	.word	0x080081bd
 8008200:	080081bd 	.word	0x080081bd
 8008204:	08008393 	.word	0x08008393
 8008208:	0800836b 	.word	0x0800836b
 800820c:	080081bd 	.word	0x080081bd
 8008210:	080081bd 	.word	0x080081bd
 8008214:	08008341 	.word	0x08008341
 8008218:	080081bd 	.word	0x080081bd
 800821c:	080081bd 	.word	0x080081bd
 8008220:	080081bd 	.word	0x080081bd
 8008224:	080081bd 	.word	0x080081bd
 8008228:	080082f9 	.word	0x080082f9
 800822c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008230:	e7db      	b.n	80081ea <_scanf_float+0x92>
 8008232:	290e      	cmp	r1, #14
 8008234:	d8c2      	bhi.n	80081bc <_scanf_float+0x64>
 8008236:	a001      	add	r0, pc, #4	; (adr r0, 800823c <_scanf_float+0xe4>)
 8008238:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800823c:	080082eb 	.word	0x080082eb
 8008240:	080081bd 	.word	0x080081bd
 8008244:	080082eb 	.word	0x080082eb
 8008248:	0800837f 	.word	0x0800837f
 800824c:	080081bd 	.word	0x080081bd
 8008250:	08008299 	.word	0x08008299
 8008254:	080082d5 	.word	0x080082d5
 8008258:	080082d5 	.word	0x080082d5
 800825c:	080082d5 	.word	0x080082d5
 8008260:	080082d5 	.word	0x080082d5
 8008264:	080082d5 	.word	0x080082d5
 8008268:	080082d5 	.word	0x080082d5
 800826c:	080082d5 	.word	0x080082d5
 8008270:	080082d5 	.word	0x080082d5
 8008274:	080082d5 	.word	0x080082d5
 8008278:	2b6e      	cmp	r3, #110	; 0x6e
 800827a:	d809      	bhi.n	8008290 <_scanf_float+0x138>
 800827c:	2b60      	cmp	r3, #96	; 0x60
 800827e:	d8b2      	bhi.n	80081e6 <_scanf_float+0x8e>
 8008280:	2b54      	cmp	r3, #84	; 0x54
 8008282:	d077      	beq.n	8008374 <_scanf_float+0x21c>
 8008284:	2b59      	cmp	r3, #89	; 0x59
 8008286:	d199      	bne.n	80081bc <_scanf_float+0x64>
 8008288:	2d07      	cmp	r5, #7
 800828a:	d197      	bne.n	80081bc <_scanf_float+0x64>
 800828c:	2508      	movs	r5, #8
 800828e:	e029      	b.n	80082e4 <_scanf_float+0x18c>
 8008290:	2b74      	cmp	r3, #116	; 0x74
 8008292:	d06f      	beq.n	8008374 <_scanf_float+0x21c>
 8008294:	2b79      	cmp	r3, #121	; 0x79
 8008296:	e7f6      	b.n	8008286 <_scanf_float+0x12e>
 8008298:	6821      	ldr	r1, [r4, #0]
 800829a:	05c8      	lsls	r0, r1, #23
 800829c:	d51a      	bpl.n	80082d4 <_scanf_float+0x17c>
 800829e:	9b02      	ldr	r3, [sp, #8]
 80082a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80082a4:	6021      	str	r1, [r4, #0]
 80082a6:	f109 0901 	add.w	r9, r9, #1
 80082aa:	b11b      	cbz	r3, 80082b4 <_scanf_float+0x15c>
 80082ac:	3b01      	subs	r3, #1
 80082ae:	3201      	adds	r2, #1
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	60a2      	str	r2, [r4, #8]
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	3301      	adds	r3, #1
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	607b      	str	r3, [r7, #4]
 80082c8:	f340 8084 	ble.w	80083d4 <_scanf_float+0x27c>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	e766      	b.n	80081a2 <_scanf_float+0x4a>
 80082d4:	eb1a 0f05 	cmn.w	sl, r5
 80082d8:	f47f af70 	bne.w	80081bc <_scanf_float+0x64>
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	f806 3b01 	strb.w	r3, [r6], #1
 80082e8:	e7e4      	b.n	80082b4 <_scanf_float+0x15c>
 80082ea:	6822      	ldr	r2, [r4, #0]
 80082ec:	0610      	lsls	r0, r2, #24
 80082ee:	f57f af65 	bpl.w	80081bc <_scanf_float+0x64>
 80082f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f6:	e7f4      	b.n	80082e2 <_scanf_float+0x18a>
 80082f8:	f1ba 0f00 	cmp.w	sl, #0
 80082fc:	d10e      	bne.n	800831c <_scanf_float+0x1c4>
 80082fe:	f1b9 0f00 	cmp.w	r9, #0
 8008302:	d10e      	bne.n	8008322 <_scanf_float+0x1ca>
 8008304:	6822      	ldr	r2, [r4, #0]
 8008306:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800830a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800830e:	d108      	bne.n	8008322 <_scanf_float+0x1ca>
 8008310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008314:	f04f 0a01 	mov.w	sl, #1
 8008318:	6022      	str	r2, [r4, #0]
 800831a:	e7e3      	b.n	80082e4 <_scanf_float+0x18c>
 800831c:	f1ba 0f02 	cmp.w	sl, #2
 8008320:	d055      	beq.n	80083ce <_scanf_float+0x276>
 8008322:	2d01      	cmp	r5, #1
 8008324:	d002      	beq.n	800832c <_scanf_float+0x1d4>
 8008326:	2d04      	cmp	r5, #4
 8008328:	f47f af48 	bne.w	80081bc <_scanf_float+0x64>
 800832c:	3501      	adds	r5, #1
 800832e:	b2ed      	uxtb	r5, r5
 8008330:	e7d8      	b.n	80082e4 <_scanf_float+0x18c>
 8008332:	f1ba 0f01 	cmp.w	sl, #1
 8008336:	f47f af41 	bne.w	80081bc <_scanf_float+0x64>
 800833a:	f04f 0a02 	mov.w	sl, #2
 800833e:	e7d1      	b.n	80082e4 <_scanf_float+0x18c>
 8008340:	b97d      	cbnz	r5, 8008362 <_scanf_float+0x20a>
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	f47f af3c 	bne.w	80081c2 <_scanf_float+0x6a>
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008350:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008354:	f47f af39 	bne.w	80081ca <_scanf_float+0x72>
 8008358:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800835c:	2501      	movs	r5, #1
 800835e:	6022      	str	r2, [r4, #0]
 8008360:	e7c0      	b.n	80082e4 <_scanf_float+0x18c>
 8008362:	2d03      	cmp	r5, #3
 8008364:	d0e2      	beq.n	800832c <_scanf_float+0x1d4>
 8008366:	2d05      	cmp	r5, #5
 8008368:	e7de      	b.n	8008328 <_scanf_float+0x1d0>
 800836a:	2d02      	cmp	r5, #2
 800836c:	f47f af26 	bne.w	80081bc <_scanf_float+0x64>
 8008370:	2503      	movs	r5, #3
 8008372:	e7b7      	b.n	80082e4 <_scanf_float+0x18c>
 8008374:	2d06      	cmp	r5, #6
 8008376:	f47f af21 	bne.w	80081bc <_scanf_float+0x64>
 800837a:	2507      	movs	r5, #7
 800837c:	e7b2      	b.n	80082e4 <_scanf_float+0x18c>
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	0591      	lsls	r1, r2, #22
 8008382:	f57f af1b 	bpl.w	80081bc <_scanf_float+0x64>
 8008386:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008390:	e7a8      	b.n	80082e4 <_scanf_float+0x18c>
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008398:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800839c:	d006      	beq.n	80083ac <_scanf_float+0x254>
 800839e:	0550      	lsls	r0, r2, #21
 80083a0:	f57f af0c 	bpl.w	80081bc <_scanf_float+0x64>
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	f43f af0f 	beq.w	80081ca <_scanf_float+0x72>
 80083ac:	0591      	lsls	r1, r2, #22
 80083ae:	bf58      	it	pl
 80083b0:	9901      	ldrpl	r1, [sp, #4]
 80083b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083b6:	bf58      	it	pl
 80083b8:	eba9 0101 	subpl.w	r1, r9, r1
 80083bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80083c0:	f04f 0900 	mov.w	r9, #0
 80083c4:	bf58      	it	pl
 80083c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083ca:	6022      	str	r2, [r4, #0]
 80083cc:	e78a      	b.n	80082e4 <_scanf_float+0x18c>
 80083ce:	f04f 0a03 	mov.w	sl, #3
 80083d2:	e787      	b.n	80082e4 <_scanf_float+0x18c>
 80083d4:	4639      	mov	r1, r7
 80083d6:	4640      	mov	r0, r8
 80083d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083dc:	4798      	blx	r3
 80083de:	2800      	cmp	r0, #0
 80083e0:	f43f aedf 	beq.w	80081a2 <_scanf_float+0x4a>
 80083e4:	e6ea      	b.n	80081bc <_scanf_float+0x64>
 80083e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ea:	463a      	mov	r2, r7
 80083ec:	4640      	mov	r0, r8
 80083ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083f2:	4798      	blx	r3
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	6123      	str	r3, [r4, #16]
 80083fa:	e6ec      	b.n	80081d6 <_scanf_float+0x7e>
 80083fc:	1e6b      	subs	r3, r5, #1
 80083fe:	2b06      	cmp	r3, #6
 8008400:	d825      	bhi.n	800844e <_scanf_float+0x2f6>
 8008402:	2d02      	cmp	r5, #2
 8008404:	d836      	bhi.n	8008474 <_scanf_float+0x31c>
 8008406:	455e      	cmp	r6, fp
 8008408:	f67f aee8 	bls.w	80081dc <_scanf_float+0x84>
 800840c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008410:	463a      	mov	r2, r7
 8008412:	4640      	mov	r0, r8
 8008414:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008418:	4798      	blx	r3
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	3b01      	subs	r3, #1
 800841e:	6123      	str	r3, [r4, #16]
 8008420:	e7f1      	b.n	8008406 <_scanf_float+0x2ae>
 8008422:	9802      	ldr	r0, [sp, #8]
 8008424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008428:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800842c:	463a      	mov	r2, r7
 800842e:	9002      	str	r0, [sp, #8]
 8008430:	4640      	mov	r0, r8
 8008432:	4798      	blx	r3
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	3b01      	subs	r3, #1
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800843e:	fa5f fa8a 	uxtb.w	sl, sl
 8008442:	f1ba 0f02 	cmp.w	sl, #2
 8008446:	d1ec      	bne.n	8008422 <_scanf_float+0x2ca>
 8008448:	3d03      	subs	r5, #3
 800844a:	b2ed      	uxtb	r5, r5
 800844c:	1b76      	subs	r6, r6, r5
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	05da      	lsls	r2, r3, #23
 8008452:	d52f      	bpl.n	80084b4 <_scanf_float+0x35c>
 8008454:	055b      	lsls	r3, r3, #21
 8008456:	d510      	bpl.n	800847a <_scanf_float+0x322>
 8008458:	455e      	cmp	r6, fp
 800845a:	f67f aebf 	bls.w	80081dc <_scanf_float+0x84>
 800845e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008462:	463a      	mov	r2, r7
 8008464:	4640      	mov	r0, r8
 8008466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800846a:	4798      	blx	r3
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	3b01      	subs	r3, #1
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	e7f1      	b.n	8008458 <_scanf_float+0x300>
 8008474:	46aa      	mov	sl, r5
 8008476:	9602      	str	r6, [sp, #8]
 8008478:	e7df      	b.n	800843a <_scanf_float+0x2e2>
 800847a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	2965      	cmp	r1, #101	; 0x65
 8008482:	f103 33ff 	add.w	r3, r3, #4294967295
 8008486:	f106 35ff 	add.w	r5, r6, #4294967295
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	d00c      	beq.n	80084a8 <_scanf_float+0x350>
 800848e:	2945      	cmp	r1, #69	; 0x45
 8008490:	d00a      	beq.n	80084a8 <_scanf_float+0x350>
 8008492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008496:	463a      	mov	r2, r7
 8008498:	4640      	mov	r0, r8
 800849a:	4798      	blx	r3
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	1eb5      	subs	r5, r6, #2
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	463a      	mov	r2, r7
 80084aa:	4640      	mov	r0, r8
 80084ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084b0:	4798      	blx	r3
 80084b2:	462e      	mov	r6, r5
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	f015 0510 	ands.w	r5, r5, #16
 80084ba:	d155      	bne.n	8008568 <_scanf_float+0x410>
 80084bc:	7035      	strb	r5, [r6, #0]
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c8:	d11d      	bne.n	8008506 <_scanf_float+0x3ae>
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	454b      	cmp	r3, r9
 80084ce:	eba3 0209 	sub.w	r2, r3, r9
 80084d2:	d125      	bne.n	8008520 <_scanf_float+0x3c8>
 80084d4:	2200      	movs	r2, #0
 80084d6:	4659      	mov	r1, fp
 80084d8:	4640      	mov	r0, r8
 80084da:	f002 fb95 	bl	800ac08 <_strtod_r>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	f8d4 c000 	ldr.w	ip, [r4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f01c 0f02 	tst.w	ip, #2
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	f103 0204 	add.w	r2, r3, #4
 80084f2:	d020      	beq.n	8008536 <_scanf_float+0x3de>
 80084f4:	9903      	ldr	r1, [sp, #12]
 80084f6:	600a      	str	r2, [r1, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	e9c3 6700 	strd	r6, r7, [r3]
 80084fe:	68e3      	ldr	r3, [r4, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60e3      	str	r3, [r4, #12]
 8008504:	e66b      	b.n	80081de <_scanf_float+0x86>
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0e3      	beq.n	80084d4 <_scanf_float+0x37c>
 800850c:	9905      	ldr	r1, [sp, #20]
 800850e:	230a      	movs	r3, #10
 8008510:	462a      	mov	r2, r5
 8008512:	4640      	mov	r0, r8
 8008514:	3101      	adds	r1, #1
 8008516:	f002 fbfb 	bl	800ad10 <_strtol_r>
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	9e05      	ldr	r6, [sp, #20]
 800851e:	1ac2      	subs	r2, r0, r3
 8008520:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008524:	429e      	cmp	r6, r3
 8008526:	bf28      	it	cs
 8008528:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800852c:	4630      	mov	r0, r6
 800852e:	490f      	ldr	r1, [pc, #60]	; (800856c <_scanf_float+0x414>)
 8008530:	f000 f8f4 	bl	800871c <siprintf>
 8008534:	e7ce      	b.n	80084d4 <_scanf_float+0x37c>
 8008536:	f01c 0f04 	tst.w	ip, #4
 800853a:	d1db      	bne.n	80084f4 <_scanf_float+0x39c>
 800853c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008540:	f8cc 2000 	str.w	r2, [ip]
 8008544:	f8d3 8000 	ldr.w	r8, [r3]
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	f7f8 fad4 	bl	8000af8 <__aeabi_dcmpun>
 8008550:	b128      	cbz	r0, 800855e <_scanf_float+0x406>
 8008552:	4807      	ldr	r0, [pc, #28]	; (8008570 <_scanf_float+0x418>)
 8008554:	f000 f9e4 	bl	8008920 <nanf>
 8008558:	f8c8 0000 	str.w	r0, [r8]
 800855c:	e7cf      	b.n	80084fe <_scanf_float+0x3a6>
 800855e:	4630      	mov	r0, r6
 8008560:	4639      	mov	r1, r7
 8008562:	f7f8 fb27 	bl	8000bb4 <__aeabi_d2f>
 8008566:	e7f7      	b.n	8008558 <_scanf_float+0x400>
 8008568:	2500      	movs	r5, #0
 800856a:	e638      	b.n	80081de <_scanf_float+0x86>
 800856c:	0800c17d 	.word	0x0800c17d
 8008570:	0800c148 	.word	0x0800c148

08008574 <std>:
 8008574:	2300      	movs	r3, #0
 8008576:	b510      	push	{r4, lr}
 8008578:	4604      	mov	r4, r0
 800857a:	e9c0 3300 	strd	r3, r3, [r0]
 800857e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008582:	6083      	str	r3, [r0, #8]
 8008584:	8181      	strh	r1, [r0, #12]
 8008586:	6643      	str	r3, [r0, #100]	; 0x64
 8008588:	81c2      	strh	r2, [r0, #14]
 800858a:	6183      	str	r3, [r0, #24]
 800858c:	4619      	mov	r1, r3
 800858e:	2208      	movs	r2, #8
 8008590:	305c      	adds	r0, #92	; 0x5c
 8008592:	f000 f926 	bl	80087e2 <memset>
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <std+0x58>)
 8008598:	6224      	str	r4, [r4, #32]
 800859a:	6263      	str	r3, [r4, #36]	; 0x24
 800859c:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <std+0x5c>)
 800859e:	62a3      	str	r3, [r4, #40]	; 0x28
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <std+0x60>)
 80085a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <std+0x64>)
 80085a6:	6323      	str	r3, [r4, #48]	; 0x30
 80085a8:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <std+0x68>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d006      	beq.n	80085bc <std+0x48>
 80085ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80085b2:	4294      	cmp	r4, r2
 80085b4:	d002      	beq.n	80085bc <std+0x48>
 80085b6:	33d0      	adds	r3, #208	; 0xd0
 80085b8:	429c      	cmp	r4, r3
 80085ba:	d105      	bne.n	80085c8 <std+0x54>
 80085bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c4:	f000 b99a 	b.w	80088fc <__retarget_lock_init_recursive>
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	bf00      	nop
 80085cc:	0800875d 	.word	0x0800875d
 80085d0:	0800877f 	.word	0x0800877f
 80085d4:	080087b7 	.word	0x080087b7
 80085d8:	080087db 	.word	0x080087db
 80085dc:	2000063c 	.word	0x2000063c

080085e0 <stdio_exit_handler>:
 80085e0:	4a02      	ldr	r2, [pc, #8]	; (80085ec <stdio_exit_handler+0xc>)
 80085e2:	4903      	ldr	r1, [pc, #12]	; (80085f0 <stdio_exit_handler+0x10>)
 80085e4:	4803      	ldr	r0, [pc, #12]	; (80085f4 <stdio_exit_handler+0x14>)
 80085e6:	f000 b87b 	b.w	80086e0 <_fwalk_sglue>
 80085ea:	bf00      	nop
 80085ec:	2000017c 	.word	0x2000017c
 80085f0:	0800b34d 	.word	0x0800b34d
 80085f4:	20000188 	.word	0x20000188

080085f8 <cleanup_stdio>:
 80085f8:	6841      	ldr	r1, [r0, #4]
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <cleanup_stdio+0x34>)
 80085fc:	b510      	push	{r4, lr}
 80085fe:	4299      	cmp	r1, r3
 8008600:	4604      	mov	r4, r0
 8008602:	d001      	beq.n	8008608 <cleanup_stdio+0x10>
 8008604:	f002 fea2 	bl	800b34c <_fflush_r>
 8008608:	68a1      	ldr	r1, [r4, #8]
 800860a:	4b09      	ldr	r3, [pc, #36]	; (8008630 <cleanup_stdio+0x38>)
 800860c:	4299      	cmp	r1, r3
 800860e:	d002      	beq.n	8008616 <cleanup_stdio+0x1e>
 8008610:	4620      	mov	r0, r4
 8008612:	f002 fe9b 	bl	800b34c <_fflush_r>
 8008616:	68e1      	ldr	r1, [r4, #12]
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <cleanup_stdio+0x3c>)
 800861a:	4299      	cmp	r1, r3
 800861c:	d004      	beq.n	8008628 <cleanup_stdio+0x30>
 800861e:	4620      	mov	r0, r4
 8008620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008624:	f002 be92 	b.w	800b34c <_fflush_r>
 8008628:	bd10      	pop	{r4, pc}
 800862a:	bf00      	nop
 800862c:	2000063c 	.word	0x2000063c
 8008630:	200006a4 	.word	0x200006a4
 8008634:	2000070c 	.word	0x2000070c

08008638 <global_stdio_init.part.0>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <global_stdio_init.part.0+0x30>)
 800863c:	4c0b      	ldr	r4, [pc, #44]	; (800866c <global_stdio_init.part.0+0x34>)
 800863e:	4a0c      	ldr	r2, [pc, #48]	; (8008670 <global_stdio_init.part.0+0x38>)
 8008640:	4620      	mov	r0, r4
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	2104      	movs	r1, #4
 8008646:	2200      	movs	r2, #0
 8008648:	f7ff ff94 	bl	8008574 <std>
 800864c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008650:	2201      	movs	r2, #1
 8008652:	2109      	movs	r1, #9
 8008654:	f7ff ff8e 	bl	8008574 <std>
 8008658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800865c:	2202      	movs	r2, #2
 800865e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008662:	2112      	movs	r1, #18
 8008664:	f7ff bf86 	b.w	8008574 <std>
 8008668:	20000774 	.word	0x20000774
 800866c:	2000063c 	.word	0x2000063c
 8008670:	080085e1 	.word	0x080085e1

08008674 <__sfp_lock_acquire>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__sfp_lock_acquire+0x8>)
 8008676:	f000 b942 	b.w	80088fe <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	2000077d 	.word	0x2000077d

08008680 <__sfp_lock_release>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__sfp_lock_release+0x8>)
 8008682:	f000 b93d 	b.w	8008900 <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	2000077d 	.word	0x2000077d

0800868c <__sinit>:
 800868c:	b510      	push	{r4, lr}
 800868e:	4604      	mov	r4, r0
 8008690:	f7ff fff0 	bl	8008674 <__sfp_lock_acquire>
 8008694:	6a23      	ldr	r3, [r4, #32]
 8008696:	b11b      	cbz	r3, 80086a0 <__sinit+0x14>
 8008698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800869c:	f7ff bff0 	b.w	8008680 <__sfp_lock_release>
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <__sinit+0x28>)
 80086a2:	6223      	str	r3, [r4, #32]
 80086a4:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <__sinit+0x2c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1f5      	bne.n	8008698 <__sinit+0xc>
 80086ac:	f7ff ffc4 	bl	8008638 <global_stdio_init.part.0>
 80086b0:	e7f2      	b.n	8008698 <__sinit+0xc>
 80086b2:	bf00      	nop
 80086b4:	080085f9 	.word	0x080085f9
 80086b8:	20000774 	.word	0x20000774

080086bc <fiprintf>:
 80086bc:	b40e      	push	{r1, r2, r3}
 80086be:	b503      	push	{r0, r1, lr}
 80086c0:	4601      	mov	r1, r0
 80086c2:	ab03      	add	r3, sp, #12
 80086c4:	4805      	ldr	r0, [pc, #20]	; (80086dc <fiprintf+0x20>)
 80086c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	f002 fca1 	bl	800b014 <_vfiprintf_r>
 80086d2:	b002      	add	sp, #8
 80086d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d8:	b003      	add	sp, #12
 80086da:	4770      	bx	lr
 80086dc:	200001d4 	.word	0x200001d4

080086e0 <_fwalk_sglue>:
 80086e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e4:	4607      	mov	r7, r0
 80086e6:	4688      	mov	r8, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	2600      	movs	r6, #0
 80086ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086f0:	f1b9 0901 	subs.w	r9, r9, #1
 80086f4:	d505      	bpl.n	8008702 <_fwalk_sglue+0x22>
 80086f6:	6824      	ldr	r4, [r4, #0]
 80086f8:	2c00      	cmp	r4, #0
 80086fa:	d1f7      	bne.n	80086ec <_fwalk_sglue+0xc>
 80086fc:	4630      	mov	r0, r6
 80086fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008702:	89ab      	ldrh	r3, [r5, #12]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d907      	bls.n	8008718 <_fwalk_sglue+0x38>
 8008708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800870c:	3301      	adds	r3, #1
 800870e:	d003      	beq.n	8008718 <_fwalk_sglue+0x38>
 8008710:	4629      	mov	r1, r5
 8008712:	4638      	mov	r0, r7
 8008714:	47c0      	blx	r8
 8008716:	4306      	orrs	r6, r0
 8008718:	3568      	adds	r5, #104	; 0x68
 800871a:	e7e9      	b.n	80086f0 <_fwalk_sglue+0x10>

0800871c <siprintf>:
 800871c:	b40e      	push	{r1, r2, r3}
 800871e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008722:	b500      	push	{lr}
 8008724:	b09c      	sub	sp, #112	; 0x70
 8008726:	ab1d      	add	r3, sp, #116	; 0x74
 8008728:	9002      	str	r0, [sp, #8]
 800872a:	9006      	str	r0, [sp, #24]
 800872c:	9107      	str	r1, [sp, #28]
 800872e:	9104      	str	r1, [sp, #16]
 8008730:	4808      	ldr	r0, [pc, #32]	; (8008754 <siprintf+0x38>)
 8008732:	4909      	ldr	r1, [pc, #36]	; (8008758 <siprintf+0x3c>)
 8008734:	f853 2b04 	ldr.w	r2, [r3], #4
 8008738:	9105      	str	r1, [sp, #20]
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	a902      	add	r1, sp, #8
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	f002 fb42 	bl	800adc8 <_svfiprintf_r>
 8008744:	2200      	movs	r2, #0
 8008746:	9b02      	ldr	r3, [sp, #8]
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	b01c      	add	sp, #112	; 0x70
 800874c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008750:	b003      	add	sp, #12
 8008752:	4770      	bx	lr
 8008754:	200001d4 	.word	0x200001d4
 8008758:	ffff0208 	.word	0xffff0208

0800875c <__sread>:
 800875c:	b510      	push	{r4, lr}
 800875e:	460c      	mov	r4, r1
 8008760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008764:	f000 f86c 	bl	8008840 <_read_r>
 8008768:	2800      	cmp	r0, #0
 800876a:	bfab      	itete	ge
 800876c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800876e:	89a3      	ldrhlt	r3, [r4, #12]
 8008770:	181b      	addge	r3, r3, r0
 8008772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008776:	bfac      	ite	ge
 8008778:	6563      	strge	r3, [r4, #84]	; 0x54
 800877a:	81a3      	strhlt	r3, [r4, #12]
 800877c:	bd10      	pop	{r4, pc}

0800877e <__swrite>:
 800877e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008782:	461f      	mov	r7, r3
 8008784:	898b      	ldrh	r3, [r1, #12]
 8008786:	4605      	mov	r5, r0
 8008788:	05db      	lsls	r3, r3, #23
 800878a:	460c      	mov	r4, r1
 800878c:	4616      	mov	r6, r2
 800878e:	d505      	bpl.n	800879c <__swrite+0x1e>
 8008790:	2302      	movs	r3, #2
 8008792:	2200      	movs	r2, #0
 8008794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008798:	f000 f840 	bl	800881c <_lseek_r>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	4632      	mov	r2, r6
 80087a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	4628      	mov	r0, r5
 80087a8:	463b      	mov	r3, r7
 80087aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b2:	f000 b867 	b.w	8008884 <_write_r>

080087b6 <__sseek>:
 80087b6:	b510      	push	{r4, lr}
 80087b8:	460c      	mov	r4, r1
 80087ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087be:	f000 f82d 	bl	800881c <_lseek_r>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	bf15      	itete	ne
 80087c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087d2:	81a3      	strheq	r3, [r4, #12]
 80087d4:	bf18      	it	ne
 80087d6:	81a3      	strhne	r3, [r4, #12]
 80087d8:	bd10      	pop	{r4, pc}

080087da <__sclose>:
 80087da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087de:	f000 b80d 	b.w	80087fc <_close_r>

080087e2 <memset>:
 80087e2:	4603      	mov	r3, r0
 80087e4:	4402      	add	r2, r0
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d100      	bne.n	80087ec <memset+0xa>
 80087ea:	4770      	bx	lr
 80087ec:	f803 1b01 	strb.w	r1, [r3], #1
 80087f0:	e7f9      	b.n	80087e6 <memset+0x4>
	...

080087f4 <_localeconv_r>:
 80087f4:	4800      	ldr	r0, [pc, #0]	; (80087f8 <_localeconv_r+0x4>)
 80087f6:	4770      	bx	lr
 80087f8:	200002c8 	.word	0x200002c8

080087fc <_close_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	2300      	movs	r3, #0
 8008800:	4d05      	ldr	r5, [pc, #20]	; (8008818 <_close_r+0x1c>)
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7f9 fd1c 	bl	8002244 <_close>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_close_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_close_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20000778 	.word	0x20000778

0800881c <_lseek_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	2200      	movs	r2, #0
 8008826:	4d05      	ldr	r5, [pc, #20]	; (800883c <_lseek_r+0x20>)
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	f7f9 fd2e 	bl	800228c <_lseek>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_lseek_r+0x1e>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_lseek_r+0x1e>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	20000778 	.word	0x20000778

08008840 <_read_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	2200      	movs	r2, #0
 800884a:	4d05      	ldr	r5, [pc, #20]	; (8008860 <_read_r+0x20>)
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f9 fcbf 	bl	80021d2 <_read>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_read_r+0x1e>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_read_r+0x1e>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20000778 	.word	0x20000778

08008864 <_sbrk_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	2300      	movs	r3, #0
 8008868:	4d05      	ldr	r5, [pc, #20]	; (8008880 <_sbrk_r+0x1c>)
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7f9 fd18 	bl	80022a4 <_sbrk>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_sbrk_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_sbrk_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	20000778 	.word	0x20000778

08008884 <_write_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	4611      	mov	r1, r2
 800888c:	2200      	movs	r2, #0
 800888e:	4d05      	ldr	r5, [pc, #20]	; (80088a4 <_write_r+0x20>)
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f7f9 fcba 	bl	800220c <_write>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_write_r+0x1e>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_write_r+0x1e>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20000778 	.word	0x20000778

080088a8 <__errno>:
 80088a8:	4b01      	ldr	r3, [pc, #4]	; (80088b0 <__errno+0x8>)
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	200001d4 	.word	0x200001d4

080088b4 <__libc_init_array>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	2600      	movs	r6, #0
 80088b8:	4d0c      	ldr	r5, [pc, #48]	; (80088ec <__libc_init_array+0x38>)
 80088ba:	4c0d      	ldr	r4, [pc, #52]	; (80088f0 <__libc_init_array+0x3c>)
 80088bc:	1b64      	subs	r4, r4, r5
 80088be:	10a4      	asrs	r4, r4, #2
 80088c0:	42a6      	cmp	r6, r4
 80088c2:	d109      	bne.n	80088d8 <__libc_init_array+0x24>
 80088c4:	f003 fb34 	bl	800bf30 <_init>
 80088c8:	2600      	movs	r6, #0
 80088ca:	4d0a      	ldr	r5, [pc, #40]	; (80088f4 <__libc_init_array+0x40>)
 80088cc:	4c0a      	ldr	r4, [pc, #40]	; (80088f8 <__libc_init_array+0x44>)
 80088ce:	1b64      	subs	r4, r4, r5
 80088d0:	10a4      	asrs	r4, r4, #2
 80088d2:	42a6      	cmp	r6, r4
 80088d4:	d105      	bne.n	80088e2 <__libc_init_array+0x2e>
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088dc:	4798      	blx	r3
 80088de:	3601      	adds	r6, #1
 80088e0:	e7ee      	b.n	80088c0 <__libc_init_array+0xc>
 80088e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e6:	4798      	blx	r3
 80088e8:	3601      	adds	r6, #1
 80088ea:	e7f2      	b.n	80088d2 <__libc_init_array+0x1e>
 80088ec:	0800c534 	.word	0x0800c534
 80088f0:	0800c534 	.word	0x0800c534
 80088f4:	0800c534 	.word	0x0800c534
 80088f8:	0800c538 	.word	0x0800c538

080088fc <__retarget_lock_init_recursive>:
 80088fc:	4770      	bx	lr

080088fe <__retarget_lock_acquire_recursive>:
 80088fe:	4770      	bx	lr

08008900 <__retarget_lock_release_recursive>:
 8008900:	4770      	bx	lr

08008902 <memchr>:
 8008902:	4603      	mov	r3, r0
 8008904:	b510      	push	{r4, lr}
 8008906:	b2c9      	uxtb	r1, r1
 8008908:	4402      	add	r2, r0
 800890a:	4293      	cmp	r3, r2
 800890c:	4618      	mov	r0, r3
 800890e:	d101      	bne.n	8008914 <memchr+0x12>
 8008910:	2000      	movs	r0, #0
 8008912:	e003      	b.n	800891c <memchr+0x1a>
 8008914:	7804      	ldrb	r4, [r0, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	428c      	cmp	r4, r1
 800891a:	d1f6      	bne.n	800890a <memchr+0x8>
 800891c:	bd10      	pop	{r4, pc}
	...

08008920 <nanf>:
 8008920:	4800      	ldr	r0, [pc, #0]	; (8008924 <nanf+0x4>)
 8008922:	4770      	bx	lr
 8008924:	7fc00000 	.word	0x7fc00000

08008928 <abort>:
 8008928:	2006      	movs	r0, #6
 800892a:	b508      	push	{r3, lr}
 800892c:	f002 fe20 	bl	800b570 <raise>
 8008930:	2001      	movs	r0, #1
 8008932:	f7f9 fc44 	bl	80021be <_exit>

08008936 <quorem>:
 8008936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	6903      	ldr	r3, [r0, #16]
 800893c:	690c      	ldr	r4, [r1, #16]
 800893e:	4607      	mov	r7, r0
 8008940:	42a3      	cmp	r3, r4
 8008942:	db7f      	blt.n	8008a44 <quorem+0x10e>
 8008944:	3c01      	subs	r4, #1
 8008946:	f100 0514 	add.w	r5, r0, #20
 800894a:	f101 0814 	add.w	r8, r1, #20
 800894e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800895c:	3301      	adds	r3, #1
 800895e:	429a      	cmp	r2, r3
 8008960:	fbb2 f6f3 	udiv	r6, r2, r3
 8008964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800896c:	d331      	bcc.n	80089d2 <quorem+0x9c>
 800896e:	f04f 0e00 	mov.w	lr, #0
 8008972:	4640      	mov	r0, r8
 8008974:	46ac      	mov	ip, r5
 8008976:	46f2      	mov	sl, lr
 8008978:	f850 2b04 	ldr.w	r2, [r0], #4
 800897c:	b293      	uxth	r3, r2
 800897e:	fb06 e303 	mla	r3, r6, r3, lr
 8008982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008986:	0c1a      	lsrs	r2, r3, #16
 8008988:	b29b      	uxth	r3, r3
 800898a:	fb06 220e 	mla	r2, r6, lr, r2
 800898e:	ebaa 0303 	sub.w	r3, sl, r3
 8008992:	f8dc a000 	ldr.w	sl, [ip]
 8008996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800899a:	fa1f fa8a 	uxth.w	sl, sl
 800899e:	4453      	add	r3, sl
 80089a0:	f8dc a000 	ldr.w	sl, [ip]
 80089a4:	b292      	uxth	r2, r2
 80089a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b4:	4581      	cmp	r9, r0
 80089b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089ba:	f84c 3b04 	str.w	r3, [ip], #4
 80089be:	d2db      	bcs.n	8008978 <quorem+0x42>
 80089c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80089c4:	b92b      	cbnz	r3, 80089d2 <quorem+0x9c>
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	3b04      	subs	r3, #4
 80089ca:	429d      	cmp	r5, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	d32d      	bcc.n	8008a2c <quorem+0xf6>
 80089d0:	613c      	str	r4, [r7, #16]
 80089d2:	4638      	mov	r0, r7
 80089d4:	f001 f928 	bl	8009c28 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	db23      	blt.n	8008a24 <quorem+0xee>
 80089dc:	4629      	mov	r1, r5
 80089de:	2000      	movs	r0, #0
 80089e0:	3601      	adds	r6, #1
 80089e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80089e6:	f8d1 c000 	ldr.w	ip, [r1]
 80089ea:	b293      	uxth	r3, r2
 80089ec:	1ac3      	subs	r3, r0, r3
 80089ee:	0c12      	lsrs	r2, r2, #16
 80089f0:	fa1f f08c 	uxth.w	r0, ip
 80089f4:	4403      	add	r3, r0
 80089f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80089fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a04:	45c1      	cmp	r9, r8
 8008a06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a0a:	f841 3b04 	str.w	r3, [r1], #4
 8008a0e:	d2e8      	bcs.n	80089e2 <quorem+0xac>
 8008a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a18:	b922      	cbnz	r2, 8008a24 <quorem+0xee>
 8008a1a:	3b04      	subs	r3, #4
 8008a1c:	429d      	cmp	r5, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	d30a      	bcc.n	8008a38 <quorem+0x102>
 8008a22:	613c      	str	r4, [r7, #16]
 8008a24:	4630      	mov	r0, r6
 8008a26:	b003      	add	sp, #12
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	3b04      	subs	r3, #4
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	d1cd      	bne.n	80089d0 <quorem+0x9a>
 8008a34:	3c01      	subs	r4, #1
 8008a36:	e7c8      	b.n	80089ca <quorem+0x94>
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	3b04      	subs	r3, #4
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	d1f0      	bne.n	8008a22 <quorem+0xec>
 8008a40:	3c01      	subs	r4, #1
 8008a42:	e7eb      	b.n	8008a1c <quorem+0xe6>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7ee      	b.n	8008a26 <quorem+0xf0>

08008a48 <_dtoa_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	461f      	mov	r7, r3
 8008a50:	69c4      	ldr	r4, [r0, #28]
 8008a52:	b099      	sub	sp, #100	; 0x64
 8008a54:	4605      	mov	r5, r0
 8008a56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008a5e:	b974      	cbnz	r4, 8008a7e <_dtoa_r+0x36>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7fe fe5f 	bl	8007724 <malloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	61e8      	str	r0, [r5, #28]
 8008a6a:	b920      	cbnz	r0, 8008a76 <_dtoa_r+0x2e>
 8008a6c:	21ef      	movs	r1, #239	; 0xef
 8008a6e:	4bac      	ldr	r3, [pc, #688]	; (8008d20 <_dtoa_r+0x2d8>)
 8008a70:	48ac      	ldr	r0, [pc, #688]	; (8008d24 <_dtoa_r+0x2dc>)
 8008a72:	f7fe fe39 	bl	80076e8 <__assert_func>
 8008a76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a7a:	6004      	str	r4, [r0, #0]
 8008a7c:	60c4      	str	r4, [r0, #12]
 8008a7e:	69eb      	ldr	r3, [r5, #28]
 8008a80:	6819      	ldr	r1, [r3, #0]
 8008a82:	b151      	cbz	r1, 8008a9a <_dtoa_r+0x52>
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	2301      	movs	r3, #1
 8008a88:	4093      	lsls	r3, r2
 8008a8a:	604a      	str	r2, [r1, #4]
 8008a8c:	608b      	str	r3, [r1, #8]
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 fe46 	bl	8009720 <_Bfree>
 8008a94:	2200      	movs	r2, #0
 8008a96:	69eb      	ldr	r3, [r5, #28]
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	1e3b      	subs	r3, r7, #0
 8008a9c:	bfaf      	iteee	ge
 8008a9e:	2300      	movge	r3, #0
 8008aa0:	2201      	movlt	r2, #1
 8008aa2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008aa6:	9305      	strlt	r3, [sp, #20]
 8008aa8:	bfa8      	it	ge
 8008aaa:	f8c8 3000 	strge.w	r3, [r8]
 8008aae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008ab2:	4b9d      	ldr	r3, [pc, #628]	; (8008d28 <_dtoa_r+0x2e0>)
 8008ab4:	bfb8      	it	lt
 8008ab6:	f8c8 2000 	strlt.w	r2, [r8]
 8008aba:	ea33 0309 	bics.w	r3, r3, r9
 8008abe:	d119      	bne.n	8008af4 <_dtoa_r+0xac>
 8008ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ac4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008acc:	4333      	orrs	r3, r6
 8008ace:	f000 8589 	beq.w	80095e4 <_dtoa_r+0xb9c>
 8008ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ad4:	b953      	cbnz	r3, 8008aec <_dtoa_r+0xa4>
 8008ad6:	4b95      	ldr	r3, [pc, #596]	; (8008d2c <_dtoa_r+0x2e4>)
 8008ad8:	e023      	b.n	8008b22 <_dtoa_r+0xda>
 8008ada:	4b95      	ldr	r3, [pc, #596]	; (8008d30 <_dtoa_r+0x2e8>)
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	9803      	ldr	r0, [sp, #12]
 8008ae6:	b019      	add	sp, #100	; 0x64
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	4b8f      	ldr	r3, [pc, #572]	; (8008d2c <_dtoa_r+0x2e4>)
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	3303      	adds	r3, #3
 8008af2:	e7f5      	b.n	8008ae0 <_dtoa_r+0x98>
 8008af4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008af8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b00:	2200      	movs	r2, #0
 8008b02:	2300      	movs	r3, #0
 8008b04:	f7f7 ffc6 	bl	8000a94 <__aeabi_dcmpeq>
 8008b08:	4680      	mov	r8, r0
 8008b0a:	b160      	cbz	r0, 8008b26 <_dtoa_r+0xde>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8562 	beq.w	80095de <_dtoa_r+0xb96>
 8008b1a:	4b86      	ldr	r3, [pc, #536]	; (8008d34 <_dtoa_r+0x2ec>)
 8008b1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	e7de      	b.n	8008ae4 <_dtoa_r+0x9c>
 8008b26:	ab16      	add	r3, sp, #88	; 0x58
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	ab17      	add	r3, sp, #92	; 0x5c
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b34:	f001 f988 	bl	8009e48 <__d2b>
 8008b38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	2c00      	cmp	r4, #0
 8008b40:	d07e      	beq.n	8008c40 <_dtoa_r+0x1f8>
 8008b42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	2200      	movs	r2, #0
 8008b60:	4b75      	ldr	r3, [pc, #468]	; (8008d38 <_dtoa_r+0x2f0>)
 8008b62:	f7f7 fb77 	bl	8000254 <__aeabi_dsub>
 8008b66:	a368      	add	r3, pc, #416	; (adr r3, 8008d08 <_dtoa_r+0x2c0>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f7f7 fd2a 	bl	80005c4 <__aeabi_dmul>
 8008b70:	a367      	add	r3, pc, #412	; (adr r3, 8008d10 <_dtoa_r+0x2c8>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f7f7 fb6f 	bl	8000258 <__adddf3>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	460f      	mov	r7, r1
 8008b80:	f7f7 fcb6 	bl	80004f0 <__aeabi_i2d>
 8008b84:	a364      	add	r3, pc, #400	; (adr r3, 8008d18 <_dtoa_r+0x2d0>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fd1b 	bl	80005c4 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 fb5f 	bl	8000258 <__adddf3>
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	f7f7 ffc1 	bl	8000b24 <__aeabi_d2iz>
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4683      	mov	fp, r0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f7 ff7c 	bl	8000aa8 <__aeabi_dcmplt>
 8008bb0:	b148      	cbz	r0, 8008bc6 <_dtoa_r+0x17e>
 8008bb2:	4658      	mov	r0, fp
 8008bb4:	f7f7 fc9c 	bl	80004f0 <__aeabi_i2d>
 8008bb8:	4632      	mov	r2, r6
 8008bba:	463b      	mov	r3, r7
 8008bbc:	f7f7 ff6a 	bl	8000a94 <__aeabi_dcmpeq>
 8008bc0:	b908      	cbnz	r0, 8008bc6 <_dtoa_r+0x17e>
 8008bc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bc6:	f1bb 0f16 	cmp.w	fp, #22
 8008bca:	d857      	bhi.n	8008c7c <_dtoa_r+0x234>
 8008bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bd0:	4b5a      	ldr	r3, [pc, #360]	; (8008d3c <_dtoa_r+0x2f4>)
 8008bd2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	f7f7 ff65 	bl	8000aa8 <__aeabi_dcmplt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d04e      	beq.n	8008c80 <_dtoa_r+0x238>
 8008be2:	2300      	movs	r3, #0
 8008be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bec:	1b1b      	subs	r3, r3, r4
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	bf46      	itte	mi
 8008bf2:	f1c3 0901 	rsbmi	r9, r3, #1
 8008bf6:	2300      	movmi	r3, #0
 8008bf8:	f04f 0900 	movpl.w	r9, #0
 8008bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bfe:	bf48      	it	mi
 8008c00:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008c02:	f1bb 0f00 	cmp.w	fp, #0
 8008c06:	db3d      	blt.n	8008c84 <_dtoa_r+0x23c>
 8008c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008c0e:	445b      	add	r3, fp
 8008c10:	9309      	str	r3, [sp, #36]	; 0x24
 8008c12:	2300      	movs	r3, #0
 8008c14:	930a      	str	r3, [sp, #40]	; 0x28
 8008c16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c18:	2b09      	cmp	r3, #9
 8008c1a:	d867      	bhi.n	8008cec <_dtoa_r+0x2a4>
 8008c1c:	2b05      	cmp	r3, #5
 8008c1e:	bfc4      	itt	gt
 8008c20:	3b04      	subgt	r3, #4
 8008c22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c26:	bfc8      	it	gt
 8008c28:	2400      	movgt	r4, #0
 8008c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8008c2e:	bfd8      	it	le
 8008c30:	2401      	movle	r4, #1
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	f200 8086 	bhi.w	8008d44 <_dtoa_r+0x2fc>
 8008c38:	e8df f003 	tbb	[pc, r3]
 8008c3c:	5637392c 	.word	0x5637392c
 8008c40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008c44:	441c      	add	r4, r3
 8008c46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	bfc1      	itttt	gt
 8008c4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c52:	fa09 f903 	lslgt.w	r9, r9, r3
 8008c56:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008c5a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c5e:	bfd6      	itet	le
 8008c60:	f1c3 0320 	rsble	r3, r3, #32
 8008c64:	ea49 0003 	orrgt.w	r0, r9, r3
 8008c68:	fa06 f003 	lslle.w	r0, r6, r3
 8008c6c:	f7f7 fc30 	bl	80004d0 <__aeabi_ui2d>
 8008c70:	2201      	movs	r2, #1
 8008c72:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008c76:	3c01      	subs	r4, #1
 8008c78:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c7a:	e76f      	b.n	8008b5c <_dtoa_r+0x114>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e7b3      	b.n	8008be8 <_dtoa_r+0x1a0>
 8008c80:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c82:	e7b2      	b.n	8008bea <_dtoa_r+0x1a2>
 8008c84:	f1cb 0300 	rsb	r3, fp, #0
 8008c88:	930a      	str	r3, [sp, #40]	; 0x28
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	eba9 090b 	sub.w	r9, r9, fp
 8008c90:	930e      	str	r3, [sp, #56]	; 0x38
 8008c92:	e7c0      	b.n	8008c16 <_dtoa_r+0x1ce>
 8008c94:	2300      	movs	r3, #0
 8008c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	dc55      	bgt.n	8008d4a <_dtoa_r+0x302>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	9306      	str	r3, [sp, #24]
 8008ca4:	9308      	str	r3, [sp, #32]
 8008ca6:	9223      	str	r2, [sp, #140]	; 0x8c
 8008ca8:	e00b      	b.n	8008cc2 <_dtoa_r+0x27a>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e7f3      	b.n	8008c96 <_dtoa_r+0x24e>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cb4:	445b      	add	r3, fp
 8008cb6:	9306      	str	r3, [sp, #24]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	9308      	str	r3, [sp, #32]
 8008cbe:	bfb8      	it	lt
 8008cc0:	2301      	movlt	r3, #1
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	2204      	movs	r2, #4
 8008cc6:	69e8      	ldr	r0, [r5, #28]
 8008cc8:	f102 0614 	add.w	r6, r2, #20
 8008ccc:	429e      	cmp	r6, r3
 8008cce:	d940      	bls.n	8008d52 <_dtoa_r+0x30a>
 8008cd0:	6041      	str	r1, [r0, #4]
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 fce4 	bl	80096a0 <_Balloc>
 8008cd8:	9003      	str	r0, [sp, #12]
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d13c      	bne.n	8008d58 <_dtoa_r+0x310>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	f240 11af 	movw	r1, #431	; 0x1af
 8008ce4:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <_dtoa_r+0x2f8>)
 8008ce6:	e6c3      	b.n	8008a70 <_dtoa_r+0x28>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7e1      	b.n	8008cb0 <_dtoa_r+0x268>
 8008cec:	2401      	movs	r4, #1
 8008cee:	2300      	movs	r3, #0
 8008cf0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008cf2:	9322      	str	r3, [sp, #136]	; 0x88
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	9306      	str	r3, [sp, #24]
 8008cfc:	9308      	str	r3, [sp, #32]
 8008cfe:	2312      	movs	r3, #18
 8008d00:	e7d1      	b.n	8008ca6 <_dtoa_r+0x25e>
 8008d02:	bf00      	nop
 8008d04:	f3af 8000 	nop.w
 8008d08:	636f4361 	.word	0x636f4361
 8008d0c:	3fd287a7 	.word	0x3fd287a7
 8008d10:	8b60c8b3 	.word	0x8b60c8b3
 8008d14:	3fc68a28 	.word	0x3fc68a28
 8008d18:	509f79fb 	.word	0x509f79fb
 8008d1c:	3fd34413 	.word	0x3fd34413
 8008d20:	0800c18f 	.word	0x0800c18f
 8008d24:	0800c1a6 	.word	0x0800c1a6
 8008d28:	7ff00000 	.word	0x7ff00000
 8008d2c:	0800c18b 	.word	0x0800c18b
 8008d30:	0800c182 	.word	0x0800c182
 8008d34:	0800c15a 	.word	0x0800c15a
 8008d38:	3ff80000 	.word	0x3ff80000
 8008d3c:	0800c290 	.word	0x0800c290
 8008d40:	0800c1fe 	.word	0x0800c1fe
 8008d44:	2301      	movs	r3, #1
 8008d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d48:	e7d4      	b.n	8008cf4 <_dtoa_r+0x2ac>
 8008d4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d4c:	9306      	str	r3, [sp, #24]
 8008d4e:	9308      	str	r3, [sp, #32]
 8008d50:	e7b7      	b.n	8008cc2 <_dtoa_r+0x27a>
 8008d52:	3101      	adds	r1, #1
 8008d54:	0052      	lsls	r2, r2, #1
 8008d56:	e7b7      	b.n	8008cc8 <_dtoa_r+0x280>
 8008d58:	69eb      	ldr	r3, [r5, #28]
 8008d5a:	9a03      	ldr	r2, [sp, #12]
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	2b0e      	cmp	r3, #14
 8008d62:	f200 80a8 	bhi.w	8008eb6 <_dtoa_r+0x46e>
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	f000 80a5 	beq.w	8008eb6 <_dtoa_r+0x46e>
 8008d6c:	f1bb 0f00 	cmp.w	fp, #0
 8008d70:	dd34      	ble.n	8008ddc <_dtoa_r+0x394>
 8008d72:	4b9a      	ldr	r3, [pc, #616]	; (8008fdc <_dtoa_r+0x594>)
 8008d74:	f00b 020f 	and.w	r2, fp, #15
 8008d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008d80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d88:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008d8c:	d016      	beq.n	8008dbc <_dtoa_r+0x374>
 8008d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d92:	4b93      	ldr	r3, [pc, #588]	; (8008fe0 <_dtoa_r+0x598>)
 8008d94:	2703      	movs	r7, #3
 8008d96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d9a:	f7f7 fd3d 	bl	8000818 <__aeabi_ddiv>
 8008d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008da2:	f004 040f 	and.w	r4, r4, #15
 8008da6:	4e8e      	ldr	r6, [pc, #568]	; (8008fe0 <_dtoa_r+0x598>)
 8008da8:	b954      	cbnz	r4, 8008dc0 <_dtoa_r+0x378>
 8008daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008db2:	f7f7 fd31 	bl	8000818 <__aeabi_ddiv>
 8008db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dba:	e029      	b.n	8008e10 <_dtoa_r+0x3c8>
 8008dbc:	2702      	movs	r7, #2
 8008dbe:	e7f2      	b.n	8008da6 <_dtoa_r+0x35e>
 8008dc0:	07e1      	lsls	r1, r4, #31
 8008dc2:	d508      	bpl.n	8008dd6 <_dtoa_r+0x38e>
 8008dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008dc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dcc:	f7f7 fbfa 	bl	80005c4 <__aeabi_dmul>
 8008dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dd4:	3701      	adds	r7, #1
 8008dd6:	1064      	asrs	r4, r4, #1
 8008dd8:	3608      	adds	r6, #8
 8008dda:	e7e5      	b.n	8008da8 <_dtoa_r+0x360>
 8008ddc:	f000 80a5 	beq.w	8008f2a <_dtoa_r+0x4e2>
 8008de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008de4:	f1cb 0400 	rsb	r4, fp, #0
 8008de8:	4b7c      	ldr	r3, [pc, #496]	; (8008fdc <_dtoa_r+0x594>)
 8008dea:	f004 020f 	and.w	r2, r4, #15
 8008dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fbe5 	bl	80005c4 <__aeabi_dmul>
 8008dfa:	2702      	movs	r7, #2
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e02:	4e77      	ldr	r6, [pc, #476]	; (8008fe0 <_dtoa_r+0x598>)
 8008e04:	1124      	asrs	r4, r4, #4
 8008e06:	2c00      	cmp	r4, #0
 8008e08:	f040 8084 	bne.w	8008f14 <_dtoa_r+0x4cc>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1d2      	bne.n	8008db6 <_dtoa_r+0x36e>
 8008e10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008e14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008e18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 8087 	beq.w	8008f2e <_dtoa_r+0x4e6>
 8008e20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e24:	2200      	movs	r2, #0
 8008e26:	4b6f      	ldr	r3, [pc, #444]	; (8008fe4 <_dtoa_r+0x59c>)
 8008e28:	f7f7 fe3e 	bl	8000aa8 <__aeabi_dcmplt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d07e      	beq.n	8008f2e <_dtoa_r+0x4e6>
 8008e30:	9b08      	ldr	r3, [sp, #32]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d07b      	beq.n	8008f2e <_dtoa_r+0x4e6>
 8008e36:	9b06      	ldr	r3, [sp, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dd38      	ble.n	8008eae <_dtoa_r+0x466>
 8008e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e40:	2200      	movs	r2, #0
 8008e42:	4b69      	ldr	r3, [pc, #420]	; (8008fe8 <_dtoa_r+0x5a0>)
 8008e44:	f7f7 fbbe 	bl	80005c4 <__aeabi_dmul>
 8008e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e4c:	9c06      	ldr	r4, [sp, #24]
 8008e4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008e52:	3701      	adds	r7, #1
 8008e54:	4638      	mov	r0, r7
 8008e56:	f7f7 fb4b 	bl	80004f0 <__aeabi_i2d>
 8008e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e5e:	f7f7 fbb1 	bl	80005c4 <__aeabi_dmul>
 8008e62:	2200      	movs	r2, #0
 8008e64:	4b61      	ldr	r3, [pc, #388]	; (8008fec <_dtoa_r+0x5a4>)
 8008e66:	f7f7 f9f7 	bl	8000258 <__adddf3>
 8008e6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e72:	9611      	str	r6, [sp, #68]	; 0x44
 8008e74:	2c00      	cmp	r4, #0
 8008e76:	d15d      	bne.n	8008f34 <_dtoa_r+0x4ec>
 8008e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4b5c      	ldr	r3, [pc, #368]	; (8008ff0 <_dtoa_r+0x5a8>)
 8008e80:	f7f7 f9e8 	bl	8000254 <__aeabi_dsub>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e8c:	4633      	mov	r3, r6
 8008e8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e90:	f7f7 fe28 	bl	8000ae4 <__aeabi_dcmpgt>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f040 8295 	bne.w	80093c4 <_dtoa_r+0x97c>
 8008e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ea0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ea4:	f7f7 fe00 	bl	8000aa8 <__aeabi_dcmplt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f040 8289 	bne.w	80093c0 <_dtoa_r+0x978>
 8008eae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008eb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f2c0 8151 	blt.w	8009160 <_dtoa_r+0x718>
 8008ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8008ec2:	f300 814d 	bgt.w	8009160 <_dtoa_r+0x718>
 8008ec6:	4b45      	ldr	r3, [pc, #276]	; (8008fdc <_dtoa_r+0x594>)
 8008ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ecc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ed0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f280 80da 	bge.w	8009090 <_dtoa_r+0x648>
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f300 80d6 	bgt.w	8009090 <_dtoa_r+0x648>
 8008ee4:	f040 826b 	bne.w	80093be <_dtoa_r+0x976>
 8008ee8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eec:	2200      	movs	r2, #0
 8008eee:	4b40      	ldr	r3, [pc, #256]	; (8008ff0 <_dtoa_r+0x5a8>)
 8008ef0:	f7f7 fb68 	bl	80005c4 <__aeabi_dmul>
 8008ef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef8:	f7f7 fdea 	bl	8000ad0 <__aeabi_dcmpge>
 8008efc:	9c08      	ldr	r4, [sp, #32]
 8008efe:	4626      	mov	r6, r4
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f040 8241 	bne.w	8009388 <_dtoa_r+0x940>
 8008f06:	2331      	movs	r3, #49	; 0x31
 8008f08:	9f03      	ldr	r7, [sp, #12]
 8008f0a:	f10b 0b01 	add.w	fp, fp, #1
 8008f0e:	f807 3b01 	strb.w	r3, [r7], #1
 8008f12:	e23d      	b.n	8009390 <_dtoa_r+0x948>
 8008f14:	07e2      	lsls	r2, r4, #31
 8008f16:	d505      	bpl.n	8008f24 <_dtoa_r+0x4dc>
 8008f18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f1c:	f7f7 fb52 	bl	80005c4 <__aeabi_dmul>
 8008f20:	2301      	movs	r3, #1
 8008f22:	3701      	adds	r7, #1
 8008f24:	1064      	asrs	r4, r4, #1
 8008f26:	3608      	adds	r6, #8
 8008f28:	e76d      	b.n	8008e06 <_dtoa_r+0x3be>
 8008f2a:	2702      	movs	r7, #2
 8008f2c:	e770      	b.n	8008e10 <_dtoa_r+0x3c8>
 8008f2e:	46d8      	mov	r8, fp
 8008f30:	9c08      	ldr	r4, [sp, #32]
 8008f32:	e78f      	b.n	8008e54 <_dtoa_r+0x40c>
 8008f34:	9903      	ldr	r1, [sp, #12]
 8008f36:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <_dtoa_r+0x594>)
 8008f38:	4421      	add	r1, r4
 8008f3a:	9112      	str	r1, [sp, #72]	; 0x48
 8008f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008f46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	d054      	beq.n	8008ff8 <_dtoa_r+0x5b0>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	4928      	ldr	r1, [pc, #160]	; (8008ff4 <_dtoa_r+0x5ac>)
 8008f52:	f7f7 fc61 	bl	8000818 <__aeabi_ddiv>
 8008f56:	463b      	mov	r3, r7
 8008f58:	4632      	mov	r2, r6
 8008f5a:	f7f7 f97b 	bl	8000254 <__aeabi_dsub>
 8008f5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f62:	9f03      	ldr	r7, [sp, #12]
 8008f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f68:	f7f7 fddc 	bl	8000b24 <__aeabi_d2iz>
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	f7f7 fabf 	bl	80004f0 <__aeabi_i2d>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f7a:	f7f7 f96b 	bl	8000254 <__aeabi_dsub>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	3430      	adds	r4, #48	; 0x30
 8008f84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f8c:	f807 4b01 	strb.w	r4, [r7], #1
 8008f90:	f7f7 fd8a 	bl	8000aa8 <__aeabi_dcmplt>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d173      	bne.n	8009080 <_dtoa_r+0x638>
 8008f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	4911      	ldr	r1, [pc, #68]	; (8008fe4 <_dtoa_r+0x59c>)
 8008fa0:	f7f7 f958 	bl	8000254 <__aeabi_dsub>
 8008fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fa8:	f7f7 fd7e 	bl	8000aa8 <__aeabi_dcmplt>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f040 80b6 	bne.w	800911e <_dtoa_r+0x6d6>
 8008fb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fb4:	429f      	cmp	r7, r3
 8008fb6:	f43f af7a 	beq.w	8008eae <_dtoa_r+0x466>
 8008fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <_dtoa_r+0x5a0>)
 8008fc2:	f7f7 faff 	bl	80005c4 <__aeabi_dmul>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd0:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <_dtoa_r+0x5a0>)
 8008fd2:	f7f7 faf7 	bl	80005c4 <__aeabi_dmul>
 8008fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fda:	e7c3      	b.n	8008f64 <_dtoa_r+0x51c>
 8008fdc:	0800c290 	.word	0x0800c290
 8008fe0:	0800c268 	.word	0x0800c268
 8008fe4:	3ff00000 	.word	0x3ff00000
 8008fe8:	40240000 	.word	0x40240000
 8008fec:	401c0000 	.word	0x401c0000
 8008ff0:	40140000 	.word	0x40140000
 8008ff4:	3fe00000 	.word	0x3fe00000
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f7f7 fae2 	bl	80005c4 <__aeabi_dmul>
 8009000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009002:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009006:	9c03      	ldr	r4, [sp, #12]
 8009008:	9314      	str	r3, [sp, #80]	; 0x50
 800900a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800900e:	f7f7 fd89 	bl	8000b24 <__aeabi_d2iz>
 8009012:	9015      	str	r0, [sp, #84]	; 0x54
 8009014:	f7f7 fa6c 	bl	80004f0 <__aeabi_i2d>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009020:	f7f7 f918 	bl	8000254 <__aeabi_dsub>
 8009024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009026:	4606      	mov	r6, r0
 8009028:	3330      	adds	r3, #48	; 0x30
 800902a:	f804 3b01 	strb.w	r3, [r4], #1
 800902e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009030:	460f      	mov	r7, r1
 8009032:	429c      	cmp	r4, r3
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	d124      	bne.n	8009084 <_dtoa_r+0x63c>
 800903a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800903e:	4baf      	ldr	r3, [pc, #700]	; (80092fc <_dtoa_r+0x8b4>)
 8009040:	f7f7 f90a 	bl	8000258 <__adddf3>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd4a 	bl	8000ae4 <__aeabi_dcmpgt>
 8009050:	2800      	cmp	r0, #0
 8009052:	d163      	bne.n	800911c <_dtoa_r+0x6d4>
 8009054:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009058:	2000      	movs	r0, #0
 800905a:	49a8      	ldr	r1, [pc, #672]	; (80092fc <_dtoa_r+0x8b4>)
 800905c:	f7f7 f8fa 	bl	8000254 <__aeabi_dsub>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 fd1e 	bl	8000aa8 <__aeabi_dcmplt>
 800906c:	2800      	cmp	r0, #0
 800906e:	f43f af1e 	beq.w	8008eae <_dtoa_r+0x466>
 8009072:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009074:	1e7b      	subs	r3, r7, #1
 8009076:	9314      	str	r3, [sp, #80]	; 0x50
 8009078:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800907c:	2b30      	cmp	r3, #48	; 0x30
 800907e:	d0f8      	beq.n	8009072 <_dtoa_r+0x62a>
 8009080:	46c3      	mov	fp, r8
 8009082:	e03b      	b.n	80090fc <_dtoa_r+0x6b4>
 8009084:	4b9e      	ldr	r3, [pc, #632]	; (8009300 <_dtoa_r+0x8b8>)
 8009086:	f7f7 fa9d 	bl	80005c4 <__aeabi_dmul>
 800908a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800908e:	e7bc      	b.n	800900a <_dtoa_r+0x5c2>
 8009090:	9f03      	ldr	r7, [sp, #12]
 8009092:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 fbbb 	bl	8000818 <__aeabi_ddiv>
 80090a2:	f7f7 fd3f 	bl	8000b24 <__aeabi_d2iz>
 80090a6:	4604      	mov	r4, r0
 80090a8:	f7f7 fa22 	bl	80004f0 <__aeabi_i2d>
 80090ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090b0:	f7f7 fa88 	bl	80005c4 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4640      	mov	r0, r8
 80090ba:	4649      	mov	r1, r9
 80090bc:	f7f7 f8ca 	bl	8000254 <__aeabi_dsub>
 80090c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80090c4:	f807 6b01 	strb.w	r6, [r7], #1
 80090c8:	9e03      	ldr	r6, [sp, #12]
 80090ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80090ce:	1bbe      	subs	r6, r7, r6
 80090d0:	45b4      	cmp	ip, r6
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	d136      	bne.n	8009146 <_dtoa_r+0x6fe>
 80090d8:	f7f7 f8be 	bl	8000258 <__adddf3>
 80090dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090e0:	4680      	mov	r8, r0
 80090e2:	4689      	mov	r9, r1
 80090e4:	f7f7 fcfe 	bl	8000ae4 <__aeabi_dcmpgt>
 80090e8:	bb58      	cbnz	r0, 8009142 <_dtoa_r+0x6fa>
 80090ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 fccf 	bl	8000a94 <__aeabi_dcmpeq>
 80090f6:	b108      	cbz	r0, 80090fc <_dtoa_r+0x6b4>
 80090f8:	07e3      	lsls	r3, r4, #31
 80090fa:	d422      	bmi.n	8009142 <_dtoa_r+0x6fa>
 80090fc:	4651      	mov	r1, sl
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 fb0e 	bl	8009720 <_Bfree>
 8009104:	2300      	movs	r3, #0
 8009106:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009108:	703b      	strb	r3, [r7, #0]
 800910a:	f10b 0301 	add.w	r3, fp, #1
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009112:	2b00      	cmp	r3, #0
 8009114:	f43f ace6 	beq.w	8008ae4 <_dtoa_r+0x9c>
 8009118:	601f      	str	r7, [r3, #0]
 800911a:	e4e3      	b.n	8008ae4 <_dtoa_r+0x9c>
 800911c:	4627      	mov	r7, r4
 800911e:	463b      	mov	r3, r7
 8009120:	461f      	mov	r7, r3
 8009122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009126:	2a39      	cmp	r2, #57	; 0x39
 8009128:	d107      	bne.n	800913a <_dtoa_r+0x6f2>
 800912a:	9a03      	ldr	r2, [sp, #12]
 800912c:	429a      	cmp	r2, r3
 800912e:	d1f7      	bne.n	8009120 <_dtoa_r+0x6d8>
 8009130:	2230      	movs	r2, #48	; 0x30
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	f108 0801 	add.w	r8, r8, #1
 8009138:	700a      	strb	r2, [r1, #0]
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	3201      	adds	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	e79e      	b.n	8009080 <_dtoa_r+0x638>
 8009142:	46d8      	mov	r8, fp
 8009144:	e7eb      	b.n	800911e <_dtoa_r+0x6d6>
 8009146:	2200      	movs	r2, #0
 8009148:	4b6d      	ldr	r3, [pc, #436]	; (8009300 <_dtoa_r+0x8b8>)
 800914a:	f7f7 fa3b 	bl	80005c4 <__aeabi_dmul>
 800914e:	2200      	movs	r2, #0
 8009150:	2300      	movs	r3, #0
 8009152:	4680      	mov	r8, r0
 8009154:	4689      	mov	r9, r1
 8009156:	f7f7 fc9d 	bl	8000a94 <__aeabi_dcmpeq>
 800915a:	2800      	cmp	r0, #0
 800915c:	d09b      	beq.n	8009096 <_dtoa_r+0x64e>
 800915e:	e7cd      	b.n	80090fc <_dtoa_r+0x6b4>
 8009160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009162:	2a00      	cmp	r2, #0
 8009164:	f000 80c4 	beq.w	80092f0 <_dtoa_r+0x8a8>
 8009168:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800916a:	2a01      	cmp	r2, #1
 800916c:	f300 80a8 	bgt.w	80092c0 <_dtoa_r+0x878>
 8009170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009172:	2a00      	cmp	r2, #0
 8009174:	f000 80a0 	beq.w	80092b8 <_dtoa_r+0x870>
 8009178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800917c:	464f      	mov	r7, r9
 800917e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009182:	2101      	movs	r1, #1
 8009184:	441a      	add	r2, r3
 8009186:	4628      	mov	r0, r5
 8009188:	4499      	add	r9, r3
 800918a:	9209      	str	r2, [sp, #36]	; 0x24
 800918c:	f000 fbc8 	bl	8009920 <__i2b>
 8009190:	4606      	mov	r6, r0
 8009192:	b15f      	cbz	r7, 80091ac <_dtoa_r+0x764>
 8009194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009196:	2b00      	cmp	r3, #0
 8009198:	dd08      	ble.n	80091ac <_dtoa_r+0x764>
 800919a:	42bb      	cmp	r3, r7
 800919c:	bfa8      	it	ge
 800919e:	463b      	movge	r3, r7
 80091a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a2:	eba9 0903 	sub.w	r9, r9, r3
 80091a6:	1aff      	subs	r7, r7, r3
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
 80091ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ae:	b1f3      	cbz	r3, 80091ee <_dtoa_r+0x7a6>
 80091b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80a0 	beq.w	80092f8 <_dtoa_r+0x8b0>
 80091b8:	2c00      	cmp	r4, #0
 80091ba:	dd10      	ble.n	80091de <_dtoa_r+0x796>
 80091bc:	4631      	mov	r1, r6
 80091be:	4622      	mov	r2, r4
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 fc6b 	bl	8009a9c <__pow5mult>
 80091c6:	4652      	mov	r2, sl
 80091c8:	4601      	mov	r1, r0
 80091ca:	4606      	mov	r6, r0
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 fbbd 	bl	800994c <__multiply>
 80091d2:	4680      	mov	r8, r0
 80091d4:	4651      	mov	r1, sl
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 faa2 	bl	8009720 <_Bfree>
 80091dc:	46c2      	mov	sl, r8
 80091de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e0:	1b1a      	subs	r2, r3, r4
 80091e2:	d004      	beq.n	80091ee <_dtoa_r+0x7a6>
 80091e4:	4651      	mov	r1, sl
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 fc58 	bl	8009a9c <__pow5mult>
 80091ec:	4682      	mov	sl, r0
 80091ee:	2101      	movs	r1, #1
 80091f0:	4628      	mov	r0, r5
 80091f2:	f000 fb95 	bl	8009920 <__i2b>
 80091f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f8:	4604      	mov	r4, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f340 8082 	ble.w	8009304 <_dtoa_r+0x8bc>
 8009200:	461a      	mov	r2, r3
 8009202:	4601      	mov	r1, r0
 8009204:	4628      	mov	r0, r5
 8009206:	f000 fc49 	bl	8009a9c <__pow5mult>
 800920a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800920c:	4604      	mov	r4, r0
 800920e:	2b01      	cmp	r3, #1
 8009210:	dd7b      	ble.n	800930a <_dtoa_r+0x8c2>
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800921c:	6918      	ldr	r0, [r3, #16]
 800921e:	f000 fb31 	bl	8009884 <__hi0bits>
 8009222:	f1c0 0020 	rsb	r0, r0, #32
 8009226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009228:	4418      	add	r0, r3
 800922a:	f010 001f 	ands.w	r0, r0, #31
 800922e:	f000 8092 	beq.w	8009356 <_dtoa_r+0x90e>
 8009232:	f1c0 0320 	rsb	r3, r0, #32
 8009236:	2b04      	cmp	r3, #4
 8009238:	f340 8085 	ble.w	8009346 <_dtoa_r+0x8fe>
 800923c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923e:	f1c0 001c 	rsb	r0, r0, #28
 8009242:	4403      	add	r3, r0
 8009244:	4481      	add	r9, r0
 8009246:	4407      	add	r7, r0
 8009248:	9309      	str	r3, [sp, #36]	; 0x24
 800924a:	f1b9 0f00 	cmp.w	r9, #0
 800924e:	dd05      	ble.n	800925c <_dtoa_r+0x814>
 8009250:	4651      	mov	r1, sl
 8009252:	464a      	mov	r2, r9
 8009254:	4628      	mov	r0, r5
 8009256:	f000 fc7b 	bl	8009b50 <__lshift>
 800925a:	4682      	mov	sl, r0
 800925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	dd05      	ble.n	800926e <_dtoa_r+0x826>
 8009262:	4621      	mov	r1, r4
 8009264:	461a      	mov	r2, r3
 8009266:	4628      	mov	r0, r5
 8009268:	f000 fc72 	bl	8009b50 <__lshift>
 800926c:	4604      	mov	r4, r0
 800926e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d072      	beq.n	800935a <_dtoa_r+0x912>
 8009274:	4621      	mov	r1, r4
 8009276:	4650      	mov	r0, sl
 8009278:	f000 fcd6 	bl	8009c28 <__mcmp>
 800927c:	2800      	cmp	r0, #0
 800927e:	da6c      	bge.n	800935a <_dtoa_r+0x912>
 8009280:	2300      	movs	r3, #0
 8009282:	4651      	mov	r1, sl
 8009284:	220a      	movs	r2, #10
 8009286:	4628      	mov	r0, r5
 8009288:	f000 fa6c 	bl	8009764 <__multadd>
 800928c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928e:	4682      	mov	sl, r0
 8009290:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 81ac 	beq.w	80095f2 <_dtoa_r+0xbaa>
 800929a:	2300      	movs	r3, #0
 800929c:	4631      	mov	r1, r6
 800929e:	220a      	movs	r2, #10
 80092a0:	4628      	mov	r0, r5
 80092a2:	f000 fa5f 	bl	8009764 <__multadd>
 80092a6:	9b06      	ldr	r3, [sp, #24]
 80092a8:	4606      	mov	r6, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f300 8093 	bgt.w	80093d6 <_dtoa_r+0x98e>
 80092b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	dc59      	bgt.n	800936a <_dtoa_r+0x922>
 80092b6:	e08e      	b.n	80093d6 <_dtoa_r+0x98e>
 80092b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80092ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092be:	e75d      	b.n	800917c <_dtoa_r+0x734>
 80092c0:	9b08      	ldr	r3, [sp, #32]
 80092c2:	1e5c      	subs	r4, r3, #1
 80092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	bfbf      	itttt	lt
 80092ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80092ce:	1ae3      	sublt	r3, r4, r3
 80092d0:	18d2      	addlt	r2, r2, r3
 80092d2:	bfa8      	it	ge
 80092d4:	1b1c      	subge	r4, r3, r4
 80092d6:	9b08      	ldr	r3, [sp, #32]
 80092d8:	bfbe      	ittt	lt
 80092da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80092dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80092de:	2400      	movlt	r4, #0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfb5      	itete	lt
 80092e4:	eba9 0703 	sublt.w	r7, r9, r3
 80092e8:	464f      	movge	r7, r9
 80092ea:	2300      	movlt	r3, #0
 80092ec:	9b08      	ldrge	r3, [sp, #32]
 80092ee:	e747      	b.n	8009180 <_dtoa_r+0x738>
 80092f0:	464f      	mov	r7, r9
 80092f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80092f6:	e74c      	b.n	8009192 <_dtoa_r+0x74a>
 80092f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092fa:	e773      	b.n	80091e4 <_dtoa_r+0x79c>
 80092fc:	3fe00000 	.word	0x3fe00000
 8009300:	40240000 	.word	0x40240000
 8009304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009306:	2b01      	cmp	r3, #1
 8009308:	dc18      	bgt.n	800933c <_dtoa_r+0x8f4>
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	b9b3      	cbnz	r3, 800933c <_dtoa_r+0x8f4>
 800930e:	9b05      	ldr	r3, [sp, #20]
 8009310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009314:	b993      	cbnz	r3, 800933c <_dtoa_r+0x8f4>
 8009316:	9b05      	ldr	r3, [sp, #20]
 8009318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800931c:	0d1b      	lsrs	r3, r3, #20
 800931e:	051b      	lsls	r3, r3, #20
 8009320:	b17b      	cbz	r3, 8009342 <_dtoa_r+0x8fa>
 8009322:	f04f 0801 	mov.w	r8, #1
 8009326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009328:	f109 0901 	add.w	r9, r9, #1
 800932c:	3301      	adds	r3, #1
 800932e:	9309      	str	r3, [sp, #36]	; 0x24
 8009330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009332:	2b00      	cmp	r3, #0
 8009334:	f47f af6f 	bne.w	8009216 <_dtoa_r+0x7ce>
 8009338:	2001      	movs	r0, #1
 800933a:	e774      	b.n	8009226 <_dtoa_r+0x7de>
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	e7f6      	b.n	8009330 <_dtoa_r+0x8e8>
 8009342:	4698      	mov	r8, r3
 8009344:	e7f4      	b.n	8009330 <_dtoa_r+0x8e8>
 8009346:	d080      	beq.n	800924a <_dtoa_r+0x802>
 8009348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800934a:	331c      	adds	r3, #28
 800934c:	441a      	add	r2, r3
 800934e:	4499      	add	r9, r3
 8009350:	441f      	add	r7, r3
 8009352:	9209      	str	r2, [sp, #36]	; 0x24
 8009354:	e779      	b.n	800924a <_dtoa_r+0x802>
 8009356:	4603      	mov	r3, r0
 8009358:	e7f6      	b.n	8009348 <_dtoa_r+0x900>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	2b00      	cmp	r3, #0
 800935e:	dc34      	bgt.n	80093ca <_dtoa_r+0x982>
 8009360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009362:	2b02      	cmp	r3, #2
 8009364:	dd31      	ble.n	80093ca <_dtoa_r+0x982>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	9306      	str	r3, [sp, #24]
 800936a:	9b06      	ldr	r3, [sp, #24]
 800936c:	b963      	cbnz	r3, 8009388 <_dtoa_r+0x940>
 800936e:	4621      	mov	r1, r4
 8009370:	2205      	movs	r2, #5
 8009372:	4628      	mov	r0, r5
 8009374:	f000 f9f6 	bl	8009764 <__multadd>
 8009378:	4601      	mov	r1, r0
 800937a:	4604      	mov	r4, r0
 800937c:	4650      	mov	r0, sl
 800937e:	f000 fc53 	bl	8009c28 <__mcmp>
 8009382:	2800      	cmp	r0, #0
 8009384:	f73f adbf 	bgt.w	8008f06 <_dtoa_r+0x4be>
 8009388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800938a:	9f03      	ldr	r7, [sp, #12]
 800938c:	ea6f 0b03 	mvn.w	fp, r3
 8009390:	f04f 0800 	mov.w	r8, #0
 8009394:	4621      	mov	r1, r4
 8009396:	4628      	mov	r0, r5
 8009398:	f000 f9c2 	bl	8009720 <_Bfree>
 800939c:	2e00      	cmp	r6, #0
 800939e:	f43f aead 	beq.w	80090fc <_dtoa_r+0x6b4>
 80093a2:	f1b8 0f00 	cmp.w	r8, #0
 80093a6:	d005      	beq.n	80093b4 <_dtoa_r+0x96c>
 80093a8:	45b0      	cmp	r8, r6
 80093aa:	d003      	beq.n	80093b4 <_dtoa_r+0x96c>
 80093ac:	4641      	mov	r1, r8
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 f9b6 	bl	8009720 <_Bfree>
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 f9b2 	bl	8009720 <_Bfree>
 80093bc:	e69e      	b.n	80090fc <_dtoa_r+0x6b4>
 80093be:	2400      	movs	r4, #0
 80093c0:	4626      	mov	r6, r4
 80093c2:	e7e1      	b.n	8009388 <_dtoa_r+0x940>
 80093c4:	46c3      	mov	fp, r8
 80093c6:	4626      	mov	r6, r4
 80093c8:	e59d      	b.n	8008f06 <_dtoa_r+0x4be>
 80093ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 80c8 	beq.w	8009562 <_dtoa_r+0xb1a>
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	9306      	str	r3, [sp, #24]
 80093d6:	2f00      	cmp	r7, #0
 80093d8:	dd05      	ble.n	80093e6 <_dtoa_r+0x99e>
 80093da:	4631      	mov	r1, r6
 80093dc:	463a      	mov	r2, r7
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 fbb6 	bl	8009b50 <__lshift>
 80093e4:	4606      	mov	r6, r0
 80093e6:	f1b8 0f00 	cmp.w	r8, #0
 80093ea:	d05b      	beq.n	80094a4 <_dtoa_r+0xa5c>
 80093ec:	4628      	mov	r0, r5
 80093ee:	6871      	ldr	r1, [r6, #4]
 80093f0:	f000 f956 	bl	80096a0 <_Balloc>
 80093f4:	4607      	mov	r7, r0
 80093f6:	b928      	cbnz	r0, 8009404 <_dtoa_r+0x9bc>
 80093f8:	4602      	mov	r2, r0
 80093fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80093fe:	4b81      	ldr	r3, [pc, #516]	; (8009604 <_dtoa_r+0xbbc>)
 8009400:	f7ff bb36 	b.w	8008a70 <_dtoa_r+0x28>
 8009404:	6932      	ldr	r2, [r6, #16]
 8009406:	f106 010c 	add.w	r1, r6, #12
 800940a:	3202      	adds	r2, #2
 800940c:	0092      	lsls	r2, r2, #2
 800940e:	300c      	adds	r0, #12
 8009410:	f002 f8ca 	bl	800b5a8 <memcpy>
 8009414:	2201      	movs	r2, #1
 8009416:	4639      	mov	r1, r7
 8009418:	4628      	mov	r0, r5
 800941a:	f000 fb99 	bl	8009b50 <__lshift>
 800941e:	46b0      	mov	r8, r6
 8009420:	4606      	mov	r6, r0
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	9a03      	ldr	r2, [sp, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	9308      	str	r3, [sp, #32]
 800942a:	9b06      	ldr	r3, [sp, #24]
 800942c:	4413      	add	r3, r2
 800942e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	930a      	str	r3, [sp, #40]	; 0x28
 8009438:	9b08      	ldr	r3, [sp, #32]
 800943a:	4621      	mov	r1, r4
 800943c:	3b01      	subs	r3, #1
 800943e:	4650      	mov	r0, sl
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	f7ff fa78 	bl	8008936 <quorem>
 8009446:	4641      	mov	r1, r8
 8009448:	9006      	str	r0, [sp, #24]
 800944a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800944e:	4650      	mov	r0, sl
 8009450:	f000 fbea 	bl	8009c28 <__mcmp>
 8009454:	4632      	mov	r2, r6
 8009456:	9009      	str	r0, [sp, #36]	; 0x24
 8009458:	4621      	mov	r1, r4
 800945a:	4628      	mov	r0, r5
 800945c:	f000 fc00 	bl	8009c60 <__mdiff>
 8009460:	68c2      	ldr	r2, [r0, #12]
 8009462:	4607      	mov	r7, r0
 8009464:	bb02      	cbnz	r2, 80094a8 <_dtoa_r+0xa60>
 8009466:	4601      	mov	r1, r0
 8009468:	4650      	mov	r0, sl
 800946a:	f000 fbdd 	bl	8009c28 <__mcmp>
 800946e:	4602      	mov	r2, r0
 8009470:	4639      	mov	r1, r7
 8009472:	4628      	mov	r0, r5
 8009474:	920c      	str	r2, [sp, #48]	; 0x30
 8009476:	f000 f953 	bl	8009720 <_Bfree>
 800947a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800947c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800947e:	9f08      	ldr	r7, [sp, #32]
 8009480:	ea43 0102 	orr.w	r1, r3, r2
 8009484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009486:	4319      	orrs	r1, r3
 8009488:	d110      	bne.n	80094ac <_dtoa_r+0xa64>
 800948a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800948e:	d029      	beq.n	80094e4 <_dtoa_r+0xa9c>
 8009490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd02      	ble.n	800949c <_dtoa_r+0xa54>
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	f883 9000 	strb.w	r9, [r3]
 80094a2:	e777      	b.n	8009394 <_dtoa_r+0x94c>
 80094a4:	4630      	mov	r0, r6
 80094a6:	e7ba      	b.n	800941e <_dtoa_r+0x9d6>
 80094a8:	2201      	movs	r2, #1
 80094aa:	e7e1      	b.n	8009470 <_dtoa_r+0xa28>
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	db04      	blt.n	80094bc <_dtoa_r+0xa74>
 80094b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80094b4:	430b      	orrs	r3, r1
 80094b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094b8:	430b      	orrs	r3, r1
 80094ba:	d120      	bne.n	80094fe <_dtoa_r+0xab6>
 80094bc:	2a00      	cmp	r2, #0
 80094be:	dded      	ble.n	800949c <_dtoa_r+0xa54>
 80094c0:	4651      	mov	r1, sl
 80094c2:	2201      	movs	r2, #1
 80094c4:	4628      	mov	r0, r5
 80094c6:	f000 fb43 	bl	8009b50 <__lshift>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4682      	mov	sl, r0
 80094ce:	f000 fbab 	bl	8009c28 <__mcmp>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	dc03      	bgt.n	80094de <_dtoa_r+0xa96>
 80094d6:	d1e1      	bne.n	800949c <_dtoa_r+0xa54>
 80094d8:	f019 0f01 	tst.w	r9, #1
 80094dc:	d0de      	beq.n	800949c <_dtoa_r+0xa54>
 80094de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094e2:	d1d8      	bne.n	8009496 <_dtoa_r+0xa4e>
 80094e4:	2339      	movs	r3, #57	; 0x39
 80094e6:	9a04      	ldr	r2, [sp, #16]
 80094e8:	7013      	strb	r3, [r2, #0]
 80094ea:	463b      	mov	r3, r7
 80094ec:	461f      	mov	r7, r3
 80094ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2a39      	cmp	r2, #57	; 0x39
 80094f6:	d06b      	beq.n	80095d0 <_dtoa_r+0xb88>
 80094f8:	3201      	adds	r2, #1
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	e74a      	b.n	8009394 <_dtoa_r+0x94c>
 80094fe:	2a00      	cmp	r2, #0
 8009500:	dd07      	ble.n	8009512 <_dtoa_r+0xaca>
 8009502:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009506:	d0ed      	beq.n	80094e4 <_dtoa_r+0xa9c>
 8009508:	9a04      	ldr	r2, [sp, #16]
 800950a:	f109 0301 	add.w	r3, r9, #1
 800950e:	7013      	strb	r3, [r2, #0]
 8009510:	e740      	b.n	8009394 <_dtoa_r+0x94c>
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009516:	f803 9c01 	strb.w	r9, [r3, #-1]
 800951a:	4293      	cmp	r3, r2
 800951c:	d042      	beq.n	80095a4 <_dtoa_r+0xb5c>
 800951e:	4651      	mov	r1, sl
 8009520:	2300      	movs	r3, #0
 8009522:	220a      	movs	r2, #10
 8009524:	4628      	mov	r0, r5
 8009526:	f000 f91d 	bl	8009764 <__multadd>
 800952a:	45b0      	cmp	r8, r6
 800952c:	4682      	mov	sl, r0
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	f04f 020a 	mov.w	r2, #10
 8009536:	4641      	mov	r1, r8
 8009538:	4628      	mov	r0, r5
 800953a:	d107      	bne.n	800954c <_dtoa_r+0xb04>
 800953c:	f000 f912 	bl	8009764 <__multadd>
 8009540:	4680      	mov	r8, r0
 8009542:	4606      	mov	r6, r0
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	3301      	adds	r3, #1
 8009548:	9308      	str	r3, [sp, #32]
 800954a:	e775      	b.n	8009438 <_dtoa_r+0x9f0>
 800954c:	f000 f90a 	bl	8009764 <__multadd>
 8009550:	4631      	mov	r1, r6
 8009552:	4680      	mov	r8, r0
 8009554:	2300      	movs	r3, #0
 8009556:	220a      	movs	r2, #10
 8009558:	4628      	mov	r0, r5
 800955a:	f000 f903 	bl	8009764 <__multadd>
 800955e:	4606      	mov	r6, r0
 8009560:	e7f0      	b.n	8009544 <_dtoa_r+0xafc>
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	9f03      	ldr	r7, [sp, #12]
 8009568:	4621      	mov	r1, r4
 800956a:	4650      	mov	r0, sl
 800956c:	f7ff f9e3 	bl	8008936 <quorem>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009576:	f807 9b01 	strb.w	r9, [r7], #1
 800957a:	1afa      	subs	r2, r7, r3
 800957c:	9b06      	ldr	r3, [sp, #24]
 800957e:	4293      	cmp	r3, r2
 8009580:	dd07      	ble.n	8009592 <_dtoa_r+0xb4a>
 8009582:	4651      	mov	r1, sl
 8009584:	2300      	movs	r3, #0
 8009586:	220a      	movs	r2, #10
 8009588:	4628      	mov	r0, r5
 800958a:	f000 f8eb 	bl	8009764 <__multadd>
 800958e:	4682      	mov	sl, r0
 8009590:	e7ea      	b.n	8009568 <_dtoa_r+0xb20>
 8009592:	9b06      	ldr	r3, [sp, #24]
 8009594:	f04f 0800 	mov.w	r8, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfcc      	ite	gt
 800959c:	461f      	movgt	r7, r3
 800959e:	2701      	movle	r7, #1
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	441f      	add	r7, r3
 80095a4:	4651      	mov	r1, sl
 80095a6:	2201      	movs	r2, #1
 80095a8:	4628      	mov	r0, r5
 80095aa:	f000 fad1 	bl	8009b50 <__lshift>
 80095ae:	4621      	mov	r1, r4
 80095b0:	4682      	mov	sl, r0
 80095b2:	f000 fb39 	bl	8009c28 <__mcmp>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	dc97      	bgt.n	80094ea <_dtoa_r+0xaa2>
 80095ba:	d102      	bne.n	80095c2 <_dtoa_r+0xb7a>
 80095bc:	f019 0f01 	tst.w	r9, #1
 80095c0:	d193      	bne.n	80094ea <_dtoa_r+0xaa2>
 80095c2:	463b      	mov	r3, r7
 80095c4:	461f      	mov	r7, r3
 80095c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ca:	2a30      	cmp	r2, #48	; 0x30
 80095cc:	d0fa      	beq.n	80095c4 <_dtoa_r+0xb7c>
 80095ce:	e6e1      	b.n	8009394 <_dtoa_r+0x94c>
 80095d0:	9a03      	ldr	r2, [sp, #12]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d18a      	bne.n	80094ec <_dtoa_r+0xaa4>
 80095d6:	2331      	movs	r3, #49	; 0x31
 80095d8:	f10b 0b01 	add.w	fp, fp, #1
 80095dc:	e797      	b.n	800950e <_dtoa_r+0xac6>
 80095de:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <_dtoa_r+0xbc0>)
 80095e0:	f7ff ba9f 	b.w	8008b22 <_dtoa_r+0xda>
 80095e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f47f aa77 	bne.w	8008ada <_dtoa_r+0x92>
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <_dtoa_r+0xbc4>)
 80095ee:	f7ff ba98 	b.w	8008b22 <_dtoa_r+0xda>
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dcb6      	bgt.n	8009566 <_dtoa_r+0xb1e>
 80095f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	f73f aeb5 	bgt.w	800936a <_dtoa_r+0x922>
 8009600:	e7b1      	b.n	8009566 <_dtoa_r+0xb1e>
 8009602:	bf00      	nop
 8009604:	0800c1fe 	.word	0x0800c1fe
 8009608:	0800c159 	.word	0x0800c159
 800960c:	0800c182 	.word	0x0800c182

08009610 <_free_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4605      	mov	r5, r0
 8009614:	2900      	cmp	r1, #0
 8009616:	d040      	beq.n	800969a <_free_r+0x8a>
 8009618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800961c:	1f0c      	subs	r4, r1, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	bfb8      	it	lt
 8009622:	18e4      	addlt	r4, r4, r3
 8009624:	f7fe f92e 	bl	8007884 <__malloc_lock>
 8009628:	4a1c      	ldr	r2, [pc, #112]	; (800969c <_free_r+0x8c>)
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	b933      	cbnz	r3, 800963c <_free_r+0x2c>
 800962e:	6063      	str	r3, [r4, #4]
 8009630:	6014      	str	r4, [r2, #0]
 8009632:	4628      	mov	r0, r5
 8009634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009638:	f7fe b92a 	b.w	8007890 <__malloc_unlock>
 800963c:	42a3      	cmp	r3, r4
 800963e:	d908      	bls.n	8009652 <_free_r+0x42>
 8009640:	6820      	ldr	r0, [r4, #0]
 8009642:	1821      	adds	r1, r4, r0
 8009644:	428b      	cmp	r3, r1
 8009646:	bf01      	itttt	eq
 8009648:	6819      	ldreq	r1, [r3, #0]
 800964a:	685b      	ldreq	r3, [r3, #4]
 800964c:	1809      	addeq	r1, r1, r0
 800964e:	6021      	streq	r1, [r4, #0]
 8009650:	e7ed      	b.n	800962e <_free_r+0x1e>
 8009652:	461a      	mov	r2, r3
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	b10b      	cbz	r3, 800965c <_free_r+0x4c>
 8009658:	42a3      	cmp	r3, r4
 800965a:	d9fa      	bls.n	8009652 <_free_r+0x42>
 800965c:	6811      	ldr	r1, [r2, #0]
 800965e:	1850      	adds	r0, r2, r1
 8009660:	42a0      	cmp	r0, r4
 8009662:	d10b      	bne.n	800967c <_free_r+0x6c>
 8009664:	6820      	ldr	r0, [r4, #0]
 8009666:	4401      	add	r1, r0
 8009668:	1850      	adds	r0, r2, r1
 800966a:	4283      	cmp	r3, r0
 800966c:	6011      	str	r1, [r2, #0]
 800966e:	d1e0      	bne.n	8009632 <_free_r+0x22>
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	4408      	add	r0, r1
 8009676:	6010      	str	r0, [r2, #0]
 8009678:	6053      	str	r3, [r2, #4]
 800967a:	e7da      	b.n	8009632 <_free_r+0x22>
 800967c:	d902      	bls.n	8009684 <_free_r+0x74>
 800967e:	230c      	movs	r3, #12
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	e7d6      	b.n	8009632 <_free_r+0x22>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	1821      	adds	r1, r4, r0
 8009688:	428b      	cmp	r3, r1
 800968a:	bf01      	itttt	eq
 800968c:	6819      	ldreq	r1, [r3, #0]
 800968e:	685b      	ldreq	r3, [r3, #4]
 8009690:	1809      	addeq	r1, r1, r0
 8009692:	6021      	streq	r1, [r4, #0]
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	6054      	str	r4, [r2, #4]
 8009698:	e7cb      	b.n	8009632 <_free_r+0x22>
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	20000634 	.word	0x20000634

080096a0 <_Balloc>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	69c6      	ldr	r6, [r0, #28]
 80096a4:	4604      	mov	r4, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	b976      	cbnz	r6, 80096c8 <_Balloc+0x28>
 80096aa:	2010      	movs	r0, #16
 80096ac:	f7fe f83a 	bl	8007724 <malloc>
 80096b0:	4602      	mov	r2, r0
 80096b2:	61e0      	str	r0, [r4, #28]
 80096b4:	b920      	cbnz	r0, 80096c0 <_Balloc+0x20>
 80096b6:	216b      	movs	r1, #107	; 0x6b
 80096b8:	4b17      	ldr	r3, [pc, #92]	; (8009718 <_Balloc+0x78>)
 80096ba:	4818      	ldr	r0, [pc, #96]	; (800971c <_Balloc+0x7c>)
 80096bc:	f7fe f814 	bl	80076e8 <__assert_func>
 80096c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c4:	6006      	str	r6, [r0, #0]
 80096c6:	60c6      	str	r6, [r0, #12]
 80096c8:	69e6      	ldr	r6, [r4, #28]
 80096ca:	68f3      	ldr	r3, [r6, #12]
 80096cc:	b183      	cbz	r3, 80096f0 <_Balloc+0x50>
 80096ce:	69e3      	ldr	r3, [r4, #28]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096d6:	b9b8      	cbnz	r0, 8009708 <_Balloc+0x68>
 80096d8:	2101      	movs	r1, #1
 80096da:	fa01 f605 	lsl.w	r6, r1, r5
 80096de:	1d72      	adds	r2, r6, #5
 80096e0:	4620      	mov	r0, r4
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	f001 ff74 	bl	800b5d0 <_calloc_r>
 80096e8:	b160      	cbz	r0, 8009704 <_Balloc+0x64>
 80096ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096ee:	e00e      	b.n	800970e <_Balloc+0x6e>
 80096f0:	2221      	movs	r2, #33	; 0x21
 80096f2:	2104      	movs	r1, #4
 80096f4:	4620      	mov	r0, r4
 80096f6:	f001 ff6b 	bl	800b5d0 <_calloc_r>
 80096fa:	69e3      	ldr	r3, [r4, #28]
 80096fc:	60f0      	str	r0, [r6, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e4      	bne.n	80096ce <_Balloc+0x2e>
 8009704:	2000      	movs	r0, #0
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	6802      	ldr	r2, [r0, #0]
 800970a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800970e:	2300      	movs	r3, #0
 8009710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009714:	e7f7      	b.n	8009706 <_Balloc+0x66>
 8009716:	bf00      	nop
 8009718:	0800c18f 	.word	0x0800c18f
 800971c:	0800c20f 	.word	0x0800c20f

08009720 <_Bfree>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	69c6      	ldr	r6, [r0, #28]
 8009724:	4605      	mov	r5, r0
 8009726:	460c      	mov	r4, r1
 8009728:	b976      	cbnz	r6, 8009748 <_Bfree+0x28>
 800972a:	2010      	movs	r0, #16
 800972c:	f7fd fffa 	bl	8007724 <malloc>
 8009730:	4602      	mov	r2, r0
 8009732:	61e8      	str	r0, [r5, #28]
 8009734:	b920      	cbnz	r0, 8009740 <_Bfree+0x20>
 8009736:	218f      	movs	r1, #143	; 0x8f
 8009738:	4b08      	ldr	r3, [pc, #32]	; (800975c <_Bfree+0x3c>)
 800973a:	4809      	ldr	r0, [pc, #36]	; (8009760 <_Bfree+0x40>)
 800973c:	f7fd ffd4 	bl	80076e8 <__assert_func>
 8009740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009744:	6006      	str	r6, [r0, #0]
 8009746:	60c6      	str	r6, [r0, #12]
 8009748:	b13c      	cbz	r4, 800975a <_Bfree+0x3a>
 800974a:	69eb      	ldr	r3, [r5, #28]
 800974c:	6862      	ldr	r2, [r4, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009754:	6021      	str	r1, [r4, #0]
 8009756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	0800c18f 	.word	0x0800c18f
 8009760:	0800c20f 	.word	0x0800c20f

08009764 <__multadd>:
 8009764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	4607      	mov	r7, r0
 800976a:	460c      	mov	r4, r1
 800976c:	461e      	mov	r6, r3
 800976e:	2000      	movs	r0, #0
 8009770:	690d      	ldr	r5, [r1, #16]
 8009772:	f101 0c14 	add.w	ip, r1, #20
 8009776:	f8dc 3000 	ldr.w	r3, [ip]
 800977a:	3001      	adds	r0, #1
 800977c:	b299      	uxth	r1, r3
 800977e:	fb02 6101 	mla	r1, r2, r1, r6
 8009782:	0c1e      	lsrs	r6, r3, #16
 8009784:	0c0b      	lsrs	r3, r1, #16
 8009786:	fb02 3306 	mla	r3, r2, r6, r3
 800978a:	b289      	uxth	r1, r1
 800978c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009790:	4285      	cmp	r5, r0
 8009792:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009796:	f84c 1b04 	str.w	r1, [ip], #4
 800979a:	dcec      	bgt.n	8009776 <__multadd+0x12>
 800979c:	b30e      	cbz	r6, 80097e2 <__multadd+0x7e>
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	42ab      	cmp	r3, r5
 80097a2:	dc19      	bgt.n	80097d8 <__multadd+0x74>
 80097a4:	6861      	ldr	r1, [r4, #4]
 80097a6:	4638      	mov	r0, r7
 80097a8:	3101      	adds	r1, #1
 80097aa:	f7ff ff79 	bl	80096a0 <_Balloc>
 80097ae:	4680      	mov	r8, r0
 80097b0:	b928      	cbnz	r0, 80097be <__multadd+0x5a>
 80097b2:	4602      	mov	r2, r0
 80097b4:	21ba      	movs	r1, #186	; 0xba
 80097b6:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <__multadd+0x84>)
 80097b8:	480c      	ldr	r0, [pc, #48]	; (80097ec <__multadd+0x88>)
 80097ba:	f7fd ff95 	bl	80076e8 <__assert_func>
 80097be:	6922      	ldr	r2, [r4, #16]
 80097c0:	f104 010c 	add.w	r1, r4, #12
 80097c4:	3202      	adds	r2, #2
 80097c6:	0092      	lsls	r2, r2, #2
 80097c8:	300c      	adds	r0, #12
 80097ca:	f001 feed 	bl	800b5a8 <memcpy>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7ff ffa5 	bl	8009720 <_Bfree>
 80097d6:	4644      	mov	r4, r8
 80097d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097dc:	3501      	adds	r5, #1
 80097de:	615e      	str	r6, [r3, #20]
 80097e0:	6125      	str	r5, [r4, #16]
 80097e2:	4620      	mov	r0, r4
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	0800c1fe 	.word	0x0800c1fe
 80097ec:	0800c20f 	.word	0x0800c20f

080097f0 <__s2b>:
 80097f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f4:	4615      	mov	r5, r2
 80097f6:	2209      	movs	r2, #9
 80097f8:	461f      	mov	r7, r3
 80097fa:	3308      	adds	r3, #8
 80097fc:	460c      	mov	r4, r1
 80097fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009802:	4606      	mov	r6, r0
 8009804:	2201      	movs	r2, #1
 8009806:	2100      	movs	r1, #0
 8009808:	429a      	cmp	r2, r3
 800980a:	db09      	blt.n	8009820 <__s2b+0x30>
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ff47 	bl	80096a0 <_Balloc>
 8009812:	b940      	cbnz	r0, 8009826 <__s2b+0x36>
 8009814:	4602      	mov	r2, r0
 8009816:	21d3      	movs	r1, #211	; 0xd3
 8009818:	4b18      	ldr	r3, [pc, #96]	; (800987c <__s2b+0x8c>)
 800981a:	4819      	ldr	r0, [pc, #100]	; (8009880 <__s2b+0x90>)
 800981c:	f7fd ff64 	bl	80076e8 <__assert_func>
 8009820:	0052      	lsls	r2, r2, #1
 8009822:	3101      	adds	r1, #1
 8009824:	e7f0      	b.n	8009808 <__s2b+0x18>
 8009826:	9b08      	ldr	r3, [sp, #32]
 8009828:	2d09      	cmp	r5, #9
 800982a:	6143      	str	r3, [r0, #20]
 800982c:	f04f 0301 	mov.w	r3, #1
 8009830:	6103      	str	r3, [r0, #16]
 8009832:	dd16      	ble.n	8009862 <__s2b+0x72>
 8009834:	f104 0909 	add.w	r9, r4, #9
 8009838:	46c8      	mov	r8, r9
 800983a:	442c      	add	r4, r5
 800983c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009840:	4601      	mov	r1, r0
 8009842:	220a      	movs	r2, #10
 8009844:	4630      	mov	r0, r6
 8009846:	3b30      	subs	r3, #48	; 0x30
 8009848:	f7ff ff8c 	bl	8009764 <__multadd>
 800984c:	45a0      	cmp	r8, r4
 800984e:	d1f5      	bne.n	800983c <__s2b+0x4c>
 8009850:	f1a5 0408 	sub.w	r4, r5, #8
 8009854:	444c      	add	r4, r9
 8009856:	1b2d      	subs	r5, r5, r4
 8009858:	1963      	adds	r3, r4, r5
 800985a:	42bb      	cmp	r3, r7
 800985c:	db04      	blt.n	8009868 <__s2b+0x78>
 800985e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009862:	2509      	movs	r5, #9
 8009864:	340a      	adds	r4, #10
 8009866:	e7f6      	b.n	8009856 <__s2b+0x66>
 8009868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800986c:	4601      	mov	r1, r0
 800986e:	220a      	movs	r2, #10
 8009870:	4630      	mov	r0, r6
 8009872:	3b30      	subs	r3, #48	; 0x30
 8009874:	f7ff ff76 	bl	8009764 <__multadd>
 8009878:	e7ee      	b.n	8009858 <__s2b+0x68>
 800987a:	bf00      	nop
 800987c:	0800c1fe 	.word	0x0800c1fe
 8009880:	0800c20f 	.word	0x0800c20f

08009884 <__hi0bits>:
 8009884:	0c02      	lsrs	r2, r0, #16
 8009886:	0412      	lsls	r2, r2, #16
 8009888:	4603      	mov	r3, r0
 800988a:	b9ca      	cbnz	r2, 80098c0 <__hi0bits+0x3c>
 800988c:	0403      	lsls	r3, r0, #16
 800988e:	2010      	movs	r0, #16
 8009890:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009894:	bf04      	itt	eq
 8009896:	021b      	lsleq	r3, r3, #8
 8009898:	3008      	addeq	r0, #8
 800989a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800989e:	bf04      	itt	eq
 80098a0:	011b      	lsleq	r3, r3, #4
 80098a2:	3004      	addeq	r0, #4
 80098a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098a8:	bf04      	itt	eq
 80098aa:	009b      	lsleq	r3, r3, #2
 80098ac:	3002      	addeq	r0, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	db05      	blt.n	80098be <__hi0bits+0x3a>
 80098b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80098b6:	f100 0001 	add.w	r0, r0, #1
 80098ba:	bf08      	it	eq
 80098bc:	2020      	moveq	r0, #32
 80098be:	4770      	bx	lr
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7e5      	b.n	8009890 <__hi0bits+0xc>

080098c4 <__lo0bits>:
 80098c4:	6803      	ldr	r3, [r0, #0]
 80098c6:	4602      	mov	r2, r0
 80098c8:	f013 0007 	ands.w	r0, r3, #7
 80098cc:	d00b      	beq.n	80098e6 <__lo0bits+0x22>
 80098ce:	07d9      	lsls	r1, r3, #31
 80098d0:	d421      	bmi.n	8009916 <__lo0bits+0x52>
 80098d2:	0798      	lsls	r0, r3, #30
 80098d4:	bf49      	itett	mi
 80098d6:	085b      	lsrmi	r3, r3, #1
 80098d8:	089b      	lsrpl	r3, r3, #2
 80098da:	2001      	movmi	r0, #1
 80098dc:	6013      	strmi	r3, [r2, #0]
 80098de:	bf5c      	itt	pl
 80098e0:	2002      	movpl	r0, #2
 80098e2:	6013      	strpl	r3, [r2, #0]
 80098e4:	4770      	bx	lr
 80098e6:	b299      	uxth	r1, r3
 80098e8:	b909      	cbnz	r1, 80098ee <__lo0bits+0x2a>
 80098ea:	2010      	movs	r0, #16
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	b2d9      	uxtb	r1, r3
 80098f0:	b909      	cbnz	r1, 80098f6 <__lo0bits+0x32>
 80098f2:	3008      	adds	r0, #8
 80098f4:	0a1b      	lsrs	r3, r3, #8
 80098f6:	0719      	lsls	r1, r3, #28
 80098f8:	bf04      	itt	eq
 80098fa:	091b      	lsreq	r3, r3, #4
 80098fc:	3004      	addeq	r0, #4
 80098fe:	0799      	lsls	r1, r3, #30
 8009900:	bf04      	itt	eq
 8009902:	089b      	lsreq	r3, r3, #2
 8009904:	3002      	addeq	r0, #2
 8009906:	07d9      	lsls	r1, r3, #31
 8009908:	d403      	bmi.n	8009912 <__lo0bits+0x4e>
 800990a:	085b      	lsrs	r3, r3, #1
 800990c:	f100 0001 	add.w	r0, r0, #1
 8009910:	d003      	beq.n	800991a <__lo0bits+0x56>
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	4770      	bx	lr
 8009916:	2000      	movs	r0, #0
 8009918:	4770      	bx	lr
 800991a:	2020      	movs	r0, #32
 800991c:	4770      	bx	lr
	...

08009920 <__i2b>:
 8009920:	b510      	push	{r4, lr}
 8009922:	460c      	mov	r4, r1
 8009924:	2101      	movs	r1, #1
 8009926:	f7ff febb 	bl	80096a0 <_Balloc>
 800992a:	4602      	mov	r2, r0
 800992c:	b928      	cbnz	r0, 800993a <__i2b+0x1a>
 800992e:	f240 1145 	movw	r1, #325	; 0x145
 8009932:	4b04      	ldr	r3, [pc, #16]	; (8009944 <__i2b+0x24>)
 8009934:	4804      	ldr	r0, [pc, #16]	; (8009948 <__i2b+0x28>)
 8009936:	f7fd fed7 	bl	80076e8 <__assert_func>
 800993a:	2301      	movs	r3, #1
 800993c:	6144      	str	r4, [r0, #20]
 800993e:	6103      	str	r3, [r0, #16]
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	0800c1fe 	.word	0x0800c1fe
 8009948:	0800c20f 	.word	0x0800c20f

0800994c <__multiply>:
 800994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	4691      	mov	r9, r2
 8009952:	690a      	ldr	r2, [r1, #16]
 8009954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009958:	460c      	mov	r4, r1
 800995a:	429a      	cmp	r2, r3
 800995c:	bfbe      	ittt	lt
 800995e:	460b      	movlt	r3, r1
 8009960:	464c      	movlt	r4, r9
 8009962:	4699      	movlt	r9, r3
 8009964:	6927      	ldr	r7, [r4, #16]
 8009966:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	6861      	ldr	r1, [r4, #4]
 800996e:	eb07 060a 	add.w	r6, r7, sl
 8009972:	42b3      	cmp	r3, r6
 8009974:	b085      	sub	sp, #20
 8009976:	bfb8      	it	lt
 8009978:	3101      	addlt	r1, #1
 800997a:	f7ff fe91 	bl	80096a0 <_Balloc>
 800997e:	b930      	cbnz	r0, 800998e <__multiply+0x42>
 8009980:	4602      	mov	r2, r0
 8009982:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009986:	4b43      	ldr	r3, [pc, #268]	; (8009a94 <__multiply+0x148>)
 8009988:	4843      	ldr	r0, [pc, #268]	; (8009a98 <__multiply+0x14c>)
 800998a:	f7fd fead 	bl	80076e8 <__assert_func>
 800998e:	f100 0514 	add.w	r5, r0, #20
 8009992:	462b      	mov	r3, r5
 8009994:	2200      	movs	r2, #0
 8009996:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800999a:	4543      	cmp	r3, r8
 800999c:	d321      	bcc.n	80099e2 <__multiply+0x96>
 800999e:	f104 0314 	add.w	r3, r4, #20
 80099a2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80099a6:	f109 0314 	add.w	r3, r9, #20
 80099aa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80099ae:	9202      	str	r2, [sp, #8]
 80099b0:	1b3a      	subs	r2, r7, r4
 80099b2:	3a15      	subs	r2, #21
 80099b4:	f022 0203 	bic.w	r2, r2, #3
 80099b8:	3204      	adds	r2, #4
 80099ba:	f104 0115 	add.w	r1, r4, #21
 80099be:	428f      	cmp	r7, r1
 80099c0:	bf38      	it	cc
 80099c2:	2204      	movcc	r2, #4
 80099c4:	9201      	str	r2, [sp, #4]
 80099c6:	9a02      	ldr	r2, [sp, #8]
 80099c8:	9303      	str	r3, [sp, #12]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d80c      	bhi.n	80099e8 <__multiply+0x9c>
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	dd03      	ble.n	80099da <__multiply+0x8e>
 80099d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d05a      	beq.n	8009a90 <__multiply+0x144>
 80099da:	6106      	str	r6, [r0, #16]
 80099dc:	b005      	add	sp, #20
 80099de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e2:	f843 2b04 	str.w	r2, [r3], #4
 80099e6:	e7d8      	b.n	800999a <__multiply+0x4e>
 80099e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80099ec:	f1ba 0f00 	cmp.w	sl, #0
 80099f0:	d023      	beq.n	8009a3a <__multiply+0xee>
 80099f2:	46a9      	mov	r9, r5
 80099f4:	f04f 0c00 	mov.w	ip, #0
 80099f8:	f104 0e14 	add.w	lr, r4, #20
 80099fc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a00:	f8d9 1000 	ldr.w	r1, [r9]
 8009a04:	fa1f fb82 	uxth.w	fp, r2
 8009a08:	b289      	uxth	r1, r1
 8009a0a:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a0e:	4461      	add	r1, ip
 8009a10:	f8d9 c000 	ldr.w	ip, [r9]
 8009a14:	0c12      	lsrs	r2, r2, #16
 8009a16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009a1a:	fb0a c202 	mla	r2, sl, r2, ip
 8009a1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a22:	b289      	uxth	r1, r1
 8009a24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a28:	4577      	cmp	r7, lr
 8009a2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a2e:	f849 1b04 	str.w	r1, [r9], #4
 8009a32:	d8e3      	bhi.n	80099fc <__multiply+0xb0>
 8009a34:	9a01      	ldr	r2, [sp, #4]
 8009a36:	f845 c002 	str.w	ip, [r5, r2]
 8009a3a:	9a03      	ldr	r2, [sp, #12]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a42:	f1b9 0f00 	cmp.w	r9, #0
 8009a46:	d021      	beq.n	8009a8c <__multiply+0x140>
 8009a48:	46ae      	mov	lr, r5
 8009a4a:	f04f 0a00 	mov.w	sl, #0
 8009a4e:	6829      	ldr	r1, [r5, #0]
 8009a50:	f104 0c14 	add.w	ip, r4, #20
 8009a54:	f8bc b000 	ldrh.w	fp, [ip]
 8009a58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a5c:	b289      	uxth	r1, r1
 8009a5e:	fb09 220b 	mla	r2, r9, fp, r2
 8009a62:	4452      	add	r2, sl
 8009a64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a68:	f84e 1b04 	str.w	r1, [lr], #4
 8009a6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a74:	f8be 1000 	ldrh.w	r1, [lr]
 8009a78:	4567      	cmp	r7, ip
 8009a7a:	fb09 110a 	mla	r1, r9, sl, r1
 8009a7e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a86:	d8e5      	bhi.n	8009a54 <__multiply+0x108>
 8009a88:	9a01      	ldr	r2, [sp, #4]
 8009a8a:	50a9      	str	r1, [r5, r2]
 8009a8c:	3504      	adds	r5, #4
 8009a8e:	e79a      	b.n	80099c6 <__multiply+0x7a>
 8009a90:	3e01      	subs	r6, #1
 8009a92:	e79c      	b.n	80099ce <__multiply+0x82>
 8009a94:	0800c1fe 	.word	0x0800c1fe
 8009a98:	0800c20f 	.word	0x0800c20f

08009a9c <__pow5mult>:
 8009a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa0:	4615      	mov	r5, r2
 8009aa2:	f012 0203 	ands.w	r2, r2, #3
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	460f      	mov	r7, r1
 8009aaa:	d007      	beq.n	8009abc <__pow5mult+0x20>
 8009aac:	4c25      	ldr	r4, [pc, #148]	; (8009b44 <__pow5mult+0xa8>)
 8009aae:	3a01      	subs	r2, #1
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ab6:	f7ff fe55 	bl	8009764 <__multadd>
 8009aba:	4607      	mov	r7, r0
 8009abc:	10ad      	asrs	r5, r5, #2
 8009abe:	d03d      	beq.n	8009b3c <__pow5mult+0xa0>
 8009ac0:	69f4      	ldr	r4, [r6, #28]
 8009ac2:	b97c      	cbnz	r4, 8009ae4 <__pow5mult+0x48>
 8009ac4:	2010      	movs	r0, #16
 8009ac6:	f7fd fe2d 	bl	8007724 <malloc>
 8009aca:	4602      	mov	r2, r0
 8009acc:	61f0      	str	r0, [r6, #28]
 8009ace:	b928      	cbnz	r0, 8009adc <__pow5mult+0x40>
 8009ad0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ad4:	4b1c      	ldr	r3, [pc, #112]	; (8009b48 <__pow5mult+0xac>)
 8009ad6:	481d      	ldr	r0, [pc, #116]	; (8009b4c <__pow5mult+0xb0>)
 8009ad8:	f7fd fe06 	bl	80076e8 <__assert_func>
 8009adc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ae0:	6004      	str	r4, [r0, #0]
 8009ae2:	60c4      	str	r4, [r0, #12]
 8009ae4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009aec:	b94c      	cbnz	r4, 8009b02 <__pow5mult+0x66>
 8009aee:	f240 2171 	movw	r1, #625	; 0x271
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ff14 	bl	8009920 <__i2b>
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b00:	6003      	str	r3, [r0, #0]
 8009b02:	f04f 0900 	mov.w	r9, #0
 8009b06:	07eb      	lsls	r3, r5, #31
 8009b08:	d50a      	bpl.n	8009b20 <__pow5mult+0x84>
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7ff ff1c 	bl	800994c <__multiply>
 8009b14:	4680      	mov	r8, r0
 8009b16:	4639      	mov	r1, r7
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7ff fe01 	bl	8009720 <_Bfree>
 8009b1e:	4647      	mov	r7, r8
 8009b20:	106d      	asrs	r5, r5, #1
 8009b22:	d00b      	beq.n	8009b3c <__pow5mult+0xa0>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	b938      	cbnz	r0, 8009b38 <__pow5mult+0x9c>
 8009b28:	4622      	mov	r2, r4
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff ff0d 	bl	800994c <__multiply>
 8009b32:	6020      	str	r0, [r4, #0]
 8009b34:	f8c0 9000 	str.w	r9, [r0]
 8009b38:	4604      	mov	r4, r0
 8009b3a:	e7e4      	b.n	8009b06 <__pow5mult+0x6a>
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b42:	bf00      	nop
 8009b44:	0800c358 	.word	0x0800c358
 8009b48:	0800c18f 	.word	0x0800c18f
 8009b4c:	0800c20f 	.word	0x0800c20f

08009b50 <__lshift>:
 8009b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	4607      	mov	r7, r0
 8009b58:	4691      	mov	r9, r2
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	6849      	ldr	r1, [r1, #4]
 8009b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b68:	f108 0601 	add.w	r6, r8, #1
 8009b6c:	42b3      	cmp	r3, r6
 8009b6e:	db0b      	blt.n	8009b88 <__lshift+0x38>
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff fd95 	bl	80096a0 <_Balloc>
 8009b76:	4605      	mov	r5, r0
 8009b78:	b948      	cbnz	r0, 8009b8e <__lshift+0x3e>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <__lshift+0xd0>)
 8009b82:	4828      	ldr	r0, [pc, #160]	; (8009c24 <__lshift+0xd4>)
 8009b84:	f7fd fdb0 	bl	80076e8 <__assert_func>
 8009b88:	3101      	adds	r1, #1
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	e7ee      	b.n	8009b6c <__lshift+0x1c>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f100 0114 	add.w	r1, r0, #20
 8009b94:	f100 0210 	add.w	r2, r0, #16
 8009b98:	4618      	mov	r0, r3
 8009b9a:	4553      	cmp	r3, sl
 8009b9c:	db33      	blt.n	8009c06 <__lshift+0xb6>
 8009b9e:	6920      	ldr	r0, [r4, #16]
 8009ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ba4:	f104 0314 	add.w	r3, r4, #20
 8009ba8:	f019 091f 	ands.w	r9, r9, #31
 8009bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bb4:	d02b      	beq.n	8009c0e <__lshift+0xbe>
 8009bb6:	468a      	mov	sl, r1
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f1c9 0e20 	rsb	lr, r9, #32
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	fa00 f009 	lsl.w	r0, r0, r9
 8009bc4:	4310      	orrs	r0, r2
 8009bc6:	f84a 0b04 	str.w	r0, [sl], #4
 8009bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bce:	459c      	cmp	ip, r3
 8009bd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bd4:	d8f3      	bhi.n	8009bbe <__lshift+0x6e>
 8009bd6:	ebac 0304 	sub.w	r3, ip, r4
 8009bda:	3b15      	subs	r3, #21
 8009bdc:	f023 0303 	bic.w	r3, r3, #3
 8009be0:	3304      	adds	r3, #4
 8009be2:	f104 0015 	add.w	r0, r4, #21
 8009be6:	4584      	cmp	ip, r0
 8009be8:	bf38      	it	cc
 8009bea:	2304      	movcc	r3, #4
 8009bec:	50ca      	str	r2, [r1, r3]
 8009bee:	b10a      	cbz	r2, 8009bf4 <__lshift+0xa4>
 8009bf0:	f108 0602 	add.w	r6, r8, #2
 8009bf4:	3e01      	subs	r6, #1
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	612e      	str	r6, [r5, #16]
 8009bfc:	f7ff fd90 	bl	8009720 <_Bfree>
 8009c00:	4628      	mov	r0, r5
 8009c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	e7c5      	b.n	8009b9a <__lshift+0x4a>
 8009c0e:	3904      	subs	r1, #4
 8009c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c14:	459c      	cmp	ip, r3
 8009c16:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c1a:	d8f9      	bhi.n	8009c10 <__lshift+0xc0>
 8009c1c:	e7ea      	b.n	8009bf4 <__lshift+0xa4>
 8009c1e:	bf00      	nop
 8009c20:	0800c1fe 	.word	0x0800c1fe
 8009c24:	0800c20f 	.word	0x0800c20f

08009c28 <__mcmp>:
 8009c28:	4603      	mov	r3, r0
 8009c2a:	690a      	ldr	r2, [r1, #16]
 8009c2c:	6900      	ldr	r0, [r0, #16]
 8009c2e:	b530      	push	{r4, r5, lr}
 8009c30:	1a80      	subs	r0, r0, r2
 8009c32:	d10d      	bne.n	8009c50 <__mcmp+0x28>
 8009c34:	3314      	adds	r3, #20
 8009c36:	3114      	adds	r1, #20
 8009c38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c48:	4295      	cmp	r5, r2
 8009c4a:	d002      	beq.n	8009c52 <__mcmp+0x2a>
 8009c4c:	d304      	bcc.n	8009c58 <__mcmp+0x30>
 8009c4e:	2001      	movs	r0, #1
 8009c50:	bd30      	pop	{r4, r5, pc}
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	d3f4      	bcc.n	8009c40 <__mcmp+0x18>
 8009c56:	e7fb      	b.n	8009c50 <__mcmp+0x28>
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	e7f8      	b.n	8009c50 <__mcmp+0x28>
	...

08009c60 <__mdiff>:
 8009c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	460d      	mov	r5, r1
 8009c66:	4607      	mov	r7, r0
 8009c68:	4611      	mov	r1, r2
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	f7ff ffdb 	bl	8009c28 <__mcmp>
 8009c72:	1e06      	subs	r6, r0, #0
 8009c74:	d111      	bne.n	8009c9a <__mdiff+0x3a>
 8009c76:	4631      	mov	r1, r6
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff fd11 	bl	80096a0 <_Balloc>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	b928      	cbnz	r0, 8009c8e <__mdiff+0x2e>
 8009c82:	f240 2137 	movw	r1, #567	; 0x237
 8009c86:	4b3a      	ldr	r3, [pc, #232]	; (8009d70 <__mdiff+0x110>)
 8009c88:	483a      	ldr	r0, [pc, #232]	; (8009d74 <__mdiff+0x114>)
 8009c8a:	f7fd fd2d 	bl	80076e8 <__assert_func>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c94:	4610      	mov	r0, r2
 8009c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	bfa4      	itt	ge
 8009c9c:	4623      	movge	r3, r4
 8009c9e:	462c      	movge	r4, r5
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	6861      	ldr	r1, [r4, #4]
 8009ca4:	bfa6      	itte	ge
 8009ca6:	461d      	movge	r5, r3
 8009ca8:	2600      	movge	r6, #0
 8009caa:	2601      	movlt	r6, #1
 8009cac:	f7ff fcf8 	bl	80096a0 <_Balloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	b918      	cbnz	r0, 8009cbc <__mdiff+0x5c>
 8009cb4:	f240 2145 	movw	r1, #581	; 0x245
 8009cb8:	4b2d      	ldr	r3, [pc, #180]	; (8009d70 <__mdiff+0x110>)
 8009cba:	e7e5      	b.n	8009c88 <__mdiff+0x28>
 8009cbc:	f102 0814 	add.w	r8, r2, #20
 8009cc0:	46c2      	mov	sl, r8
 8009cc2:	f04f 0c00 	mov.w	ip, #0
 8009cc6:	6927      	ldr	r7, [r4, #16]
 8009cc8:	60c6      	str	r6, [r0, #12]
 8009cca:	692e      	ldr	r6, [r5, #16]
 8009ccc:	f104 0014 	add.w	r0, r4, #20
 8009cd0:	f105 0914 	add.w	r9, r5, #20
 8009cd4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009cd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cdc:	3410      	adds	r4, #16
 8009cde:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009ce2:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ce6:	fa1f f18b 	uxth.w	r1, fp
 8009cea:	4461      	add	r1, ip
 8009cec:	fa1f fc83 	uxth.w	ip, r3
 8009cf0:	0c1b      	lsrs	r3, r3, #16
 8009cf2:	eba1 010c 	sub.w	r1, r1, ip
 8009cf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cfa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009cfe:	b289      	uxth	r1, r1
 8009d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009d04:	454e      	cmp	r6, r9
 8009d06:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009d0a:	f84a 1b04 	str.w	r1, [sl], #4
 8009d0e:	d8e6      	bhi.n	8009cde <__mdiff+0x7e>
 8009d10:	1b73      	subs	r3, r6, r5
 8009d12:	3b15      	subs	r3, #21
 8009d14:	f023 0303 	bic.w	r3, r3, #3
 8009d18:	3515      	adds	r5, #21
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	42ae      	cmp	r6, r5
 8009d1e:	bf38      	it	cc
 8009d20:	2304      	movcc	r3, #4
 8009d22:	4418      	add	r0, r3
 8009d24:	4443      	add	r3, r8
 8009d26:	461e      	mov	r6, r3
 8009d28:	4605      	mov	r5, r0
 8009d2a:	4575      	cmp	r5, lr
 8009d2c:	d30e      	bcc.n	8009d4c <__mdiff+0xec>
 8009d2e:	f10e 0103 	add.w	r1, lr, #3
 8009d32:	1a09      	subs	r1, r1, r0
 8009d34:	f021 0103 	bic.w	r1, r1, #3
 8009d38:	3803      	subs	r0, #3
 8009d3a:	4586      	cmp	lr, r0
 8009d3c:	bf38      	it	cc
 8009d3e:	2100      	movcc	r1, #0
 8009d40:	440b      	add	r3, r1
 8009d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d46:	b189      	cbz	r1, 8009d6c <__mdiff+0x10c>
 8009d48:	6117      	str	r7, [r2, #16]
 8009d4a:	e7a3      	b.n	8009c94 <__mdiff+0x34>
 8009d4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d50:	fa1f f188 	uxth.w	r1, r8
 8009d54:	4461      	add	r1, ip
 8009d56:	140c      	asrs	r4, r1, #16
 8009d58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d5c:	b289      	uxth	r1, r1
 8009d5e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009d62:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009d66:	f846 1b04 	str.w	r1, [r6], #4
 8009d6a:	e7de      	b.n	8009d2a <__mdiff+0xca>
 8009d6c:	3f01      	subs	r7, #1
 8009d6e:	e7e8      	b.n	8009d42 <__mdiff+0xe2>
 8009d70:	0800c1fe 	.word	0x0800c1fe
 8009d74:	0800c20f 	.word	0x0800c20f

08009d78 <__ulp>:
 8009d78:	4b0e      	ldr	r3, [pc, #56]	; (8009db4 <__ulp+0x3c>)
 8009d7a:	400b      	ands	r3, r1
 8009d7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dc08      	bgt.n	8009d96 <__ulp+0x1e>
 8009d84:	425b      	negs	r3, r3
 8009d86:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009d8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d8e:	da04      	bge.n	8009d9a <__ulp+0x22>
 8009d90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d94:	4113      	asrs	r3, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	e008      	b.n	8009dac <__ulp+0x34>
 8009d9a:	f1a2 0314 	sub.w	r3, r2, #20
 8009d9e:	2b1e      	cmp	r3, #30
 8009da0:	bfd6      	itet	le
 8009da2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009da6:	2201      	movgt	r2, #1
 8009da8:	40da      	lsrle	r2, r3
 8009daa:	2300      	movs	r3, #0
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	7ff00000 	.word	0x7ff00000

08009db8 <__b2d>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	6905      	ldr	r5, [r0, #16]
 8009dbc:	f100 0714 	add.w	r7, r0, #20
 8009dc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009dc4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009dc8:	1f2e      	subs	r6, r5, #4
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff fd5a 	bl	8009884 <__hi0bits>
 8009dd0:	f1c0 0220 	rsb	r2, r0, #32
 8009dd4:	280a      	cmp	r0, #10
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009e44 <__b2d+0x8c>
 8009ddc:	600a      	str	r2, [r1, #0]
 8009dde:	dc12      	bgt.n	8009e06 <__b2d+0x4e>
 8009de0:	f1c0 0e0b 	rsb	lr, r0, #11
 8009de4:	fa24 f20e 	lsr.w	r2, r4, lr
 8009de8:	42b7      	cmp	r7, r6
 8009dea:	ea42 010c 	orr.w	r1, r2, ip
 8009dee:	bf2c      	ite	cs
 8009df0:	2200      	movcs	r2, #0
 8009df2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009df6:	3315      	adds	r3, #21
 8009df8:	fa04 f303 	lsl.w	r3, r4, r3
 8009dfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e00:	431a      	orrs	r2, r3
 8009e02:	4610      	mov	r0, r2
 8009e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e06:	42b7      	cmp	r7, r6
 8009e08:	bf2e      	itee	cs
 8009e0a:	2200      	movcs	r2, #0
 8009e0c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009e10:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e14:	3b0b      	subs	r3, #11
 8009e16:	d012      	beq.n	8009e3e <__b2d+0x86>
 8009e18:	f1c3 0520 	rsb	r5, r3, #32
 8009e1c:	fa22 f105 	lsr.w	r1, r2, r5
 8009e20:	409c      	lsls	r4, r3
 8009e22:	430c      	orrs	r4, r1
 8009e24:	42be      	cmp	r6, r7
 8009e26:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009e2a:	bf94      	ite	ls
 8009e2c:	2400      	movls	r4, #0
 8009e2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009e32:	409a      	lsls	r2, r3
 8009e34:	40ec      	lsrs	r4, r5
 8009e36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009e3a:	4322      	orrs	r2, r4
 8009e3c:	e7e1      	b.n	8009e02 <__b2d+0x4a>
 8009e3e:	ea44 010c 	orr.w	r1, r4, ip
 8009e42:	e7de      	b.n	8009e02 <__b2d+0x4a>
 8009e44:	3ff00000 	.word	0x3ff00000

08009e48 <__d2b>:
 8009e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	4617      	mov	r7, r2
 8009e4e:	461c      	mov	r4, r3
 8009e50:	9e08      	ldr	r6, [sp, #32]
 8009e52:	f7ff fc25 	bl	80096a0 <_Balloc>
 8009e56:	4605      	mov	r5, r0
 8009e58:	b930      	cbnz	r0, 8009e68 <__d2b+0x20>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	f240 310f 	movw	r1, #783	; 0x30f
 8009e60:	4b22      	ldr	r3, [pc, #136]	; (8009eec <__d2b+0xa4>)
 8009e62:	4823      	ldr	r0, [pc, #140]	; (8009ef0 <__d2b+0xa8>)
 8009e64:	f7fd fc40 	bl	80076e8 <__assert_func>
 8009e68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009e6c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009e70:	bb24      	cbnz	r4, 8009ebc <__d2b+0x74>
 8009e72:	2f00      	cmp	r7, #0
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	d026      	beq.n	8009ec6 <__d2b+0x7e>
 8009e78:	4668      	mov	r0, sp
 8009e7a:	9700      	str	r7, [sp, #0]
 8009e7c:	f7ff fd22 	bl	80098c4 <__lo0bits>
 8009e80:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e84:	b1e8      	cbz	r0, 8009ec2 <__d2b+0x7a>
 8009e86:	f1c0 0320 	rsb	r3, r0, #32
 8009e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	40c2      	lsrs	r2, r0
 8009e92:	616b      	str	r3, [r5, #20]
 8009e94:	9201      	str	r2, [sp, #4]
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bf14      	ite	ne
 8009e9c:	2102      	movne	r1, #2
 8009e9e:	2101      	moveq	r1, #1
 8009ea0:	61ab      	str	r3, [r5, #24]
 8009ea2:	6129      	str	r1, [r5, #16]
 8009ea4:	b1bc      	cbz	r4, 8009ed6 <__d2b+0x8e>
 8009ea6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009eaa:	4404      	add	r4, r0
 8009eac:	6034      	str	r4, [r6, #0]
 8009eae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb4:	6018      	str	r0, [r3, #0]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	b003      	add	sp, #12
 8009eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ec0:	e7d7      	b.n	8009e72 <__d2b+0x2a>
 8009ec2:	6169      	str	r1, [r5, #20]
 8009ec4:	e7e7      	b.n	8009e96 <__d2b+0x4e>
 8009ec6:	a801      	add	r0, sp, #4
 8009ec8:	f7ff fcfc 	bl	80098c4 <__lo0bits>
 8009ecc:	9b01      	ldr	r3, [sp, #4]
 8009ece:	2101      	movs	r1, #1
 8009ed0:	616b      	str	r3, [r5, #20]
 8009ed2:	3020      	adds	r0, #32
 8009ed4:	e7e5      	b.n	8009ea2 <__d2b+0x5a>
 8009ed6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009eda:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009ede:	6030      	str	r0, [r6, #0]
 8009ee0:	6918      	ldr	r0, [r3, #16]
 8009ee2:	f7ff fccf 	bl	8009884 <__hi0bits>
 8009ee6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009eea:	e7e2      	b.n	8009eb2 <__d2b+0x6a>
 8009eec:	0800c1fe 	.word	0x0800c1fe
 8009ef0:	0800c20f 	.word	0x0800c20f

08009ef4 <__ratio>:
 8009ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	4688      	mov	r8, r1
 8009efa:	4669      	mov	r1, sp
 8009efc:	4681      	mov	r9, r0
 8009efe:	f7ff ff5b 	bl	8009db8 <__b2d>
 8009f02:	460f      	mov	r7, r1
 8009f04:	4604      	mov	r4, r0
 8009f06:	460d      	mov	r5, r1
 8009f08:	4640      	mov	r0, r8
 8009f0a:	a901      	add	r1, sp, #4
 8009f0c:	f7ff ff54 	bl	8009db8 <__b2d>
 8009f10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f18:	468b      	mov	fp, r1
 8009f1a:	eba3 0c02 	sub.w	ip, r3, r2
 8009f1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bfd5      	itete	le
 8009f2c:	460a      	movle	r2, r1
 8009f2e:	462a      	movgt	r2, r5
 8009f30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f34:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f38:	bfd8      	it	le
 8009f3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009f3e:	465b      	mov	r3, fp
 8009f40:	4602      	mov	r2, r0
 8009f42:	4639      	mov	r1, r7
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7f6 fc67 	bl	8000818 <__aeabi_ddiv>
 8009f4a:	b003      	add	sp, #12
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f50 <__copybits>:
 8009f50:	3901      	subs	r1, #1
 8009f52:	b570      	push	{r4, r5, r6, lr}
 8009f54:	1149      	asrs	r1, r1, #5
 8009f56:	6914      	ldr	r4, [r2, #16]
 8009f58:	3101      	adds	r1, #1
 8009f5a:	f102 0314 	add.w	r3, r2, #20
 8009f5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f66:	1f05      	subs	r5, r0, #4
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d30c      	bcc.n	8009f86 <__copybits+0x36>
 8009f6c:	1aa3      	subs	r3, r4, r2
 8009f6e:	3b11      	subs	r3, #17
 8009f70:	f023 0303 	bic.w	r3, r3, #3
 8009f74:	3211      	adds	r2, #17
 8009f76:	42a2      	cmp	r2, r4
 8009f78:	bf88      	it	hi
 8009f7a:	2300      	movhi	r3, #0
 8009f7c:	4418      	add	r0, r3
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4288      	cmp	r0, r1
 8009f82:	d305      	bcc.n	8009f90 <__copybits+0x40>
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
 8009f86:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f8e:	e7eb      	b.n	8009f68 <__copybits+0x18>
 8009f90:	f840 3b04 	str.w	r3, [r0], #4
 8009f94:	e7f4      	b.n	8009f80 <__copybits+0x30>

08009f96 <__any_on>:
 8009f96:	f100 0214 	add.w	r2, r0, #20
 8009f9a:	6900      	ldr	r0, [r0, #16]
 8009f9c:	114b      	asrs	r3, r1, #5
 8009f9e:	4298      	cmp	r0, r3
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	db11      	blt.n	8009fc8 <__any_on+0x32>
 8009fa4:	dd0a      	ble.n	8009fbc <__any_on+0x26>
 8009fa6:	f011 011f 	ands.w	r1, r1, #31
 8009faa:	d007      	beq.n	8009fbc <__any_on+0x26>
 8009fac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fb0:	fa24 f001 	lsr.w	r0, r4, r1
 8009fb4:	fa00 f101 	lsl.w	r1, r0, r1
 8009fb8:	428c      	cmp	r4, r1
 8009fba:	d10b      	bne.n	8009fd4 <__any_on+0x3e>
 8009fbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d803      	bhi.n	8009fcc <__any_on+0x36>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	bd10      	pop	{r4, pc}
 8009fc8:	4603      	mov	r3, r0
 8009fca:	e7f7      	b.n	8009fbc <__any_on+0x26>
 8009fcc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	d0f5      	beq.n	8009fc0 <__any_on+0x2a>
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	e7f6      	b.n	8009fc6 <__any_on+0x30>

08009fd8 <sulp>:
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	460f      	mov	r7, r1
 8009fde:	4690      	mov	r8, r2
 8009fe0:	f7ff feca 	bl	8009d78 <__ulp>
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	f1b8 0f00 	cmp.w	r8, #0
 8009fec:	d011      	beq.n	800a012 <sulp+0x3a>
 8009fee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	dd0b      	ble.n	800a012 <sulp+0x3a>
 8009ffa:	2400      	movs	r4, #0
 8009ffc:	051b      	lsls	r3, r3, #20
 8009ffe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a006:	4622      	mov	r2, r4
 800a008:	462b      	mov	r3, r5
 800a00a:	f7f6 fadb 	bl	80005c4 <__aeabi_dmul>
 800a00e:	4604      	mov	r4, r0
 800a010:	460d      	mov	r5, r1
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01a:	0000      	movs	r0, r0
 800a01c:	0000      	movs	r0, r0
	...

0800a020 <_strtod_l>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	b09f      	sub	sp, #124	; 0x7c
 800a026:	9217      	str	r2, [sp, #92]	; 0x5c
 800a028:	2200      	movs	r2, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	921a      	str	r2, [sp, #104]	; 0x68
 800a02e:	460d      	mov	r5, r1
 800a030:	f04f 0800 	mov.w	r8, #0
 800a034:	f04f 0900 	mov.w	r9, #0
 800a038:	460a      	mov	r2, r1
 800a03a:	9219      	str	r2, [sp, #100]	; 0x64
 800a03c:	7811      	ldrb	r1, [r2, #0]
 800a03e:	292b      	cmp	r1, #43	; 0x2b
 800a040:	d04a      	beq.n	800a0d8 <_strtod_l+0xb8>
 800a042:	d838      	bhi.n	800a0b6 <_strtod_l+0x96>
 800a044:	290d      	cmp	r1, #13
 800a046:	d832      	bhi.n	800a0ae <_strtod_l+0x8e>
 800a048:	2908      	cmp	r1, #8
 800a04a:	d832      	bhi.n	800a0b2 <_strtod_l+0x92>
 800a04c:	2900      	cmp	r1, #0
 800a04e:	d03b      	beq.n	800a0c8 <_strtod_l+0xa8>
 800a050:	2200      	movs	r2, #0
 800a052:	920e      	str	r2, [sp, #56]	; 0x38
 800a054:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a056:	7832      	ldrb	r2, [r6, #0]
 800a058:	2a30      	cmp	r2, #48	; 0x30
 800a05a:	f040 80b2 	bne.w	800a1c2 <_strtod_l+0x1a2>
 800a05e:	7872      	ldrb	r2, [r6, #1]
 800a060:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a064:	2a58      	cmp	r2, #88	; 0x58
 800a066:	d16e      	bne.n	800a146 <_strtod_l+0x126>
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a06c:	4620      	mov	r0, r4
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	ab1a      	add	r3, sp, #104	; 0x68
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	4a8c      	ldr	r2, [pc, #560]	; (800a2a8 <_strtod_l+0x288>)
 800a076:	ab1b      	add	r3, sp, #108	; 0x6c
 800a078:	a919      	add	r1, sp, #100	; 0x64
 800a07a:	f001 fb25 	bl	800b6c8 <__gethex>
 800a07e:	f010 070f 	ands.w	r7, r0, #15
 800a082:	4605      	mov	r5, r0
 800a084:	d005      	beq.n	800a092 <_strtod_l+0x72>
 800a086:	2f06      	cmp	r7, #6
 800a088:	d128      	bne.n	800a0dc <_strtod_l+0xbc>
 800a08a:	2300      	movs	r3, #0
 800a08c:	3601      	adds	r6, #1
 800a08e:	9619      	str	r6, [sp, #100]	; 0x64
 800a090:	930e      	str	r3, [sp, #56]	; 0x38
 800a092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a094:	2b00      	cmp	r3, #0
 800a096:	f040 85a0 	bne.w	800abda <_strtod_l+0xbba>
 800a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09c:	b1cb      	cbz	r3, 800a0d2 <_strtod_l+0xb2>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	b01f      	add	sp, #124	; 0x7c
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ae:	2920      	cmp	r1, #32
 800a0b0:	d1ce      	bne.n	800a050 <_strtod_l+0x30>
 800a0b2:	3201      	adds	r2, #1
 800a0b4:	e7c1      	b.n	800a03a <_strtod_l+0x1a>
 800a0b6:	292d      	cmp	r1, #45	; 0x2d
 800a0b8:	d1ca      	bne.n	800a050 <_strtod_l+0x30>
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	910e      	str	r1, [sp, #56]	; 0x38
 800a0be:	1c51      	adds	r1, r2, #1
 800a0c0:	9119      	str	r1, [sp, #100]	; 0x64
 800a0c2:	7852      	ldrb	r2, [r2, #1]
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	d1c5      	bne.n	800a054 <_strtod_l+0x34>
 800a0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0ca:	9519      	str	r5, [sp, #100]	; 0x64
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8582 	bne.w	800abd6 <_strtod_l+0xbb6>
 800a0d2:	4642      	mov	r2, r8
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	e7e5      	b.n	800a0a4 <_strtod_l+0x84>
 800a0d8:	2100      	movs	r1, #0
 800a0da:	e7ef      	b.n	800a0bc <_strtod_l+0x9c>
 800a0dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a0de:	b13a      	cbz	r2, 800a0f0 <_strtod_l+0xd0>
 800a0e0:	2135      	movs	r1, #53	; 0x35
 800a0e2:	a81c      	add	r0, sp, #112	; 0x70
 800a0e4:	f7ff ff34 	bl	8009f50 <__copybits>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0ec:	f7ff fb18 	bl	8009720 <_Bfree>
 800a0f0:	3f01      	subs	r7, #1
 800a0f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a0f4:	2f04      	cmp	r7, #4
 800a0f6:	d806      	bhi.n	800a106 <_strtod_l+0xe6>
 800a0f8:	e8df f007 	tbb	[pc, r7]
 800a0fc:	201d0314 	.word	0x201d0314
 800a100:	14          	.byte	0x14
 800a101:	00          	.byte	0x00
 800a102:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a106:	05e9      	lsls	r1, r5, #23
 800a108:	bf48      	it	mi
 800a10a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a10e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a112:	0d1b      	lsrs	r3, r3, #20
 800a114:	051b      	lsls	r3, r3, #20
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1bb      	bne.n	800a092 <_strtod_l+0x72>
 800a11a:	f7fe fbc5 	bl	80088a8 <__errno>
 800a11e:	2322      	movs	r3, #34	; 0x22
 800a120:	6003      	str	r3, [r0, #0]
 800a122:	e7b6      	b.n	800a092 <_strtod_l+0x72>
 800a124:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a128:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a12c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a130:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a134:	e7e7      	b.n	800a106 <_strtod_l+0xe6>
 800a136:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a2ac <_strtod_l+0x28c>
 800a13a:	e7e4      	b.n	800a106 <_strtod_l+0xe6>
 800a13c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a140:	f04f 38ff 	mov.w	r8, #4294967295
 800a144:	e7df      	b.n	800a106 <_strtod_l+0xe6>
 800a146:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	9219      	str	r2, [sp, #100]	; 0x64
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	2b30      	cmp	r3, #48	; 0x30
 800a150:	d0f9      	beq.n	800a146 <_strtod_l+0x126>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d09d      	beq.n	800a092 <_strtod_l+0x72>
 800a156:	2301      	movs	r3, #1
 800a158:	f04f 0a00 	mov.w	sl, #0
 800a15c:	220a      	movs	r2, #10
 800a15e:	46d3      	mov	fp, sl
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a164:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a168:	930b      	str	r3, [sp, #44]	; 0x2c
 800a16a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a16c:	7806      	ldrb	r6, [r0, #0]
 800a16e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a172:	b2d9      	uxtb	r1, r3
 800a174:	2909      	cmp	r1, #9
 800a176:	d926      	bls.n	800a1c6 <_strtod_l+0x1a6>
 800a178:	2201      	movs	r2, #1
 800a17a:	494d      	ldr	r1, [pc, #308]	; (800a2b0 <_strtod_l+0x290>)
 800a17c:	f001 f9be 	bl	800b4fc <strncmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	d030      	beq.n	800a1e6 <_strtod_l+0x1c6>
 800a184:	2000      	movs	r0, #0
 800a186:	4632      	mov	r2, r6
 800a188:	4603      	mov	r3, r0
 800a18a:	465e      	mov	r6, fp
 800a18c:	9008      	str	r0, [sp, #32]
 800a18e:	2a65      	cmp	r2, #101	; 0x65
 800a190:	d001      	beq.n	800a196 <_strtod_l+0x176>
 800a192:	2a45      	cmp	r2, #69	; 0x45
 800a194:	d113      	bne.n	800a1be <_strtod_l+0x19e>
 800a196:	b91e      	cbnz	r6, 800a1a0 <_strtod_l+0x180>
 800a198:	9a05      	ldr	r2, [sp, #20]
 800a19a:	4302      	orrs	r2, r0
 800a19c:	d094      	beq.n	800a0c8 <_strtod_l+0xa8>
 800a19e:	2600      	movs	r6, #0
 800a1a0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a1a2:	1c6a      	adds	r2, r5, #1
 800a1a4:	9219      	str	r2, [sp, #100]	; 0x64
 800a1a6:	786a      	ldrb	r2, [r5, #1]
 800a1a8:	2a2b      	cmp	r2, #43	; 0x2b
 800a1aa:	d074      	beq.n	800a296 <_strtod_l+0x276>
 800a1ac:	2a2d      	cmp	r2, #45	; 0x2d
 800a1ae:	d078      	beq.n	800a2a2 <_strtod_l+0x282>
 800a1b0:	f04f 0c00 	mov.w	ip, #0
 800a1b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a1b8:	2909      	cmp	r1, #9
 800a1ba:	d97f      	bls.n	800a2bc <_strtod_l+0x29c>
 800a1bc:	9519      	str	r5, [sp, #100]	; 0x64
 800a1be:	2700      	movs	r7, #0
 800a1c0:	e09e      	b.n	800a300 <_strtod_l+0x2e0>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e7c8      	b.n	800a158 <_strtod_l+0x138>
 800a1c6:	f1bb 0f08 	cmp.w	fp, #8
 800a1ca:	bfd8      	it	le
 800a1cc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800a1ce:	f100 0001 	add.w	r0, r0, #1
 800a1d2:	bfd6      	itet	le
 800a1d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1d8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a1dc:	930a      	strle	r3, [sp, #40]	; 0x28
 800a1de:	f10b 0b01 	add.w	fp, fp, #1
 800a1e2:	9019      	str	r0, [sp, #100]	; 0x64
 800a1e4:	e7c1      	b.n	800a16a <_strtod_l+0x14a>
 800a1e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	9219      	str	r2, [sp, #100]	; 0x64
 800a1ec:	785a      	ldrb	r2, [r3, #1]
 800a1ee:	f1bb 0f00 	cmp.w	fp, #0
 800a1f2:	d037      	beq.n	800a264 <_strtod_l+0x244>
 800a1f4:	465e      	mov	r6, fp
 800a1f6:	9008      	str	r0, [sp, #32]
 800a1f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a1fc:	2b09      	cmp	r3, #9
 800a1fe:	d912      	bls.n	800a226 <_strtod_l+0x206>
 800a200:	2301      	movs	r3, #1
 800a202:	e7c4      	b.n	800a18e <_strtod_l+0x16e>
 800a204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a206:	3001      	adds	r0, #1
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	9219      	str	r2, [sp, #100]	; 0x64
 800a20c:	785a      	ldrb	r2, [r3, #1]
 800a20e:	2a30      	cmp	r2, #48	; 0x30
 800a210:	d0f8      	beq.n	800a204 <_strtod_l+0x1e4>
 800a212:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a216:	2b08      	cmp	r3, #8
 800a218:	f200 84e4 	bhi.w	800abe4 <_strtod_l+0xbc4>
 800a21c:	9008      	str	r0, [sp, #32]
 800a21e:	2000      	movs	r0, #0
 800a220:	4606      	mov	r6, r0
 800a222:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a224:	930b      	str	r3, [sp, #44]	; 0x2c
 800a226:	3a30      	subs	r2, #48	; 0x30
 800a228:	f100 0301 	add.w	r3, r0, #1
 800a22c:	d014      	beq.n	800a258 <_strtod_l+0x238>
 800a22e:	9908      	ldr	r1, [sp, #32]
 800a230:	eb00 0c06 	add.w	ip, r0, r6
 800a234:	4419      	add	r1, r3
 800a236:	9108      	str	r1, [sp, #32]
 800a238:	4633      	mov	r3, r6
 800a23a:	210a      	movs	r1, #10
 800a23c:	4563      	cmp	r3, ip
 800a23e:	d113      	bne.n	800a268 <_strtod_l+0x248>
 800a240:	1833      	adds	r3, r6, r0
 800a242:	2b08      	cmp	r3, #8
 800a244:	f106 0601 	add.w	r6, r6, #1
 800a248:	4406      	add	r6, r0
 800a24a:	dc1a      	bgt.n	800a282 <_strtod_l+0x262>
 800a24c:	230a      	movs	r3, #10
 800a24e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a250:	fb03 2301 	mla	r3, r3, r1, r2
 800a254:	930a      	str	r3, [sp, #40]	; 0x28
 800a256:	2300      	movs	r3, #0
 800a258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a25a:	4618      	mov	r0, r3
 800a25c:	1c51      	adds	r1, r2, #1
 800a25e:	9119      	str	r1, [sp, #100]	; 0x64
 800a260:	7852      	ldrb	r2, [r2, #1]
 800a262:	e7c9      	b.n	800a1f8 <_strtod_l+0x1d8>
 800a264:	4658      	mov	r0, fp
 800a266:	e7d2      	b.n	800a20e <_strtod_l+0x1ee>
 800a268:	2b08      	cmp	r3, #8
 800a26a:	f103 0301 	add.w	r3, r3, #1
 800a26e:	dc03      	bgt.n	800a278 <_strtod_l+0x258>
 800a270:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a272:	434f      	muls	r7, r1
 800a274:	970a      	str	r7, [sp, #40]	; 0x28
 800a276:	e7e1      	b.n	800a23c <_strtod_l+0x21c>
 800a278:	2b10      	cmp	r3, #16
 800a27a:	bfd8      	it	le
 800a27c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a280:	e7dc      	b.n	800a23c <_strtod_l+0x21c>
 800a282:	2e10      	cmp	r6, #16
 800a284:	bfdc      	itt	le
 800a286:	230a      	movle	r3, #10
 800a288:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a28c:	e7e3      	b.n	800a256 <_strtod_l+0x236>
 800a28e:	2300      	movs	r3, #0
 800a290:	9308      	str	r3, [sp, #32]
 800a292:	2301      	movs	r3, #1
 800a294:	e780      	b.n	800a198 <_strtod_l+0x178>
 800a296:	f04f 0c00 	mov.w	ip, #0
 800a29a:	1caa      	adds	r2, r5, #2
 800a29c:	9219      	str	r2, [sp, #100]	; 0x64
 800a29e:	78aa      	ldrb	r2, [r5, #2]
 800a2a0:	e788      	b.n	800a1b4 <_strtod_l+0x194>
 800a2a2:	f04f 0c01 	mov.w	ip, #1
 800a2a6:	e7f8      	b.n	800a29a <_strtod_l+0x27a>
 800a2a8:	0800c368 	.word	0x0800c368
 800a2ac:	7ff00000 	.word	0x7ff00000
 800a2b0:	0800c364 	.word	0x0800c364
 800a2b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2b6:	1c51      	adds	r1, r2, #1
 800a2b8:	9119      	str	r1, [sp, #100]	; 0x64
 800a2ba:	7852      	ldrb	r2, [r2, #1]
 800a2bc:	2a30      	cmp	r2, #48	; 0x30
 800a2be:	d0f9      	beq.n	800a2b4 <_strtod_l+0x294>
 800a2c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a2c4:	2908      	cmp	r1, #8
 800a2c6:	f63f af7a 	bhi.w	800a1be <_strtod_l+0x19e>
 800a2ca:	3a30      	subs	r2, #48	; 0x30
 800a2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2d0:	920c      	str	r2, [sp, #48]	; 0x30
 800a2d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2d4:	1c57      	adds	r7, r2, #1
 800a2d6:	9719      	str	r7, [sp, #100]	; 0x64
 800a2d8:	7852      	ldrb	r2, [r2, #1]
 800a2da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a2de:	f1be 0f09 	cmp.w	lr, #9
 800a2e2:	d938      	bls.n	800a356 <_strtod_l+0x336>
 800a2e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2e6:	1a7f      	subs	r7, r7, r1
 800a2e8:	2f08      	cmp	r7, #8
 800a2ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a2ee:	dc03      	bgt.n	800a2f8 <_strtod_l+0x2d8>
 800a2f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2f2:	428f      	cmp	r7, r1
 800a2f4:	bfa8      	it	ge
 800a2f6:	460f      	movge	r7, r1
 800a2f8:	f1bc 0f00 	cmp.w	ip, #0
 800a2fc:	d000      	beq.n	800a300 <_strtod_l+0x2e0>
 800a2fe:	427f      	negs	r7, r7
 800a300:	2e00      	cmp	r6, #0
 800a302:	d14f      	bne.n	800a3a4 <_strtod_l+0x384>
 800a304:	9905      	ldr	r1, [sp, #20]
 800a306:	4301      	orrs	r1, r0
 800a308:	f47f aec3 	bne.w	800a092 <_strtod_l+0x72>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f47f aedb 	bne.w	800a0c8 <_strtod_l+0xa8>
 800a312:	2a69      	cmp	r2, #105	; 0x69
 800a314:	d029      	beq.n	800a36a <_strtod_l+0x34a>
 800a316:	dc26      	bgt.n	800a366 <_strtod_l+0x346>
 800a318:	2a49      	cmp	r2, #73	; 0x49
 800a31a:	d026      	beq.n	800a36a <_strtod_l+0x34a>
 800a31c:	2a4e      	cmp	r2, #78	; 0x4e
 800a31e:	f47f aed3 	bne.w	800a0c8 <_strtod_l+0xa8>
 800a322:	499a      	ldr	r1, [pc, #616]	; (800a58c <_strtod_l+0x56c>)
 800a324:	a819      	add	r0, sp, #100	; 0x64
 800a326:	f001 fc11 	bl	800bb4c <__match>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f43f aecc 	beq.w	800a0c8 <_strtod_l+0xa8>
 800a330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b28      	cmp	r3, #40	; 0x28
 800a336:	d12f      	bne.n	800a398 <_strtod_l+0x378>
 800a338:	4995      	ldr	r1, [pc, #596]	; (800a590 <_strtod_l+0x570>)
 800a33a:	aa1c      	add	r2, sp, #112	; 0x70
 800a33c:	a819      	add	r0, sp, #100	; 0x64
 800a33e:	f001 fc19 	bl	800bb74 <__hexnan>
 800a342:	2805      	cmp	r0, #5
 800a344:	d128      	bne.n	800a398 <_strtod_l+0x378>
 800a346:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a348:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a34c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a350:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a354:	e69d      	b.n	800a092 <_strtod_l+0x72>
 800a356:	210a      	movs	r1, #10
 800a358:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a35a:	fb01 2107 	mla	r1, r1, r7, r2
 800a35e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a362:	9209      	str	r2, [sp, #36]	; 0x24
 800a364:	e7b5      	b.n	800a2d2 <_strtod_l+0x2b2>
 800a366:	2a6e      	cmp	r2, #110	; 0x6e
 800a368:	e7d9      	b.n	800a31e <_strtod_l+0x2fe>
 800a36a:	498a      	ldr	r1, [pc, #552]	; (800a594 <_strtod_l+0x574>)
 800a36c:	a819      	add	r0, sp, #100	; 0x64
 800a36e:	f001 fbed 	bl	800bb4c <__match>
 800a372:	2800      	cmp	r0, #0
 800a374:	f43f aea8 	beq.w	800a0c8 <_strtod_l+0xa8>
 800a378:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a37a:	4987      	ldr	r1, [pc, #540]	; (800a598 <_strtod_l+0x578>)
 800a37c:	3b01      	subs	r3, #1
 800a37e:	a819      	add	r0, sp, #100	; 0x64
 800a380:	9319      	str	r3, [sp, #100]	; 0x64
 800a382:	f001 fbe3 	bl	800bb4c <__match>
 800a386:	b910      	cbnz	r0, 800a38e <_strtod_l+0x36e>
 800a388:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a38a:	3301      	adds	r3, #1
 800a38c:	9319      	str	r3, [sp, #100]	; 0x64
 800a38e:	f04f 0800 	mov.w	r8, #0
 800a392:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a59c <_strtod_l+0x57c>
 800a396:	e67c      	b.n	800a092 <_strtod_l+0x72>
 800a398:	4881      	ldr	r0, [pc, #516]	; (800a5a0 <_strtod_l+0x580>)
 800a39a:	f001 f913 	bl	800b5c4 <nan>
 800a39e:	4680      	mov	r8, r0
 800a3a0:	4689      	mov	r9, r1
 800a3a2:	e676      	b.n	800a092 <_strtod_l+0x72>
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	f1bb 0f00 	cmp.w	fp, #0
 800a3aa:	bf08      	it	eq
 800a3ac:	46b3      	moveq	fp, r6
 800a3ae:	1afb      	subs	r3, r7, r3
 800a3b0:	2e10      	cmp	r6, #16
 800a3b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3b4:	4635      	mov	r5, r6
 800a3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b8:	bfa8      	it	ge
 800a3ba:	2510      	movge	r5, #16
 800a3bc:	f7f6 f888 	bl	80004d0 <__aeabi_ui2d>
 800a3c0:	2e09      	cmp	r6, #9
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	dd13      	ble.n	800a3f0 <_strtod_l+0x3d0>
 800a3c8:	4b76      	ldr	r3, [pc, #472]	; (800a5a4 <_strtod_l+0x584>)
 800a3ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a3ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a3d2:	f7f6 f8f7 	bl	80005c4 <__aeabi_dmul>
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	4650      	mov	r0, sl
 800a3da:	4689      	mov	r9, r1
 800a3dc:	f7f6 f878 	bl	80004d0 <__aeabi_ui2d>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	f7f5 ff36 	bl	8000258 <__adddf3>
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	4689      	mov	r9, r1
 800a3f0:	2e0f      	cmp	r6, #15
 800a3f2:	dc36      	bgt.n	800a462 <_strtod_l+0x442>
 800a3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f43f ae4b 	beq.w	800a092 <_strtod_l+0x72>
 800a3fc:	dd22      	ble.n	800a444 <_strtod_l+0x424>
 800a3fe:	2b16      	cmp	r3, #22
 800a400:	dc09      	bgt.n	800a416 <_strtod_l+0x3f6>
 800a402:	4968      	ldr	r1, [pc, #416]	; (800a5a4 <_strtod_l+0x584>)
 800a404:	4642      	mov	r2, r8
 800a406:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a40a:	464b      	mov	r3, r9
 800a40c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a410:	f7f6 f8d8 	bl	80005c4 <__aeabi_dmul>
 800a414:	e7c3      	b.n	800a39e <_strtod_l+0x37e>
 800a416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a418:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a41c:	4293      	cmp	r3, r2
 800a41e:	db20      	blt.n	800a462 <_strtod_l+0x442>
 800a420:	4c60      	ldr	r4, [pc, #384]	; (800a5a4 <_strtod_l+0x584>)
 800a422:	f1c6 060f 	rsb	r6, r6, #15
 800a426:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a42a:	4642      	mov	r2, r8
 800a42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a430:	464b      	mov	r3, r9
 800a432:	f7f6 f8c7 	bl	80005c4 <__aeabi_dmul>
 800a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a438:	1b9e      	subs	r6, r3, r6
 800a43a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a43e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a442:	e7e5      	b.n	800a410 <_strtod_l+0x3f0>
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	3316      	adds	r3, #22
 800a448:	db0b      	blt.n	800a462 <_strtod_l+0x442>
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	4640      	mov	r0, r8
 800a44e:	1bdf      	subs	r7, r3, r7
 800a450:	4b54      	ldr	r3, [pc, #336]	; (800a5a4 <_strtod_l+0x584>)
 800a452:	4649      	mov	r1, r9
 800a454:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	f7f6 f9dc 	bl	8000818 <__aeabi_ddiv>
 800a460:	e79d      	b.n	800a39e <_strtod_l+0x37e>
 800a462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a464:	1b75      	subs	r5, r6, r5
 800a466:	441d      	add	r5, r3
 800a468:	2d00      	cmp	r5, #0
 800a46a:	dd70      	ble.n	800a54e <_strtod_l+0x52e>
 800a46c:	f015 030f 	ands.w	r3, r5, #15
 800a470:	d00a      	beq.n	800a488 <_strtod_l+0x468>
 800a472:	494c      	ldr	r1, [pc, #304]	; (800a5a4 <_strtod_l+0x584>)
 800a474:	4642      	mov	r2, r8
 800a476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a47e:	464b      	mov	r3, r9
 800a480:	f7f6 f8a0 	bl	80005c4 <__aeabi_dmul>
 800a484:	4680      	mov	r8, r0
 800a486:	4689      	mov	r9, r1
 800a488:	f035 050f 	bics.w	r5, r5, #15
 800a48c:	d04d      	beq.n	800a52a <_strtod_l+0x50a>
 800a48e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a492:	dd22      	ble.n	800a4da <_strtod_l+0x4ba>
 800a494:	2600      	movs	r6, #0
 800a496:	46b3      	mov	fp, r6
 800a498:	960b      	str	r6, [sp, #44]	; 0x2c
 800a49a:	9608      	str	r6, [sp, #32]
 800a49c:	2322      	movs	r3, #34	; 0x22
 800a49e:	f04f 0800 	mov.w	r8, #0
 800a4a2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a59c <_strtod_l+0x57c>
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f43f adf1 	beq.w	800a092 <_strtod_l+0x72>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a4b4:	f7ff f934 	bl	8009720 <_Bfree>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	9908      	ldr	r1, [sp, #32]
 800a4bc:	f7ff f930 	bl	8009720 <_Bfree>
 800a4c0:	4659      	mov	r1, fp
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff f92c 	bl	8009720 <_Bfree>
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4cc:	f7ff f928 	bl	8009720 <_Bfree>
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f7ff f924 	bl	8009720 <_Bfree>
 800a4d8:	e5db      	b.n	800a092 <_strtod_l+0x72>
 800a4da:	4b33      	ldr	r3, [pc, #204]	; (800a5a8 <_strtod_l+0x588>)
 800a4dc:	4640      	mov	r0, r8
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	469a      	mov	sl, r3
 800a4e6:	112d      	asrs	r5, r5, #4
 800a4e8:	2d01      	cmp	r5, #1
 800a4ea:	dc21      	bgt.n	800a530 <_strtod_l+0x510>
 800a4ec:	b10b      	cbz	r3, 800a4f2 <_strtod_l+0x4d2>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	492d      	ldr	r1, [pc, #180]	; (800a5a8 <_strtod_l+0x588>)
 800a4f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a4f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a502:	464b      	mov	r3, r9
 800a504:	f7f6 f85e 	bl	80005c4 <__aeabi_dmul>
 800a508:	4b24      	ldr	r3, [pc, #144]	; (800a59c <_strtod_l+0x57c>)
 800a50a:	460a      	mov	r2, r1
 800a50c:	400b      	ands	r3, r1
 800a50e:	4927      	ldr	r1, [pc, #156]	; (800a5ac <_strtod_l+0x58c>)
 800a510:	4680      	mov	r8, r0
 800a512:	428b      	cmp	r3, r1
 800a514:	d8be      	bhi.n	800a494 <_strtod_l+0x474>
 800a516:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a51a:	428b      	cmp	r3, r1
 800a51c:	bf86      	itte	hi
 800a51e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a522:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a5b0 <_strtod_l+0x590>
 800a526:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a52a:	2300      	movs	r3, #0
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	e07b      	b.n	800a628 <_strtod_l+0x608>
 800a530:	07ea      	lsls	r2, r5, #31
 800a532:	d505      	bpl.n	800a540 <_strtod_l+0x520>
 800a534:	9b05      	ldr	r3, [sp, #20]
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f6 f843 	bl	80005c4 <__aeabi_dmul>
 800a53e:	2301      	movs	r3, #1
 800a540:	9a05      	ldr	r2, [sp, #20]
 800a542:	f10a 0a01 	add.w	sl, sl, #1
 800a546:	3208      	adds	r2, #8
 800a548:	106d      	asrs	r5, r5, #1
 800a54a:	9205      	str	r2, [sp, #20]
 800a54c:	e7cc      	b.n	800a4e8 <_strtod_l+0x4c8>
 800a54e:	d0ec      	beq.n	800a52a <_strtod_l+0x50a>
 800a550:	426d      	negs	r5, r5
 800a552:	f015 020f 	ands.w	r2, r5, #15
 800a556:	d00a      	beq.n	800a56e <_strtod_l+0x54e>
 800a558:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <_strtod_l+0x584>)
 800a55a:	4640      	mov	r0, r8
 800a55c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a560:	4649      	mov	r1, r9
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f6 f957 	bl	8000818 <__aeabi_ddiv>
 800a56a:	4680      	mov	r8, r0
 800a56c:	4689      	mov	r9, r1
 800a56e:	112d      	asrs	r5, r5, #4
 800a570:	d0db      	beq.n	800a52a <_strtod_l+0x50a>
 800a572:	2d1f      	cmp	r5, #31
 800a574:	dd1e      	ble.n	800a5b4 <_strtod_l+0x594>
 800a576:	2600      	movs	r6, #0
 800a578:	46b3      	mov	fp, r6
 800a57a:	960b      	str	r6, [sp, #44]	; 0x2c
 800a57c:	9608      	str	r6, [sp, #32]
 800a57e:	2322      	movs	r3, #34	; 0x22
 800a580:	f04f 0800 	mov.w	r8, #0
 800a584:	f04f 0900 	mov.w	r9, #0
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	e78d      	b.n	800a4a8 <_strtod_l+0x488>
 800a58c:	0800c156 	.word	0x0800c156
 800a590:	0800c37c 	.word	0x0800c37c
 800a594:	0800c14e 	.word	0x0800c14e
 800a598:	0800c185 	.word	0x0800c185
 800a59c:	7ff00000 	.word	0x7ff00000
 800a5a0:	0800c148 	.word	0x0800c148
 800a5a4:	0800c290 	.word	0x0800c290
 800a5a8:	0800c268 	.word	0x0800c268
 800a5ac:	7ca00000 	.word	0x7ca00000
 800a5b0:	7fefffff 	.word	0x7fefffff
 800a5b4:	f015 0310 	ands.w	r3, r5, #16
 800a5b8:	bf18      	it	ne
 800a5ba:	236a      	movne	r3, #106	; 0x6a
 800a5bc:	4640      	mov	r0, r8
 800a5be:	9305      	str	r3, [sp, #20]
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a890 <_strtod_l+0x870>
 800a5c8:	07ea      	lsls	r2, r5, #31
 800a5ca:	d504      	bpl.n	800a5d6 <_strtod_l+0x5b6>
 800a5cc:	e9da 2300 	ldrd	r2, r3, [sl]
 800a5d0:	f7f5 fff8 	bl	80005c4 <__aeabi_dmul>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	106d      	asrs	r5, r5, #1
 800a5d8:	f10a 0a08 	add.w	sl, sl, #8
 800a5dc:	d1f4      	bne.n	800a5c8 <_strtod_l+0x5a8>
 800a5de:	b10b      	cbz	r3, 800a5e4 <_strtod_l+0x5c4>
 800a5e0:	4680      	mov	r8, r0
 800a5e2:	4689      	mov	r9, r1
 800a5e4:	9b05      	ldr	r3, [sp, #20]
 800a5e6:	b1bb      	cbz	r3, 800a618 <_strtod_l+0x5f8>
 800a5e8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a5ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	dd10      	ble.n	800a618 <_strtod_l+0x5f8>
 800a5f6:	2b1f      	cmp	r3, #31
 800a5f8:	f340 8128 	ble.w	800a84c <_strtod_l+0x82c>
 800a5fc:	2b34      	cmp	r3, #52	; 0x34
 800a5fe:	bfd8      	it	le
 800a600:	f04f 33ff 	movle.w	r3, #4294967295
 800a604:	f04f 0800 	mov.w	r8, #0
 800a608:	bfcf      	iteee	gt
 800a60a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a60e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a612:	4093      	lslle	r3, r2
 800a614:	ea03 0901 	andle.w	r9, r3, r1
 800a618:	2200      	movs	r2, #0
 800a61a:	2300      	movs	r3, #0
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f6 fa38 	bl	8000a94 <__aeabi_dcmpeq>
 800a624:	2800      	cmp	r0, #0
 800a626:	d1a6      	bne.n	800a576 <_strtod_l+0x556>
 800a628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a62a:	465a      	mov	r2, fp
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	4620      	mov	r0, r4
 800a630:	4633      	mov	r3, r6
 800a632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a634:	f7ff f8dc 	bl	80097f0 <__s2b>
 800a638:	900b      	str	r0, [sp, #44]	; 0x2c
 800a63a:	2800      	cmp	r0, #0
 800a63c:	f43f af2a 	beq.w	800a494 <_strtod_l+0x474>
 800a640:	2600      	movs	r6, #0
 800a642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a644:	9b08      	ldr	r3, [sp, #32]
 800a646:	2a00      	cmp	r2, #0
 800a648:	eba3 0307 	sub.w	r3, r3, r7
 800a64c:	bfa8      	it	ge
 800a64e:	2300      	movge	r3, #0
 800a650:	46b3      	mov	fp, r6
 800a652:	9312      	str	r3, [sp, #72]	; 0x48
 800a654:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a658:	9316      	str	r3, [sp, #88]	; 0x58
 800a65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a65c:	4620      	mov	r0, r4
 800a65e:	6859      	ldr	r1, [r3, #4]
 800a660:	f7ff f81e 	bl	80096a0 <_Balloc>
 800a664:	9008      	str	r0, [sp, #32]
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f af18 	beq.w	800a49c <_strtod_l+0x47c>
 800a66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66e:	300c      	adds	r0, #12
 800a670:	691a      	ldr	r2, [r3, #16]
 800a672:	f103 010c 	add.w	r1, r3, #12
 800a676:	3202      	adds	r2, #2
 800a678:	0092      	lsls	r2, r2, #2
 800a67a:	f000 ff95 	bl	800b5a8 <memcpy>
 800a67e:	ab1c      	add	r3, sp, #112	; 0x70
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	ab1b      	add	r3, sp, #108	; 0x6c
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	4642      	mov	r2, r8
 800a688:	464b      	mov	r3, r9
 800a68a:	4620      	mov	r0, r4
 800a68c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a690:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a694:	f7ff fbd8 	bl	8009e48 <__d2b>
 800a698:	901a      	str	r0, [sp, #104]	; 0x68
 800a69a:	2800      	cmp	r0, #0
 800a69c:	f43f aefe 	beq.w	800a49c <_strtod_l+0x47c>
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7ff f93c 	bl	8009920 <__i2b>
 800a6a8:	4683      	mov	fp, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f43f aef6 	beq.w	800a49c <_strtod_l+0x47c>
 800a6b0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a6b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a6b4:	2f00      	cmp	r7, #0
 800a6b6:	bfab      	itete	ge
 800a6b8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a6ba:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a6bc:	eb07 0a03 	addge.w	sl, r7, r3
 800a6c0:	1bdd      	sublt	r5, r3, r7
 800a6c2:	9b05      	ldr	r3, [sp, #20]
 800a6c4:	bfa8      	it	ge
 800a6c6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a6c8:	eba7 0703 	sub.w	r7, r7, r3
 800a6cc:	4417      	add	r7, r2
 800a6ce:	4b71      	ldr	r3, [pc, #452]	; (800a894 <_strtod_l+0x874>)
 800a6d0:	f107 37ff 	add.w	r7, r7, #4294967295
 800a6d4:	bfb8      	it	lt
 800a6d6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a6da:	429f      	cmp	r7, r3
 800a6dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a6e0:	f280 80c7 	bge.w	800a872 <_strtod_l+0x852>
 800a6e4:	1bdb      	subs	r3, r3, r7
 800a6e6:	2b1f      	cmp	r3, #31
 800a6e8:	f04f 0101 	mov.w	r1, #1
 800a6ec:	eba2 0203 	sub.w	r2, r2, r3
 800a6f0:	f300 80b3 	bgt.w	800a85a <_strtod_l+0x83a>
 800a6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9310      	str	r3, [sp, #64]	; 0x40
 800a6fe:	eb0a 0702 	add.w	r7, sl, r2
 800a702:	9b05      	ldr	r3, [sp, #20]
 800a704:	45ba      	cmp	sl, r7
 800a706:	4415      	add	r5, r2
 800a708:	441d      	add	r5, r3
 800a70a:	4653      	mov	r3, sl
 800a70c:	bfa8      	it	ge
 800a70e:	463b      	movge	r3, r7
 800a710:	42ab      	cmp	r3, r5
 800a712:	bfa8      	it	ge
 800a714:	462b      	movge	r3, r5
 800a716:	2b00      	cmp	r3, #0
 800a718:	bfc2      	ittt	gt
 800a71a:	1aff      	subgt	r7, r7, r3
 800a71c:	1aed      	subgt	r5, r5, r3
 800a71e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a724:	2b00      	cmp	r3, #0
 800a726:	dd17      	ble.n	800a758 <_strtod_l+0x738>
 800a728:	4659      	mov	r1, fp
 800a72a:	461a      	mov	r2, r3
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff f9b5 	bl	8009a9c <__pow5mult>
 800a732:	4683      	mov	fp, r0
 800a734:	2800      	cmp	r0, #0
 800a736:	f43f aeb1 	beq.w	800a49c <_strtod_l+0x47c>
 800a73a:	4601      	mov	r1, r0
 800a73c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a73e:	4620      	mov	r0, r4
 800a740:	f7ff f904 	bl	800994c <__multiply>
 800a744:	900a      	str	r0, [sp, #40]	; 0x28
 800a746:	2800      	cmp	r0, #0
 800a748:	f43f aea8 	beq.w	800a49c <_strtod_l+0x47c>
 800a74c:	4620      	mov	r0, r4
 800a74e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a750:	f7fe ffe6 	bl	8009720 <_Bfree>
 800a754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a756:	931a      	str	r3, [sp, #104]	; 0x68
 800a758:	2f00      	cmp	r7, #0
 800a75a:	f300 808f 	bgt.w	800a87c <_strtod_l+0x85c>
 800a75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd08      	ble.n	800a776 <_strtod_l+0x756>
 800a764:	4620      	mov	r0, r4
 800a766:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a768:	9908      	ldr	r1, [sp, #32]
 800a76a:	f7ff f997 	bl	8009a9c <__pow5mult>
 800a76e:	9008      	str	r0, [sp, #32]
 800a770:	2800      	cmp	r0, #0
 800a772:	f43f ae93 	beq.w	800a49c <_strtod_l+0x47c>
 800a776:	2d00      	cmp	r5, #0
 800a778:	dd08      	ble.n	800a78c <_strtod_l+0x76c>
 800a77a:	462a      	mov	r2, r5
 800a77c:	4620      	mov	r0, r4
 800a77e:	9908      	ldr	r1, [sp, #32]
 800a780:	f7ff f9e6 	bl	8009b50 <__lshift>
 800a784:	9008      	str	r0, [sp, #32]
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f ae88 	beq.w	800a49c <_strtod_l+0x47c>
 800a78c:	f1ba 0f00 	cmp.w	sl, #0
 800a790:	dd08      	ble.n	800a7a4 <_strtod_l+0x784>
 800a792:	4659      	mov	r1, fp
 800a794:	4652      	mov	r2, sl
 800a796:	4620      	mov	r0, r4
 800a798:	f7ff f9da 	bl	8009b50 <__lshift>
 800a79c:	4683      	mov	fp, r0
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f43f ae7c 	beq.w	800a49c <_strtod_l+0x47c>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	9a08      	ldr	r2, [sp, #32]
 800a7a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a7aa:	f7ff fa59 	bl	8009c60 <__mdiff>
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f43f ae73 	beq.w	800a49c <_strtod_l+0x47c>
 800a7b6:	2500      	movs	r5, #0
 800a7b8:	68c3      	ldr	r3, [r0, #12]
 800a7ba:	4659      	mov	r1, fp
 800a7bc:	60c5      	str	r5, [r0, #12]
 800a7be:	930a      	str	r3, [sp, #40]	; 0x28
 800a7c0:	f7ff fa32 	bl	8009c28 <__mcmp>
 800a7c4:	42a8      	cmp	r0, r5
 800a7c6:	da6b      	bge.n	800a8a0 <_strtod_l+0x880>
 800a7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ca:	ea53 0308 	orrs.w	r3, r3, r8
 800a7ce:	f040 808f 	bne.w	800a8f0 <_strtod_l+0x8d0>
 800a7d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f040 808a 	bne.w	800a8f0 <_strtod_l+0x8d0>
 800a7dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7e0:	0d1b      	lsrs	r3, r3, #20
 800a7e2:	051b      	lsls	r3, r3, #20
 800a7e4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a7e8:	f240 8082 	bls.w	800a8f0 <_strtod_l+0x8d0>
 800a7ec:	6973      	ldr	r3, [r6, #20]
 800a7ee:	b913      	cbnz	r3, 800a7f6 <_strtod_l+0x7d6>
 800a7f0:	6933      	ldr	r3, [r6, #16]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	dd7c      	ble.n	800a8f0 <_strtod_l+0x8d0>
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7ff f9a8 	bl	8009b50 <__lshift>
 800a800:	4659      	mov	r1, fp
 800a802:	4606      	mov	r6, r0
 800a804:	f7ff fa10 	bl	8009c28 <__mcmp>
 800a808:	2800      	cmp	r0, #0
 800a80a:	dd71      	ble.n	800a8f0 <_strtod_l+0x8d0>
 800a80c:	9905      	ldr	r1, [sp, #20]
 800a80e:	464b      	mov	r3, r9
 800a810:	4a21      	ldr	r2, [pc, #132]	; (800a898 <_strtod_l+0x878>)
 800a812:	2900      	cmp	r1, #0
 800a814:	f000 808d 	beq.w	800a932 <_strtod_l+0x912>
 800a818:	ea02 0109 	and.w	r1, r2, r9
 800a81c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a820:	f300 8087 	bgt.w	800a932 <_strtod_l+0x912>
 800a824:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a828:	f77f aea9 	ble.w	800a57e <_strtod_l+0x55e>
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	4b1a      	ldr	r3, [pc, #104]	; (800a89c <_strtod_l+0x87c>)
 800a832:	2200      	movs	r2, #0
 800a834:	f7f5 fec6 	bl	80005c4 <__aeabi_dmul>
 800a838:	4b17      	ldr	r3, [pc, #92]	; (800a898 <_strtod_l+0x878>)
 800a83a:	4680      	mov	r8, r0
 800a83c:	400b      	ands	r3, r1
 800a83e:	4689      	mov	r9, r1
 800a840:	2b00      	cmp	r3, #0
 800a842:	f47f ae35 	bne.w	800a4b0 <_strtod_l+0x490>
 800a846:	2322      	movs	r3, #34	; 0x22
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	e631      	b.n	800a4b0 <_strtod_l+0x490>
 800a84c:	f04f 32ff 	mov.w	r2, #4294967295
 800a850:	fa02 f303 	lsl.w	r3, r2, r3
 800a854:	ea03 0808 	and.w	r8, r3, r8
 800a858:	e6de      	b.n	800a618 <_strtod_l+0x5f8>
 800a85a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a85e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a862:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a866:	37e2      	adds	r7, #226	; 0xe2
 800a868:	fa01 f307 	lsl.w	r3, r1, r7
 800a86c:	9310      	str	r3, [sp, #64]	; 0x40
 800a86e:	9113      	str	r1, [sp, #76]	; 0x4c
 800a870:	e745      	b.n	800a6fe <_strtod_l+0x6de>
 800a872:	2300      	movs	r3, #0
 800a874:	9310      	str	r3, [sp, #64]	; 0x40
 800a876:	2301      	movs	r3, #1
 800a878:	9313      	str	r3, [sp, #76]	; 0x4c
 800a87a:	e740      	b.n	800a6fe <_strtod_l+0x6de>
 800a87c:	463a      	mov	r2, r7
 800a87e:	4620      	mov	r0, r4
 800a880:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a882:	f7ff f965 	bl	8009b50 <__lshift>
 800a886:	901a      	str	r0, [sp, #104]	; 0x68
 800a888:	2800      	cmp	r0, #0
 800a88a:	f47f af68 	bne.w	800a75e <_strtod_l+0x73e>
 800a88e:	e605      	b.n	800a49c <_strtod_l+0x47c>
 800a890:	0800c390 	.word	0x0800c390
 800a894:	fffffc02 	.word	0xfffffc02
 800a898:	7ff00000 	.word	0x7ff00000
 800a89c:	39500000 	.word	0x39500000
 800a8a0:	46ca      	mov	sl, r9
 800a8a2:	d165      	bne.n	800a970 <_strtod_l+0x950>
 800a8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8aa:	b352      	cbz	r2, 800a902 <_strtod_l+0x8e2>
 800a8ac:	4a9e      	ldr	r2, [pc, #632]	; (800ab28 <_strtod_l+0xb08>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d12a      	bne.n	800a908 <_strtod_l+0x8e8>
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	b1fb      	cbz	r3, 800a8f8 <_strtod_l+0x8d8>
 800a8b8:	4b9c      	ldr	r3, [pc, #624]	; (800ab2c <_strtod_l+0xb0c>)
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a8be:	ea09 0303 	and.w	r3, r9, r3
 800a8c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8c6:	d81a      	bhi.n	800a8fe <_strtod_l+0x8de>
 800a8c8:	0d1b      	lsrs	r3, r3, #20
 800a8ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d2:	4299      	cmp	r1, r3
 800a8d4:	d118      	bne.n	800a908 <_strtod_l+0x8e8>
 800a8d6:	4b96      	ldr	r3, [pc, #600]	; (800ab30 <_strtod_l+0xb10>)
 800a8d8:	459a      	cmp	sl, r3
 800a8da:	d102      	bne.n	800a8e2 <_strtod_l+0x8c2>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	f43f addd 	beq.w	800a49c <_strtod_l+0x47c>
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	4b91      	ldr	r3, [pc, #580]	; (800ab2c <_strtod_l+0xb0c>)
 800a8e8:	ea0a 0303 	and.w	r3, sl, r3
 800a8ec:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d19a      	bne.n	800a82c <_strtod_l+0x80c>
 800a8f6:	e5db      	b.n	800a4b0 <_strtod_l+0x490>
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fc:	e7e9      	b.n	800a8d2 <_strtod_l+0x8b2>
 800a8fe:	4613      	mov	r3, r2
 800a900:	e7e7      	b.n	800a8d2 <_strtod_l+0x8b2>
 800a902:	ea53 0308 	orrs.w	r3, r3, r8
 800a906:	d081      	beq.n	800a80c <_strtod_l+0x7ec>
 800a908:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a90a:	b1e3      	cbz	r3, 800a946 <_strtod_l+0x926>
 800a90c:	ea13 0f0a 	tst.w	r3, sl
 800a910:	d0ee      	beq.n	800a8f0 <_strtod_l+0x8d0>
 800a912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	9a05      	ldr	r2, [sp, #20]
 800a91a:	b1c3      	cbz	r3, 800a94e <_strtod_l+0x92e>
 800a91c:	f7ff fb5c 	bl	8009fd8 <sulp>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a926:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a928:	f7f5 fc96 	bl	8000258 <__adddf3>
 800a92c:	4680      	mov	r8, r0
 800a92e:	4689      	mov	r9, r1
 800a930:	e7de      	b.n	800a8f0 <_strtod_l+0x8d0>
 800a932:	4013      	ands	r3, r2
 800a934:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a938:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a93c:	f04f 38ff 	mov.w	r8, #4294967295
 800a940:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a944:	e7d4      	b.n	800a8f0 <_strtod_l+0x8d0>
 800a946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a948:	ea13 0f08 	tst.w	r3, r8
 800a94c:	e7e0      	b.n	800a910 <_strtod_l+0x8f0>
 800a94e:	f7ff fb43 	bl	8009fd8 <sulp>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a958:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a95a:	f7f5 fc7b 	bl	8000254 <__aeabi_dsub>
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	4680      	mov	r8, r0
 800a964:	4689      	mov	r9, r1
 800a966:	f7f6 f895 	bl	8000a94 <__aeabi_dcmpeq>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d0c0      	beq.n	800a8f0 <_strtod_l+0x8d0>
 800a96e:	e606      	b.n	800a57e <_strtod_l+0x55e>
 800a970:	4659      	mov	r1, fp
 800a972:	4630      	mov	r0, r6
 800a974:	f7ff fabe 	bl	8009ef4 <__ratio>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a980:	2200      	movs	r2, #0
 800a982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a986:	f7f6 f899 	bl	8000abc <__aeabi_dcmple>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d06f      	beq.n	800aa6e <_strtod_l+0xa4e>
 800a98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a990:	2b00      	cmp	r3, #0
 800a992:	d17c      	bne.n	800aa8e <_strtod_l+0xa6e>
 800a994:	f1b8 0f00 	cmp.w	r8, #0
 800a998:	d159      	bne.n	800aa4e <_strtod_l+0xa2e>
 800a99a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d17b      	bne.n	800aa9a <_strtod_l+0xa7a>
 800a9a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4b62      	ldr	r3, [pc, #392]	; (800ab34 <_strtod_l+0xb14>)
 800a9aa:	f7f6 f87d 	bl	8000aa8 <__aeabi_dcmplt>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d15a      	bne.n	800aa68 <_strtod_l+0xa48>
 800a9b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4b5f      	ldr	r3, [pc, #380]	; (800ab38 <_strtod_l+0xb18>)
 800a9ba:	f7f5 fe03 	bl	80005c4 <__aeabi_dmul>
 800a9be:	4605      	mov	r5, r0
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a9c6:	9506      	str	r5, [sp, #24]
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a9d2:	4b56      	ldr	r3, [pc, #344]	; (800ab2c <_strtod_l+0xb0c>)
 800a9d4:	4a55      	ldr	r2, [pc, #340]	; (800ab2c <_strtod_l+0xb0c>)
 800a9d6:	ea0a 0303 	and.w	r3, sl, r3
 800a9da:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9dc:	4b57      	ldr	r3, [pc, #348]	; (800ab3c <_strtod_l+0xb1c>)
 800a9de:	ea0a 0202 	and.w	r2, sl, r2
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	f040 80b0 	bne.w	800ab48 <_strtod_l+0xb28>
 800a9e8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	f7ff f9c2 	bl	8009d78 <__ulp>
 800a9f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9f8:	f7f5 fde4 	bl	80005c4 <__aeabi_dmul>
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	464b      	mov	r3, r9
 800aa00:	f7f5 fc2a 	bl	8000258 <__adddf3>
 800aa04:	f8df a124 	ldr.w	sl, [pc, #292]	; 800ab2c <_strtod_l+0xb0c>
 800aa08:	4a4d      	ldr	r2, [pc, #308]	; (800ab40 <_strtod_l+0xb20>)
 800aa0a:	ea01 0a0a 	and.w	sl, r1, sl
 800aa0e:	4592      	cmp	sl, r2
 800aa10:	4680      	mov	r8, r0
 800aa12:	d948      	bls.n	800aaa6 <_strtod_l+0xa86>
 800aa14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa16:	4b46      	ldr	r3, [pc, #280]	; (800ab30 <_strtod_l+0xb10>)
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d103      	bne.n	800aa24 <_strtod_l+0xa04>
 800aa1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa1e:	3301      	adds	r3, #1
 800aa20:	f43f ad3c 	beq.w	800a49c <_strtod_l+0x47c>
 800aa24:	f04f 38ff 	mov.w	r8, #4294967295
 800aa28:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800ab30 <_strtod_l+0xb10>
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa30:	f7fe fe76 	bl	8009720 <_Bfree>
 800aa34:	4620      	mov	r0, r4
 800aa36:	9908      	ldr	r1, [sp, #32]
 800aa38:	f7fe fe72 	bl	8009720 <_Bfree>
 800aa3c:	4659      	mov	r1, fp
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7fe fe6e 	bl	8009720 <_Bfree>
 800aa44:	4631      	mov	r1, r6
 800aa46:	4620      	mov	r0, r4
 800aa48:	f7fe fe6a 	bl	8009720 <_Bfree>
 800aa4c:	e605      	b.n	800a65a <_strtod_l+0x63a>
 800aa4e:	f1b8 0f01 	cmp.w	r8, #1
 800aa52:	d103      	bne.n	800aa5c <_strtod_l+0xa3c>
 800aa54:	f1b9 0f00 	cmp.w	r9, #0
 800aa58:	f43f ad91 	beq.w	800a57e <_strtod_l+0x55e>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4b39      	ldr	r3, [pc, #228]	; (800ab44 <_strtod_l+0xb24>)
 800aa60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800aa62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa66:	e016      	b.n	800aa96 <_strtod_l+0xa76>
 800aa68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800aa6a:	4f33      	ldr	r7, [pc, #204]	; (800ab38 <_strtod_l+0xb18>)
 800aa6c:	e7a9      	b.n	800a9c2 <_strtod_l+0x9a2>
 800aa6e:	4b32      	ldr	r3, [pc, #200]	; (800ab38 <_strtod_l+0xb18>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa76:	f7f5 fda5 	bl	80005c4 <__aeabi_dmul>
 800aa7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460f      	mov	r7, r1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d09e      	beq.n	800a9c2 <_strtod_l+0x9a2>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa8c:	e79d      	b.n	800a9ca <_strtod_l+0x9aa>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4b28      	ldr	r3, [pc, #160]	; (800ab34 <_strtod_l+0xb14>)
 800aa92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa96:	4f27      	ldr	r7, [pc, #156]	; (800ab34 <_strtod_l+0xb14>)
 800aa98:	e797      	b.n	800a9ca <_strtod_l+0x9aa>
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	4b29      	ldr	r3, [pc, #164]	; (800ab44 <_strtod_l+0xb24>)
 800aa9e:	4645      	mov	r5, r8
 800aaa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aaa4:	e7f7      	b.n	800aa96 <_strtod_l+0xa76>
 800aaa6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	46ca      	mov	sl, r9
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1bc      	bne.n	800aa2c <_strtod_l+0xa0c>
 800aab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aab6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aab8:	0d1b      	lsrs	r3, r3, #20
 800aaba:	051b      	lsls	r3, r3, #20
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d1b5      	bne.n	800aa2c <_strtod_l+0xa0c>
 800aac0:	4628      	mov	r0, r5
 800aac2:	4639      	mov	r1, r7
 800aac4:	f7f6 fbe0 	bl	8001288 <__aeabi_d2lz>
 800aac8:	f7f5 fd4e 	bl	8000568 <__aeabi_l2d>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4628      	mov	r0, r5
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f5 fbbe 	bl	8000254 <__aeabi_dsub>
 800aad8:	460b      	mov	r3, r1
 800aada:	4602      	mov	r2, r0
 800aadc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800aae0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800aae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae6:	ea4a 0a08 	orr.w	sl, sl, r8
 800aaea:	ea5a 0a03 	orrs.w	sl, sl, r3
 800aaee:	d06c      	beq.n	800abca <_strtod_l+0xbaa>
 800aaf0:	a309      	add	r3, pc, #36	; (adr r3, 800ab18 <_strtod_l+0xaf8>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 ffd7 	bl	8000aa8 <__aeabi_dcmplt>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	f47f acd8 	bne.w	800a4b0 <_strtod_l+0x490>
 800ab00:	a307      	add	r3, pc, #28	; (adr r3, 800ab20 <_strtod_l+0xb00>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab0a:	f7f5 ffeb 	bl	8000ae4 <__aeabi_dcmpgt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d08c      	beq.n	800aa2c <_strtod_l+0xa0c>
 800ab12:	e4cd      	b.n	800a4b0 <_strtod_l+0x490>
 800ab14:	f3af 8000 	nop.w
 800ab18:	94a03595 	.word	0x94a03595
 800ab1c:	3fdfffff 	.word	0x3fdfffff
 800ab20:	35afe535 	.word	0x35afe535
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	000fffff 	.word	0x000fffff
 800ab2c:	7ff00000 	.word	0x7ff00000
 800ab30:	7fefffff 	.word	0x7fefffff
 800ab34:	3ff00000 	.word	0x3ff00000
 800ab38:	3fe00000 	.word	0x3fe00000
 800ab3c:	7fe00000 	.word	0x7fe00000
 800ab40:	7c9fffff 	.word	0x7c9fffff
 800ab44:	bff00000 	.word	0xbff00000
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	b333      	cbz	r3, 800ab9a <_strtod_l+0xb7a>
 800ab4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab52:	d822      	bhi.n	800ab9a <_strtod_l+0xb7a>
 800ab54:	a328      	add	r3, pc, #160	; (adr r3, 800abf8 <_strtod_l+0xbd8>)
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 ffad 	bl	8000abc <__aeabi_dcmple>
 800ab62:	b1a0      	cbz	r0, 800ab8e <_strtod_l+0xb6e>
 800ab64:	4639      	mov	r1, r7
 800ab66:	4628      	mov	r0, r5
 800ab68:	f7f6 f804 	bl	8000b74 <__aeabi_d2uiz>
 800ab6c:	2801      	cmp	r0, #1
 800ab6e:	bf38      	it	cc
 800ab70:	2001      	movcc	r0, #1
 800ab72:	f7f5 fcad 	bl	80004d0 <__aeabi_ui2d>
 800ab76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab78:	4605      	mov	r5, r0
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	bb03      	cbnz	r3, 800abc0 <_strtod_l+0xba0>
 800ab7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab82:	9014      	str	r0, [sp, #80]	; 0x50
 800ab84:	9315      	str	r3, [sp, #84]	; 0x54
 800ab86:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ab8a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ab8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab92:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	9311      	str	r3, [sp, #68]	; 0x44
 800ab9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab9e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800aba2:	f7ff f8e9 	bl	8009d78 <__ulp>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f5 fd09 	bl	80005c4 <__aeabi_dmul>
 800abb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abb6:	f7f5 fb4f 	bl	8000258 <__adddf3>
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	e774      	b.n	800aaaa <_strtod_l+0xa8a>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800abc8:	e7dd      	b.n	800ab86 <_strtod_l+0xb66>
 800abca:	a30d      	add	r3, pc, #52	; (adr r3, 800ac00 <_strtod_l+0xbe0>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 ff6a 	bl	8000aa8 <__aeabi_dcmplt>
 800abd4:	e79b      	b.n	800ab0e <_strtod_l+0xaee>
 800abd6:	2300      	movs	r3, #0
 800abd8:	930e      	str	r3, [sp, #56]	; 0x38
 800abda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	f7ff ba5b 	b.w	800a09a <_strtod_l+0x7a>
 800abe4:	2a65      	cmp	r2, #101	; 0x65
 800abe6:	f43f ab52 	beq.w	800a28e <_strtod_l+0x26e>
 800abea:	2a45      	cmp	r2, #69	; 0x45
 800abec:	f43f ab4f 	beq.w	800a28e <_strtod_l+0x26e>
 800abf0:	2301      	movs	r3, #1
 800abf2:	f7ff bb87 	b.w	800a304 <_strtod_l+0x2e4>
 800abf6:	bf00      	nop
 800abf8:	ffc00000 	.word	0xffc00000
 800abfc:	41dfffff 	.word	0x41dfffff
 800ac00:	94a03595 	.word	0x94a03595
 800ac04:	3fcfffff 	.word	0x3fcfffff

0800ac08 <_strtod_r>:
 800ac08:	4b01      	ldr	r3, [pc, #4]	; (800ac10 <_strtod_r+0x8>)
 800ac0a:	f7ff ba09 	b.w	800a020 <_strtod_l>
 800ac0e:	bf00      	nop
 800ac10:	200001d8 	.word	0x200001d8

0800ac14 <_strtol_l.constprop.0>:
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1a:	4686      	mov	lr, r0
 800ac1c:	4690      	mov	r8, r2
 800ac1e:	d001      	beq.n	800ac24 <_strtol_l.constprop.0+0x10>
 800ac20:	2b24      	cmp	r3, #36	; 0x24
 800ac22:	d906      	bls.n	800ac32 <_strtol_l.constprop.0+0x1e>
 800ac24:	f7fd fe40 	bl	80088a8 <__errno>
 800ac28:	2316      	movs	r3, #22
 800ac2a:	6003      	str	r3, [r0, #0]
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac32:	460d      	mov	r5, r1
 800ac34:	4835      	ldr	r0, [pc, #212]	; (800ad0c <_strtol_l.constprop.0+0xf8>)
 800ac36:	462a      	mov	r2, r5
 800ac38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac3c:	5d06      	ldrb	r6, [r0, r4]
 800ac3e:	f016 0608 	ands.w	r6, r6, #8
 800ac42:	d1f8      	bne.n	800ac36 <_strtol_l.constprop.0+0x22>
 800ac44:	2c2d      	cmp	r4, #45	; 0x2d
 800ac46:	d12e      	bne.n	800aca6 <_strtol_l.constprop.0+0x92>
 800ac48:	2601      	movs	r6, #1
 800ac4a:	782c      	ldrb	r4, [r5, #0]
 800ac4c:	1c95      	adds	r5, r2, #2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d057      	beq.n	800ad02 <_strtol_l.constprop.0+0xee>
 800ac52:	2b10      	cmp	r3, #16
 800ac54:	d109      	bne.n	800ac6a <_strtol_l.constprop.0+0x56>
 800ac56:	2c30      	cmp	r4, #48	; 0x30
 800ac58:	d107      	bne.n	800ac6a <_strtol_l.constprop.0+0x56>
 800ac5a:	782a      	ldrb	r2, [r5, #0]
 800ac5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ac60:	2a58      	cmp	r2, #88	; 0x58
 800ac62:	d149      	bne.n	800acf8 <_strtol_l.constprop.0+0xe4>
 800ac64:	2310      	movs	r3, #16
 800ac66:	786c      	ldrb	r4, [r5, #1]
 800ac68:	3502      	adds	r5, #2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800ac70:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac74:	fbbc f9f3 	udiv	r9, ip, r3
 800ac78:	4610      	mov	r0, r2
 800ac7a:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac7e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ac82:	2f09      	cmp	r7, #9
 800ac84:	d814      	bhi.n	800acb0 <_strtol_l.constprop.0+0x9c>
 800ac86:	463c      	mov	r4, r7
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	dd20      	ble.n	800acce <_strtol_l.constprop.0+0xba>
 800ac8c:	1c57      	adds	r7, r2, #1
 800ac8e:	d007      	beq.n	800aca0 <_strtol_l.constprop.0+0x8c>
 800ac90:	4581      	cmp	r9, r0
 800ac92:	d319      	bcc.n	800acc8 <_strtol_l.constprop.0+0xb4>
 800ac94:	d101      	bne.n	800ac9a <_strtol_l.constprop.0+0x86>
 800ac96:	45a2      	cmp	sl, r4
 800ac98:	db16      	blt.n	800acc8 <_strtol_l.constprop.0+0xb4>
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	fb00 4003 	mla	r0, r0, r3, r4
 800aca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aca4:	e7eb      	b.n	800ac7e <_strtol_l.constprop.0+0x6a>
 800aca6:	2c2b      	cmp	r4, #43	; 0x2b
 800aca8:	bf04      	itt	eq
 800acaa:	782c      	ldrbeq	r4, [r5, #0]
 800acac:	1c95      	addeq	r5, r2, #2
 800acae:	e7ce      	b.n	800ac4e <_strtol_l.constprop.0+0x3a>
 800acb0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800acb4:	2f19      	cmp	r7, #25
 800acb6:	d801      	bhi.n	800acbc <_strtol_l.constprop.0+0xa8>
 800acb8:	3c37      	subs	r4, #55	; 0x37
 800acba:	e7e5      	b.n	800ac88 <_strtol_l.constprop.0+0x74>
 800acbc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800acc0:	2f19      	cmp	r7, #25
 800acc2:	d804      	bhi.n	800acce <_strtol_l.constprop.0+0xba>
 800acc4:	3c57      	subs	r4, #87	; 0x57
 800acc6:	e7df      	b.n	800ac88 <_strtol_l.constprop.0+0x74>
 800acc8:	f04f 32ff 	mov.w	r2, #4294967295
 800accc:	e7e8      	b.n	800aca0 <_strtol_l.constprop.0+0x8c>
 800acce:	1c53      	adds	r3, r2, #1
 800acd0:	d108      	bne.n	800ace4 <_strtol_l.constprop.0+0xd0>
 800acd2:	2322      	movs	r3, #34	; 0x22
 800acd4:	4660      	mov	r0, ip
 800acd6:	f8ce 3000 	str.w	r3, [lr]
 800acda:	f1b8 0f00 	cmp.w	r8, #0
 800acde:	d0a6      	beq.n	800ac2e <_strtol_l.constprop.0+0x1a>
 800ace0:	1e69      	subs	r1, r5, #1
 800ace2:	e006      	b.n	800acf2 <_strtol_l.constprop.0+0xde>
 800ace4:	b106      	cbz	r6, 800ace8 <_strtol_l.constprop.0+0xd4>
 800ace6:	4240      	negs	r0, r0
 800ace8:	f1b8 0f00 	cmp.w	r8, #0
 800acec:	d09f      	beq.n	800ac2e <_strtol_l.constprop.0+0x1a>
 800acee:	2a00      	cmp	r2, #0
 800acf0:	d1f6      	bne.n	800ace0 <_strtol_l.constprop.0+0xcc>
 800acf2:	f8c8 1000 	str.w	r1, [r8]
 800acf6:	e79a      	b.n	800ac2e <_strtol_l.constprop.0+0x1a>
 800acf8:	2430      	movs	r4, #48	; 0x30
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1b5      	bne.n	800ac6a <_strtol_l.constprop.0+0x56>
 800acfe:	2308      	movs	r3, #8
 800ad00:	e7b3      	b.n	800ac6a <_strtol_l.constprop.0+0x56>
 800ad02:	2c30      	cmp	r4, #48	; 0x30
 800ad04:	d0a9      	beq.n	800ac5a <_strtol_l.constprop.0+0x46>
 800ad06:	230a      	movs	r3, #10
 800ad08:	e7af      	b.n	800ac6a <_strtol_l.constprop.0+0x56>
 800ad0a:	bf00      	nop
 800ad0c:	0800c3b9 	.word	0x0800c3b9

0800ad10 <_strtol_r>:
 800ad10:	f7ff bf80 	b.w	800ac14 <_strtol_l.constprop.0>

0800ad14 <__ssputs_r>:
 800ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad18:	461f      	mov	r7, r3
 800ad1a:	688e      	ldr	r6, [r1, #8]
 800ad1c:	4682      	mov	sl, r0
 800ad1e:	42be      	cmp	r6, r7
 800ad20:	460c      	mov	r4, r1
 800ad22:	4690      	mov	r8, r2
 800ad24:	680b      	ldr	r3, [r1, #0]
 800ad26:	d82c      	bhi.n	800ad82 <__ssputs_r+0x6e>
 800ad28:	898a      	ldrh	r2, [r1, #12]
 800ad2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad2e:	d026      	beq.n	800ad7e <__ssputs_r+0x6a>
 800ad30:	6965      	ldr	r5, [r4, #20]
 800ad32:	6909      	ldr	r1, [r1, #16]
 800ad34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad38:	eba3 0901 	sub.w	r9, r3, r1
 800ad3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad40:	1c7b      	adds	r3, r7, #1
 800ad42:	444b      	add	r3, r9
 800ad44:	106d      	asrs	r5, r5, #1
 800ad46:	429d      	cmp	r5, r3
 800ad48:	bf38      	it	cc
 800ad4a:	461d      	movcc	r5, r3
 800ad4c:	0553      	lsls	r3, r2, #21
 800ad4e:	d527      	bpl.n	800ada0 <__ssputs_r+0x8c>
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7fc fd17 	bl	8007784 <_malloc_r>
 800ad56:	4606      	mov	r6, r0
 800ad58:	b360      	cbz	r0, 800adb4 <__ssputs_r+0xa0>
 800ad5a:	464a      	mov	r2, r9
 800ad5c:	6921      	ldr	r1, [r4, #16]
 800ad5e:	f000 fc23 	bl	800b5a8 <memcpy>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	6126      	str	r6, [r4, #16]
 800ad70:	444e      	add	r6, r9
 800ad72:	6026      	str	r6, [r4, #0]
 800ad74:	463e      	mov	r6, r7
 800ad76:	6165      	str	r5, [r4, #20]
 800ad78:	eba5 0509 	sub.w	r5, r5, r9
 800ad7c:	60a5      	str	r5, [r4, #8]
 800ad7e:	42be      	cmp	r6, r7
 800ad80:	d900      	bls.n	800ad84 <__ssputs_r+0x70>
 800ad82:	463e      	mov	r6, r7
 800ad84:	4632      	mov	r2, r6
 800ad86:	4641      	mov	r1, r8
 800ad88:	6820      	ldr	r0, [r4, #0]
 800ad8a:	f000 fb9d 	bl	800b4c8 <memmove>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	68a3      	ldr	r3, [r4, #8]
 800ad92:	1b9b      	subs	r3, r3, r6
 800ad94:	60a3      	str	r3, [r4, #8]
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	4433      	add	r3, r6
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada0:	462a      	mov	r2, r5
 800ada2:	f000 ff94 	bl	800bcce <_realloc_r>
 800ada6:	4606      	mov	r6, r0
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1e0      	bne.n	800ad6e <__ssputs_r+0x5a>
 800adac:	4650      	mov	r0, sl
 800adae:	6921      	ldr	r1, [r4, #16]
 800adb0:	f7fe fc2e 	bl	8009610 <_free_r>
 800adb4:	230c      	movs	r3, #12
 800adb6:	f8ca 3000 	str.w	r3, [sl]
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc4:	81a3      	strh	r3, [r4, #12]
 800adc6:	e7e9      	b.n	800ad9c <__ssputs_r+0x88>

0800adc8 <_svfiprintf_r>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	4698      	mov	r8, r3
 800adce:	898b      	ldrh	r3, [r1, #12]
 800add0:	4607      	mov	r7, r0
 800add2:	061b      	lsls	r3, r3, #24
 800add4:	460d      	mov	r5, r1
 800add6:	4614      	mov	r4, r2
 800add8:	b09d      	sub	sp, #116	; 0x74
 800adda:	d50e      	bpl.n	800adfa <_svfiprintf_r+0x32>
 800addc:	690b      	ldr	r3, [r1, #16]
 800adde:	b963      	cbnz	r3, 800adfa <_svfiprintf_r+0x32>
 800ade0:	2140      	movs	r1, #64	; 0x40
 800ade2:	f7fc fccf 	bl	8007784 <_malloc_r>
 800ade6:	6028      	str	r0, [r5, #0]
 800ade8:	6128      	str	r0, [r5, #16]
 800adea:	b920      	cbnz	r0, 800adf6 <_svfiprintf_r+0x2e>
 800adec:	230c      	movs	r3, #12
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	e0d0      	b.n	800af98 <_svfiprintf_r+0x1d0>
 800adf6:	2340      	movs	r3, #64	; 0x40
 800adf8:	616b      	str	r3, [r5, #20]
 800adfa:	2300      	movs	r3, #0
 800adfc:	9309      	str	r3, [sp, #36]	; 0x24
 800adfe:	2320      	movs	r3, #32
 800ae00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae04:	2330      	movs	r3, #48	; 0x30
 800ae06:	f04f 0901 	mov.w	r9, #1
 800ae0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800afb0 <_svfiprintf_r+0x1e8>
 800ae12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae16:	4623      	mov	r3, r4
 800ae18:	469a      	mov	sl, r3
 800ae1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae1e:	b10a      	cbz	r2, 800ae24 <_svfiprintf_r+0x5c>
 800ae20:	2a25      	cmp	r2, #37	; 0x25
 800ae22:	d1f9      	bne.n	800ae18 <_svfiprintf_r+0x50>
 800ae24:	ebba 0b04 	subs.w	fp, sl, r4
 800ae28:	d00b      	beq.n	800ae42 <_svfiprintf_r+0x7a>
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7ff ff6f 	bl	800ad14 <__ssputs_r>
 800ae36:	3001      	adds	r0, #1
 800ae38:	f000 80a9 	beq.w	800af8e <_svfiprintf_r+0x1c6>
 800ae3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae3e:	445a      	add	r2, fp
 800ae40:	9209      	str	r2, [sp, #36]	; 0x24
 800ae42:	f89a 3000 	ldrb.w	r3, [sl]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 80a1 	beq.w	800af8e <_svfiprintf_r+0x1c6>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae56:	f10a 0a01 	add.w	sl, sl, #1
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	9307      	str	r3, [sp, #28]
 800ae5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae62:	931a      	str	r3, [sp, #104]	; 0x68
 800ae64:	4654      	mov	r4, sl
 800ae66:	2205      	movs	r2, #5
 800ae68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae6c:	4850      	ldr	r0, [pc, #320]	; (800afb0 <_svfiprintf_r+0x1e8>)
 800ae6e:	f7fd fd48 	bl	8008902 <memchr>
 800ae72:	9a04      	ldr	r2, [sp, #16]
 800ae74:	b9d8      	cbnz	r0, 800aeae <_svfiprintf_r+0xe6>
 800ae76:	06d0      	lsls	r0, r2, #27
 800ae78:	bf44      	itt	mi
 800ae7a:	2320      	movmi	r3, #32
 800ae7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae80:	0711      	lsls	r1, r2, #28
 800ae82:	bf44      	itt	mi
 800ae84:	232b      	movmi	r3, #43	; 0x2b
 800ae86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae90:	d015      	beq.n	800aebe <_svfiprintf_r+0xf6>
 800ae92:	4654      	mov	r4, sl
 800ae94:	2000      	movs	r0, #0
 800ae96:	f04f 0c0a 	mov.w	ip, #10
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea2:	3b30      	subs	r3, #48	; 0x30
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	d94d      	bls.n	800af44 <_svfiprintf_r+0x17c>
 800aea8:	b1b0      	cbz	r0, 800aed8 <_svfiprintf_r+0x110>
 800aeaa:	9207      	str	r2, [sp, #28]
 800aeac:	e014      	b.n	800aed8 <_svfiprintf_r+0x110>
 800aeae:	eba0 0308 	sub.w	r3, r0, r8
 800aeb2:	fa09 f303 	lsl.w	r3, r9, r3
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	46a2      	mov	sl, r4
 800aeba:	9304      	str	r3, [sp, #16]
 800aebc:	e7d2      	b.n	800ae64 <_svfiprintf_r+0x9c>
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	1d19      	adds	r1, r3, #4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	9103      	str	r1, [sp, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	bfbb      	ittet	lt
 800aeca:	425b      	neglt	r3, r3
 800aecc:	f042 0202 	orrlt.w	r2, r2, #2
 800aed0:	9307      	strge	r3, [sp, #28]
 800aed2:	9307      	strlt	r3, [sp, #28]
 800aed4:	bfb8      	it	lt
 800aed6:	9204      	strlt	r2, [sp, #16]
 800aed8:	7823      	ldrb	r3, [r4, #0]
 800aeda:	2b2e      	cmp	r3, #46	; 0x2e
 800aedc:	d10c      	bne.n	800aef8 <_svfiprintf_r+0x130>
 800aede:	7863      	ldrb	r3, [r4, #1]
 800aee0:	2b2a      	cmp	r3, #42	; 0x2a
 800aee2:	d134      	bne.n	800af4e <_svfiprintf_r+0x186>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	3402      	adds	r4, #2
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	9203      	str	r2, [sp, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bfb8      	it	lt
 800aef2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aef6:	9305      	str	r3, [sp, #20]
 800aef8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800afb4 <_svfiprintf_r+0x1ec>
 800aefc:	2203      	movs	r2, #3
 800aefe:	4650      	mov	r0, sl
 800af00:	7821      	ldrb	r1, [r4, #0]
 800af02:	f7fd fcfe 	bl	8008902 <memchr>
 800af06:	b138      	cbz	r0, 800af18 <_svfiprintf_r+0x150>
 800af08:	2240      	movs	r2, #64	; 0x40
 800af0a:	9b04      	ldr	r3, [sp, #16]
 800af0c:	eba0 000a 	sub.w	r0, r0, sl
 800af10:	4082      	lsls	r2, r0
 800af12:	4313      	orrs	r3, r2
 800af14:	3401      	adds	r4, #1
 800af16:	9304      	str	r3, [sp, #16]
 800af18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1c:	2206      	movs	r2, #6
 800af1e:	4826      	ldr	r0, [pc, #152]	; (800afb8 <_svfiprintf_r+0x1f0>)
 800af20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af24:	f7fd fced 	bl	8008902 <memchr>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d038      	beq.n	800af9e <_svfiprintf_r+0x1d6>
 800af2c:	4b23      	ldr	r3, [pc, #140]	; (800afbc <_svfiprintf_r+0x1f4>)
 800af2e:	bb1b      	cbnz	r3, 800af78 <_svfiprintf_r+0x1b0>
 800af30:	9b03      	ldr	r3, [sp, #12]
 800af32:	3307      	adds	r3, #7
 800af34:	f023 0307 	bic.w	r3, r3, #7
 800af38:	3308      	adds	r3, #8
 800af3a:	9303      	str	r3, [sp, #12]
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	4433      	add	r3, r6
 800af40:	9309      	str	r3, [sp, #36]	; 0x24
 800af42:	e768      	b.n	800ae16 <_svfiprintf_r+0x4e>
 800af44:	460c      	mov	r4, r1
 800af46:	2001      	movs	r0, #1
 800af48:	fb0c 3202 	mla	r2, ip, r2, r3
 800af4c:	e7a6      	b.n	800ae9c <_svfiprintf_r+0xd4>
 800af4e:	2300      	movs	r3, #0
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4619      	mov	r1, r3
 800af56:	3401      	adds	r4, #1
 800af58:	9305      	str	r3, [sp, #20]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af60:	3a30      	subs	r2, #48	; 0x30
 800af62:	2a09      	cmp	r2, #9
 800af64:	d903      	bls.n	800af6e <_svfiprintf_r+0x1a6>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0c6      	beq.n	800aef8 <_svfiprintf_r+0x130>
 800af6a:	9105      	str	r1, [sp, #20]
 800af6c:	e7c4      	b.n	800aef8 <_svfiprintf_r+0x130>
 800af6e:	4604      	mov	r4, r0
 800af70:	2301      	movs	r3, #1
 800af72:	fb0c 2101 	mla	r1, ip, r1, r2
 800af76:	e7f0      	b.n	800af5a <_svfiprintf_r+0x192>
 800af78:	ab03      	add	r3, sp, #12
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	462a      	mov	r2, r5
 800af7e:	4638      	mov	r0, r7
 800af80:	4b0f      	ldr	r3, [pc, #60]	; (800afc0 <_svfiprintf_r+0x1f8>)
 800af82:	a904      	add	r1, sp, #16
 800af84:	f7fc fd26 	bl	80079d4 <_printf_float>
 800af88:	1c42      	adds	r2, r0, #1
 800af8a:	4606      	mov	r6, r0
 800af8c:	d1d6      	bne.n	800af3c <_svfiprintf_r+0x174>
 800af8e:	89ab      	ldrh	r3, [r5, #12]
 800af90:	065b      	lsls	r3, r3, #25
 800af92:	f53f af2d 	bmi.w	800adf0 <_svfiprintf_r+0x28>
 800af96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af98:	b01d      	add	sp, #116	; 0x74
 800af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9e:	ab03      	add	r3, sp, #12
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	462a      	mov	r2, r5
 800afa4:	4638      	mov	r0, r7
 800afa6:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <_svfiprintf_r+0x1f8>)
 800afa8:	a904      	add	r1, sp, #16
 800afaa:	f7fc ffb3 	bl	8007f14 <_printf_i>
 800afae:	e7eb      	b.n	800af88 <_svfiprintf_r+0x1c0>
 800afb0:	0800c4b9 	.word	0x0800c4b9
 800afb4:	0800c4bf 	.word	0x0800c4bf
 800afb8:	0800c4c3 	.word	0x0800c4c3
 800afbc:	080079d5 	.word	0x080079d5
 800afc0:	0800ad15 	.word	0x0800ad15

0800afc4 <__sfputc_r>:
 800afc4:	6893      	ldr	r3, [r2, #8]
 800afc6:	b410      	push	{r4}
 800afc8:	3b01      	subs	r3, #1
 800afca:	2b00      	cmp	r3, #0
 800afcc:	6093      	str	r3, [r2, #8]
 800afce:	da07      	bge.n	800afe0 <__sfputc_r+0x1c>
 800afd0:	6994      	ldr	r4, [r2, #24]
 800afd2:	42a3      	cmp	r3, r4
 800afd4:	db01      	blt.n	800afda <__sfputc_r+0x16>
 800afd6:	290a      	cmp	r1, #10
 800afd8:	d102      	bne.n	800afe0 <__sfputc_r+0x1c>
 800afda:	bc10      	pop	{r4}
 800afdc:	f000 b9de 	b.w	800b39c <__swbuf_r>
 800afe0:	6813      	ldr	r3, [r2, #0]
 800afe2:	1c58      	adds	r0, r3, #1
 800afe4:	6010      	str	r0, [r2, #0]
 800afe6:	7019      	strb	r1, [r3, #0]
 800afe8:	4608      	mov	r0, r1
 800afea:	bc10      	pop	{r4}
 800afec:	4770      	bx	lr

0800afee <__sfputs_r>:
 800afee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff0:	4606      	mov	r6, r0
 800aff2:	460f      	mov	r7, r1
 800aff4:	4614      	mov	r4, r2
 800aff6:	18d5      	adds	r5, r2, r3
 800aff8:	42ac      	cmp	r4, r5
 800affa:	d101      	bne.n	800b000 <__sfputs_r+0x12>
 800affc:	2000      	movs	r0, #0
 800affe:	e007      	b.n	800b010 <__sfputs_r+0x22>
 800b000:	463a      	mov	r2, r7
 800b002:	4630      	mov	r0, r6
 800b004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b008:	f7ff ffdc 	bl	800afc4 <__sfputc_r>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d1f3      	bne.n	800aff8 <__sfputs_r+0xa>
 800b010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b014 <_vfiprintf_r>:
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	460d      	mov	r5, r1
 800b01a:	4614      	mov	r4, r2
 800b01c:	4698      	mov	r8, r3
 800b01e:	4606      	mov	r6, r0
 800b020:	b09d      	sub	sp, #116	; 0x74
 800b022:	b118      	cbz	r0, 800b02c <_vfiprintf_r+0x18>
 800b024:	6a03      	ldr	r3, [r0, #32]
 800b026:	b90b      	cbnz	r3, 800b02c <_vfiprintf_r+0x18>
 800b028:	f7fd fb30 	bl	800868c <__sinit>
 800b02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b02e:	07d9      	lsls	r1, r3, #31
 800b030:	d405      	bmi.n	800b03e <_vfiprintf_r+0x2a>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	059a      	lsls	r2, r3, #22
 800b036:	d402      	bmi.n	800b03e <_vfiprintf_r+0x2a>
 800b038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b03a:	f7fd fc60 	bl	80088fe <__retarget_lock_acquire_recursive>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	071b      	lsls	r3, r3, #28
 800b042:	d501      	bpl.n	800b048 <_vfiprintf_r+0x34>
 800b044:	692b      	ldr	r3, [r5, #16]
 800b046:	b99b      	cbnz	r3, 800b070 <_vfiprintf_r+0x5c>
 800b048:	4629      	mov	r1, r5
 800b04a:	4630      	mov	r0, r6
 800b04c:	f000 f9e4 	bl	800b418 <__swsetup_r>
 800b050:	b170      	cbz	r0, 800b070 <_vfiprintf_r+0x5c>
 800b052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b054:	07dc      	lsls	r4, r3, #31
 800b056:	d504      	bpl.n	800b062 <_vfiprintf_r+0x4e>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b01d      	add	sp, #116	; 0x74
 800b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	0598      	lsls	r0, r3, #22
 800b066:	d4f7      	bmi.n	800b058 <_vfiprintf_r+0x44>
 800b068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06a:	f7fd fc49 	bl	8008900 <__retarget_lock_release_recursive>
 800b06e:	e7f3      	b.n	800b058 <_vfiprintf_r+0x44>
 800b070:	2300      	movs	r3, #0
 800b072:	9309      	str	r3, [sp, #36]	; 0x24
 800b074:	2320      	movs	r3, #32
 800b076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b07a:	2330      	movs	r3, #48	; 0x30
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	f8cd 800c 	str.w	r8, [sp, #12]
 800b084:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b234 <_vfiprintf_r+0x220>
 800b088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b08c:	4623      	mov	r3, r4
 800b08e:	469a      	mov	sl, r3
 800b090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b094:	b10a      	cbz	r2, 800b09a <_vfiprintf_r+0x86>
 800b096:	2a25      	cmp	r2, #37	; 0x25
 800b098:	d1f9      	bne.n	800b08e <_vfiprintf_r+0x7a>
 800b09a:	ebba 0b04 	subs.w	fp, sl, r4
 800b09e:	d00b      	beq.n	800b0b8 <_vfiprintf_r+0xa4>
 800b0a0:	465b      	mov	r3, fp
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7ff ffa1 	bl	800afee <__sfputs_r>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	f000 80a9 	beq.w	800b204 <_vfiprintf_r+0x1f0>
 800b0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b4:	445a      	add	r2, fp
 800b0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 80a1 	beq.w	800b204 <_vfiprintf_r+0x1f0>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0cc:	f10a 0a01 	add.w	sl, sl, #1
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	9307      	str	r3, [sp, #28]
 800b0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0da:	4654      	mov	r4, sl
 800b0dc:	2205      	movs	r2, #5
 800b0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e2:	4854      	ldr	r0, [pc, #336]	; (800b234 <_vfiprintf_r+0x220>)
 800b0e4:	f7fd fc0d 	bl	8008902 <memchr>
 800b0e8:	9a04      	ldr	r2, [sp, #16]
 800b0ea:	b9d8      	cbnz	r0, 800b124 <_vfiprintf_r+0x110>
 800b0ec:	06d1      	lsls	r1, r2, #27
 800b0ee:	bf44      	itt	mi
 800b0f0:	2320      	movmi	r3, #32
 800b0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f6:	0713      	lsls	r3, r2, #28
 800b0f8:	bf44      	itt	mi
 800b0fa:	232b      	movmi	r3, #43	; 0x2b
 800b0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b100:	f89a 3000 	ldrb.w	r3, [sl]
 800b104:	2b2a      	cmp	r3, #42	; 0x2a
 800b106:	d015      	beq.n	800b134 <_vfiprintf_r+0x120>
 800b108:	4654      	mov	r4, sl
 800b10a:	2000      	movs	r0, #0
 800b10c:	f04f 0c0a 	mov.w	ip, #10
 800b110:	9a07      	ldr	r2, [sp, #28]
 800b112:	4621      	mov	r1, r4
 800b114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b118:	3b30      	subs	r3, #48	; 0x30
 800b11a:	2b09      	cmp	r3, #9
 800b11c:	d94d      	bls.n	800b1ba <_vfiprintf_r+0x1a6>
 800b11e:	b1b0      	cbz	r0, 800b14e <_vfiprintf_r+0x13a>
 800b120:	9207      	str	r2, [sp, #28]
 800b122:	e014      	b.n	800b14e <_vfiprintf_r+0x13a>
 800b124:	eba0 0308 	sub.w	r3, r0, r8
 800b128:	fa09 f303 	lsl.w	r3, r9, r3
 800b12c:	4313      	orrs	r3, r2
 800b12e:	46a2      	mov	sl, r4
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	e7d2      	b.n	800b0da <_vfiprintf_r+0xc6>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	1d19      	adds	r1, r3, #4
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	9103      	str	r1, [sp, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfbb      	ittet	lt
 800b140:	425b      	neglt	r3, r3
 800b142:	f042 0202 	orrlt.w	r2, r2, #2
 800b146:	9307      	strge	r3, [sp, #28]
 800b148:	9307      	strlt	r3, [sp, #28]
 800b14a:	bfb8      	it	lt
 800b14c:	9204      	strlt	r2, [sp, #16]
 800b14e:	7823      	ldrb	r3, [r4, #0]
 800b150:	2b2e      	cmp	r3, #46	; 0x2e
 800b152:	d10c      	bne.n	800b16e <_vfiprintf_r+0x15a>
 800b154:	7863      	ldrb	r3, [r4, #1]
 800b156:	2b2a      	cmp	r3, #42	; 0x2a
 800b158:	d134      	bne.n	800b1c4 <_vfiprintf_r+0x1b0>
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	3402      	adds	r4, #2
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	9203      	str	r2, [sp, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfb8      	it	lt
 800b168:	f04f 33ff 	movlt.w	r3, #4294967295
 800b16c:	9305      	str	r3, [sp, #20]
 800b16e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b238 <_vfiprintf_r+0x224>
 800b172:	2203      	movs	r2, #3
 800b174:	4650      	mov	r0, sl
 800b176:	7821      	ldrb	r1, [r4, #0]
 800b178:	f7fd fbc3 	bl	8008902 <memchr>
 800b17c:	b138      	cbz	r0, 800b18e <_vfiprintf_r+0x17a>
 800b17e:	2240      	movs	r2, #64	; 0x40
 800b180:	9b04      	ldr	r3, [sp, #16]
 800b182:	eba0 000a 	sub.w	r0, r0, sl
 800b186:	4082      	lsls	r2, r0
 800b188:	4313      	orrs	r3, r2
 800b18a:	3401      	adds	r4, #1
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b192:	2206      	movs	r2, #6
 800b194:	4829      	ldr	r0, [pc, #164]	; (800b23c <_vfiprintf_r+0x228>)
 800b196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b19a:	f7fd fbb2 	bl	8008902 <memchr>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d03f      	beq.n	800b222 <_vfiprintf_r+0x20e>
 800b1a2:	4b27      	ldr	r3, [pc, #156]	; (800b240 <_vfiprintf_r+0x22c>)
 800b1a4:	bb1b      	cbnz	r3, 800b1ee <_vfiprintf_r+0x1da>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	3307      	adds	r3, #7
 800b1aa:	f023 0307 	bic.w	r3, r3, #7
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	443b      	add	r3, r7
 800b1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b8:	e768      	b.n	800b08c <_vfiprintf_r+0x78>
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	2001      	movs	r0, #1
 800b1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c2:	e7a6      	b.n	800b112 <_vfiprintf_r+0xfe>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f04f 0c0a 	mov.w	ip, #10
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	3401      	adds	r4, #1
 800b1ce:	9305      	str	r3, [sp, #20]
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d6:	3a30      	subs	r2, #48	; 0x30
 800b1d8:	2a09      	cmp	r2, #9
 800b1da:	d903      	bls.n	800b1e4 <_vfiprintf_r+0x1d0>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0c6      	beq.n	800b16e <_vfiprintf_r+0x15a>
 800b1e0:	9105      	str	r1, [sp, #20]
 800b1e2:	e7c4      	b.n	800b16e <_vfiprintf_r+0x15a>
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ec:	e7f0      	b.n	800b1d0 <_vfiprintf_r+0x1bc>
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	4b13      	ldr	r3, [pc, #76]	; (800b244 <_vfiprintf_r+0x230>)
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	f7fc fbeb 	bl	80079d4 <_printf_float>
 800b1fe:	4607      	mov	r7, r0
 800b200:	1c78      	adds	r0, r7, #1
 800b202:	d1d6      	bne.n	800b1b2 <_vfiprintf_r+0x19e>
 800b204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b206:	07d9      	lsls	r1, r3, #31
 800b208:	d405      	bmi.n	800b216 <_vfiprintf_r+0x202>
 800b20a:	89ab      	ldrh	r3, [r5, #12]
 800b20c:	059a      	lsls	r2, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_vfiprintf_r+0x202>
 800b210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b212:	f7fd fb75 	bl	8008900 <__retarget_lock_release_recursive>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	065b      	lsls	r3, r3, #25
 800b21a:	f53f af1d 	bmi.w	800b058 <_vfiprintf_r+0x44>
 800b21e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b220:	e71c      	b.n	800b05c <_vfiprintf_r+0x48>
 800b222:	ab03      	add	r3, sp, #12
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	462a      	mov	r2, r5
 800b228:	4630      	mov	r0, r6
 800b22a:	4b06      	ldr	r3, [pc, #24]	; (800b244 <_vfiprintf_r+0x230>)
 800b22c:	a904      	add	r1, sp, #16
 800b22e:	f7fc fe71 	bl	8007f14 <_printf_i>
 800b232:	e7e4      	b.n	800b1fe <_vfiprintf_r+0x1ea>
 800b234:	0800c4b9 	.word	0x0800c4b9
 800b238:	0800c4bf 	.word	0x0800c4bf
 800b23c:	0800c4c3 	.word	0x0800c4c3
 800b240:	080079d5 	.word	0x080079d5
 800b244:	0800afef 	.word	0x0800afef

0800b248 <__sflush_r>:
 800b248:	898a      	ldrh	r2, [r1, #12]
 800b24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24c:	4605      	mov	r5, r0
 800b24e:	0710      	lsls	r0, r2, #28
 800b250:	460c      	mov	r4, r1
 800b252:	d457      	bmi.n	800b304 <__sflush_r+0xbc>
 800b254:	684b      	ldr	r3, [r1, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	dc04      	bgt.n	800b264 <__sflush_r+0x1c>
 800b25a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dc01      	bgt.n	800b264 <__sflush_r+0x1c>
 800b260:	2000      	movs	r0, #0
 800b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b266:	2e00      	cmp	r6, #0
 800b268:	d0fa      	beq.n	800b260 <__sflush_r+0x18>
 800b26a:	2300      	movs	r3, #0
 800b26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b270:	682f      	ldr	r7, [r5, #0]
 800b272:	6a21      	ldr	r1, [r4, #32]
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	d032      	beq.n	800b2de <__sflush_r+0x96>
 800b278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	075a      	lsls	r2, r3, #29
 800b27e:	d505      	bpl.n	800b28c <__sflush_r+0x44>
 800b280:	6863      	ldr	r3, [r4, #4]
 800b282:	1ac0      	subs	r0, r0, r3
 800b284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b286:	b10b      	cbz	r3, 800b28c <__sflush_r+0x44>
 800b288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b28a:	1ac0      	subs	r0, r0, r3
 800b28c:	2300      	movs	r3, #0
 800b28e:	4602      	mov	r2, r0
 800b290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b292:	4628      	mov	r0, r5
 800b294:	6a21      	ldr	r1, [r4, #32]
 800b296:	47b0      	blx	r6
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	d106      	bne.n	800b2ac <__sflush_r+0x64>
 800b29e:	6829      	ldr	r1, [r5, #0]
 800b2a0:	291d      	cmp	r1, #29
 800b2a2:	d82b      	bhi.n	800b2fc <__sflush_r+0xb4>
 800b2a4:	4a28      	ldr	r2, [pc, #160]	; (800b348 <__sflush_r+0x100>)
 800b2a6:	410a      	asrs	r2, r1
 800b2a8:	07d6      	lsls	r6, r2, #31
 800b2aa:	d427      	bmi.n	800b2fc <__sflush_r+0xb4>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	6062      	str	r2, [r4, #4]
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	04d9      	lsls	r1, r3, #19
 800b2b4:	6022      	str	r2, [r4, #0]
 800b2b6:	d504      	bpl.n	800b2c2 <__sflush_r+0x7a>
 800b2b8:	1c42      	adds	r2, r0, #1
 800b2ba:	d101      	bne.n	800b2c0 <__sflush_r+0x78>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b903      	cbnz	r3, 800b2c2 <__sflush_r+0x7a>
 800b2c0:	6560      	str	r0, [r4, #84]	; 0x54
 800b2c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2c4:	602f      	str	r7, [r5, #0]
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	d0ca      	beq.n	800b260 <__sflush_r+0x18>
 800b2ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	d002      	beq.n	800b2d8 <__sflush_r+0x90>
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7fe f99c 	bl	8009610 <_free_r>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	6360      	str	r0, [r4, #52]	; 0x34
 800b2dc:	e7c1      	b.n	800b262 <__sflush_r+0x1a>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	47b0      	blx	r6
 800b2e4:	1c41      	adds	r1, r0, #1
 800b2e6:	d1c8      	bne.n	800b27a <__sflush_r+0x32>
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0c5      	beq.n	800b27a <__sflush_r+0x32>
 800b2ee:	2b1d      	cmp	r3, #29
 800b2f0:	d001      	beq.n	800b2f6 <__sflush_r+0xae>
 800b2f2:	2b16      	cmp	r3, #22
 800b2f4:	d101      	bne.n	800b2fa <__sflush_r+0xb2>
 800b2f6:	602f      	str	r7, [r5, #0]
 800b2f8:	e7b2      	b.n	800b260 <__sflush_r+0x18>
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	e7ae      	b.n	800b262 <__sflush_r+0x1a>
 800b304:	690f      	ldr	r7, [r1, #16]
 800b306:	2f00      	cmp	r7, #0
 800b308:	d0aa      	beq.n	800b260 <__sflush_r+0x18>
 800b30a:	0793      	lsls	r3, r2, #30
 800b30c:	bf18      	it	ne
 800b30e:	2300      	movne	r3, #0
 800b310:	680e      	ldr	r6, [r1, #0]
 800b312:	bf08      	it	eq
 800b314:	694b      	ldreq	r3, [r1, #20]
 800b316:	1bf6      	subs	r6, r6, r7
 800b318:	600f      	str	r7, [r1, #0]
 800b31a:	608b      	str	r3, [r1, #8]
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	dd9f      	ble.n	800b260 <__sflush_r+0x18>
 800b320:	4633      	mov	r3, r6
 800b322:	463a      	mov	r2, r7
 800b324:	4628      	mov	r0, r5
 800b326:	6a21      	ldr	r1, [r4, #32]
 800b328:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b32c:	47e0      	blx	ip
 800b32e:	2800      	cmp	r0, #0
 800b330:	dc06      	bgt.n	800b340 <__sflush_r+0xf8>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	f04f 30ff 	mov.w	r0, #4294967295
 800b338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	e790      	b.n	800b262 <__sflush_r+0x1a>
 800b340:	4407      	add	r7, r0
 800b342:	1a36      	subs	r6, r6, r0
 800b344:	e7ea      	b.n	800b31c <__sflush_r+0xd4>
 800b346:	bf00      	nop
 800b348:	dfbffffe 	.word	0xdfbffffe

0800b34c <_fflush_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	690b      	ldr	r3, [r1, #16]
 800b350:	4605      	mov	r5, r0
 800b352:	460c      	mov	r4, r1
 800b354:	b913      	cbnz	r3, 800b35c <_fflush_r+0x10>
 800b356:	2500      	movs	r5, #0
 800b358:	4628      	mov	r0, r5
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	b118      	cbz	r0, 800b366 <_fflush_r+0x1a>
 800b35e:	6a03      	ldr	r3, [r0, #32]
 800b360:	b90b      	cbnz	r3, 800b366 <_fflush_r+0x1a>
 800b362:	f7fd f993 	bl	800868c <__sinit>
 800b366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0f3      	beq.n	800b356 <_fflush_r+0xa>
 800b36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b370:	07d0      	lsls	r0, r2, #31
 800b372:	d404      	bmi.n	800b37e <_fflush_r+0x32>
 800b374:	0599      	lsls	r1, r3, #22
 800b376:	d402      	bmi.n	800b37e <_fflush_r+0x32>
 800b378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b37a:	f7fd fac0 	bl	80088fe <__retarget_lock_acquire_recursive>
 800b37e:	4628      	mov	r0, r5
 800b380:	4621      	mov	r1, r4
 800b382:	f7ff ff61 	bl	800b248 <__sflush_r>
 800b386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b388:	4605      	mov	r5, r0
 800b38a:	07da      	lsls	r2, r3, #31
 800b38c:	d4e4      	bmi.n	800b358 <_fflush_r+0xc>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	059b      	lsls	r3, r3, #22
 800b392:	d4e1      	bmi.n	800b358 <_fflush_r+0xc>
 800b394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b396:	f7fd fab3 	bl	8008900 <__retarget_lock_release_recursive>
 800b39a:	e7dd      	b.n	800b358 <_fflush_r+0xc>

0800b39c <__swbuf_r>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	460e      	mov	r6, r1
 800b3a0:	4614      	mov	r4, r2
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	b118      	cbz	r0, 800b3ae <__swbuf_r+0x12>
 800b3a6:	6a03      	ldr	r3, [r0, #32]
 800b3a8:	b90b      	cbnz	r3, 800b3ae <__swbuf_r+0x12>
 800b3aa:	f7fd f96f 	bl	800868c <__sinit>
 800b3ae:	69a3      	ldr	r3, [r4, #24]
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	071a      	lsls	r2, r3, #28
 800b3b6:	d525      	bpl.n	800b404 <__swbuf_r+0x68>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	b31b      	cbz	r3, 800b404 <__swbuf_r+0x68>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	6922      	ldr	r2, [r4, #16]
 800b3c0:	b2f6      	uxtb	r6, r6
 800b3c2:	1a98      	subs	r0, r3, r2
 800b3c4:	6963      	ldr	r3, [r4, #20]
 800b3c6:	4637      	mov	r7, r6
 800b3c8:	4283      	cmp	r3, r0
 800b3ca:	dc04      	bgt.n	800b3d6 <__swbuf_r+0x3a>
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7ff ffbc 	bl	800b34c <_fflush_r>
 800b3d4:	b9e0      	cbnz	r0, 800b410 <__swbuf_r+0x74>
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	60a3      	str	r3, [r4, #8]
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	6022      	str	r2, [r4, #0]
 800b3e2:	701e      	strb	r6, [r3, #0]
 800b3e4:	6962      	ldr	r2, [r4, #20]
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d004      	beq.n	800b3f6 <__swbuf_r+0x5a>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	07db      	lsls	r3, r3, #31
 800b3f0:	d506      	bpl.n	800b400 <__swbuf_r+0x64>
 800b3f2:	2e0a      	cmp	r6, #10
 800b3f4:	d104      	bne.n	800b400 <__swbuf_r+0x64>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f7ff ffa7 	bl	800b34c <_fflush_r>
 800b3fe:	b938      	cbnz	r0, 800b410 <__swbuf_r+0x74>
 800b400:	4638      	mov	r0, r7
 800b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b404:	4621      	mov	r1, r4
 800b406:	4628      	mov	r0, r5
 800b408:	f000 f806 	bl	800b418 <__swsetup_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d0d5      	beq.n	800b3bc <__swbuf_r+0x20>
 800b410:	f04f 37ff 	mov.w	r7, #4294967295
 800b414:	e7f4      	b.n	800b400 <__swbuf_r+0x64>
	...

0800b418 <__swsetup_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4b2a      	ldr	r3, [pc, #168]	; (800b4c4 <__swsetup_r+0xac>)
 800b41c:	4605      	mov	r5, r0
 800b41e:	6818      	ldr	r0, [r3, #0]
 800b420:	460c      	mov	r4, r1
 800b422:	b118      	cbz	r0, 800b42c <__swsetup_r+0x14>
 800b424:	6a03      	ldr	r3, [r0, #32]
 800b426:	b90b      	cbnz	r3, 800b42c <__swsetup_r+0x14>
 800b428:	f7fd f930 	bl	800868c <__sinit>
 800b42c:	89a3      	ldrh	r3, [r4, #12]
 800b42e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b432:	0718      	lsls	r0, r3, #28
 800b434:	d422      	bmi.n	800b47c <__swsetup_r+0x64>
 800b436:	06d9      	lsls	r1, r3, #27
 800b438:	d407      	bmi.n	800b44a <__swsetup_r+0x32>
 800b43a:	2309      	movs	r3, #9
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b442:	f04f 30ff 	mov.w	r0, #4294967295
 800b446:	81a3      	strh	r3, [r4, #12]
 800b448:	e034      	b.n	800b4b4 <__swsetup_r+0x9c>
 800b44a:	0758      	lsls	r0, r3, #29
 800b44c:	d512      	bpl.n	800b474 <__swsetup_r+0x5c>
 800b44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b450:	b141      	cbz	r1, 800b464 <__swsetup_r+0x4c>
 800b452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b456:	4299      	cmp	r1, r3
 800b458:	d002      	beq.n	800b460 <__swsetup_r+0x48>
 800b45a:	4628      	mov	r0, r5
 800b45c:	f7fe f8d8 	bl	8009610 <_free_r>
 800b460:	2300      	movs	r3, #0
 800b462:	6363      	str	r3, [r4, #52]	; 0x34
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	2300      	movs	r3, #0
 800b46e:	6063      	str	r3, [r4, #4]
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	f043 0308 	orr.w	r3, r3, #8
 800b47a:	81a3      	strh	r3, [r4, #12]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	b94b      	cbnz	r3, 800b494 <__swsetup_r+0x7c>
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b48a:	d003      	beq.n	800b494 <__swsetup_r+0x7c>
 800b48c:	4621      	mov	r1, r4
 800b48e:	4628      	mov	r0, r5
 800b490:	f000 fc7e 	bl	800bd90 <__smakebuf_r>
 800b494:	89a0      	ldrh	r0, [r4, #12]
 800b496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b49a:	f010 0301 	ands.w	r3, r0, #1
 800b49e:	d00a      	beq.n	800b4b6 <__swsetup_r+0x9e>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60a3      	str	r3, [r4, #8]
 800b4a4:	6963      	ldr	r3, [r4, #20]
 800b4a6:	425b      	negs	r3, r3
 800b4a8:	61a3      	str	r3, [r4, #24]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	b943      	cbnz	r3, 800b4c0 <__swsetup_r+0xa8>
 800b4ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4b2:	d1c4      	bne.n	800b43e <__swsetup_r+0x26>
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
 800b4b6:	0781      	lsls	r1, r0, #30
 800b4b8:	bf58      	it	pl
 800b4ba:	6963      	ldrpl	r3, [r4, #20]
 800b4bc:	60a3      	str	r3, [r4, #8]
 800b4be:	e7f4      	b.n	800b4aa <__swsetup_r+0x92>
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	e7f7      	b.n	800b4b4 <__swsetup_r+0x9c>
 800b4c4:	200001d4 	.word	0x200001d4

0800b4c8 <memmove>:
 800b4c8:	4288      	cmp	r0, r1
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	eb01 0402 	add.w	r4, r1, r2
 800b4d0:	d902      	bls.n	800b4d8 <memmove+0x10>
 800b4d2:	4284      	cmp	r4, r0
 800b4d4:	4623      	mov	r3, r4
 800b4d6:	d807      	bhi.n	800b4e8 <memmove+0x20>
 800b4d8:	1e43      	subs	r3, r0, #1
 800b4da:	42a1      	cmp	r1, r4
 800b4dc:	d008      	beq.n	800b4f0 <memmove+0x28>
 800b4de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4e6:	e7f8      	b.n	800b4da <memmove+0x12>
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4402      	add	r2, r0
 800b4ec:	428a      	cmp	r2, r1
 800b4ee:	d100      	bne.n	800b4f2 <memmove+0x2a>
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4fa:	e7f7      	b.n	800b4ec <memmove+0x24>

0800b4fc <strncmp>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	b16a      	cbz	r2, 800b51c <strncmp+0x20>
 800b500:	3901      	subs	r1, #1
 800b502:	1884      	adds	r4, r0, r2
 800b504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b508:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d103      	bne.n	800b518 <strncmp+0x1c>
 800b510:	42a0      	cmp	r0, r4
 800b512:	d001      	beq.n	800b518 <strncmp+0x1c>
 800b514:	2a00      	cmp	r2, #0
 800b516:	d1f5      	bne.n	800b504 <strncmp+0x8>
 800b518:	1ad0      	subs	r0, r2, r3
 800b51a:	bd10      	pop	{r4, pc}
 800b51c:	4610      	mov	r0, r2
 800b51e:	e7fc      	b.n	800b51a <strncmp+0x1e>

0800b520 <_raise_r>:
 800b520:	291f      	cmp	r1, #31
 800b522:	b538      	push	{r3, r4, r5, lr}
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	d904      	bls.n	800b534 <_raise_r+0x14>
 800b52a:	2316      	movs	r3, #22
 800b52c:	6003      	str	r3, [r0, #0]
 800b52e:	f04f 30ff 	mov.w	r0, #4294967295
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b536:	b112      	cbz	r2, 800b53e <_raise_r+0x1e>
 800b538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b53c:	b94b      	cbnz	r3, 800b552 <_raise_r+0x32>
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 f830 	bl	800b5a4 <_getpid_r>
 800b544:	462a      	mov	r2, r5
 800b546:	4601      	mov	r1, r0
 800b548:	4620      	mov	r0, r4
 800b54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b54e:	f000 b817 	b.w	800b580 <_kill_r>
 800b552:	2b01      	cmp	r3, #1
 800b554:	d00a      	beq.n	800b56c <_raise_r+0x4c>
 800b556:	1c59      	adds	r1, r3, #1
 800b558:	d103      	bne.n	800b562 <_raise_r+0x42>
 800b55a:	2316      	movs	r3, #22
 800b55c:	6003      	str	r3, [r0, #0]
 800b55e:	2001      	movs	r0, #1
 800b560:	e7e7      	b.n	800b532 <_raise_r+0x12>
 800b562:	2400      	movs	r4, #0
 800b564:	4628      	mov	r0, r5
 800b566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b56a:	4798      	blx	r3
 800b56c:	2000      	movs	r0, #0
 800b56e:	e7e0      	b.n	800b532 <_raise_r+0x12>

0800b570 <raise>:
 800b570:	4b02      	ldr	r3, [pc, #8]	; (800b57c <raise+0xc>)
 800b572:	4601      	mov	r1, r0
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	f7ff bfd3 	b.w	800b520 <_raise_r>
 800b57a:	bf00      	nop
 800b57c:	200001d4 	.word	0x200001d4

0800b580 <_kill_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	2300      	movs	r3, #0
 800b584:	4d06      	ldr	r5, [pc, #24]	; (800b5a0 <_kill_r+0x20>)
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	4611      	mov	r1, r2
 800b58c:	602b      	str	r3, [r5, #0]
 800b58e:	f7f6 fe06 	bl	800219e <_kill>
 800b592:	1c43      	adds	r3, r0, #1
 800b594:	d102      	bne.n	800b59c <_kill_r+0x1c>
 800b596:	682b      	ldr	r3, [r5, #0]
 800b598:	b103      	cbz	r3, 800b59c <_kill_r+0x1c>
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	bd38      	pop	{r3, r4, r5, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000778 	.word	0x20000778

0800b5a4 <_getpid_r>:
 800b5a4:	f7f6 bdf4 	b.w	8002190 <_getpid>

0800b5a8 <memcpy>:
 800b5a8:	440a      	add	r2, r1
 800b5aa:	4291      	cmp	r1, r2
 800b5ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5b0:	d100      	bne.n	800b5b4 <memcpy+0xc>
 800b5b2:	4770      	bx	lr
 800b5b4:	b510      	push	{r4, lr}
 800b5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5c0:	d1f9      	bne.n	800b5b6 <memcpy+0xe>
 800b5c2:	bd10      	pop	{r4, pc}

0800b5c4 <nan>:
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	4901      	ldr	r1, [pc, #4]	; (800b5cc <nan+0x8>)
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	7ff80000 	.word	0x7ff80000

0800b5d0 <_calloc_r>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	fba1 5402 	umull	r5, r4, r1, r2
 800b5d6:	b934      	cbnz	r4, 800b5e6 <_calloc_r+0x16>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7fc f8d3 	bl	8007784 <_malloc_r>
 800b5de:	4606      	mov	r6, r0
 800b5e0:	b928      	cbnz	r0, 800b5ee <_calloc_r+0x1e>
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	220c      	movs	r2, #12
 800b5e8:	2600      	movs	r6, #0
 800b5ea:	6002      	str	r2, [r0, #0]
 800b5ec:	e7f9      	b.n	800b5e2 <_calloc_r+0x12>
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	f7fd f8f6 	bl	80087e2 <memset>
 800b5f6:	e7f4      	b.n	800b5e2 <_calloc_r+0x12>

0800b5f8 <rshift>:
 800b5f8:	6903      	ldr	r3, [r0, #16]
 800b5fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b602:	f100 0414 	add.w	r4, r0, #20
 800b606:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b60a:	dd46      	ble.n	800b69a <rshift+0xa2>
 800b60c:	f011 011f 	ands.w	r1, r1, #31
 800b610:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b614:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b618:	d10c      	bne.n	800b634 <rshift+0x3c>
 800b61a:	4629      	mov	r1, r5
 800b61c:	f100 0710 	add.w	r7, r0, #16
 800b620:	42b1      	cmp	r1, r6
 800b622:	d335      	bcc.n	800b690 <rshift+0x98>
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	1eea      	subs	r2, r5, #3
 800b62a:	4296      	cmp	r6, r2
 800b62c:	bf38      	it	cc
 800b62e:	2300      	movcc	r3, #0
 800b630:	4423      	add	r3, r4
 800b632:	e015      	b.n	800b660 <rshift+0x68>
 800b634:	46a1      	mov	r9, r4
 800b636:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b63a:	f1c1 0820 	rsb	r8, r1, #32
 800b63e:	40cf      	lsrs	r7, r1
 800b640:	f105 0e04 	add.w	lr, r5, #4
 800b644:	4576      	cmp	r6, lr
 800b646:	46f4      	mov	ip, lr
 800b648:	d816      	bhi.n	800b678 <rshift+0x80>
 800b64a:	1a9a      	subs	r2, r3, r2
 800b64c:	0092      	lsls	r2, r2, #2
 800b64e:	3a04      	subs	r2, #4
 800b650:	3501      	adds	r5, #1
 800b652:	42ae      	cmp	r6, r5
 800b654:	bf38      	it	cc
 800b656:	2200      	movcc	r2, #0
 800b658:	18a3      	adds	r3, r4, r2
 800b65a:	50a7      	str	r7, [r4, r2]
 800b65c:	b107      	cbz	r7, 800b660 <rshift+0x68>
 800b65e:	3304      	adds	r3, #4
 800b660:	42a3      	cmp	r3, r4
 800b662:	eba3 0204 	sub.w	r2, r3, r4
 800b666:	bf08      	it	eq
 800b668:	2300      	moveq	r3, #0
 800b66a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b66e:	6102      	str	r2, [r0, #16]
 800b670:	bf08      	it	eq
 800b672:	6143      	streq	r3, [r0, #20]
 800b674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b678:	f8dc c000 	ldr.w	ip, [ip]
 800b67c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b680:	ea4c 0707 	orr.w	r7, ip, r7
 800b684:	f849 7b04 	str.w	r7, [r9], #4
 800b688:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b68c:	40cf      	lsrs	r7, r1
 800b68e:	e7d9      	b.n	800b644 <rshift+0x4c>
 800b690:	f851 cb04 	ldr.w	ip, [r1], #4
 800b694:	f847 cf04 	str.w	ip, [r7, #4]!
 800b698:	e7c2      	b.n	800b620 <rshift+0x28>
 800b69a:	4623      	mov	r3, r4
 800b69c:	e7e0      	b.n	800b660 <rshift+0x68>

0800b69e <__hexdig_fun>:
 800b69e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b6a2:	2b09      	cmp	r3, #9
 800b6a4:	d802      	bhi.n	800b6ac <__hexdig_fun+0xe>
 800b6a6:	3820      	subs	r0, #32
 800b6a8:	b2c0      	uxtb	r0, r0
 800b6aa:	4770      	bx	lr
 800b6ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b6b0:	2b05      	cmp	r3, #5
 800b6b2:	d801      	bhi.n	800b6b8 <__hexdig_fun+0x1a>
 800b6b4:	3847      	subs	r0, #71	; 0x47
 800b6b6:	e7f7      	b.n	800b6a8 <__hexdig_fun+0xa>
 800b6b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6bc:	2b05      	cmp	r3, #5
 800b6be:	d801      	bhi.n	800b6c4 <__hexdig_fun+0x26>
 800b6c0:	3827      	subs	r0, #39	; 0x27
 800b6c2:	e7f1      	b.n	800b6a8 <__hexdig_fun+0xa>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	4770      	bx	lr

0800b6c8 <__gethex>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	4681      	mov	r9, r0
 800b6ce:	468a      	mov	sl, r1
 800b6d0:	4617      	mov	r7, r2
 800b6d2:	680a      	ldr	r2, [r1, #0]
 800b6d4:	b085      	sub	sp, #20
 800b6d6:	f102 0b02 	add.w	fp, r2, #2
 800b6da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6e2:	9302      	str	r3, [sp, #8]
 800b6e4:	32fe      	adds	r2, #254	; 0xfe
 800b6e6:	eb02 030b 	add.w	r3, r2, fp
 800b6ea:	46d8      	mov	r8, fp
 800b6ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	2830      	cmp	r0, #48	; 0x30
 800b6f4:	d0f7      	beq.n	800b6e6 <__gethex+0x1e>
 800b6f6:	f7ff ffd2 	bl	800b69e <__hexdig_fun>
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d138      	bne.n	800b772 <__gethex+0xaa>
 800b700:	2201      	movs	r2, #1
 800b702:	4640      	mov	r0, r8
 800b704:	49a7      	ldr	r1, [pc, #668]	; (800b9a4 <__gethex+0x2dc>)
 800b706:	f7ff fef9 	bl	800b4fc <strncmp>
 800b70a:	4606      	mov	r6, r0
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d169      	bne.n	800b7e4 <__gethex+0x11c>
 800b710:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b714:	465d      	mov	r5, fp
 800b716:	f7ff ffc2 	bl	800b69e <__hexdig_fun>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d064      	beq.n	800b7e8 <__gethex+0x120>
 800b71e:	465a      	mov	r2, fp
 800b720:	7810      	ldrb	r0, [r2, #0]
 800b722:	4690      	mov	r8, r2
 800b724:	2830      	cmp	r0, #48	; 0x30
 800b726:	f102 0201 	add.w	r2, r2, #1
 800b72a:	d0f9      	beq.n	800b720 <__gethex+0x58>
 800b72c:	f7ff ffb7 	bl	800b69e <__hexdig_fun>
 800b730:	2301      	movs	r3, #1
 800b732:	fab0 f480 	clz	r4, r0
 800b736:	465e      	mov	r6, fp
 800b738:	0964      	lsrs	r4, r4, #5
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	4642      	mov	r2, r8
 800b73e:	4615      	mov	r5, r2
 800b740:	7828      	ldrb	r0, [r5, #0]
 800b742:	3201      	adds	r2, #1
 800b744:	f7ff ffab 	bl	800b69e <__hexdig_fun>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d1f8      	bne.n	800b73e <__gethex+0x76>
 800b74c:	2201      	movs	r2, #1
 800b74e:	4628      	mov	r0, r5
 800b750:	4994      	ldr	r1, [pc, #592]	; (800b9a4 <__gethex+0x2dc>)
 800b752:	f7ff fed3 	bl	800b4fc <strncmp>
 800b756:	b978      	cbnz	r0, 800b778 <__gethex+0xb0>
 800b758:	b946      	cbnz	r6, 800b76c <__gethex+0xa4>
 800b75a:	1c6e      	adds	r6, r5, #1
 800b75c:	4632      	mov	r2, r6
 800b75e:	4615      	mov	r5, r2
 800b760:	7828      	ldrb	r0, [r5, #0]
 800b762:	3201      	adds	r2, #1
 800b764:	f7ff ff9b 	bl	800b69e <__hexdig_fun>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d1f8      	bne.n	800b75e <__gethex+0x96>
 800b76c:	1b73      	subs	r3, r6, r5
 800b76e:	009e      	lsls	r6, r3, #2
 800b770:	e004      	b.n	800b77c <__gethex+0xb4>
 800b772:	2400      	movs	r4, #0
 800b774:	4626      	mov	r6, r4
 800b776:	e7e1      	b.n	800b73c <__gethex+0x74>
 800b778:	2e00      	cmp	r6, #0
 800b77a:	d1f7      	bne.n	800b76c <__gethex+0xa4>
 800b77c:	782b      	ldrb	r3, [r5, #0]
 800b77e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b782:	2b50      	cmp	r3, #80	; 0x50
 800b784:	d13d      	bne.n	800b802 <__gethex+0x13a>
 800b786:	786b      	ldrb	r3, [r5, #1]
 800b788:	2b2b      	cmp	r3, #43	; 0x2b
 800b78a:	d02f      	beq.n	800b7ec <__gethex+0x124>
 800b78c:	2b2d      	cmp	r3, #45	; 0x2d
 800b78e:	d031      	beq.n	800b7f4 <__gethex+0x12c>
 800b790:	f04f 0b00 	mov.w	fp, #0
 800b794:	1c69      	adds	r1, r5, #1
 800b796:	7808      	ldrb	r0, [r1, #0]
 800b798:	f7ff ff81 	bl	800b69e <__hexdig_fun>
 800b79c:	1e42      	subs	r2, r0, #1
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	2a18      	cmp	r2, #24
 800b7a2:	d82e      	bhi.n	800b802 <__gethex+0x13a>
 800b7a4:	f1a0 0210 	sub.w	r2, r0, #16
 800b7a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7ac:	f7ff ff77 	bl	800b69e <__hexdig_fun>
 800b7b0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7b4:	fa5f fc8c 	uxtb.w	ip, ip
 800b7b8:	f1bc 0f18 	cmp.w	ip, #24
 800b7bc:	d91d      	bls.n	800b7fa <__gethex+0x132>
 800b7be:	f1bb 0f00 	cmp.w	fp, #0
 800b7c2:	d000      	beq.n	800b7c6 <__gethex+0xfe>
 800b7c4:	4252      	negs	r2, r2
 800b7c6:	4416      	add	r6, r2
 800b7c8:	f8ca 1000 	str.w	r1, [sl]
 800b7cc:	b1dc      	cbz	r4, 800b806 <__gethex+0x13e>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	bf14      	ite	ne
 800b7d4:	f04f 0800 	movne.w	r8, #0
 800b7d8:	f04f 0806 	moveq.w	r8, #6
 800b7dc:	4640      	mov	r0, r8
 800b7de:	b005      	add	sp, #20
 800b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e4:	4645      	mov	r5, r8
 800b7e6:	4626      	mov	r6, r4
 800b7e8:	2401      	movs	r4, #1
 800b7ea:	e7c7      	b.n	800b77c <__gethex+0xb4>
 800b7ec:	f04f 0b00 	mov.w	fp, #0
 800b7f0:	1ca9      	adds	r1, r5, #2
 800b7f2:	e7d0      	b.n	800b796 <__gethex+0xce>
 800b7f4:	f04f 0b01 	mov.w	fp, #1
 800b7f8:	e7fa      	b.n	800b7f0 <__gethex+0x128>
 800b7fa:	230a      	movs	r3, #10
 800b7fc:	fb03 0002 	mla	r0, r3, r2, r0
 800b800:	e7d0      	b.n	800b7a4 <__gethex+0xdc>
 800b802:	4629      	mov	r1, r5
 800b804:	e7e0      	b.n	800b7c8 <__gethex+0x100>
 800b806:	4621      	mov	r1, r4
 800b808:	eba5 0308 	sub.w	r3, r5, r8
 800b80c:	3b01      	subs	r3, #1
 800b80e:	2b07      	cmp	r3, #7
 800b810:	dc0a      	bgt.n	800b828 <__gethex+0x160>
 800b812:	4648      	mov	r0, r9
 800b814:	f7fd ff44 	bl	80096a0 <_Balloc>
 800b818:	4604      	mov	r4, r0
 800b81a:	b940      	cbnz	r0, 800b82e <__gethex+0x166>
 800b81c:	4602      	mov	r2, r0
 800b81e:	21e4      	movs	r1, #228	; 0xe4
 800b820:	4b61      	ldr	r3, [pc, #388]	; (800b9a8 <__gethex+0x2e0>)
 800b822:	4862      	ldr	r0, [pc, #392]	; (800b9ac <__gethex+0x2e4>)
 800b824:	f7fb ff60 	bl	80076e8 <__assert_func>
 800b828:	3101      	adds	r1, #1
 800b82a:	105b      	asrs	r3, r3, #1
 800b82c:	e7ef      	b.n	800b80e <__gethex+0x146>
 800b82e:	2300      	movs	r3, #0
 800b830:	469b      	mov	fp, r3
 800b832:	f100 0a14 	add.w	sl, r0, #20
 800b836:	f8cd a004 	str.w	sl, [sp, #4]
 800b83a:	45a8      	cmp	r8, r5
 800b83c:	d344      	bcc.n	800b8c8 <__gethex+0x200>
 800b83e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b842:	4658      	mov	r0, fp
 800b844:	f848 bb04 	str.w	fp, [r8], #4
 800b848:	eba8 080a 	sub.w	r8, r8, sl
 800b84c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800b850:	6122      	str	r2, [r4, #16]
 800b852:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800b856:	f7fe f815 	bl	8009884 <__hi0bits>
 800b85a:	683d      	ldr	r5, [r7, #0]
 800b85c:	eba8 0800 	sub.w	r8, r8, r0
 800b860:	45a8      	cmp	r8, r5
 800b862:	dd59      	ble.n	800b918 <__gethex+0x250>
 800b864:	eba8 0805 	sub.w	r8, r8, r5
 800b868:	4641      	mov	r1, r8
 800b86a:	4620      	mov	r0, r4
 800b86c:	f7fe fb93 	bl	8009f96 <__any_on>
 800b870:	4683      	mov	fp, r0
 800b872:	b1b8      	cbz	r0, 800b8a4 <__gethex+0x1dc>
 800b874:	f04f 0b01 	mov.w	fp, #1
 800b878:	f108 33ff 	add.w	r3, r8, #4294967295
 800b87c:	1159      	asrs	r1, r3, #5
 800b87e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b882:	f003 021f 	and.w	r2, r3, #31
 800b886:	fa0b f202 	lsl.w	r2, fp, r2
 800b88a:	420a      	tst	r2, r1
 800b88c:	d00a      	beq.n	800b8a4 <__gethex+0x1dc>
 800b88e:	455b      	cmp	r3, fp
 800b890:	dd06      	ble.n	800b8a0 <__gethex+0x1d8>
 800b892:	4620      	mov	r0, r4
 800b894:	f1a8 0102 	sub.w	r1, r8, #2
 800b898:	f7fe fb7d 	bl	8009f96 <__any_on>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d138      	bne.n	800b912 <__gethex+0x24a>
 800b8a0:	f04f 0b02 	mov.w	fp, #2
 800b8a4:	4641      	mov	r1, r8
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f7ff fea6 	bl	800b5f8 <rshift>
 800b8ac:	4446      	add	r6, r8
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	42b3      	cmp	r3, r6
 800b8b2:	da41      	bge.n	800b938 <__gethex+0x270>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4648      	mov	r0, r9
 800b8b8:	f7fd ff32 	bl	8009720 <_Bfree>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e789      	b.n	800b7dc <__gethex+0x114>
 800b8c8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b8cc:	2a2e      	cmp	r2, #46	; 0x2e
 800b8ce:	d014      	beq.n	800b8fa <__gethex+0x232>
 800b8d0:	2b20      	cmp	r3, #32
 800b8d2:	d106      	bne.n	800b8e2 <__gethex+0x21a>
 800b8d4:	9b01      	ldr	r3, [sp, #4]
 800b8d6:	f843 bb04 	str.w	fp, [r3], #4
 800b8da:	f04f 0b00 	mov.w	fp, #0
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	7828      	ldrb	r0, [r5, #0]
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	f7ff feda 	bl	800b69e <__hexdig_fun>
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	f000 000f 	and.w	r0, r0, #15
 800b8f0:	4098      	lsls	r0, r3
 800b8f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	e79f      	b.n	800b83a <__gethex+0x172>
 800b8fa:	45a8      	cmp	r8, r5
 800b8fc:	d8e8      	bhi.n	800b8d0 <__gethex+0x208>
 800b8fe:	2201      	movs	r2, #1
 800b900:	4628      	mov	r0, r5
 800b902:	4928      	ldr	r1, [pc, #160]	; (800b9a4 <__gethex+0x2dc>)
 800b904:	9303      	str	r3, [sp, #12]
 800b906:	f7ff fdf9 	bl	800b4fc <strncmp>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d1df      	bne.n	800b8d0 <__gethex+0x208>
 800b910:	e793      	b.n	800b83a <__gethex+0x172>
 800b912:	f04f 0b03 	mov.w	fp, #3
 800b916:	e7c5      	b.n	800b8a4 <__gethex+0x1dc>
 800b918:	da0b      	bge.n	800b932 <__gethex+0x26a>
 800b91a:	eba5 0808 	sub.w	r8, r5, r8
 800b91e:	4621      	mov	r1, r4
 800b920:	4642      	mov	r2, r8
 800b922:	4648      	mov	r0, r9
 800b924:	f7fe f914 	bl	8009b50 <__lshift>
 800b928:	4604      	mov	r4, r0
 800b92a:	eba6 0608 	sub.w	r6, r6, r8
 800b92e:	f100 0a14 	add.w	sl, r0, #20
 800b932:	f04f 0b00 	mov.w	fp, #0
 800b936:	e7ba      	b.n	800b8ae <__gethex+0x1e6>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	42b3      	cmp	r3, r6
 800b93c:	dd74      	ble.n	800ba28 <__gethex+0x360>
 800b93e:	1b9e      	subs	r6, r3, r6
 800b940:	42b5      	cmp	r5, r6
 800b942:	dc35      	bgt.n	800b9b0 <__gethex+0x2e8>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b02      	cmp	r3, #2
 800b948:	d023      	beq.n	800b992 <__gethex+0x2ca>
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d025      	beq.n	800b99a <__gethex+0x2d2>
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d115      	bne.n	800b97e <__gethex+0x2b6>
 800b952:	42b5      	cmp	r5, r6
 800b954:	d113      	bne.n	800b97e <__gethex+0x2b6>
 800b956:	2d01      	cmp	r5, #1
 800b958:	d10b      	bne.n	800b972 <__gethex+0x2aa>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	9a02      	ldr	r2, [sp, #8]
 800b95e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	2301      	movs	r3, #1
 800b966:	6123      	str	r3, [r4, #16]
 800b968:	f8ca 3000 	str.w	r3, [sl]
 800b96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b96e:	601c      	str	r4, [r3, #0]
 800b970:	e734      	b.n	800b7dc <__gethex+0x114>
 800b972:	4620      	mov	r0, r4
 800b974:	1e69      	subs	r1, r5, #1
 800b976:	f7fe fb0e 	bl	8009f96 <__any_on>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d1ed      	bne.n	800b95a <__gethex+0x292>
 800b97e:	4621      	mov	r1, r4
 800b980:	4648      	mov	r0, r9
 800b982:	f7fd fecd 	bl	8009720 <_Bfree>
 800b986:	2300      	movs	r3, #0
 800b988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b98a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	e724      	b.n	800b7dc <__gethex+0x114>
 800b992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1f2      	bne.n	800b97e <__gethex+0x2b6>
 800b998:	e7df      	b.n	800b95a <__gethex+0x292>
 800b99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1dc      	bne.n	800b95a <__gethex+0x292>
 800b9a0:	e7ed      	b.n	800b97e <__gethex+0x2b6>
 800b9a2:	bf00      	nop
 800b9a4:	0800c364 	.word	0x0800c364
 800b9a8:	0800c1fe 	.word	0x0800c1fe
 800b9ac:	0800c4d2 	.word	0x0800c4d2
 800b9b0:	f106 38ff 	add.w	r8, r6, #4294967295
 800b9b4:	f1bb 0f00 	cmp.w	fp, #0
 800b9b8:	d133      	bne.n	800ba22 <__gethex+0x35a>
 800b9ba:	f1b8 0f00 	cmp.w	r8, #0
 800b9be:	d004      	beq.n	800b9ca <__gethex+0x302>
 800b9c0:	4641      	mov	r1, r8
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f7fe fae7 	bl	8009f96 <__any_on>
 800b9c8:	4683      	mov	fp, r0
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b9d0:	f008 081f 	and.w	r8, r8, #31
 800b9d4:	fa03 f308 	lsl.w	r3, r3, r8
 800b9d8:	f04f 0802 	mov.w	r8, #2
 800b9dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4213      	tst	r3, r2
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	bf18      	it	ne
 800b9e8:	f04b 0b02 	orrne.w	fp, fp, #2
 800b9ec:	1bad      	subs	r5, r5, r6
 800b9ee:	f7ff fe03 	bl	800b5f8 <rshift>
 800b9f2:	687e      	ldr	r6, [r7, #4]
 800b9f4:	f1bb 0f00 	cmp.w	fp, #0
 800b9f8:	d04a      	beq.n	800ba90 <__gethex+0x3c8>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d016      	beq.n	800ba2e <__gethex+0x366>
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d018      	beq.n	800ba36 <__gethex+0x36e>
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d109      	bne.n	800ba1c <__gethex+0x354>
 800ba08:	f01b 0f02 	tst.w	fp, #2
 800ba0c:	d006      	beq.n	800ba1c <__gethex+0x354>
 800ba0e:	f8da 3000 	ldr.w	r3, [sl]
 800ba12:	ea4b 0b03 	orr.w	fp, fp, r3
 800ba16:	f01b 0f01 	tst.w	fp, #1
 800ba1a:	d10f      	bne.n	800ba3c <__gethex+0x374>
 800ba1c:	f048 0810 	orr.w	r8, r8, #16
 800ba20:	e036      	b.n	800ba90 <__gethex+0x3c8>
 800ba22:	f04f 0b01 	mov.w	fp, #1
 800ba26:	e7d0      	b.n	800b9ca <__gethex+0x302>
 800ba28:	f04f 0801 	mov.w	r8, #1
 800ba2c:	e7e2      	b.n	800b9f4 <__gethex+0x32c>
 800ba2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba30:	f1c3 0301 	rsb	r3, r3, #1
 800ba34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d0ef      	beq.n	800ba1c <__gethex+0x354>
 800ba3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba40:	f104 0214 	add.w	r2, r4, #20
 800ba44:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ba50:	4694      	mov	ip, r2
 800ba52:	f852 1b04 	ldr.w	r1, [r2], #4
 800ba56:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ba5a:	d01e      	beq.n	800ba9a <__gethex+0x3d2>
 800ba5c:	3101      	adds	r1, #1
 800ba5e:	f8cc 1000 	str.w	r1, [ip]
 800ba62:	f1b8 0f02 	cmp.w	r8, #2
 800ba66:	f104 0214 	add.w	r2, r4, #20
 800ba6a:	d13d      	bne.n	800bae8 <__gethex+0x420>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	d10b      	bne.n	800ba8c <__gethex+0x3c4>
 800ba74:	2301      	movs	r3, #1
 800ba76:	1169      	asrs	r1, r5, #5
 800ba78:	f005 051f 	and.w	r5, r5, #31
 800ba7c:	fa03 f505 	lsl.w	r5, r3, r5
 800ba80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba84:	421d      	tst	r5, r3
 800ba86:	bf18      	it	ne
 800ba88:	f04f 0801 	movne.w	r8, #1
 800ba8c:	f048 0820 	orr.w	r8, r8, #32
 800ba90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba92:	601c      	str	r4, [r3, #0]
 800ba94:	9b02      	ldr	r3, [sp, #8]
 800ba96:	601e      	str	r6, [r3, #0]
 800ba98:	e6a0      	b.n	800b7dc <__gethex+0x114>
 800ba9a:	4290      	cmp	r0, r2
 800ba9c:	f842 3c04 	str.w	r3, [r2, #-4]
 800baa0:	d8d6      	bhi.n	800ba50 <__gethex+0x388>
 800baa2:	68a2      	ldr	r2, [r4, #8]
 800baa4:	4593      	cmp	fp, r2
 800baa6:	db17      	blt.n	800bad8 <__gethex+0x410>
 800baa8:	6861      	ldr	r1, [r4, #4]
 800baaa:	4648      	mov	r0, r9
 800baac:	3101      	adds	r1, #1
 800baae:	f7fd fdf7 	bl	80096a0 <_Balloc>
 800bab2:	4682      	mov	sl, r0
 800bab4:	b918      	cbnz	r0, 800babe <__gethex+0x3f6>
 800bab6:	4602      	mov	r2, r0
 800bab8:	2184      	movs	r1, #132	; 0x84
 800baba:	4b1a      	ldr	r3, [pc, #104]	; (800bb24 <__gethex+0x45c>)
 800babc:	e6b1      	b.n	800b822 <__gethex+0x15a>
 800babe:	6922      	ldr	r2, [r4, #16]
 800bac0:	f104 010c 	add.w	r1, r4, #12
 800bac4:	3202      	adds	r2, #2
 800bac6:	0092      	lsls	r2, r2, #2
 800bac8:	300c      	adds	r0, #12
 800baca:	f7ff fd6d 	bl	800b5a8 <memcpy>
 800bace:	4621      	mov	r1, r4
 800bad0:	4648      	mov	r0, r9
 800bad2:	f7fd fe25 	bl	8009720 <_Bfree>
 800bad6:	4654      	mov	r4, sl
 800bad8:	6922      	ldr	r2, [r4, #16]
 800bada:	1c51      	adds	r1, r2, #1
 800badc:	6121      	str	r1, [r4, #16]
 800bade:	2101      	movs	r1, #1
 800bae0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bae4:	6151      	str	r1, [r2, #20]
 800bae6:	e7bc      	b.n	800ba62 <__gethex+0x39a>
 800bae8:	6921      	ldr	r1, [r4, #16]
 800baea:	4559      	cmp	r1, fp
 800baec:	dd0b      	ble.n	800bb06 <__gethex+0x43e>
 800baee:	2101      	movs	r1, #1
 800baf0:	4620      	mov	r0, r4
 800baf2:	f7ff fd81 	bl	800b5f8 <rshift>
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3601      	adds	r6, #1
 800bafa:	42b3      	cmp	r3, r6
 800bafc:	f6ff aeda 	blt.w	800b8b4 <__gethex+0x1ec>
 800bb00:	f04f 0801 	mov.w	r8, #1
 800bb04:	e7c2      	b.n	800ba8c <__gethex+0x3c4>
 800bb06:	f015 051f 	ands.w	r5, r5, #31
 800bb0a:	d0f9      	beq.n	800bb00 <__gethex+0x438>
 800bb0c:	9b01      	ldr	r3, [sp, #4]
 800bb0e:	f1c5 0520 	rsb	r5, r5, #32
 800bb12:	441a      	add	r2, r3
 800bb14:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bb18:	f7fd feb4 	bl	8009884 <__hi0bits>
 800bb1c:	42a8      	cmp	r0, r5
 800bb1e:	dbe6      	blt.n	800baee <__gethex+0x426>
 800bb20:	e7ee      	b.n	800bb00 <__gethex+0x438>
 800bb22:	bf00      	nop
 800bb24:	0800c1fe 	.word	0x0800c1fe

0800bb28 <L_shift>:
 800bb28:	f1c2 0208 	rsb	r2, r2, #8
 800bb2c:	0092      	lsls	r2, r2, #2
 800bb2e:	b570      	push	{r4, r5, r6, lr}
 800bb30:	f1c2 0620 	rsb	r6, r2, #32
 800bb34:	6843      	ldr	r3, [r0, #4]
 800bb36:	6804      	ldr	r4, [r0, #0]
 800bb38:	fa03 f506 	lsl.w	r5, r3, r6
 800bb3c:	432c      	orrs	r4, r5
 800bb3e:	40d3      	lsrs	r3, r2
 800bb40:	6004      	str	r4, [r0, #0]
 800bb42:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb46:	4288      	cmp	r0, r1
 800bb48:	d3f4      	bcc.n	800bb34 <L_shift+0xc>
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}

0800bb4c <__match>:
 800bb4c:	b530      	push	{r4, r5, lr}
 800bb4e:	6803      	ldr	r3, [r0, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb56:	b914      	cbnz	r4, 800bb5e <__match+0x12>
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	2001      	movs	r0, #1
 800bb5c:	bd30      	pop	{r4, r5, pc}
 800bb5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb66:	2d19      	cmp	r5, #25
 800bb68:	bf98      	it	ls
 800bb6a:	3220      	addls	r2, #32
 800bb6c:	42a2      	cmp	r2, r4
 800bb6e:	d0f0      	beq.n	800bb52 <__match+0x6>
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7f3      	b.n	800bb5c <__match+0x10>

0800bb74 <__hexnan>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	2500      	movs	r5, #0
 800bb7a:	680b      	ldr	r3, [r1, #0]
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	115e      	asrs	r6, r3, #5
 800bb80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb84:	f013 031f 	ands.w	r3, r3, #31
 800bb88:	bf18      	it	ne
 800bb8a:	3604      	addne	r6, #4
 800bb8c:	1f37      	subs	r7, r6, #4
 800bb8e:	4690      	mov	r8, r2
 800bb90:	46b9      	mov	r9, r7
 800bb92:	463c      	mov	r4, r7
 800bb94:	46ab      	mov	fp, r5
 800bb96:	b087      	sub	sp, #28
 800bb98:	6801      	ldr	r1, [r0, #0]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	f846 5c04 	str.w	r5, [r6, #-4]
 800bba0:	9502      	str	r5, [sp, #8]
 800bba2:	784a      	ldrb	r2, [r1, #1]
 800bba4:	1c4b      	adds	r3, r1, #1
 800bba6:	9303      	str	r3, [sp, #12]
 800bba8:	b342      	cbz	r2, 800bbfc <__hexnan+0x88>
 800bbaa:	4610      	mov	r0, r2
 800bbac:	9105      	str	r1, [sp, #20]
 800bbae:	9204      	str	r2, [sp, #16]
 800bbb0:	f7ff fd75 	bl	800b69e <__hexdig_fun>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d14f      	bne.n	800bc58 <__hexnan+0xe4>
 800bbb8:	9a04      	ldr	r2, [sp, #16]
 800bbba:	9905      	ldr	r1, [sp, #20]
 800bbbc:	2a20      	cmp	r2, #32
 800bbbe:	d818      	bhi.n	800bbf2 <__hexnan+0x7e>
 800bbc0:	9b02      	ldr	r3, [sp, #8]
 800bbc2:	459b      	cmp	fp, r3
 800bbc4:	dd13      	ble.n	800bbee <__hexnan+0x7a>
 800bbc6:	454c      	cmp	r4, r9
 800bbc8:	d206      	bcs.n	800bbd8 <__hexnan+0x64>
 800bbca:	2d07      	cmp	r5, #7
 800bbcc:	dc04      	bgt.n	800bbd8 <__hexnan+0x64>
 800bbce:	462a      	mov	r2, r5
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f7ff ffa8 	bl	800bb28 <L_shift>
 800bbd8:	4544      	cmp	r4, r8
 800bbda:	d950      	bls.n	800bc7e <__hexnan+0x10a>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f1a4 0904 	sub.w	r9, r4, #4
 800bbe2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbe6:	461d      	mov	r5, r3
 800bbe8:	464c      	mov	r4, r9
 800bbea:	f8cd b008 	str.w	fp, [sp, #8]
 800bbee:	9903      	ldr	r1, [sp, #12]
 800bbf0:	e7d7      	b.n	800bba2 <__hexnan+0x2e>
 800bbf2:	2a29      	cmp	r2, #41	; 0x29
 800bbf4:	d155      	bne.n	800bca2 <__hexnan+0x12e>
 800bbf6:	3102      	adds	r1, #2
 800bbf8:	f8ca 1000 	str.w	r1, [sl]
 800bbfc:	f1bb 0f00 	cmp.w	fp, #0
 800bc00:	d04f      	beq.n	800bca2 <__hexnan+0x12e>
 800bc02:	454c      	cmp	r4, r9
 800bc04:	d206      	bcs.n	800bc14 <__hexnan+0xa0>
 800bc06:	2d07      	cmp	r5, #7
 800bc08:	dc04      	bgt.n	800bc14 <__hexnan+0xa0>
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff ff8a 	bl	800bb28 <L_shift>
 800bc14:	4544      	cmp	r4, r8
 800bc16:	d934      	bls.n	800bc82 <__hexnan+0x10e>
 800bc18:	4623      	mov	r3, r4
 800bc1a:	f1a8 0204 	sub.w	r2, r8, #4
 800bc1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc22:	429f      	cmp	r7, r3
 800bc24:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc28:	d2f9      	bcs.n	800bc1e <__hexnan+0xaa>
 800bc2a:	1b3b      	subs	r3, r7, r4
 800bc2c:	f023 0303 	bic.w	r3, r3, #3
 800bc30:	3304      	adds	r3, #4
 800bc32:	3e03      	subs	r6, #3
 800bc34:	3401      	adds	r4, #1
 800bc36:	42a6      	cmp	r6, r4
 800bc38:	bf38      	it	cc
 800bc3a:	2304      	movcc	r3, #4
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4443      	add	r3, r8
 800bc40:	f843 2b04 	str.w	r2, [r3], #4
 800bc44:	429f      	cmp	r7, r3
 800bc46:	d2fb      	bcs.n	800bc40 <__hexnan+0xcc>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	b91b      	cbnz	r3, 800bc54 <__hexnan+0xe0>
 800bc4c:	4547      	cmp	r7, r8
 800bc4e:	d126      	bne.n	800bc9e <__hexnan+0x12a>
 800bc50:	2301      	movs	r3, #1
 800bc52:	603b      	str	r3, [r7, #0]
 800bc54:	2005      	movs	r0, #5
 800bc56:	e025      	b.n	800bca4 <__hexnan+0x130>
 800bc58:	3501      	adds	r5, #1
 800bc5a:	2d08      	cmp	r5, #8
 800bc5c:	f10b 0b01 	add.w	fp, fp, #1
 800bc60:	dd06      	ble.n	800bc70 <__hexnan+0xfc>
 800bc62:	4544      	cmp	r4, r8
 800bc64:	d9c3      	bls.n	800bbee <__hexnan+0x7a>
 800bc66:	2300      	movs	r3, #0
 800bc68:	2501      	movs	r5, #1
 800bc6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc6e:	3c04      	subs	r4, #4
 800bc70:	6822      	ldr	r2, [r4, #0]
 800bc72:	f000 000f 	and.w	r0, r0, #15
 800bc76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc7a:	6020      	str	r0, [r4, #0]
 800bc7c:	e7b7      	b.n	800bbee <__hexnan+0x7a>
 800bc7e:	2508      	movs	r5, #8
 800bc80:	e7b5      	b.n	800bbee <__hexnan+0x7a>
 800bc82:	9b01      	ldr	r3, [sp, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0df      	beq.n	800bc48 <__hexnan+0xd4>
 800bc88:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8c:	f1c3 0320 	rsb	r3, r3, #32
 800bc90:	40da      	lsrs	r2, r3
 800bc92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc96:	4013      	ands	r3, r2
 800bc98:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc9c:	e7d4      	b.n	800bc48 <__hexnan+0xd4>
 800bc9e:	3f04      	subs	r7, #4
 800bca0:	e7d2      	b.n	800bc48 <__hexnan+0xd4>
 800bca2:	2004      	movs	r0, #4
 800bca4:	b007      	add	sp, #28
 800bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcaa <__ascii_mbtowc>:
 800bcaa:	b082      	sub	sp, #8
 800bcac:	b901      	cbnz	r1, 800bcb0 <__ascii_mbtowc+0x6>
 800bcae:	a901      	add	r1, sp, #4
 800bcb0:	b142      	cbz	r2, 800bcc4 <__ascii_mbtowc+0x1a>
 800bcb2:	b14b      	cbz	r3, 800bcc8 <__ascii_mbtowc+0x1e>
 800bcb4:	7813      	ldrb	r3, [r2, #0]
 800bcb6:	600b      	str	r3, [r1, #0]
 800bcb8:	7812      	ldrb	r2, [r2, #0]
 800bcba:	1e10      	subs	r0, r2, #0
 800bcbc:	bf18      	it	ne
 800bcbe:	2001      	movne	r0, #1
 800bcc0:	b002      	add	sp, #8
 800bcc2:	4770      	bx	lr
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	e7fb      	b.n	800bcc0 <__ascii_mbtowc+0x16>
 800bcc8:	f06f 0001 	mvn.w	r0, #1
 800bccc:	e7f8      	b.n	800bcc0 <__ascii_mbtowc+0x16>

0800bcce <_realloc_r>:
 800bcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd2:	4680      	mov	r8, r0
 800bcd4:	4614      	mov	r4, r2
 800bcd6:	460e      	mov	r6, r1
 800bcd8:	b921      	cbnz	r1, 800bce4 <_realloc_r+0x16>
 800bcda:	4611      	mov	r1, r2
 800bcdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce0:	f7fb bd50 	b.w	8007784 <_malloc_r>
 800bce4:	b92a      	cbnz	r2, 800bcf2 <_realloc_r+0x24>
 800bce6:	f7fd fc93 	bl	8009610 <_free_r>
 800bcea:	4625      	mov	r5, r4
 800bcec:	4628      	mov	r0, r5
 800bcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf2:	f000 f8ab 	bl	800be4c <_malloc_usable_size_r>
 800bcf6:	4284      	cmp	r4, r0
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	d802      	bhi.n	800bd02 <_realloc_r+0x34>
 800bcfc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd00:	d812      	bhi.n	800bd28 <_realloc_r+0x5a>
 800bd02:	4621      	mov	r1, r4
 800bd04:	4640      	mov	r0, r8
 800bd06:	f7fb fd3d 	bl	8007784 <_malloc_r>
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d0ed      	beq.n	800bcec <_realloc_r+0x1e>
 800bd10:	42bc      	cmp	r4, r7
 800bd12:	4622      	mov	r2, r4
 800bd14:	4631      	mov	r1, r6
 800bd16:	bf28      	it	cs
 800bd18:	463a      	movcs	r2, r7
 800bd1a:	f7ff fc45 	bl	800b5a8 <memcpy>
 800bd1e:	4631      	mov	r1, r6
 800bd20:	4640      	mov	r0, r8
 800bd22:	f7fd fc75 	bl	8009610 <_free_r>
 800bd26:	e7e1      	b.n	800bcec <_realloc_r+0x1e>
 800bd28:	4635      	mov	r5, r6
 800bd2a:	e7df      	b.n	800bcec <_realloc_r+0x1e>

0800bd2c <__ascii_wctomb>:
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4608      	mov	r0, r1
 800bd30:	b141      	cbz	r1, 800bd44 <__ascii_wctomb+0x18>
 800bd32:	2aff      	cmp	r2, #255	; 0xff
 800bd34:	d904      	bls.n	800bd40 <__ascii_wctomb+0x14>
 800bd36:	228a      	movs	r2, #138	; 0x8a
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	4770      	bx	lr
 800bd40:	2001      	movs	r0, #1
 800bd42:	700a      	strb	r2, [r1, #0]
 800bd44:	4770      	bx	lr

0800bd46 <__swhatbuf_r>:
 800bd46:	b570      	push	{r4, r5, r6, lr}
 800bd48:	460c      	mov	r4, r1
 800bd4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4e:	4615      	mov	r5, r2
 800bd50:	2900      	cmp	r1, #0
 800bd52:	461e      	mov	r6, r3
 800bd54:	b096      	sub	sp, #88	; 0x58
 800bd56:	da0c      	bge.n	800bd72 <__swhatbuf_r+0x2c>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd60:	bf0c      	ite	eq
 800bd62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd66:	2340      	movne	r3, #64	; 0x40
 800bd68:	2000      	movs	r0, #0
 800bd6a:	6031      	str	r1, [r6, #0]
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	b016      	add	sp, #88	; 0x58
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	466a      	mov	r2, sp
 800bd74:	f000 f848 	bl	800be08 <_fstat_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	dbed      	blt.n	800bd58 <__swhatbuf_r+0x12>
 800bd7c:	9901      	ldr	r1, [sp, #4]
 800bd7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd86:	4259      	negs	r1, r3
 800bd88:	4159      	adcs	r1, r3
 800bd8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd8e:	e7eb      	b.n	800bd68 <__swhatbuf_r+0x22>

0800bd90 <__smakebuf_r>:
 800bd90:	898b      	ldrh	r3, [r1, #12]
 800bd92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd94:	079d      	lsls	r5, r3, #30
 800bd96:	4606      	mov	r6, r0
 800bd98:	460c      	mov	r4, r1
 800bd9a:	d507      	bpl.n	800bdac <__smakebuf_r+0x1c>
 800bd9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	6123      	str	r3, [r4, #16]
 800bda4:	2301      	movs	r3, #1
 800bda6:	6163      	str	r3, [r4, #20]
 800bda8:	b002      	add	sp, #8
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	466a      	mov	r2, sp
 800bdae:	ab01      	add	r3, sp, #4
 800bdb0:	f7ff ffc9 	bl	800bd46 <__swhatbuf_r>
 800bdb4:	9900      	ldr	r1, [sp, #0]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7fb fce3 	bl	8007784 <_malloc_r>
 800bdbe:	b948      	cbnz	r0, 800bdd4 <__smakebuf_r+0x44>
 800bdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc4:	059a      	lsls	r2, r3, #22
 800bdc6:	d4ef      	bmi.n	800bda8 <__smakebuf_r+0x18>
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	f043 0302 	orr.w	r3, r3, #2
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	e7e3      	b.n	800bd9c <__smakebuf_r+0xc>
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	6020      	str	r0, [r4, #0]
 800bdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	9b00      	ldr	r3, [sp, #0]
 800bde0:	6120      	str	r0, [r4, #16]
 800bde2:	6163      	str	r3, [r4, #20]
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	b15b      	cbz	r3, 800be00 <__smakebuf_r+0x70>
 800bde8:	4630      	mov	r0, r6
 800bdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdee:	f000 f81d 	bl	800be2c <_isatty_r>
 800bdf2:	b128      	cbz	r0, 800be00 <__smakebuf_r+0x70>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f023 0303 	bic.w	r3, r3, #3
 800bdfa:	f043 0301 	orr.w	r3, r3, #1
 800bdfe:	81a3      	strh	r3, [r4, #12]
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	431d      	orrs	r5, r3
 800be04:	81a5      	strh	r5, [r4, #12]
 800be06:	e7cf      	b.n	800bda8 <__smakebuf_r+0x18>

0800be08 <_fstat_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	2300      	movs	r3, #0
 800be0c:	4d06      	ldr	r5, [pc, #24]	; (800be28 <_fstat_r+0x20>)
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	4611      	mov	r1, r2
 800be14:	602b      	str	r3, [r5, #0]
 800be16:	f7f6 fa20 	bl	800225a <_fstat>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d102      	bne.n	800be24 <_fstat_r+0x1c>
 800be1e:	682b      	ldr	r3, [r5, #0]
 800be20:	b103      	cbz	r3, 800be24 <_fstat_r+0x1c>
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	20000778 	.word	0x20000778

0800be2c <_isatty_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	2300      	movs	r3, #0
 800be30:	4d05      	ldr	r5, [pc, #20]	; (800be48 <_isatty_r+0x1c>)
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	f7f6 fa1e 	bl	8002278 <_isatty>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d102      	bne.n	800be46 <_isatty_r+0x1a>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b103      	cbz	r3, 800be46 <_isatty_r+0x1a>
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	bd38      	pop	{r3, r4, r5, pc}
 800be48:	20000778 	.word	0x20000778

0800be4c <_malloc_usable_size_r>:
 800be4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be50:	1f18      	subs	r0, r3, #4
 800be52:	2b00      	cmp	r3, #0
 800be54:	bfbc      	itt	lt
 800be56:	580b      	ldrlt	r3, [r1, r0]
 800be58:	18c0      	addlt	r0, r0, r3
 800be5a:	4770      	bx	lr

0800be5c <round>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800be62:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800be66:	2a13      	cmp	r2, #19
 800be68:	460b      	mov	r3, r1
 800be6a:	4605      	mov	r5, r0
 800be6c:	460c      	mov	r4, r1
 800be6e:	dc18      	bgt.n	800bea2 <round+0x46>
 800be70:	2a00      	cmp	r2, #0
 800be72:	da09      	bge.n	800be88 <round+0x2c>
 800be74:	3201      	adds	r2, #1
 800be76:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800be7a:	d103      	bne.n	800be84 <round+0x28>
 800be7c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800be80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be84:	2200      	movs	r2, #0
 800be86:	e029      	b.n	800bedc <round+0x80>
 800be88:	4816      	ldr	r0, [pc, #88]	; (800bee4 <round+0x88>)
 800be8a:	4110      	asrs	r0, r2
 800be8c:	4001      	ands	r1, r0
 800be8e:	4329      	orrs	r1, r5
 800be90:	d011      	beq.n	800beb6 <round+0x5a>
 800be92:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be96:	fa41 f202 	asr.w	r2, r1, r2
 800be9a:	4413      	add	r3, r2
 800be9c:	ea23 0300 	bic.w	r3, r3, r0
 800bea0:	e7f0      	b.n	800be84 <round+0x28>
 800bea2:	2a33      	cmp	r2, #51	; 0x33
 800bea4:	dd0a      	ble.n	800bebc <round+0x60>
 800bea6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800beaa:	d104      	bne.n	800beb6 <round+0x5a>
 800beac:	4602      	mov	r2, r0
 800beae:	f7f4 f9d3 	bl	8000258 <__adddf3>
 800beb2:	4605      	mov	r5, r0
 800beb4:	460c      	mov	r4, r1
 800beb6:	4628      	mov	r0, r5
 800beb8:	4621      	mov	r1, r4
 800beba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bebc:	f04f 30ff 	mov.w	r0, #4294967295
 800bec0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bec4:	40f8      	lsrs	r0, r7
 800bec6:	4228      	tst	r0, r5
 800bec8:	d0f5      	beq.n	800beb6 <round+0x5a>
 800beca:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800bece:	2201      	movs	r2, #1
 800bed0:	408a      	lsls	r2, r1
 800bed2:	1952      	adds	r2, r2, r5
 800bed4:	bf28      	it	cs
 800bed6:	3301      	addcs	r3, #1
 800bed8:	ea22 0200 	bic.w	r2, r2, r0
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	e7e7      	b.n	800beb2 <round+0x56>
 800bee2:	bf00      	nop
 800bee4:	000fffff 	.word	0x000fffff

0800bee8 <roundf>:
 800bee8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800beec:	3b7f      	subs	r3, #127	; 0x7f
 800beee:	2b16      	cmp	r3, #22
 800bef0:	4601      	mov	r1, r0
 800bef2:	b510      	push	{r4, lr}
 800bef4:	dc14      	bgt.n	800bf20 <roundf+0x38>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	da07      	bge.n	800bf0a <roundf+0x22>
 800befa:	3301      	adds	r3, #1
 800befc:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800bf00:	d101      	bne.n	800bf06 <roundf+0x1e>
 800bf02:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800bf06:	4608      	mov	r0, r1
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	4a08      	ldr	r2, [pc, #32]	; (800bf2c <roundf+0x44>)
 800bf0c:	411a      	asrs	r2, r3
 800bf0e:	4210      	tst	r0, r2
 800bf10:	d0f9      	beq.n	800bf06 <roundf+0x1e>
 800bf12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf16:	4119      	asrs	r1, r3
 800bf18:	4401      	add	r1, r0
 800bf1a:	ea21 0102 	bic.w	r1, r1, r2
 800bf1e:	e7f2      	b.n	800bf06 <roundf+0x1e>
 800bf20:	2b80      	cmp	r3, #128	; 0x80
 800bf22:	d1f0      	bne.n	800bf06 <roundf+0x1e>
 800bf24:	f7f4 fe9c 	bl	8000c60 <__addsf3>
 800bf28:	4601      	mov	r1, r0
 800bf2a:	e7ec      	b.n	800bf06 <roundf+0x1e>
 800bf2c:	007fffff 	.word	0x007fffff

0800bf30 <_init>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	bf00      	nop
 800bf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf36:	bc08      	pop	{r3}
 800bf38:	469e      	mov	lr, r3
 800bf3a:	4770      	bx	lr

0800bf3c <_fini>:
 800bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3e:	bf00      	nop
 800bf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf42:	bc08      	pop	{r3}
 800bf44:	469e      	mov	lr, r3
 800bf46:	4770      	bx	lr
