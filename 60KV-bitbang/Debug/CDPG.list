
CDPG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800de10  0800de10  0001de10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c8  0800e3c8  000203a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3c8  0800e3c8  000203a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3c8  0800e3c8  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3c8  0800e3c8  0001e3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3cc  0800e3cc  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a0  20000000  0800e3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203a0  2**0
                  CONTENTS
 10 .bss          0000055c  200003a0  200003a0  000203a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008fc  200008fc  000203a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000127b0  00000000  00000000  00020413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002da4  00000000  00000000  00032bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b0  00000000  00000000  00035968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dba  00000000  00000000  00036b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022b4c  00000000  00000000  000378d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017244  00000000  00000000  0005a41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cad84  00000000  00000000  00071662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005eac  00000000  00000000  0013c3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00142294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a0 	.word	0x200003a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddf8 	.word	0x0800ddf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003a4 	.word	0x200003a4
 80001cc:	0800ddf8 	.word	0x0800ddf8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <VcDecOrSet>:
    low = ~(low & mask);
	high = low ^ (high & mask);
}*/

void VcDecOrSet(uint8_t* high, uint8_t* low, uint8_t mask)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71fb      	strb	r3, [r7, #7]
    *low = ~(*low & mask);
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	781a      	ldrb	r2, [r3, #0]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	701a      	strb	r2, [r3, #0]
    *high = *low ^ (*high & mask);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	400b      	ands	r3, r1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4053      	eors	r3, r2
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <Debounce>:
*
* @details This function checks the state of the buttons and updates the `buttonsButtonRelease` variable
* if a debounced button press or ButtonRelease is detected. It should be called approximately 100 times per second.
*/
void Debounce(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	static uint8_t buttonState = 0;

	/**
	* @brief XOR with `buttonState` to detect state changes.
	*/
	uint8_t stateChanged = (KEY_READ) ^ buttonState;
 8000d5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	0a9b      	lsrs	r3, r3, #10
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <Debounce+0x88>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	0adb      	lsrs	r3, r3, #11
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <Debounce+0x8c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	4053      	eors	r3, r2
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	71fb      	strb	r3, [r7, #7]

	/* Decrease counters where stateChanged = 1, set the others to 0b11. */
	//VcDecOrSet(vcountHigh, vcountLow, stateChanged);
	VcDecOrSet(&vcountHigh, &vcountLow, stateChanged);
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4915      	ldr	r1, [pc, #84]	; (8000de8 <Debounce+0x90>)
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <Debounce+0x94>)
 8000d94:	f7ff ffbe 	bl	8000d14 <VcDecOrSet>
	/* Update stateChanged to have a 1 only if the counter overflowed. */
	stateChanged &= vcountLow & vcountHigh;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <Debounce+0x90>)
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <Debounce+0x94>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4013      	ands	r3, r2
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4013      	ands	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

	/* Change buttonState for the buttons whose counters rolled over. */
	buttonState ^= stateChanged;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <Debounce+0x8c>)
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4053      	eors	r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <Debounce+0x8c>)
 8000db6:	701a      	strb	r2, [r3, #0]

	/* Update buttonsButtonRelease with buttons whose counters rolled over
	* and are still in state 0 (ButtonReleased).
	*/
	buttonRelease |= (buttonState ^/*&*/ KEY_RELEASE_MASK) & stateChanged; // ButtonRelease action.
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <Debounce+0x8c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f083 030f 	eor.w	r3, r3, #15
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <Debounce+0x98>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <Debounce+0x98>)
 8000dd4:	701a      	strb	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000800 	.word	0x48000800
 8000de4:	200003bd 	.word	0x200003bd
 8000de8:	20000001 	.word	0x20000001
 8000dec:	20000000 	.word	0x20000000
 8000df0:	200003bc 	.word	0x200003bc

08000df4 <ToggleBuzzer>:
 * this array must be initialized when need to buzzer toggled.
 */
volatile uint8_t buzzer[2];

static inline void ToggleBuzzer(volatile uint8_t buzzer[2])
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	static uint8_t number = 0;
	static uint8_t count10ms = 0;

	if (count10ms == 0) /* buzzer[BUZZ_DELAY]/10 = number of count10ms */
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <ToggleBuzzer+0x94>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d132      	bne.n	8000e6a <ToggleBuzzer+0x76>
	{
		if (number < buzzer[BUZZ_NUM] * 2)	/* buzzer[BUZZ_NUM]*2 = number of (buzzer_off + buzzer_on) BUT
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <ToggleBuzzer+0x98>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	429a      	cmp	r2, r3
 8000e14:	da16      	bge.n	8000e44 <ToggleBuzzer+0x50>
											   buzzer[BUZZ_NUM]	  = number of buzzer_on */
		{
			//BUZZ_TGL;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1a:	481d      	ldr	r0, [pc, #116]	; (8000e90 <ToggleBuzzer+0x9c>)
 8000e1c:	f002 fc3a 	bl	8003694 <HAL_GPIO_TogglePin>
			number++;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <ToggleBuzzer+0x98>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <ToggleBuzzer+0x98>)
 8000e2a:	701a      	strb	r2, [r3, #0]
			count10ms = (buzzer[BUZZ_DELAY] / 10);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <ToggleBuzzer+0xa0>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <ToggleBuzzer+0x94>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e012      	b.n	8000e6a <ToggleBuzzer+0x76>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <ToggleBuzzer+0x9c>)
 8000e4c:	f002 fc0a 	bl	8003664 <HAL_GPIO_WritePin>
			number = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <ToggleBuzzer+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
			count10ms = 0;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <ToggleBuzzer+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_NUM] = 0;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3301      	adds	r3, #1
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (buzzer[BUZZ_NUM])
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <ToggleBuzzer+0x8c>
	{
		count10ms--;
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <ToggleBuzzer+0x94>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <ToggleBuzzer+0x94>)
 8000e7e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200005b6 	.word	0x200005b6
 8000e8c:	200005b7 	.word	0x200005b7
 8000e90:	48000400 	.word	0x48000400
 8000e94:	cccccccd 	.word	0xcccccccd

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 f85d 	bl	8001f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f91f 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fbad 	bl	8001604 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eaa:	f000 fa8b 	bl	80013c4 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000eae:	f000 fb73 	bl	8001598 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000eb2:	f000 fa47 	bl	8001344 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000eb6:	f000 f977 	bl	80011a8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000eba:	f000 fadd 	bl	8001478 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000ebe:	f000 f9e3 	bl	8001288 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /*first uncomment ValuInit_Write_EE() to write initial values,
  then comment it and upload the program again on the micro*/
  //InitValueWriteToEeprom();
  InitValueReadFromEeprom();
 8000ec2:	f008 fb1b 	bl	80094fc <InitValueReadFromEeprom>

  /*start encoder timer 1 for reading rotary encoder */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ec6:	213c      	movs	r1, #60	; 0x3c
 8000ec8:	4872      	ldr	r0, [pc, #456]	; (8001094 <main+0x1fc>)
 8000eca:	f005 fb8b 	bl	80065e4 <HAL_TIM_Encoder_Start>
  TIM1->CNT = 2000;
 8000ece:	4b72      	ldr	r3, [pc, #456]	; (8001098 <main+0x200>)
 8000ed0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* create different flags base on 1ms timer 7 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000ed6:	4871      	ldr	r0, [pc, #452]	; (800109c <main+0x204>)
 8000ed8:	f004 fe0a 	bl	8005af0 <HAL_TIM_Base_Start_IT>
  uint8_t j;

  char (*pStateFunc)(char);

  /* Initial state variables */
  uint8_t state = ST_STANDBY;
 8000edc:	2314      	movs	r3, #20
 8000ede:	70fb      	strb	r3, [r7, #3]
  pStateFunc = StandBy;
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <main+0x208>)
 8000ee2:	607b      	str	r3, [r7, #4]

  /* Lcd initial start */

  LcdInit();
 8000ee4:	f006 fcc6 	bl	8007874 <LcdInit>
  LcdClear();
 8000ee8:	f006 fd18 	bl	800791c <LcdClear>
  LcdDisplayOn();
 8000eec:	f006 fd24 	bl	8007938 <LcdDisplayOn>
  LcdBackLightSet();
 8000ef0:	f006 fc6a 	bl	80077c8 <LcdBackLightSet>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Read rotary encoder and find the direction */
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/ROTARY_SPC;
 8000ef4:	4b67      	ldr	r3, [pc, #412]	; (8001094 <main+0x1fc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b69      	ldr	r3, [pc, #420]	; (80010a4 <main+0x20c>)
 8000f00:	601a      	str	r2, [r3, #0]
		diff = encoder_counter - last_count;  // Calculate the difference between the current count and the last count
 8000f02:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <main+0x20c>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <main+0x210>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	4a67      	ldr	r2, [pc, #412]	; (80010ac <main+0x214>)
 8000f0e:	6013      	str	r3, [r2, #0]

		if (diff != 0)
 8000f10:	4b66      	ldr	r3, [pc, #408]	; (80010ac <main+0x214>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d018      	beq.n	8000f4a <main+0xb2>
		{
			if (diff > 0)
 8000f18:	4b64      	ldr	r3, [pc, #400]	; (80010ac <main+0x214>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dd06      	ble.n	8000f2e <main+0x96>
			{
				flagRotaryCW = true; //Clockwise rotation
 8000f20:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <main+0x218>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = false;
 8000f26:	4b63      	ldr	r3, [pc, #396]	; (80010b4 <main+0x21c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e009      	b.n	8000f42 <main+0xaa>
			}
			else if (diff < 0)
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <main+0x214>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da05      	bge.n	8000f42 <main+0xaa>
			{
				flagRotaryCW = false;
 8000f36:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <main+0x218>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = true; //Counter-clockwise rotation
 8000f3c:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <main+0x21c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			}

			last_count = encoder_counter; //Update the last count
 8000f42:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <main+0x20c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <main+0x210>)
 8000f48:	6013      	str	r3, [r2, #0]
		}

		/* Every 10 mS check */
		if ( flag10ms == true )
 8000f4a:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <main+0x220>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d014      	beq.n	8000f7e <main+0xe6>
		{
			CheckInputDebounced();
 8000f54:	f006 fbba 	bl	80076cc <CheckInputDebounced>
			if ( mode_state == STOP)
 8000f58:	4b58      	ldr	r3, [pc, #352]	; (80010bc <main+0x224>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d101      	bne.n	8000f64 <main+0xcc>
			{
				ReadVoltageADC();
 8000f60:	f006 fe74 	bl	8007c4c <ReadVoltageADC>
			}
			Debounce();  // Update button_state.
 8000f64:	f7ff fef8 	bl	8000d58 <Debounce>

			if (buzzer[BUZZ_NUM])
 8000f68:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <main+0x228>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <main+0xe0>
				ToggleBuzzer(buzzer);
 8000f72:	4853      	ldr	r0, [pc, #332]	; (80010c0 <main+0x228>)
 8000f74:	f7ff ff3e 	bl	8000df4 <ToggleBuzzer>

			flag10ms = false;
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <main+0x220>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
		}

		if ( flag500ms == true )
 8000f7e:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <main+0x22c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d008      	beq.n	8000f9a <main+0x102>
		{
			if (blink_enable)
 8000f88:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <main+0x230>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <main+0xfc>
			{
				LedUpdateBlink();
 8000f90:	f006 fe0e 	bl	8007bb0 <LedUpdateBlink>
			}
			flag500ms = false;
 8000f94:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <main+0x22c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		}

		/* Read input and change states */
		buttonMask=KEY_MASK;
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <main+0x234>)
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	701a      	strb	r2, [r3, #0]
		buttonMask &= buttonRelease;
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <main+0x238>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b49      	ldr	r3, [pc, #292]	; (80010cc <main+0x234>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <main+0x234>)
 8000fb2:	701a      	strb	r2, [r3, #0]
		buttonRelease ^= buttonMask;
 8000fb4:	4b45      	ldr	r3, [pc, #276]	; (80010cc <main+0x234>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <main+0x238>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4053      	eors	r3, r2
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <main+0x238>)
 8000fc6:	701a      	strb	r2, [r3, #0]
		input = buttonMask | ((flagRotaryCCW*ROTARY_CCW_DIR)) | ((flagRotaryCW*ROTARY_CW_DIR)); // Read buttons
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <main+0x21c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	b25a      	sxtb	r2, r3
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <main+0x234>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b25a      	sxtb	r2, r3
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <main+0x218>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <main+0x23c>)
 8000ff4:	701a      	strb	r2, [r3, #0]
		//input = buttonsDown(KEY_MASK) | ((flagRotaryCCW*ROTARY_CCW_DIR)) | ((flagRotaryCW*ROTARY_CW_DIR));
		flagRotaryCW = false;
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <main+0x218>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
		flagRotaryCCW = false;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <main+0x21c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]

	    /* Set buzzer to beep if one button is pressed */
		if (input)
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <main+0x23c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <main+0x180>
		{
			buzzer[BUZZ_NUM] = 1;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <main+0x228>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 10;
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <main+0x228>)
 8001014:	220a      	movs	r2, #10
 8001016:	705a      	strb	r2, [r3, #1]
		}

		//if (tapChangerState == 0 || errorVar != 0)
		//{
			/* When in this state, we must call the state function */
			nextState = pStateFunc(input);
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <main+0x23c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4610      	mov	r0, r2
 8001022:	4798      	blx	r3
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <main+0x240>)
 800102a:	701a      	strb	r2, [r3, #0]
			if(errorVar != 0)
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <main+0x244>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <main+0x1a2>
				nextState = ST_ERRORS;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <main+0x240>)
 8001036:	225a      	movs	r2, #90	; 0x5a
 8001038:	701a      	strb	r2, [r3, #0]
			if (nextState != state)
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <main+0x240>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	429a      	cmp	r2, r3
 8001044:	f43f af56 	beq.w	8000ef4 <main+0x5c>
			{
				state = nextState;
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <main+0x240>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	70fb      	strb	r3, [r7, #3]

				for (uint8_t n = 0; (j=MenuState[n].state); n++)
 800104e:	2300      	movs	r3, #0
 8001050:	70bb      	strb	r3, [r7, #2]
 8001052:	e011      	b.n	8001078 <main+0x1e0>
				{
					if (j == state)
 8001054:	787a      	ldrb	r2, [r7, #1]
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	429a      	cmp	r2, r3
 800105a:	d10a      	bne.n	8001072 <main+0x1da>
					{
						pStateFunc = MenuState[n].pFunc;
 800105c:	78ba      	ldrb	r2, [r7, #2]
 800105e:	4920      	ldr	r1, [pc, #128]	; (80010e0 <main+0x248>)
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	3308      	adds	r3, #8
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	607b      	str	r3, [r7, #4]
						break;
 8001070:	e00e      	b.n	8001090 <main+0x1f8>
				for (uint8_t n = 0; (j=MenuState[n].state); n++)
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	3301      	adds	r3, #1
 8001076:	70bb      	strb	r3, [r7, #2]
 8001078:	78ba      	ldrb	r2, [r7, #2]
 800107a:	4919      	ldr	r1, [pc, #100]	; (80010e0 <main+0x248>)
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	707b      	strb	r3, [r7, #1]
 800108a:	787b      	ldrb	r3, [r7, #1]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e1      	bne.n	8001054 <main+0x1bc>
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/ROTARY_SPC;
 8001090:	e730      	b.n	8000ef4 <main+0x5c>
 8001092:	bf00      	nop
 8001094:	200004b4 	.word	0x200004b4
 8001098:	40012c00 	.word	0x40012c00
 800109c:	2000054c 	.word	0x2000054c
 80010a0:	08008161 	.word	0x08008161
 80010a4:	200005a8 	.word	0x200005a8
 80010a8:	20000004 	.word	0x20000004
 80010ac:	200005ac 	.word	0x200005ac
 80010b0:	200005a3 	.word	0x200005a3
 80010b4:	200005a4 	.word	0x200005a4
 80010b8:	20000599 	.word	0x20000599
 80010bc:	2000061c 	.word	0x2000061c
 80010c0:	200005b4 	.word	0x200005b4
 80010c4:	2000059b 	.word	0x2000059b
 80010c8:	200005f8 	.word	0x200005f8
 80010cc:	200005b0 	.word	0x200005b0
 80010d0:	200003bc 	.word	0x200003bc
 80010d4:	200005b1 	.word	0x200005b1
 80010d8:	200005b2 	.word	0x200005b2
 80010dc:	200005f2 	.word	0x200005f2
 80010e0:	20000008 	.word	0x20000008

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b096      	sub	sp, #88	; 0x58
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ee:	2228      	movs	r2, #40	; 0x28
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f009 faaf 	bl	800a656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800113a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001144:	4618      	mov	r0, r3
 8001146:	f003 f8e3 	bl	8004310 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001150:	f000 fbfa 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2102      	movs	r1, #2
 8001170:	4618      	mov	r0, r3
 8001172:	f004 f90b 	bl	800538c <HAL_RCC_ClockConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800117c:	f000 fbe4 	bl	8001948 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8001180:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001184:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4618      	mov	r0, r3
 8001192:	f004 facb 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800119c:	f000 fbd4 	bl	8001948 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3758      	adds	r7, #88	; 0x58
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_ADC1_Init+0xdc>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_ADC1_Init+0xdc>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ADC1_Init+0xdc>)
 8001208:	2201      	movs	r2, #1
 800120a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_ADC1_Init+0xdc>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_ADC1_Init+0xdc>)
 8001216:	2204      	movs	r2, #4
 8001218:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ADC1_Init+0xdc>)
 800121c:	2200      	movs	r2, #0
 800121e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_ADC1_Init+0xdc>)
 8001222:	2200      	movs	r2, #0
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <MX_ADC1_Init+0xdc>)
 8001228:	f000 ff22 	bl	8002070 <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001232:	f000 fb89 	bl	8001948 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <MX_ADC1_Init+0xdc>)
 8001242:	f001 fd2d 	bl	8002ca0 <HAL_ADCEx_MultiModeConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800124c:	f000 fb7c 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001250:	230c      	movs	r3, #12
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_ADC1_Init+0xdc>)
 800126e:	f001 fa59 	bl	8002724 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001278:	f000 fb66 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200003c0 	.word	0x200003c0

08001288 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <MX_ADC2_Init+0xb4>)
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <MX_ADC2_Init+0xb8>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <MX_ADC2_Init+0xb4>)
 80012a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <MX_ADC2_Init+0xb4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_ADC2_Init+0xb4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_ADC2_Init+0xb4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_ADC2_Init+0xb4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_ADC2_Init+0xb4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_ADC2_Init+0xb4>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_ADC2_Init+0xb4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_ADC2_Init+0xb4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_ADC2_Init+0xb4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_ADC2_Init+0xb4>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_ADC2_Init+0xb4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_ADC2_Init+0xb4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_ADC2_Init+0xb4>)
 80012fa:	f000 feb9 	bl	8002070 <HAL_ADC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001304:	f000 fb20 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001308:	2305      	movs	r3, #5
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130c:	2301      	movs	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001314:	2301      	movs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC2_Init+0xb4>)
 8001326:	f001 f9fd 	bl	8002724 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001330:	f000 fb0a 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000410 	.word	0x20000410
 8001340:	50000100 	.word	0x50000100

08001344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C1_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C1_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201826;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C1_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C1_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001380:	f002 f9a2 	bl	80036c8 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 fadd 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001392:	f002 ff25 	bl	80041e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fad4 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 80013a0:	2105      	movs	r1, #5
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C1_Init+0x74>)
 80013a4:	f002 ff67 	bl	8004276 <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 facb 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000460 	.word	0x20000460
 80013bc:	40005400 	.word	0x40005400
 80013c0:	00201826 	.word	0x00201826

080013c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2224      	movs	r2, #36	; 0x24
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f009 f93f 	bl	800a656 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_TIM1_Init+0xac>)
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <MX_TIM1_Init+0xb0>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_TIM1_Init+0xac>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_TIM1_Init+0xac>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_TIM1_Init+0xac>)
 80013f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_TIM1_Init+0xac>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_TIM1_Init+0xac>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM1_Init+0xac>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800140e:	2303      	movs	r3, #3
 8001410:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001412:	2302      	movs	r3, #2
 8001414:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800141e:	2305      	movs	r3, #5
 8001420:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800142e:	2305      	movs	r3, #5
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_TIM1_Init+0xac>)
 800143a:	f005 f82d 	bl	8006498 <HAL_TIM_Encoder_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001444:	f000 fa80 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM1_Init+0xac>)
 800145a:	f005 ff4f 	bl	80072fc <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001464:	f000 fa70 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	; 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200004b4 	.word	0x200004b4
 8001474:	40012c00 	.word	0x40012c00

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <MX_TIM2_Init+0x118>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <MX_TIM2_Init+0x118>)
 80014a6:	2247      	movs	r2, #71	; 0x47
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <MX_TIM2_Init+0x118>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <MX_TIM2_Init+0x118>)
 80014b2:	4a38      	ldr	r2, [pc, #224]	; (8001594 <MX_TIM2_Init+0x11c>)
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <MX_TIM2_Init+0x118>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <MX_TIM2_Init+0x118>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	4833      	ldr	r0, [pc, #204]	; (8001590 <MX_TIM2_Init+0x118>)
 80014c4:	f004 fe16 	bl	80060f4 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f000 fa3b 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80014d2:	482f      	ldr	r0, [pc, #188]	; (8001590 <MX_TIM2_Init+0x118>)
 80014d4:	f004 fb97 	bl	8005c06 <HAL_TIM_OC_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014de:	f000 fa33 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4827      	ldr	r0, [pc, #156]	; (8001590 <MX_TIM2_Init+0x118>)
 80014f2:	f005 ff03 	bl	80072fc <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80014fc:	f000 fa24 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 40;
 8001504:	2328      	movs	r3, #40	; 0x28
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800150c:	2304      	movs	r3, #4
 800150e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	481e      	ldr	r0, [pc, #120]	; (8001590 <MX_TIM2_Init+0x118>)
 8001518:	f005 fa6e 	bl	80069f8 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001522:	f000 fa11 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 45;
 800152a:	232d      	movs	r3, #45	; 0x2d
 800152c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4815      	ldr	r0, [pc, #84]	; (8001590 <MX_TIM2_Init+0x118>)
 800153a:	f005 f9e3 	bl	8006904 <HAL_TIM_OC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001544:	f000 fa00 	bl	8001948 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_TIM2_Init+0x118>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_TIM2_Init+0x118>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001556:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 75;
 8001558:	234b      	movs	r3, #75	; 0x4b
 800155a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	2208      	movs	r2, #8
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <MX_TIM2_Init+0x118>)
 8001564:	f005 f9ce 	bl	8006904 <HAL_TIM_OC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800156e:	f000 f9eb 	bl	8001948 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_TIM2_Init+0x118>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69da      	ldr	r2, [r3, #28]
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <MX_TIM2_Init+0x118>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0208 	orr.w	r2, r2, #8
 8001580:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <MX_TIM2_Init+0x118>)
 8001584:	f000 fb74 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000500 	.word	0x20000500
 8001594:	0001869f 	.word	0x0001869f

08001598 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_TIM7_Init+0x64>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <MX_TIM7_Init+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_TIM7_Init+0x64>)
 80015b0:	2247      	movs	r2, #71	; 0x47
 80015b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_TIM7_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_TIM7_Init+0x64>)
 80015bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_TIM7_Init+0x64>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_TIM7_Init+0x64>)
 80015ca:	f004 f9e5 	bl	8005998 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015d4:	f000 f9b8 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_TIM7_Init+0x64>)
 80015e6:	f005 fe89 	bl	80072fc <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015f0:	f000 f9aa 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000054c 	.word	0x2000054c
 8001600:	40001400 	.word	0x40001400

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a5e      	ldr	r2, [pc, #376]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <MX_GPIO_Init+0x1c4>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LcdBackLight_Pin|Lcd4_Pin|Lcd5_Pin|Lcd6_Pin
 8001692:	2200      	movs	r2, #0
 8001694:	f643 510f 	movw	r1, #15631	; 0x3d0f
 8001698:	484c      	ldr	r0, [pc, #304]	; (80017cc <MX_GPIO_Init+0x1c8>)
 800169a:	f001 ffe3 	bl	8003664 <HAL_GPIO_WritePin>
                          |Lcd7_Pin|Relay_Pin|Led1_Pin|Led2_Pin
                          |Led3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdEn_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2184      	movs	r1, #132	; 0x84
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f001 ffdd 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|PwmGenerate_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80016b0:	4847      	ldr	r0, [pc, #284]	; (80017d0 <MX_GPIO_Init+0x1cc>)
 80016b2:	f001 ffd7 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2104      	movs	r1, #4
 80016ba:	4846      	ldr	r0, [pc, #280]	; (80017d4 <MX_GPIO_Init+0x1d0>)
 80016bc:	f001 ffd2 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LcdBackLight_Pin Lcd4_Pin Lcd5_Pin Lcd6_Pin
                           Lcd7_Pin Led1_Pin Led2_Pin Led3_Pin */
  GPIO_InitStruct.Pin = LcdBackLight_Pin|Lcd4_Pin|Lcd5_Pin|Lcd6_Pin
 80016c0:	f643 430f 	movw	r3, #15375	; 0x3c0f
 80016c4:	617b      	str	r3, [r7, #20]
                          |Lcd7_Pin|Led1_Pin|Led2_Pin|Led3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	483c      	ldr	r0, [pc, #240]	; (80017cc <MX_GPIO_Init+0x1c8>)
 80016da:	f001 fe39 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : KeyStart_Pin */
  GPIO_InitStruct.Pin = KeyStart_Pin;
 80016de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KeyStart_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4836      	ldr	r0, [pc, #216]	; (80017cc <MX_GPIO_Init+0x1c8>)
 80016f4:	f001 fe2c 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LcdEn_Pin LcdRs_Pin */
  GPIO_InitStruct.Pin = LcdEn_Pin|LcdRs_Pin;
 80016f8:	2384      	movs	r3, #132	; 0x84
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001700:	2302      	movs	r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f001 fe1d 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4828      	ldr	r0, [pc, #160]	; (80017d0 <MX_GPIO_Init+0x1cc>)
 8001730:	f001 fe0e 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : ShortCircuitDetect_Pin */
  GPIO_InitStruct.Pin = ShortCircuitDetect_Pin;
 8001734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173e:	2301      	movs	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ShortCircuitDetect_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4821      	ldr	r0, [pc, #132]	; (80017d0 <MX_GPIO_Init+0x1cc>)
 800174a:	f001 fe01 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <MX_GPIO_Init+0x1c8>)
 8001768:	f001 fdf2 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : KeyRotaryMiddle_Pin KeyStandby_Pin KeyBack_Pin */
  GPIO_InitStruct.Pin = KeyRotaryMiddle_Pin|KeyStandby_Pin|KeyBack_Pin;
 800176c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001776:	2301      	movs	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f001 fde4 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led4_Pin */
  GPIO_InitStruct.Pin = Led4_Pin;
 8001788:	2304      	movs	r3, #4
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led4_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_GPIO_Init+0x1d0>)
 80017a0:	f001 fdd6 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PwmGenerate_Pin */
  GPIO_InitStruct.Pin = PwmGenerate_Pin;
 80017a4:	2308      	movs	r3, #8
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PwmGenerate_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_GPIO_Init+0x1cc>)
 80017bc:	f001 fdc8 	bl	8003350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000400 	.word	0x48000400
 80017d4:	48000c00 	.word	0x48000c00

080017d8 <HAL_TIM_OC_DelayElapsedCallback>:
    	HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_2);
    }
}*/

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d109      	bne.n	80017fe <HAL_TIM_OC_DelayElapsedCallback+0x26>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7f1b      	ldrb	r3, [r3, #28]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d105      	bne.n	80017fe <HAL_TIM_OC_DelayElapsedCallback+0x26>
    {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2108      	movs	r1, #8
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 80017f8:	f001 ff34 	bl	8003664 <HAL_GPIO_WritePin>
    }
    else if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
    {
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);
    }
}
 80017fc:	e00d      	b.n	800181a <HAL_TIM_OC_DelayElapsedCallback+0x42>
    else if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001806:	d108      	bne.n	800181a <HAL_TIM_OC_DelayElapsedCallback+0x42>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7f1b      	ldrb	r3, [r3, #28]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d104      	bne.n	800181a <HAL_TIM_OC_DelayElapsedCallback+0x42>
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2108      	movs	r1, #8
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8001816:	f001 ff25 	bl	8003664 <HAL_GPIO_WritePin>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	48000400 	.word	0x48000400

08001828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001838:	d101      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ReadVoltageADC();
 800183a:	f006 fa07 	bl	8007c4c <ReadVoltageADC>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* create differents time for delay */
  if (htim->Instance == TIM7) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d15b      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xd8>
	volatile static uint32_t count1ms = 0;
	count1ms++;
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001850:	6013      	str	r3, [r2, #0]
	flag1ms = true;
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]

	if ( (count1ms % 10) == 0 )
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800185e:	fba3 2301 	umull	r2, r3, r3, r1
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	1aca      	subs	r2, r1, r3
 800186e:	2a00      	cmp	r2, #0
 8001870:	d146      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		//if ( (count1ms % 10) == 0 )
		//{
			flag10ms = true;
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
			flcd10ms = true;
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
		//}
		if ( (count1ms % 100) == 0 )
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001884:	fba3 1302 	umull	r1, r3, r3, r2
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	2164      	movs	r1, #100	; 0x64
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			flag100ms = true;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
			flcd100ms = true;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
			f2lcd100ms = true;
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		/*if ( (count1ms % 300) == 0 )
		{
			flag300ms = true;
			flcd300ms = true;
		}*/
		if ( (count1ms % 500) == 0 )
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018ae:	fba3 1302 	umull	r1, r3, r3, r2
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			//flag500ms = true;
			flagRefreshValue500ms = true;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
			flcd500ms = true;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
			flag500ms = true;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]

		}
		if ( (count1ms % 1000) == 0 )
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018da:	fba3 1302 	umull	r1, r3, r3, r2
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d108      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0xd8>
		{
			//flagZeroDetectEr1s = true;
			flag1s = true;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
			flcd1s = true;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
			count1ms = 0;
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
			count1ms = 0;
		}*/
	}
  }
  /* USER CODE END Callback 1 */
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40001400 	.word	0x40001400
 800190c:	200005b8 	.word	0x200005b8
 8001910:	20000598 	.word	0x20000598
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	20000599 	.word	0x20000599
 800191c:	2000059d 	.word	0x2000059d
 8001920:	51eb851f 	.word	0x51eb851f
 8001924:	2000059a 	.word	0x2000059a
 8001928:	2000059e 	.word	0x2000059e
 800192c:	2000059f 	.word	0x2000059f
 8001930:	10624dd3 	.word	0x10624dd3
 8001934:	200005a2 	.word	0x200005a2
 8001938:	200005a0 	.word	0x200005a0
 800193c:	2000059b 	.word	0x2000059b
 8001940:	2000059c 	.word	0x2000059c
 8001944:	200005a1 	.word	0x200005a1

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x44>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6193      	str	r3, [r2, #24]
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x44>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x44>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x44>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019bc:	d146      	bne.n	8001a4c <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019be:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_ADC_MspInit+0x11c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <HAL_ADC_MspInit+0x11c>)
 80019c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_ADC_MspInit+0x11c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10b      	bne.n	80019e8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_ADC_MspInit+0x120>)
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4a39      	ldr	r2, [pc, #228]	; (8001abc <HAL_ADC_MspInit+0x120>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019da:	6153      	str	r3, [r2, #20]
 80019dc:	4b37      	ldr	r3, [pc, #220]	; (8001abc <HAL_ADC_MspInit+0x120>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_ADC_MspInit+0x120>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	4a33      	ldr	r2, [pc, #204]	; (8001abc <HAL_ADC_MspInit+0x120>)
 80019ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f2:	6153      	str	r3, [r2, #20]
 80019f4:	4b31      	ldr	r3, [pc, #196]	; (8001abc <HAL_ADC_MspInit+0x120>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0a:	6153      	str	r3, [r2, #20]
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Ntc1_Pin;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ntc1_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f001 fc8f 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Ntc2_Pin;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ntc2_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <HAL_ADC_MspInit+0x124>)
 8001a46:	f001 fc83 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a4a:	e031      	b.n	8001ab0 <HAL_ADC_MspInit+0x114>
  else if(hadc->Instance==ADC2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <HAL_ADC_MspInit+0x128>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12c      	bne.n	8001ab0 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_ADC_MspInit+0x11c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_ADC_MspInit+0x11c>)
 8001a5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_ADC_MspInit+0x11c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6153      	str	r3, [r2, #20]
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a8a:	6153      	str	r3, [r2, #20]
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_ADC_MspInit+0x120>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VoltageRead_Pin;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VoltageRead_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <HAL_ADC_MspInit+0x12c>)
 8001aac:	f001 fc50 	bl	8003350 <HAL_GPIO_Init>
}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200005bc 	.word	0x200005bc
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	50000100 	.word	0x50000100
 8001ac8:	48000800 	.word	0x48000800

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_I2C_MspInit+0x7c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d128      	bne.n	8001b40 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_I2C_MspInit+0x80>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_I2C_MspInit+0x80>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6153      	str	r3, [r2, #20]
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_I2C_MspInit+0x80>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HAL_I2C_MspInit+0x84>)
 8001b24:	f001 fc14 	bl	8003350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_I2C_MspInit+0x80>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_I2C_MspInit+0x80>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	61d3      	str	r3, [r2, #28]
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_I2C_MspInit+0x80>)
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d129      	bne.n	8001bca <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RotaryA_Pin|RotaryB_Pin;
 8001ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f001 fbc3 	bl	8003350 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d113      	bne.n	8001c16 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_TIM_PWM_MspInit+0x44>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_TIM_PWM_MspInit+0x44>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_PWM_MspInit+0x44>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201c      	movs	r0, #28
 8001c0c:	f001 fb69 	bl	80032e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c10:	201c      	movs	r0, #28
 8001c12:	f001 fb82 	bl	800331a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_TIM_Base_MspInit+0x44>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d113      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_TIM_Base_MspInit+0x48>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_TIM_Base_MspInit+0x48>)
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_TIM_Base_MspInit+0x48>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2037      	movs	r0, #55	; 0x37
 8001c54:	f001 fb45 	bl	80032e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001c58:	2037      	movs	r0, #55	; 0x37
 8001c5a:	f001 fb5e 	bl	800331a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40001400 	.word	0x40001400
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c90:	d11d      	bne.n	8001cce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6153      	str	r3, [r2, #20]
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cca:	f001 fb41 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f95e 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM2_IRQHandler+0x10>)
 8001d36:	f004 fce3 	bl	8006700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000500 	.word	0x20000500

08001d44 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM7_DAC2_IRQHandler+0x10>)
 8001d4a:	f004 fcd9 	bl	8006700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000054c 	.word	0x2000054c

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_kill>:

int _kill(int pid, int sig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d72:	f008 fcd3 	bl	800a71c <__errno>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2216      	movs	r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_exit>:

void _exit (int status)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe7 	bl	8001d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9a:	e7fe      	b.n	8001d9a <_exit+0x12>

08001d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
  }

  return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf1      	blt.n	8001de8 <_write+0x12>
  }
  return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_close>:

int _close(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e36:	605a      	str	r2, [r3, #4]
  return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_isatty>:

int _isatty(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea8:	f008 fc38 	bl	800a71c <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20003000 	.word	0x20003000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	200005c0 	.word	0x200005c0
 8001ee0:	20000900 	.word	0x20000900

08001ee4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SystemInit+0x20>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <SystemInit+0x20>)
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f0c:	f7ff ffea 	bl	8001ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f12:	490d      	ldr	r1, [pc, #52]	; (8001f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <LoopForever+0xe>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f28:	4c0a      	ldr	r4, [pc, #40]	; (8001f54 <LoopForever+0x16>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f36:	f008 fbf7 	bl	800a728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3a:	f7fe ffad 	bl	8000e98 <main>

08001f3e <LoopForever>:

LoopForever:
    b LoopForever
 8001f3e:	e7fe      	b.n	8001f3e <LoopForever>
ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f40:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f48:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 8001f4c:	0800e3d0 	.word	0x0800e3d0
  ldr r2, =_sbss
 8001f50:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 8001f54:	200008fc 	.word	0x200008fc

08001f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC1_2_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_Init+0x28>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_Init+0x28>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f001 f9ad 	bl	80032cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f72:	200f      	movs	r0, #15
 8001f74:	f000 f808 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff fcec 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000

08001f88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x54>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_InitTick+0x58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 f9c5 	bl	8003336 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f001 f98d 	bl	80032e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_InitTick+0x5c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000068 	.word	0x20000068
 8001fe0:	20000070 	.word	0x20000070
 8001fe4:	2000006c 	.word	0x2000006c

08001fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000070 	.word	0x20000070
 800200c:	200005c4 	.word	0x200005c4

08002010 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;  
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200005c4 	.word	0x200005c4

08002028 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000070 	.word	0x20000070

08002070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b09a      	sub	sp, #104	; 0x68
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e172      	b.n	8002376 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d176      	bne.n	8002190 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d152      	bne.n	8002150 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fc69 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d13b      	bne.n	8002150 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 ff0b 	bl	8002ef4 <ADC_Disable>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d12f      	bne.n	8002150 <HAL_ADC_Init+0xe0>
 80020f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12b      	bne.n	8002150 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002100:	f023 0302 	bic.w	r3, r3, #2
 8002104:	f043 0202 	orr.w	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800211a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800212a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800212c:	4b94      	ldr	r3, [pc, #592]	; (8002380 <HAL_ADC_Init+0x310>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a94      	ldr	r2, [pc, #592]	; (8002384 <HAL_ADC_Init+0x314>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0c9a      	lsrs	r2, r3, #18
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002142:	e002      	b.n	800214a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3b01      	subs	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f9      	bne.n	8002144 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800216c:	d110      	bne.n	8002190 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f023 0312 	bic.w	r3, r3, #18
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 80df 	bne.w	800235c <HAL_ADC_Init+0x2ec>
 800219e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80da 	bne.w	800235c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80d2 	bne.w	800235c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021c0:	f043 0202 	orr.w	r2, r3, #2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_ADC_Init+0x318>)
 80021ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d4:	d102      	bne.n	80021dc <HAL_ADC_Init+0x16c>
 80021d6:	4b6d      	ldr	r3, [pc, #436]	; (800238c <HAL_ADC_Init+0x31c>)
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	e002      	b.n	80021e2 <HAL_ADC_Init+0x172>
 80021dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d108      	bne.n	8002202 <HAL_ADC_Init+0x192>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Init+0x192>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_ADC_Init+0x194>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11c      	bne.n	8002242 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002208:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_ADC_Init+0x1ba>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_Init+0x1ba>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_ADC_Init+0x1bc>
 800222a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800222c:	2b00      	cmp	r3, #0
 800222e:	d108      	bne.n	8002242 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	431a      	orrs	r2, r3
 800223e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002240:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7e5b      	ldrb	r3, [r3, #25]
 8002246:	035b      	lsls	r3, r3, #13
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800224c:	2a01      	cmp	r2, #1
 800224e:	d002      	beq.n	8002256 <HAL_ADC_Init+0x1e6>
 8002250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002254:	e000      	b.n	8002258 <HAL_ADC_Init+0x1e8>
 8002256:	2200      	movs	r2, #0
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4313      	orrs	r3, r2
 8002266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002268:	4313      	orrs	r3, r2
 800226a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d11b      	bne.n	80022ae <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e5b      	ldrb	r3, [r3, #25]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	3b01      	subs	r3, #1
 8002284:	045a      	lsls	r2, r3, #17
 8002286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002288:	4313      	orrs	r3, r2
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	663b      	str	r3, [r7, #96]	; 0x60
 8002290:	e00d      	b.n	80022ae <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d007      	beq.n	80022c6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	4313      	orrs	r3, r2
 80022c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022c2:	4313      	orrs	r3, r2
 80022c4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d114      	bne.n	80022fe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022e2:	f023 0302 	bic.w	r3, r3, #2
 80022e6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e1b      	ldrb	r3, [r3, #24]
 80022ec:	039a      	lsls	r2, r3, #14
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4313      	orrs	r3, r2
 80022f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022fa:	4313      	orrs	r3, r2
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_ADC_Init+0x320>)
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800230e:	430b      	orrs	r3, r1
 8002310:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10c      	bne.n	8002334 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	f023 010f 	bic.w	r1, r3, #15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
 8002332:	e007      	b.n	8002344 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 020f 	bic.w	r2, r2, #15
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f023 0303 	bic.w	r3, r3, #3
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
 800235a:	e00a      	b.n	8002372 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f023 0312 	bic.w	r3, r3, #18
 8002364:	f043 0210 	orr.w	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800236c:	2301      	movs	r3, #1
 800236e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002376:	4618      	mov	r0, r3
 8002378:	3768      	adds	r7, #104	; 0x68
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000068 	.word	0x20000068
 8002384:	431bde83 	.word	0x431bde83
 8002388:	50000300 	.word	0x50000300
 800238c:	50000100 	.word	0x50000100
 8002390:	fff0c007 	.word	0xfff0c007

08002394 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 809c 	bne.w	80024e8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Start+0x2a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e097      	b.n	80024ee <HAL_ADC_Start+0x15a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fd30 	bl	8002e2c <ADC_Enable>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 8083 	bne.w	80024de <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_ADC_Start+0x164>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Start+0x6e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002400:	d115      	bne.n	800242e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d027      	beq.n	800246c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800242c:	e01e      	b.n	800246c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_Start+0xba>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2c      	ldr	r2, [pc, #176]	; (80024fc <HAL_ADC_Start+0x168>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10e      	bne.n	800246c <HAL_ADC_Start+0xd8>
 800244e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002464:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002478:	d106      	bne.n	8002488 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f023 0206 	bic.w	r2, r3, #6
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
 8002486:	e002      	b.n	800248e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	221c      	movs	r2, #28
 800249c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_ADC_Start+0x164>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_ADC_Start+0x138>
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <HAL_ADC_Start+0x164>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d00a      	beq.n	80024cc <HAL_ADC_Start+0x138>
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_ADC_Start+0x164>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_Start+0x138>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ca:	d10f      	bne.n	80024ec <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0204 	orr.w	r2, r2, #4
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	e006      	b.n	80024ec <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024e6:	e001      	b.n	80024ec <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	50000300 	.word	0x50000300
 80024fc:	50000100 	.word	0x50000100

08002500 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_Stop+0x1a>
 8002516:	2302      	movs	r3, #2
 8002518:	e023      	b.n	8002562 <HAL_ADC_Stop+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002522:	216c      	movs	r1, #108	; 0x6c
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fd4b 	bl	8002fc0 <ADC_ConversionStop>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fcdd 	bl	8002ef4 <ADC_Disable>
 800253a:	4603      	mov	r3, r0
 800253c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d102      	bne.n	8002588 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002582:	2308      	movs	r3, #8
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e02e      	b.n	80025e6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002588:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <HAL_ADC_PollForConversion+0x198>)
 800258a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b00      	cmp	r3, #0
 8002596:	d112      	bne.n	80025be <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d11d      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e09d      	b.n	80026fa <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e08b      	b.n	80026fa <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025e2:	230c      	movs	r3, #12
 80025e4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_ADC_PollForConversion+0x198>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <HAL_ADC_PollForConversion+0x90>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025fa:	d104      	bne.n	8002606 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	e003      	b.n	800260e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800260e:	f7ff fcff 	bl	8002010 <HAL_GetTick>
 8002612:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002614:	e021      	b.n	800265a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d01d      	beq.n	800265a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_ADC_PollForConversion+0xc8>
 8002624:	f7ff fcf4 	bl	8002010 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d212      	bcs.n	800265a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10b      	bne.n	800265a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f043 0204 	orr.w	r2, r3, #4
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04f      	b.n	80026fa <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0d6      	beq.n	8002616 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800267e:	2b00      	cmp	r3, #0
 8002680:	d131      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002688:	2b00      	cmp	r3, #0
 800268a:	d12c      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b08      	cmp	r3, #8
 8002698:	d125      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d112      	bne.n	80026ce <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d112      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
 80026cc:	e00b      	b.n	80026e6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	50000300 	.word	0x50000300

08002708 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b09b      	sub	sp, #108	; 0x6c
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x22>
 8002742:	2302      	movs	r3, #2
 8002744:	e2a1      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x566>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 8285 	bne.w	8002c68 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d81c      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	461a      	mov	r2, r3
 800277a:	231f      	movs	r3, #31
 800277c:	4093      	lsls	r3, r2
 800277e:	43db      	mvns	r3, r3
 8002780:	4019      	ands	r1, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
 800279e:	e063      	b.n	8002868 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d81e      	bhi.n	80027e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	3b1e      	subs	r3, #30
 80027bc:	221f      	movs	r2, #31
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4019      	ands	r1, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	3b1e      	subs	r3, #30
 80027d8:	fa00 f203 	lsl.w	r2, r0, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34
 80027e4:	e040      	b.n	8002868 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b0e      	cmp	r3, #14
 80027ec:	d81e      	bhi.n	800282c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	3b3c      	subs	r3, #60	; 0x3c
 8002802:	221f      	movs	r2, #31
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	4019      	ands	r1, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	3b3c      	subs	r3, #60	; 0x3c
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
 800282a:	e01d      	b.n	8002868 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	3b5a      	subs	r3, #90	; 0x5a
 8002840:	221f      	movs	r2, #31
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	4019      	ands	r1, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	3b5a      	subs	r3, #90	; 0x5a
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80e5 	bne.w	8002a42 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d91c      	bls.n	80028ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	2207      	movs	r2, #7
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	4019      	ands	r1, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6898      	ldr	r0, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	3b1e      	subs	r3, #30
 80028ac:	fa00 f203 	lsl.w	r2, r0, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	619a      	str	r2, [r3, #24]
 80028b8:	e019      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6959      	ldr	r1, [r3, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	2207      	movs	r2, #7
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4019      	ands	r1, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6898      	ldr	r0, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	3b01      	subs	r3, #1
 800290c:	2b03      	cmp	r3, #3
 800290e:	d84f      	bhi.n	80029b0 <HAL_ADC_ConfigChannel+0x28c>
 8002910:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <HAL_ADC_ConfigChannel+0x1f4>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	08002929 	.word	0x08002929
 800291c:	0800294b 	.word	0x0800294b
 8002920:	0800296d 	.word	0x0800296d
 8002924:	0800298f 	.word	0x0800298f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800292e:	4b9c      	ldr	r3, [pc, #624]	; (8002ba0 <HAL_ADC_ConfigChannel+0x47c>)
 8002930:	4013      	ands	r3, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	0691      	lsls	r1, r2, #26
 8002938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800293a:	430a      	orrs	r2, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002946:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002948:	e07b      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002950:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <HAL_ADC_ConfigChannel+0x47c>)
 8002952:	4013      	ands	r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	0691      	lsls	r1, r2, #26
 800295a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800295c:	430a      	orrs	r2, r1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002968:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800296a:	e06a      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002972:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <HAL_ADC_ConfigChannel+0x47c>)
 8002974:	4013      	ands	r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	0691      	lsls	r1, r2, #26
 800297c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800297e:	430a      	orrs	r2, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800298a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800298c:	e059      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002994:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_ADC_ConfigChannel+0x47c>)
 8002996:	4013      	ands	r3, r2
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	0691      	lsls	r1, r2, #26
 800299e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029a0:	430a      	orrs	r2, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029ac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029ae:	e048      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	069b      	lsls	r3, r3, #26
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029d2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	069b      	lsls	r3, r3, #26
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d107      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029f6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d107      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a1a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a3e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a40:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d108      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x33e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x33e>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x340>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 810a 	bne.w	8002c7e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d00f      	beq.n	8002a92 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43da      	mvns	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a90:	e049      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d91c      	bls.n	8002aee <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6999      	ldr	r1, [r3, #24]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b1b      	subs	r3, #27
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4019      	ands	r1, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6898      	ldr	r0, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	3b1b      	subs	r3, #27
 8002ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	e01b      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6959      	ldr	r1, [r3, #20]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	2207      	movs	r2, #7
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4019      	ands	r1, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6898      	ldr	r0, [r3, #8]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b26:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_ADC_ConfigChannel+0x480>)
 8002b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d105      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d015      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b42:	2b11      	cmp	r3, #17
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	f040 8091 	bne.w	8002c7e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 808a 	bne.w	8002c7e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b72:	d102      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x456>
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_ADC_ConfigChannel+0x484>)
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x45c>
 8002b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b7e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10e      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x488>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x488>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e006      	b.n	8002bae <HAL_ADC_ConfigChannel+0x48a>
 8002ba0:	83fff000 	.word	0x83fff000
 8002ba4:	50000300 	.word	0x50000300
 8002ba8:	50000100 	.word	0x50000100
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d150      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x4b0>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x4b0>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x4b2>
 8002bd4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d13c      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d11d      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x4fa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bea:	d118      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_ADC_ConfigChannel+0x574>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_ADC_ConfigChannel+0x578>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0c9a      	lsrs	r2, r3, #18
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c0e:	e002      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f9      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c1c:	e02e      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b11      	cmp	r3, #17
 8002c24:	d10b      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x51a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c3c:	e01e      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d11a      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c52:	e013      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c66:	e00a      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c7c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	376c      	adds	r7, #108	; 0x6c
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000068 	.word	0x20000068
 8002c9c:	431bde83 	.word	0x431bde83

08002ca0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b099      	sub	sp, #100	; 0x64
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb8:	d102      	bne.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002cba:	4b5a      	ldr	r3, [pc, #360]	; (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cc4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0a2      	b.n	8002e16 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e09b      	b.n	8002e16 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d17f      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d179      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002d02:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d040      	beq.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1e:	035b      	lsls	r3, r3, #13
 8002d20:	430b      	orrs	r3, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d15c      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002d6a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d14b      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d78:	f023 030f 	bic.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	6892      	ldr	r2, [r2, #8]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d8c:	e03c      	b.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d123      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ddc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d112      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dea:	f023 030f 	bic.w	r3, r3, #15
 8002dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002df0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df2:	e009      	b.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e06:	e000      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e08:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002e16:	4618      	mov	r0, r3
 8002e18:	3764      	adds	r7, #100	; 0x64
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	50000100 	.word	0x50000100
 8002e28:	50000300 	.word	0x50000300

08002e2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <ADC_Enable+0x2c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <ADC_Enable+0x2c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <ADC_Enable+0x2e>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d143      	bne.n	8002ee6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <ADC_Enable+0xc4>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e02f      	b.n	8002ee8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e98:	f7ff f8ba 	bl	8002010 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e9e:	e01b      	b.n	8002ed8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ea0:	f7ff f8b6 	bl	8002010 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d914      	bls.n	8002ed8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d00d      	beq.n	8002ed8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f043 0210 	orr.w	r2, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e007      	b.n	8002ee8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d1dc      	bne.n	8002ea0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	8000003f 	.word	0x8000003f

08002ef4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <ADC_Disable+0x2c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <ADC_Disable+0x2c>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <ADC_Disable+0x2e>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d047      	beq.n	8002fb6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030d 	and.w	r3, r3, #13
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10f      	bne.n	8002f54 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0202 	orr.w	r2, r2, #2
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff f860 	bl	8002010 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f52:	e029      	b.n	8002fa8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0210 	orr.w	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e023      	b.n	8002fb8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f70:	f7ff f84e 	bl	8002010 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d914      	bls.n	8002fa8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10d      	bne.n	8002fa8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0210 	orr.w	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d0dc      	beq.n	8002f70 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 809b 	beq.w	800311c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff4:	d12a      	bne.n	800304c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d126      	bne.n	800304c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003002:	2b01      	cmp	r3, #1
 8003004:	d122      	bne.n	800304c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003006:	230c      	movs	r3, #12
 8003008:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800300a:	e014      	b.n	8003036 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4a46      	ldr	r2, [pc, #280]	; (8003128 <ADC_ConversionStop+0x168>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d90d      	bls.n	8003030 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e076      	b.n	800311e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	3301      	adds	r3, #1
 8003034:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d1e3      	bne.n	800300c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b60      	cmp	r3, #96	; 0x60
 8003050:	d015      	beq.n	800307e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d10e      	bne.n	800307e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0210 	orr.w	r2, r2, #16
 800307c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d015      	beq.n	80030b0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d10e      	bne.n	80030b0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b60      	cmp	r3, #96	; 0x60
 80030b4:	d005      	beq.n	80030c2 <ADC_ConversionStop+0x102>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b6c      	cmp	r3, #108	; 0x6c
 80030ba:	d105      	bne.n	80030c8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80030bc:	230c      	movs	r3, #12
 80030be:	617b      	str	r3, [r7, #20]
        break;
 80030c0:	e005      	b.n	80030ce <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80030c2:	2308      	movs	r3, #8
 80030c4:	617b      	str	r3, [r7, #20]
        break;
 80030c6:	e002      	b.n	80030ce <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80030c8:	2304      	movs	r3, #4
 80030ca:	617b      	str	r3, [r7, #20]
        break;
 80030cc:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80030ce:	f7fe ff9f 	bl	8002010 <HAL_GetTick>
 80030d2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030d4:	e01b      	b.n	800310e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030d6:	f7fe ff9b 	bl	8002010 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b0b      	cmp	r3, #11
 80030e2:	d914      	bls.n	800310e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0210 	orr.w	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e007      	b.n	800311e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1dc      	bne.n	80030d6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	000993ff 	.word	0x000993ff

0800312c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003148:	4013      	ands	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	60d3      	str	r3, [r2, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <__NVIC_GetPriorityGrouping+0x18>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0307 	and.w	r3, r3, #7
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db0b      	blt.n	80031ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	4907      	ldr	r1, [pc, #28]	; (80031c8 <__NVIC_EnableIRQ+0x38>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2001      	movs	r0, #1
 80031b2:	fa00 f202 	lsl.w	r2, r0, r2
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000e100 	.word	0xe000e100

080031cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0a      	blt.n	80031f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	490c      	ldr	r1, [pc, #48]	; (8003218 <__NVIC_SetPriority+0x4c>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	440b      	add	r3, r1
 80031f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f4:	e00a      	b.n	800320c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4908      	ldr	r1, [pc, #32]	; (800321c <__NVIC_SetPriority+0x50>)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3b04      	subs	r3, #4
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	440b      	add	r3, r1
 800320a:	761a      	strb	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000e100 	.word	0xe000e100
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf28      	it	cs
 800323e:	2304      	movcs	r3, #4
 8003240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	2b06      	cmp	r3, #6
 8003248:	d902      	bls.n	8003250 <NVIC_EncodePriority+0x30>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3b03      	subs	r3, #3
 800324e:	e000      	b.n	8003252 <NVIC_EncodePriority+0x32>
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003268:	f04f 31ff 	mov.w	r1, #4294967295
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43d9      	mvns	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	4313      	orrs	r3, r2
         );
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003298:	d301      	bcc.n	800329e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329a:	2301      	movs	r3, #1
 800329c:	e00f      	b.n	80032be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <SysTick_Config+0x40>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a6:	210f      	movs	r1, #15
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	f7ff ff8e 	bl	80031cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <SysTick_Config+0x40>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <SysTick_Config+0x40>)
 80032b8:	2207      	movs	r2, #7
 80032ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	e000e010 	.word	0xe000e010

080032cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ff29 	bl	800312c <__NVIC_SetPriorityGrouping>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f4:	f7ff ff3e 	bl	8003174 <__NVIC_GetPriorityGrouping>
 80032f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f7ff ff8e 	bl	8003220 <NVIC_EncodePriority>
 8003304:	4602      	mov	r2, r0
 8003306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff5d 	bl	80031cc <__NVIC_SetPriority>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff31 	bl	8003190 <__NVIC_EnableIRQ>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffa2 	bl	8003288 <SysTick_Config>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335e:	e14e      	b.n	80035fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8140 	beq.w	80035f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d005      	beq.n	8003390 <HAL_GPIO_Init+0x40>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d130      	bne.n	80033f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c6:	2201      	movs	r2, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0201 	and.w	r2, r3, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d017      	beq.n	800342e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d123      	bne.n	8003482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 809a 	beq.w	80035f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c4:	4b55      	ldr	r3, [pc, #340]	; (800361c <HAL_GPIO_Init+0x2cc>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_GPIO_Init+0x2cc>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6193      	str	r3, [r2, #24]
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <HAL_GPIO_Init+0x2cc>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034dc:	4a50      	ldr	r2, [pc, #320]	; (8003620 <HAL_GPIO_Init+0x2d0>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003506:	d013      	beq.n	8003530 <HAL_GPIO_Init+0x1e0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a46      	ldr	r2, [pc, #280]	; (8003624 <HAL_GPIO_Init+0x2d4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00d      	beq.n	800352c <HAL_GPIO_Init+0x1dc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a45      	ldr	r2, [pc, #276]	; (8003628 <HAL_GPIO_Init+0x2d8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_Init+0x1d8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a44      	ldr	r2, [pc, #272]	; (800362c <HAL_GPIO_Init+0x2dc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_GPIO_Init+0x1d4>
 8003520:	2303      	movs	r3, #3
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x1e2>
 8003524:	2305      	movs	r3, #5
 8003526:	e004      	b.n	8003532 <HAL_GPIO_Init+0x1e2>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x1e2>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_Init+0x1e2>
 8003530:	2300      	movs	r3, #0
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003542:	4937      	ldr	r1, [pc, #220]	; (8003620 <HAL_GPIO_Init+0x2d0>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003574:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800359e:	4a24      	ldr	r2, [pc, #144]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035f2:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <HAL_GPIO_Init+0x2e0>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3301      	adds	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f aea9 	bne.w	8003360 <HAL_GPIO_Init+0x10>
  }
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40021000 	.word	0x40021000
 8003620:	40010000 	.word	0x40010000
 8003624:	48000400 	.word	0x48000400
 8003628:	48000800 	.word	0x48000800
 800362c:	48000c00 	.word	0x48000c00
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e001      	b.n	8003656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
 8003670:	4613      	mov	r3, r2
 8003672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003674:	787b      	ldrb	r3, [r7, #1]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003680:	e002      	b.n	8003688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	041a      	lsls	r2, r3, #16
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	43d9      	mvns	r1, r3
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	400b      	ands	r3, r1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	619a      	str	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e08d      	b.n	80037f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe f9ec 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	e006      	b.n	8003750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800374e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d108      	bne.n	800376a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	e007      	b.n	800377a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69d9      	ldr	r1, [r3, #28]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 80f9 	bne.w	8003a1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_I2C_Mem_Write+0x34>
 800382e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0ed      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2C_Mem_Write+0x4e>
 800384a:	2302      	movs	r3, #2
 800384c:	e0e6      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003856:	f7fe fbdb 	bl	8002010 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2319      	movs	r3, #25
 8003862:	2201      	movs	r2, #1
 8003864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fac3 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0d1      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2221      	movs	r2, #33	; 0x21
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a0:	88f8      	ldrh	r0, [r7, #6]
 80038a2:	893a      	ldrh	r2, [r7, #8]
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4603      	mov	r3, r0
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f9d3 	bl	8003c5c <I2C_RequestMemoryWrite>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0a9      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2bff      	cmp	r3, #255	; 0xff
 80038d0:	d90e      	bls.n	80038f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fc47 	bl	800417c <I2C_TransferConfig>
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fc36 	bl	800417c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fac6 	bl	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e07b      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d034      	beq.n	80039c8 <HAL_I2C_Mem_Write+0x1c8>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d130      	bne.n	80039c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fa3f 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e04d      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2bff      	cmp	r3, #255	; 0xff
 8003988:	d90e      	bls.n	80039a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	b2da      	uxtb	r2, r3
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	2300      	movs	r3, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fbeb 	bl	800417c <I2C_TransferConfig>
 80039a6:	e00f      	b.n	80039c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fbda 	bl	800417c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d19e      	bne.n	8003910 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 faac 	bl	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e01a      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2220      	movs	r2, #32
 80039ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_I2C_Mem_Write+0x224>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	fe00e800 	.word	0xfe00e800

08003a28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	f040 80fd 	bne.w	8003c4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x34>
 8003a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0f1      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Mem_Read+0x4e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ea      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a7e:	f7fe fac7 	bl	8002010 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2319      	movs	r3, #25
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f9af 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d5      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2222      	movs	r2, #34	; 0x22
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2240      	movs	r2, #64	; 0x40
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ac8:	88f8      	ldrh	r0, [r7, #6]
 8003aca:	893a      	ldrh	r2, [r7, #8]
 8003acc:	8979      	ldrh	r1, [r7, #10]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f913 	bl	8003d04 <I2C_RequestMemoryRead>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0ad      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2bff      	cmp	r3, #255	; 0xff
 8003af8:	d90e      	bls.n	8003b18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	4b52      	ldr	r3, [pc, #328]	; (8003c54 <HAL_I2C_Mem_Read+0x22c>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fb33 	bl	800417c <I2C_TransferConfig>
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_I2C_Mem_Read+0x22c>)
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fb22 	bl	800417c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2104      	movs	r1, #4
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f956 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07c      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d034      	beq.n	8003bf8 <HAL_I2C_Mem_Read+0x1d0>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d130      	bne.n	8003bf8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f927 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e04d      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d90e      	bls.n	8003bd8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	8979      	ldrh	r1, [r7, #10]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fad3 	bl	800417c <I2C_TransferConfig>
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	8979      	ldrh	r1, [r7, #10]
 8003bea:	2300      	movs	r3, #0
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fac2 	bl	800417c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d19a      	bne.n	8003b38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f994 	bl	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e01a      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_I2C_Mem_Read+0x230>)
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	80002400 	.word	0x80002400
 8003c58:	fe00e800 	.word	0xfe00e800

08003c5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	813b      	strh	r3, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	8979      	ldrh	r1, [r7, #10]
 8003c7c:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <I2C_RequestMemoryWrite+0xa4>)
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fa79 	bl	800417c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f909 	bl	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e02c      	b.n	8003cf8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
 8003cae:	e015      	b.n	8003cdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f8ef 	bl	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e012      	b.n	8003cf8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd2:	893b      	ldrh	r3, [r7, #8]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f884 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	80002000 	.word	0x80002000

08003d04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <I2C_RequestMemoryRead+0xa4>)
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa26 	bl	800417c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	69b9      	ldr	r1, [r7, #24]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f8b6 	bl	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e02c      	b.n	8003d9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d105      	bne.n	8003d56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4a:	893b      	ldrh	r3, [r7, #8]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
 8003d54:	e015      	b.n	8003d82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d56:	893b      	ldrh	r3, [r7, #8]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f89c 	bl	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e012      	b.n	8003d9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f831 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	80002000 	.word	0x80002000

08003dac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d103      	bne.n	8003dca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d007      	beq.n	8003de8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	619a      	str	r2, [r3, #24]
  }
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e04:	e03b      	b.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f8d6 	bl	8003fbc <I2C_IsErrorOccurred>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e041      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d02d      	beq.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe f8f5 	bl	8002010 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d122      	bne.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4013      	ands	r3, r2
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d113      	bne.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e00f      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d0b4      	beq.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb2:	e033      	b.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f87f 	bl	8003fbc <I2C_IsErrorOccurred>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e031      	b.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d025      	beq.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed0:	f7fe f89e 	bl	8002010 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d302      	bcc.n	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11a      	bne.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d013      	beq.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e007      	b.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d1c4      	bne.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f40:	e02f      	b.n	8003fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f838 	bl	8003fbc <I2C_IsErrorOccurred>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e02d      	b.n	8003fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe f85b 	bl	8002010 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11a      	bne.n	8003fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d013      	beq.n	8003fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e007      	b.n	8003fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d1c8      	bne.n	8003f42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d068      	beq.n	80040ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2210      	movs	r2, #16
 8003fee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ff0:	e049      	b.n	8004086 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d045      	beq.n	8004086 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fe f809 	bl	8002010 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <I2C_IsErrorOccurred+0x54>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d13a      	bne.n	8004086 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004022:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004032:	d121      	bne.n	8004078 <I2C_IsErrorOccurred+0xbc>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403a:	d01d      	beq.n	8004078 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b20      	cmp	r3, #32
 8004040:	d01a      	beq.n	8004078 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004050:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004052:	f7fd ffdd 	bl	8002010 <HAL_GetTick>
 8004056:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004058:	e00e      	b.n	8004078 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800405a:	f7fd ffd9 	bl	8002010 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b19      	cmp	r3, #25
 8004066:	d907      	bls.n	8004078 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004076:	e006      	b.n	8004086 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d1e9      	bne.n	800405a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d003      	beq.n	800409c <I2C_IsErrorOccurred+0xe0>
 8004094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0aa      	beq.n	8003ff2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800409c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d103      	bne.n	80040ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2220      	movs	r2, #32
 80040aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff fe3b 	bl	8003dac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <I2C_IsErrorOccurred+0x1bc>)
 8004142:	400b      	ands	r3, r1
 8004144:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800416a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800416e:	4618      	mov	r0, r3
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	fe00e800 	.word	0xfe00e800

0800417c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	4613      	mov	r3, r2
 800418c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004194:	7a7b      	ldrb	r3, [r7, #9]
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800419c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	0d5b      	lsrs	r3, r3, #21
 80041b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <I2C_TransferConfig+0x60>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	43db      	mvns	r3, r3
 80041c0:	ea02 0103 	and.w	r1, r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	03ff63ff 	.word	0x03ff63ff

080041e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d138      	bne.n	8004268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004200:	2302      	movs	r3, #2
 8004202:	e032      	b.n	800426a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6819      	ldr	r1, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b20      	cmp	r3, #32
 800428a:	d139      	bne.n	8004300 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004296:	2302      	movs	r3, #2
 8004298:	e033      	b.n	8004302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2224      	movs	r2, #36	; 0x24
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004316:	af00      	add	r7, sp, #0
 8004318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004320:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f001 b823 	b.w	800537c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 817d 	beq.w	8004646 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800434c:	4bbc      	ldr	r3, [pc, #752]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b04      	cmp	r3, #4
 8004356:	d00c      	beq.n	8004372 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004358:	4bb9      	ldr	r3, [pc, #740]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d15c      	bne.n	800441e <HAL_RCC_OscConfig+0x10e>
 8004364:	4bb6      	ldr	r3, [pc, #728]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d155      	bne.n	800441e <HAL_RCC_OscConfig+0x10e>
 8004372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004376:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004386:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_OscConfig+0x94>
 800439e:	4ba8      	ldr	r3, [pc, #672]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	e015      	b.n	80043d0 <HAL_RCC_OscConfig+0xc0>
 80043a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80043b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80043cc:	4b9c      	ldr	r3, [pc, #624]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043d4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80043d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043dc:	fa92 f2a2 	rbit	r2, r2
 80043e0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80043e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80043e8:	fab2 f282 	clz	r2, r2
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f042 0220 	orr.w	r2, r2, #32
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	f002 021f 	and.w	r2, r2, #31
 80043f8:	2101      	movs	r1, #1
 80043fa:	fa01 f202 	lsl.w	r2, r1, r2
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 811f 	beq.w	8004644 <HAL_RCC_OscConfig+0x334>
 8004406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 8116 	bne.w	8004644 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f000 bfaf 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x12e>
 8004430:	4b83      	ldr	r3, [pc, #524]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a82      	ldr	r2, [pc, #520]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e036      	b.n	80044ac <HAL_RCC_OscConfig+0x19c>
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0x158>
 800444e:	4b7c      	ldr	r3, [pc, #496]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a7b      	ldr	r2, [pc, #492]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b79      	ldr	r3, [pc, #484]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a78      	ldr	r2, [pc, #480]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e021      	b.n	80044ac <HAL_RCC_OscConfig+0x19c>
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x184>
 800447a:	4b71      	ldr	r3, [pc, #452]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a70      	ldr	r2, [pc, #448]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b6e      	ldr	r3, [pc, #440]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a6d      	ldr	r2, [pc, #436]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0x19c>
 8004494:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a69      	ldr	r2, [pc, #420]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a66      	ldr	r2, [pc, #408]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ac:	4b64      	ldr	r3, [pc, #400]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	f023 020f 	bic.w	r2, r3, #15
 80044b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	495f      	ldr	r1, [pc, #380]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d059      	beq.n	800458a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fd fd9b 	bl	8002010 <HAL_GetTick>
 80044da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fd fd96 	bl	8002010 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d902      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	f000 bf43 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
 80044f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800450a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d102      	bne.n	8004528 <HAL_RCC_OscConfig+0x218>
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e015      	b.n	8004554 <HAL_RCC_OscConfig+0x244>
 8004528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800452c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800453c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004540:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004544:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004550:	4b3b      	ldr	r3, [pc, #236]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004558:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800455c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004560:	fa92 f2a2 	rbit	r2, r2
 8004564:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004568:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800456c:	fab2 f282 	clz	r2, r2
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f042 0220 	orr.w	r2, r2, #32
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	f002 021f 	and.w	r2, r2, #31
 800457c:	2101      	movs	r1, #1
 800457e:	fa01 f202 	lsl.w	r2, r1, r2
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ab      	beq.n	80044e0 <HAL_RCC_OscConfig+0x1d0>
 8004588:	e05d      	b.n	8004646 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fd fd41 	bl	8002010 <HAL_GetTick>
 800458e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd fd3c 	bl	8002010 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b64      	cmp	r3, #100	; 0x64
 80045a2:	d902      	bls.n	80045aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	f000 bee9 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
 80045aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80045be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_RCC_OscConfig+0x2cc>
 80045d6:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	e015      	b.n	8004608 <HAL_RCC_OscConfig+0x2f8>
 80045dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <HAL_RCC_OscConfig+0x330>)
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800460c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004610:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004614:	fa92 f2a2 	rbit	r2, r2
 8004618:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800461c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004620:	fab2 f282 	clz	r2, r2
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	f042 0220 	orr.w	r2, r2, #32
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	f002 021f 	and.w	r2, r2, #31
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f202 	lsl.w	r2, r1, r2
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ab      	bne.n	8004594 <HAL_RCC_OscConfig+0x284>
 800463c:	e003      	b.n	8004646 <HAL_RCC_OscConfig+0x336>
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 817d 	beq.w	8004956 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800465c:	4ba6      	ldr	r3, [pc, #664]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004668:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d172      	bne.n	800475a <HAL_RCC_OscConfig+0x44a>
 8004674:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d16c      	bne.n	800475a <HAL_RCC_OscConfig+0x44a>
 8004680:	2302      	movs	r3, #2
 8004682:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004692:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0x3a0>
 80046aa:	4b93      	ldr	r3, [pc, #588]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	e013      	b.n	80046d8 <HAL_RCC_OscConfig+0x3c8>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046c2:	2302      	movs	r3, #2
 80046c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046d4:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2202      	movs	r2, #2
 80046da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046e2:	fa92 f2a2 	rbit	r2, r2
 80046e6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80046ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80046ee:	fab2 f282 	clz	r2, r2
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	f042 0220 	orr.w	r2, r2, #32
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f002 021f 	and.w	r2, r2, #31
 80046fe:	2101      	movs	r1, #1
 8004700:	fa01 f202 	lsl.w	r2, r1, r2
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCC_OscConfig+0x410>
 800470a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d002      	beq.n	8004720 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f000 be2e 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b75      	ldr	r3, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	21f8      	movs	r1, #248	; 0xf8
 8004736:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800473e:	fa91 f1a1 	rbit	r1, r1
 8004742:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004746:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800474a:	fab1 f181 	clz	r1, r1
 800474e:	b2c9      	uxtb	r1, r1
 8004750:	408b      	lsls	r3, r1
 8004752:	4969      	ldr	r1, [pc, #420]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004758:	e0fd      	b.n	8004956 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8088 	beq.w	800487c <HAL_RCC_OscConfig+0x56c>
 800476c:	2301      	movs	r3, #1
 800476e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800477e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800478c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	461a      	mov	r2, r3
 8004794:	2301      	movs	r3, #1
 8004796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fd fc3a 	bl	8002010 <HAL_GetTick>
 800479c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fd fc35 	bl	8002010 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	f000 bde2 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_RCC_OscConfig+0x4d8>
 80047e2:	4b45      	ldr	r3, [pc, #276]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	e013      	b.n	8004810 <HAL_RCC_OscConfig+0x500>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047fa:	2302      	movs	r3, #2
 80047fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004800:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800480c:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2202      	movs	r2, #2
 8004812:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004816:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800481a:	fa92 f2a2 	rbit	r2, r2
 800481e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004822:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004826:	fab2 f282 	clz	r2, r2
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	f042 0220 	orr.w	r2, r2, #32
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f002 021f 	and.w	r2, r2, #31
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f202 	lsl.w	r2, r1, r2
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0af      	beq.n	80047a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	21f8      	movs	r1, #248	; 0xf8
 8004858:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004860:	fa91 f1a1 	rbit	r1, r1
 8004864:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004868:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800486c:	fab1 f181 	clz	r1, r1
 8004870:	b2c9      	uxtb	r1, r1
 8004872:	408b      	lsls	r3, r1
 8004874:	4920      	ldr	r1, [pc, #128]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
 800487a:	e06c      	b.n	8004956 <HAL_RCC_OscConfig+0x646>
 800487c:	2301      	movs	r3, #1
 800487e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800488e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800489c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd fbb2 	bl	8002010 <HAL_GetTick>
 80048ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fd fbad 	bl	8002010 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d902      	bls.n	80048c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	f000 bd5a 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	fab3 f383 	clz	r3, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d104      	bne.n	80048fc <HAL_RCC_OscConfig+0x5ec>
 80048f2:	4b01      	ldr	r3, [pc, #4]	; (80048f8 <HAL_RCC_OscConfig+0x5e8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	e015      	b.n	8004924 <HAL_RCC_OscConfig+0x614>
 80048f8:	40021000 	.word	0x40021000
 80048fc:	2302      	movs	r3, #2
 80048fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800490e:	2302      	movs	r3, #2
 8004910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004914:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004920:	4bc8      	ldr	r3, [pc, #800]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2202      	movs	r2, #2
 8004926:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800492a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800492e:	fa92 f2a2 	rbit	r2, r2
 8004932:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004936:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800493a:	fab2 f282 	clz	r2, r2
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	f002 021f 	and.w	r2, r2, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ad      	bne.n	80048b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8110 	beq.w	8004b8c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d079      	beq.n	8004a70 <HAL_RCC_OscConfig+0x760>
 800497c:	2301      	movs	r3, #1
 800497e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	4bab      	ldr	r3, [pc, #684]	; (8004c48 <HAL_RCC_OscConfig+0x938>)
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	461a      	mov	r2, r3
 80049a2:	2301      	movs	r3, #1
 80049a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a6:	f7fd fb33 	bl	8002010 <HAL_GetTick>
 80049aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e00a      	b.n	80049c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fd fb2e 	bl	8002010 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d902      	bls.n	80049c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f000 bcdb 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
 80049c6:	2302      	movs	r3, #2
 80049c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049e0:	2202      	movs	r2, #2
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	fa93 f2a3 	rbit	r2, r3
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	2202      	movs	r2, #2
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	fa93 f2a3 	rbit	r2, r3
 8004a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a20:	4b88      	ldr	r3, [pc, #544]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	6019      	str	r1, [r3, #0]
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	fa93 f1a3 	rbit	r1, r3
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a46:	6019      	str	r1, [r3, #0]
  return result;
 8004a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2101      	movs	r1, #1
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0a0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x6a0>
 8004a6e:	e08d      	b.n	8004b8c <HAL_RCC_OscConfig+0x87c>
 8004a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	fa93 f2a3 	rbit	r2, r3
 8004a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a92:	601a      	str	r2, [r3, #0]
  return result;
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b68      	ldr	r3, [pc, #416]	; (8004c48 <HAL_RCC_OscConfig+0x938>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fd faad 	bl	8002010 <HAL_GetTick>
 8004ab6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fd faa8 	bl	8002010 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	f000 bc55 	b.w	800537c <HAL_RCC_OscConfig+0x106c>
 8004ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ada:	2202      	movs	r2, #2
 8004adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fa93 f2a3 	rbit	r2, r3
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004afe:	2202      	movs	r2, #2
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	fa93 f2a3 	rbit	r2, r3
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b22:	2202      	movs	r2, #2
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	fa93 f2a3 	rbit	r2, r3
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3e:	4b41      	ldr	r3, [pc, #260]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	6019      	str	r1, [r3, #0]
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f1a3 	rbit	r1, r3
 8004b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b64:	6019      	str	r1, [r3, #0]
  return result;
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	fab3 f383 	clz	r3, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2101      	movs	r1, #1
 8004b82:	fa01 f303 	lsl.w	r3, r1, r3
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d197      	bne.n	8004abc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 81a1 	beq.w	8004ee4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d116      	bne.n	8004be2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	61d3      	str	r3, [r2, #28]
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bcc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <HAL_RCC_OscConfig+0x93c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11a      	bne.n	8004c24 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bee:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <HAL_RCC_OscConfig+0x93c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <HAL_RCC_OscConfig+0x93c>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fd fa09 	bl	8002010 <HAL_GetTick>
 8004bfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	e009      	b.n	8004c18 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fd fa04 	bl	8002010 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	; 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e3b1      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <HAL_RCC_OscConfig+0x93c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ef      	beq.n	8004c04 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10d      	bne.n	8004c50 <HAL_RCC_OscConfig+0x940>
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4a02      	ldr	r2, [pc, #8]	; (8004c44 <HAL_RCC_OscConfig+0x934>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6213      	str	r3, [r2, #32]
 8004c40:	e03c      	b.n	8004cbc <HAL_RCC_OscConfig+0x9ac>
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
 8004c48:	10908120 	.word	0x10908120
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x96a>
 8004c60:	4bc1      	ldr	r3, [pc, #772]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4ac0      	ldr	r2, [pc, #768]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	4bbe      	ldr	r3, [pc, #760]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4abd      	ldr	r2, [pc, #756]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c72:	f023 0304 	bic.w	r3, r3, #4
 8004c76:	6213      	str	r3, [r2, #32]
 8004c78:	e020      	b.n	8004cbc <HAL_RCC_OscConfig+0x9ac>
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x994>
 8004c8a:	4bb7      	ldr	r3, [pc, #732]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4ab6      	ldr	r2, [pc, #728]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	6213      	str	r3, [r2, #32]
 8004c96:	4bb4      	ldr	r3, [pc, #720]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	4ab3      	ldr	r2, [pc, #716]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6213      	str	r3, [r2, #32]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0x9ac>
 8004ca4:	4bb0      	ldr	r3, [pc, #704]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4aaf      	ldr	r2, [pc, #700]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	4bad      	ldr	r3, [pc, #692]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	4aac      	ldr	r2, [pc, #688]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004cb6:	f023 0304 	bic.w	r3, r3, #4
 8004cba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8081 	beq.w	8004dd0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cce:	f7fd f99f 	bl	8002010 <HAL_GetTick>
 8004cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	e00b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd8:	f7fd f99a 	bl	8002010 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e345      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
 8004cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	fa93 f2a3 	rbit	r2, r3
 8004d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	fa93 f2a3 	rbit	r2, r3
 8004d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d36:	601a      	str	r2, [r3, #0]
  return result;
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d102      	bne.n	8004d5c <HAL_RCC_OscConfig+0xa4c>
 8004d56:	4b84      	ldr	r3, [pc, #528]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	e013      	b.n	8004d84 <HAL_RCC_OscConfig+0xa74>
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d64:	2202      	movs	r2, #2
 8004d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	fa93 f2a3 	rbit	r2, r3
 8004d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	4b79      	ldr	r3, [pc, #484]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d88:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	6011      	str	r1, [r2, #0]
 8004d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	fa92 f1a2 	rbit	r1, r2
 8004d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004da2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004da6:	6011      	str	r1, [r2, #0]
  return result;
 8004da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	fab2 f282 	clz	r2, r2
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	f002 021f 	and.w	r2, r2, #31
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d084      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x9c8>
 8004dce:	e07f      	b.n	8004ed0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd0:	f7fd f91e 	bl	8002010 <HAL_GetTick>
 8004dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd8:	e00b      	b.n	8004df2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fd f919 	bl	8002010 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e2c4      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
 8004df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e1e:	2202      	movs	r2, #2
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	fa93 f2a3 	rbit	r2, r3
 8004e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e38:	601a      	str	r2, [r3, #0]
  return result;
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e44:	fab3 f383 	clz	r3, r3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f043 0302 	orr.w	r3, r3, #2
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_OscConfig+0xb4e>
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	e013      	b.n	8004e86 <HAL_RCC_OscConfig+0xb76>
 8004e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e66:	2202      	movs	r2, #2
 8004e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fa93 f2a3 	rbit	r2, r3
 8004e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e8a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e8e:	2102      	movs	r1, #2
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e96:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	fa92 f1a2 	rbit	r1, r2
 8004ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ea4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ea8:	6011      	str	r1, [r2, #0]
  return result;
 8004eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	fab2 f282 	clz	r2, r2
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	f002 021f 	and.w	r2, r2, #31
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d184      	bne.n	8004dda <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ed0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed8:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	4a22      	ldr	r2, [pc, #136]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8242 	beq.w	800537a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <HAL_RCC_OscConfig+0xc58>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	f000 8213 	beq.w	800532a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	f040 8162 	bne.w	80051da <HAL_RCC_OscConfig+0xeca>
 8004f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f28:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	fa93 f2a3 	rbit	r2, r3
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f3a:	601a      	str	r2, [r3, #0]
  return result;
 8004f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f40:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fd f858 	bl	8002010 <HAL_GetTick>
 8004f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f64:	e00c      	b.n	8004f80 <HAL_RCC_OscConfig+0xc70>
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd f850 	bl	8002010 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1fd      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	fa93 f2a3 	rbit	r2, r3
 8004f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004fa4:	601a      	str	r2, [r3, #0]
  return result;
 8004fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004faa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004fae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb0:	fab3 f383 	clz	r3, r3
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d102      	bne.n	8004fca <HAL_RCC_OscConfig+0xcba>
 8004fc4:	4bb0      	ldr	r3, [pc, #704]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	e027      	b.n	800501a <HAL_RCC_OscConfig+0xd0a>
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	fa93 f2a3 	rbit	r2, r3
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005002:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	fa93 f2a3 	rbit	r2, r3
 800500c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005010:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	4b9c      	ldr	r3, [pc, #624]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800501e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005022:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005026:	6011      	str	r1, [r2, #0]
 8005028:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800502c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	fa92 f1a2 	rbit	r1, r2
 8005036:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800503a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800503e:	6011      	str	r1, [r2, #0]
  return result;
 8005040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005044:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	fab2 f282 	clz	r2, r2
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	f042 0220 	orr.w	r2, r2, #32
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	f002 021f 	and.w	r2, r2, #31
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f202 	lsl.w	r2, r1, r2
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d182      	bne.n	8004f6c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005066:	4b88      	ldr	r3, [pc, #544]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800507a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	430b      	orrs	r3, r1
 8005088:	497f      	ldr	r1, [pc, #508]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005096:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800509a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	fa93 f2a3 	rbit	r2, r3
 80050aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050b2:	601a      	str	r2, [r3, #0]
  return result;
 80050b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	461a      	mov	r2, r3
 80050d0:	2301      	movs	r3, #1
 80050d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fc ff9c 	bl	8002010 <HAL_GetTick>
 80050d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050dc:	e009      	b.n	80050f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050de:	f7fc ff97 	bl	8002010 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e144      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005104:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	fa93 f2a3 	rbit	r2, r3
 800510e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005112:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005116:	601a      	str	r2, [r3, #0]
  return result;
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005120:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_RCC_OscConfig+0xe2c>
 8005136:	4b54      	ldr	r3, [pc, #336]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	e027      	b.n	800518c <HAL_RCC_OscConfig+0xe7c>
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fa93 f2a3 	rbit	r2, r3
 8005158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005166:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800516a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	fa93 f2a3 	rbit	r2, r3
 800517e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005182:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	4b3f      	ldr	r3, [pc, #252]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005190:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005194:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005198:	6011      	str	r1, [r2, #0]
 800519a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800519e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	fa92 f1a2 	rbit	r1, r2
 80051a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051b0:	6011      	str	r1, [r2, #0]
  return result;
 80051b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	fab2 f282 	clz	r2, r2
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	f042 0220 	orr.w	r2, r2, #32
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	f002 021f 	and.w	r2, r2, #31
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f202 	lsl.w	r2, r1, r2
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d082      	beq.n	80050de <HAL_RCC_OscConfig+0xdce>
 80051d8:	e0cf      	b.n	800537a <HAL_RCC_OscConfig+0x106a>
 80051da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	fa93 f2a3 	rbit	r2, r3
 80051f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051fe:	601a      	str	r2, [r3, #0]
  return result;
 8005200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005204:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005208:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	fab3 f383 	clz	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005214:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fc fef6 	bl	8002010 <HAL_GetTick>
 8005224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005228:	e009      	b.n	800523e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fc fef1 	bl	8002010 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e09e      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
 800523e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005242:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800524a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005250:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	fa93 f2a3 	rbit	r2, r3
 800525a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005262:	601a      	str	r2, [r3, #0]
  return result;
 8005264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005268:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800526c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d104      	bne.n	800528c <HAL_RCC_OscConfig+0xf7c>
 8005282:	4b01      	ldr	r3, [pc, #4]	; (8005288 <HAL_RCC_OscConfig+0xf78>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	e029      	b.n	80052dc <HAL_RCC_OscConfig+0xfcc>
 8005288:	40021000 	.word	0x40021000
 800528c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005290:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	fa93 f2a3 	rbit	r2, r3
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	fa93 f2a3 	rbit	r2, r3
 80052ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCC_OscConfig+0x1078>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052e0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	fa92 f1a2 	rbit	r1, r2
 80052f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005300:	6011      	str	r1, [r2, #0]
  return result;
 8005302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005306:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	fab2 f282 	clz	r2, r2
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	f002 021f 	and.w	r2, r2, #31
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f202 	lsl.w	r2, r1, r2
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d180      	bne.n	800522a <HAL_RCC_OscConfig+0xf1a>
 8005328:	e027      	b.n	800537a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800532a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e01e      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_OscConfig+0x1078>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005346:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800534a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800534e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	429a      	cmp	r2, r3
 800535c:	d10b      	bne.n	8005376 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800535e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005372:	429a      	cmp	r2, r3
 8005374:	d001      	beq.n	800537a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000

0800538c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b09e      	sub	sp, #120	; 0x78
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e162      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b90      	ldr	r3, [pc, #576]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d910      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b8d      	ldr	r3, [pc, #564]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 0207 	bic.w	r2, r3, #7
 80053ba:	498b      	ldr	r1, [pc, #556]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b89      	ldr	r3, [pc, #548]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e14a      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e0:	4b82      	ldr	r3, [pc, #520]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	497f      	ldr	r1, [pc, #508]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80dc 	beq.w	80055b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d13c      	bne.n	8005482 <HAL_RCC_ClockConfig+0xf6>
 8005408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800540c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005410:	fa93 f3a3 	rbit	r3, r3
 8005414:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <HAL_RCC_ClockConfig+0xa6>
 800542c:	4b6f      	ldr	r3, [pc, #444]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	e00f      	b.n	8005452 <HAL_RCC_ClockConfig+0xc6>
 8005432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005436:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800543a:	fa93 f3a3 	rbit	r3, r3
 800543e:	667b      	str	r3, [r7, #100]	; 0x64
 8005440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005444:	663b      	str	r3, [r7, #96]	; 0x60
 8005446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005448:	fa93 f3a3 	rbit	r3, r3
 800544c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800544e:	4b67      	ldr	r3, [pc, #412]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005456:	65ba      	str	r2, [r7, #88]	; 0x58
 8005458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800545a:	fa92 f2a2 	rbit	r2, r2
 800545e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005462:	fab2 f282 	clz	r2, r2
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	f042 0220 	orr.w	r2, r2, #32
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	f002 021f 	and.w	r2, r2, #31
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f202 	lsl.w	r2, r1, r2
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d17b      	bne.n	8005576 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e0f3      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d13c      	bne.n	8005504 <HAL_RCC_ClockConfig+0x178>
 800548a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800548e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d102      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x128>
 80054ae:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	e00f      	b.n	80054d4 <HAL_RCC_ClockConfig+0x148>
 80054b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054bc:	fa93 f3a3 	rbit	r3, r3
 80054c0:	647b      	str	r3, [r7, #68]	; 0x44
 80054c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
 80054c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d0:	4b46      	ldr	r3, [pc, #280]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80054da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054dc:	fa92 f2a2 	rbit	r2, r2
 80054e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	fab2 f282 	clz	r2, r2
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f042 0220 	orr.w	r2, r2, #32
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	f002 021f 	and.w	r2, r2, #31
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f202 	lsl.w	r2, r1, r2
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d13a      	bne.n	8005576 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0b2      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
 8005504:	2302      	movs	r3, #2
 8005506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005512:	fab3 f383 	clz	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d102      	bne.n	800552c <HAL_RCC_ClockConfig+0x1a0>
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	e00d      	b.n	8005548 <HAL_RCC_ClockConfig+0x1bc>
 800552c:	2302      	movs	r3, #2
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
 8005538:	2302      	movs	r3, #2
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	fa93 f3a3 	rbit	r3, r3
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2202      	movs	r2, #2
 800554a:	61ba      	str	r2, [r7, #24]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	fa92 f2a2 	rbit	r2, r2
 8005552:	617a      	str	r2, [r7, #20]
  return result;
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	fab2 f282 	clz	r2, r2
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	f042 0220 	orr.w	r2, r2, #32
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	f002 021f 	and.w	r2, r2, #31
 8005566:	2101      	movs	r1, #1
 8005568:	fa01 f202 	lsl.w	r2, r1, r2
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e079      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005576:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	491a      	ldr	r1, [pc, #104]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005588:	f7fc fd42 	bl	8002010 <HAL_GetTick>
 800558c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005590:	f7fc fd3e 	bl	8002010 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e061      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_RCC_ClockConfig+0x260>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 020c 	and.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1eb      	bne.n	8005590 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d214      	bcs.n	80055f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	4906      	ldr	r1, [pc, #24]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <HAL_RCC_ClockConfig+0x25c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e040      	b.n	800566a <HAL_RCC_ClockConfig+0x2de>
 80055e8:	40022000 	.word	0x40022000
 80055ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_RCC_ClockConfig+0x2e8>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	491a      	ldr	r1, [pc, #104]	; (8005674 <HAL_RCC_ClockConfig+0x2e8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800561a:	4b16      	ldr	r3, [pc, #88]	; (8005674 <HAL_RCC_ClockConfig+0x2e8>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4912      	ldr	r1, [pc, #72]	; (8005674 <HAL_RCC_ClockConfig+0x2e8>)
 800562a:	4313      	orrs	r3, r2
 800562c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800562e:	f000 f829 	bl	8005684 <HAL_RCC_GetSysClockFreq>
 8005632:	4601      	mov	r1, r0
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_RCC_ClockConfig+0x2e8>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563c:	22f0      	movs	r2, #240	; 0xf0
 800563e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	fa92 f2a2 	rbit	r2, r2
 8005646:	60fa      	str	r2, [r7, #12]
  return result;
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	fab2 f282 	clz	r2, r2
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	40d3      	lsrs	r3, r2
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <HAL_RCC_ClockConfig+0x2ec>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	fa21 f303 	lsr.w	r3, r1, r3
 800565a:	4a08      	ldr	r2, [pc, #32]	; (800567c <HAL_RCC_ClockConfig+0x2f0>)
 800565c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCC_ClockConfig+0x2f4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc fc90 	bl	8001f88 <HAL_InitTick>
  
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3778      	adds	r7, #120	; 0x78
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000
 8005678:	0800de7c 	.word	0x0800de7c
 800567c:	20000068 	.word	0x20000068
 8005680:	2000006c 	.word	0x2000006c

08005684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800569e:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <HAL_RCC_GetSysClockFreq+0x94>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d002      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x30>
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d003      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x36>
 80056b2:	e026      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056b4:	4b19      	ldr	r3, [pc, #100]	; (800571c <HAL_RCC_GetSysClockFreq+0x98>)
 80056b6:	613b      	str	r3, [r7, #16]
      break;
 80056b8:	e026      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	0c9b      	lsrs	r3, r3, #18
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056c4:	5cd3      	ldrb	r3, [r2, r3]
 80056c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <HAL_RCC_GetSysClockFreq+0x94>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056d2:	5cd3      	ldrb	r3, [r2, r3]
 80056d4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056e0:	4a0e      	ldr	r2, [pc, #56]	; (800571c <HAL_RCC_GetSysClockFreq+0x98>)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e004      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	613b      	str	r3, [r7, #16]
      break;
 8005700:	e002      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <HAL_RCC_GetSysClockFreq+0x98>)
 8005704:	613b      	str	r3, [r7, #16]
      break;
 8005706:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005708:	693b      	ldr	r3, [r7, #16]
}
 800570a:	4618      	mov	r0, r3
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000
 800571c:	007a1200 	.word	0x007a1200
 8005720:	0800de8c 	.word	0x0800de8c
 8005724:	0800de9c 	.word	0x0800de9c
 8005728:	003d0900 	.word	0x003d0900

0800572c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b092      	sub	sp, #72	; 0x48
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80cd 	beq.w	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005750:	4b8e      	ldr	r3, [pc, #568]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10e      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575c:	4b8b      	ldr	r3, [pc, #556]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	4a8a      	ldr	r2, [pc, #552]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	61d3      	str	r3, [r2, #28]
 8005768:	4b88      	ldr	r3, [pc, #544]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577a:	4b85      	ldr	r3, [pc, #532]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d118      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005786:	4b82      	ldr	r3, [pc, #520]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a81      	ldr	r2, [pc, #516]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005792:	f7fc fc3d 	bl	8002010 <HAL_GetTick>
 8005796:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579a:	f7fc fc39 	bl	8002010 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b64      	cmp	r3, #100	; 0x64
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e0ea      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	4b78      	ldr	r3, [pc, #480]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b8:	4b74      	ldr	r3, [pc, #464]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d07d      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d076      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057d6:	4b6d      	ldr	r3, [pc, #436]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f0:	fab3 f383 	clz	r3, r3
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	461a      	mov	r2, r3
 8005800:	2301      	movs	r3, #1
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	fa93 f3a3 	rbit	r3, r3
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005814:	fab3 f383 	clz	r3, r3
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	4b5d      	ldr	r3, [pc, #372]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005828:	4a58      	ldr	r2, [pc, #352]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d045      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fc fbea 	bl	8002010 <HAL_GetTick>
 800583c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583e:	e00a      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005840:	f7fc fbe6 	bl	8002010 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	; 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e095      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005856:	2302      	movs	r3, #2
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	fa93 f3a3 	rbit	r3, r3
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	2302      	movs	r3, #2
 8005864:	623b      	str	r3, [r7, #32]
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	61fb      	str	r3, [r7, #28]
  return result;
 800586e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d102      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005884:	4b41      	ldr	r3, [pc, #260]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	e007      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800588a:	2302      	movs	r3, #2
 800588c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	fa93 f3a3 	rbit	r3, r3
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	4b3d      	ldr	r3, [pc, #244]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2202      	movs	r2, #2
 800589c:	613a      	str	r2, [r7, #16]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	fa92 f2a2 	rbit	r2, r2
 80058a4:	60fa      	str	r2, [r7, #12]
  return result;
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	fab2 f282 	clz	r2, r2
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	f002 021f 	and.w	r2, r2, #31
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f202 	lsl.w	r2, r1, r2
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0bd      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058c4:	4b31      	ldr	r3, [pc, #196]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	492e      	ldr	r1, [pc, #184]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d105      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058de:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058f6:	4b25      	ldr	r3, [pc, #148]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	4922      	ldr	r1, [pc, #136]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005904:	4313      	orrs	r3, r2
 8005906:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	f023 0210 	bic.w	r2, r3, #16
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	491a      	ldr	r1, [pc, #104]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005922:	4313      	orrs	r3, r2
 8005924:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005932:	4b16      	ldr	r3, [pc, #88]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	4913      	ldr	r1, [pc, #76]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005940:	4313      	orrs	r3, r2
 8005942:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005950:	4b0e      	ldr	r3, [pc, #56]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	490b      	ldr	r1, [pc, #44]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	4313      	orrs	r3, r2
 8005960:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	4904      	ldr	r1, [pc, #16]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597c:	4313      	orrs	r3, r2
 800597e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3748      	adds	r7, #72	; 0x48
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	40007000 	.word	0x40007000
 8005994:	10908100 	.word	0x10908100

08005998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e049      	b.n	8005a3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc f930 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f001 f940 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e038      	b.n	8005ad2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <HAL_TIM_Base_Start+0x98>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_TIM_Base_Start+0x48>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIM_Base_Start+0x48>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <HAL_TIM_Base_Start+0x9c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIM_Base_Start+0x48>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <HAL_TIM_Base_Start+0xa0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d115      	bne.n	8005abc <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <HAL_TIM_Base_Start+0xa4>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d015      	beq.n	8005ace <HAL_TIM_Base_Start+0x86>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d011      	beq.n	8005ace <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	e008      	b.n	8005ace <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e000      	b.n	8005ad0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	00010007 	.word	0x00010007

08005af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d001      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e040      	b.n	8005b8a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <HAL_TIM_Base_Start_IT+0xa8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_TIM_Base_Start_IT+0x58>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d009      	beq.n	8005b48 <HAL_TIM_Base_Start_IT+0x58>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <HAL_TIM_Base_Start_IT+0xac>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_TIM_Base_Start_IT+0x58>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d115      	bne.n	8005b74 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b06      	cmp	r3, #6
 8005b58:	d015      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x96>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d011      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e000      	b.n	8005b88 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	00010007 	.word	0x00010007

08005ba8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10f      	bne.n	8005bf0 <HAL_TIM_Base_Stop_IT+0x48>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a1a      	ldr	r2, [r3, #32]
 8005bd6:	f240 4344 	movw	r3, #1092	; 0x444
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_Base_Stop_IT+0x48>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e049      	b.n	8005cac <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f841 	bl	8005cb4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f001 f809 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <HAL_TIM_OC_Start_IT+0x28>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	e03c      	b.n	8005d6a <HAL_TIM_OC_Start_IT+0xa2>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d109      	bne.n	8005d0a <HAL_TIM_OC_Start_IT+0x42>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	bf14      	ite	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	2300      	moveq	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e02f      	b.n	8005d6a <HAL_TIM_OC_Start_IT+0xa2>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d109      	bne.n	8005d24 <HAL_TIM_OC_Start_IT+0x5c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e022      	b.n	8005d6a <HAL_TIM_OC_Start_IT+0xa2>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d109      	bne.n	8005d3e <HAL_TIM_OC_Start_IT+0x76>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	bf14      	ite	ne
 8005d36:	2301      	movne	r3, #1
 8005d38:	2300      	moveq	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	e015      	b.n	8005d6a <HAL_TIM_OC_Start_IT+0xa2>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d109      	bne.n	8005d58 <HAL_TIM_OC_Start_IT+0x90>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	e008      	b.n	8005d6a <HAL_TIM_OC_Start_IT+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e0d3      	b.n	8005f1a <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <HAL_TIM_OC_Start_IT+0xba>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d80:	e023      	b.n	8005dca <HAL_TIM_OC_Start_IT+0x102>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d104      	bne.n	8005d92 <HAL_TIM_OC_Start_IT+0xca>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d90:	e01b      	b.n	8005dca <HAL_TIM_OC_Start_IT+0x102>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d104      	bne.n	8005da2 <HAL_TIM_OC_Start_IT+0xda>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da0:	e013      	b.n	8005dca <HAL_TIM_OC_Start_IT+0x102>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_OC_Start_IT+0xea>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db0:	e00b      	b.n	8005dca <HAL_TIM_OC_Start_IT+0x102>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_OC_Start_IT+0xfa>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc0:	e003      	b.n	8005dca <HAL_TIM_OC_Start_IT+0x102>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d841      	bhi.n	8005e54 <HAL_TIM_OC_Start_IT+0x18c>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_TIM_OC_Start_IT+0x110>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e55 	.word	0x08005e55
 8005de0:	08005e55 	.word	0x08005e55
 8005de4:	08005e55 	.word	0x08005e55
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005e55 	.word	0x08005e55
 8005df4:	08005e55 	.word	0x08005e55
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08005e43 	.word	0x08005e43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0202 	orr.w	r2, r2, #2
 8005e1a:	60da      	str	r2, [r3, #12]
      break;
 8005e1c:	e01d      	b.n	8005e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0204 	orr.w	r2, r2, #4
 8005e2c:	60da      	str	r2, [r3, #12]
      break;
 8005e2e:	e014      	b.n	8005e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	60da      	str	r2, [r3, #12]
      break;
 8005e40:	e00b      	b.n	8005e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0210 	orr.w	r2, r2, #16
 8005e50:	60da      	str	r2, [r3, #12]
      break;
 8005e52:	e002      	b.n	8005e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
      break;
 8005e58:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d15b      	bne.n	8005f18 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fa21 	bl	80072b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a2c      	ldr	r2, [pc, #176]	; (8005f24 <HAL_TIM_OC_Start_IT+0x25c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIM_OC_Start_IT+0x1ce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <HAL_TIM_OC_Start_IT+0x260>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_TIM_OC_Start_IT+0x1ce>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <HAL_TIM_OC_Start_IT+0x264>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIM_OC_Start_IT+0x1ce>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <HAL_TIM_OC_Start_IT+0x268>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_OC_Start_IT+0x1d2>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_TIM_OC_Start_IT+0x1d4>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_TIM_OC_Start_IT+0x25c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_TIM_OC_Start_IT+0x210>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d009      	beq.n	8005ed8 <HAL_TIM_OC_Start_IT+0x210>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <HAL_TIM_OC_Start_IT+0x26c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <HAL_TIM_OC_Start_IT+0x210>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <HAL_TIM_OC_Start_IT+0x260>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d115      	bne.n	8005f04 <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <HAL_TIM_OC_Start_IT+0x270>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d015      	beq.n	8005f16 <HAL_TIM_OC_Start_IT+0x24e>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef0:	d011      	beq.n	8005f16 <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0201 	orr.w	r2, r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	e008      	b.n	8005f16 <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f16:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800
 8005f34:	40000400 	.word	0x40000400
 8005f38:	00010007 	.word	0x00010007

08005f3c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d841      	bhi.n	8005fd4 <HAL_TIM_OC_Stop_IT+0x98>
 8005f50:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <HAL_TIM_OC_Stop_IT+0x1c>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005fd5 	.word	0x08005fd5
 8005f60:	08005fd5 	.word	0x08005fd5
 8005f64:	08005fd5 	.word	0x08005fd5
 8005f68:	08005f9f 	.word	0x08005f9f
 8005f6c:	08005fd5 	.word	0x08005fd5
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08005fd5 	.word	0x08005fd5
 8005f78:	08005fb1 	.word	0x08005fb1
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005fc3 	.word	0x08005fc3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0202 	bic.w	r2, r2, #2
 8005f9a:	60da      	str	r2, [r3, #12]
      break;
 8005f9c:	e01d      	b.n	8005fda <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0204 	bic.w	r2, r2, #4
 8005fac:	60da      	str	r2, [r3, #12]
      break;
 8005fae:	e014      	b.n	8005fda <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0208 	bic.w	r2, r2, #8
 8005fbe:	60da      	str	r2, [r3, #12]
      break;
 8005fc0:	e00b      	b.n	8005fda <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0210 	bic.w	r2, r2, #16
 8005fd0:	60da      	str	r2, [r3, #12]
      break;
 8005fd2:	e002      	b.n	8005fda <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d17b      	bne.n	80060d8 <HAL_TIM_OC_Stop_IT+0x19c>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f961 	bl	80072b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3c      	ldr	r2, [pc, #240]	; (80060e4 <HAL_TIM_OC_Stop_IT+0x1a8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_TIM_OC_Stop_IT+0xda>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3a      	ldr	r2, [pc, #232]	; (80060e8 <HAL_TIM_OC_Stop_IT+0x1ac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_TIM_OC_Stop_IT+0xda>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a39      	ldr	r2, [pc, #228]	; (80060ec <HAL_TIM_OC_Stop_IT+0x1b0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_TIM_OC_Stop_IT+0xda>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a37      	ldr	r2, [pc, #220]	; (80060f0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <HAL_TIM_OC_Stop_IT+0xde>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <HAL_TIM_OC_Stop_IT+0xe0>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d017      	beq.n	8006050 <HAL_TIM_OC_Stop_IT+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6a1a      	ldr	r2, [r3, #32]
 8006026:	f241 1311 	movw	r3, #4369	; 0x1111
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10f      	bne.n	8006050 <HAL_TIM_OC_Stop_IT+0x114>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a1a      	ldr	r2, [r3, #32]
 8006036:	f240 4344 	movw	r3, #1092	; 0x444
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <HAL_TIM_OC_Stop_IT+0x114>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	f241 1311 	movw	r3, #4369	; 0x1111
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <HAL_TIM_OC_Stop_IT+0x144>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	f240 4344 	movw	r3, #1092	; 0x444
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d107      	bne.n	8006080 <HAL_TIM_OC_Stop_IT+0x144>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <HAL_TIM_OC_Stop_IT+0x154>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800608e:	e023      	b.n	80060d8 <HAL_TIM_OC_Stop_IT+0x19c>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b04      	cmp	r3, #4
 8006094:	d104      	bne.n	80060a0 <HAL_TIM_OC_Stop_IT+0x164>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609e:	e01b      	b.n	80060d8 <HAL_TIM_OC_Stop_IT+0x19c>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d104      	bne.n	80060b0 <HAL_TIM_OC_Stop_IT+0x174>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ae:	e013      	b.n	80060d8 <HAL_TIM_OC_Stop_IT+0x19c>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d104      	bne.n	80060c0 <HAL_TIM_OC_Stop_IT+0x184>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060be:	e00b      	b.n	80060d8 <HAL_TIM_OC_Stop_IT+0x19c>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d104      	bne.n	80060d0 <HAL_TIM_OC_Stop_IT+0x194>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ce:	e003      	b.n	80060d8 <HAL_TIM_OC_Stop_IT+0x19c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800

080060f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e049      	b.n	800619a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fb fd5e 	bl	8001bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f000 fd92 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start+0x24>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e03c      	b.n	8006242 <HAL_TIM_PWM_Start+0x9e>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d109      	bne.n	80061e2 <HAL_TIM_PWM_Start+0x3e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	bf14      	ite	ne
 80061da:	2301      	movne	r3, #1
 80061dc:	2300      	moveq	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	e02f      	b.n	8006242 <HAL_TIM_PWM_Start+0x9e>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d109      	bne.n	80061fc <HAL_TIM_PWM_Start+0x58>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	bf14      	ite	ne
 80061f4:	2301      	movne	r3, #1
 80061f6:	2300      	moveq	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e022      	b.n	8006242 <HAL_TIM_PWM_Start+0x9e>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d109      	bne.n	8006216 <HAL_TIM_PWM_Start+0x72>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	bf14      	ite	ne
 800620e:	2301      	movne	r3, #1
 8006210:	2300      	moveq	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e015      	b.n	8006242 <HAL_TIM_PWM_Start+0x9e>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b10      	cmp	r3, #16
 800621a:	d109      	bne.n	8006230 <HAL_TIM_PWM_Start+0x8c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	e008      	b.n	8006242 <HAL_TIM_PWM_Start+0x9e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e088      	b.n	800635c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start+0xb6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006258:	e023      	b.n	80062a2 <HAL_TIM_PWM_Start+0xfe>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b04      	cmp	r3, #4
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0xc6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006268:	e01b      	b.n	80062a2 <HAL_TIM_PWM_Start+0xfe>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0xd6>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006278:	e013      	b.n	80062a2 <HAL_TIM_PWM_Start+0xfe>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Start+0xe6>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006288:	e00b      	b.n	80062a2 <HAL_TIM_PWM_Start+0xfe>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d104      	bne.n	800629a <HAL_TIM_PWM_Start+0xf6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006298:	e003      	b.n	80062a2 <HAL_TIM_PWM_Start+0xfe>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 f800 	bl	80072b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <HAL_TIM_PWM_Start+0x1c0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00e      	beq.n	80062d8 <HAL_TIM_PWM_Start+0x134>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <HAL_TIM_PWM_Start+0x1c4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d009      	beq.n	80062d8 <HAL_TIM_PWM_Start+0x134>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <HAL_TIM_PWM_Start+0x1c8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <HAL_TIM_PWM_Start+0x134>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a27      	ldr	r2, [pc, #156]	; (8006370 <HAL_TIM_PWM_Start+0x1cc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_PWM_Start+0x138>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <HAL_TIM_PWM_Start+0x13a>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <HAL_TIM_PWM_Start+0x1c0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIM_PWM_Start+0x176>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006304:	d009      	beq.n	800631a <HAL_TIM_PWM_Start+0x176>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <HAL_TIM_PWM_Start+0x1d0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIM_PWM_Start+0x176>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a14      	ldr	r2, [pc, #80]	; (8006368 <HAL_TIM_PWM_Start+0x1c4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d115      	bne.n	8006346 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <HAL_TIM_PWM_Start+0x1d4>)
 8006322:	4013      	ands	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b06      	cmp	r3, #6
 800632a:	d015      	beq.n	8006358 <HAL_TIM_PWM_Start+0x1b4>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006332:	d011      	beq.n	8006358 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006344:	e008      	b.n	8006358 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	e000      	b.n	800635a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800
 8006374:	40000400 	.word	0x40000400
 8006378:	00010007 	.word	0x00010007

0800637c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 ff8e 	bl	80072b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a3b      	ldr	r2, [pc, #236]	; (8006488 <HAL_TIM_PWM_Stop+0x10c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <HAL_TIM_PWM_Stop+0x40>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a3a      	ldr	r2, [pc, #232]	; (800648c <HAL_TIM_PWM_Stop+0x110>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <HAL_TIM_PWM_Stop+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a38      	ldr	r2, [pc, #224]	; (8006490 <HAL_TIM_PWM_Stop+0x114>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_TIM_PWM_Stop+0x40>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a37      	ldr	r2, [pc, #220]	; (8006494 <HAL_TIM_PWM_Stop+0x118>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_TIM_PWM_Stop+0x44>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <HAL_TIM_PWM_Stop+0x46>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d017      	beq.n	80063f6 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10f      	bne.n	80063f6 <HAL_TIM_PWM_Stop+0x7a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a1a      	ldr	r2, [r3, #32]
 80063dc:	f240 4344 	movw	r3, #1092	; 0x444
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <HAL_TIM_PWM_Stop+0x7a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10f      	bne.n	8006426 <HAL_TIM_PWM_Stop+0xaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	f240 4344 	movw	r3, #1092	; 0x444
 8006410:	4013      	ands	r3, r2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <HAL_TIM_PWM_Stop+0xaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Stop+0xba>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006434:	e023      	b.n	800647e <HAL_TIM_PWM_Stop+0x102>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Stop+0xca>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006444:	e01b      	b.n	800647e <HAL_TIM_PWM_Stop+0x102>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Stop+0xda>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006454:	e013      	b.n	800647e <HAL_TIM_PWM_Stop+0x102>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d104      	bne.n	8006466 <HAL_TIM_PWM_Stop+0xea>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006464:	e00b      	b.n	800647e <HAL_TIM_PWM_Stop+0x102>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b10      	cmp	r3, #16
 800646a:	d104      	bne.n	8006476 <HAL_TIM_PWM_Stop+0xfa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006474:	e003      	b.n	800647e <HAL_TIM_PWM_Stop+0x102>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e097      	b.n	80065dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fb fb47 	bl	8001b54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80064dc:	f023 0307 	bic.w	r3, r3, #7
 80064e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f000 fbb5 	bl	8006c5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	4313      	orrs	r3, r2
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006538:	f023 030c 	bic.w	r3, r3, #12
 800653c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	4313      	orrs	r3, r2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	011a      	lsls	r2, r3, #4
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	031b      	lsls	r3, r3, #12
 8006568:	4313      	orrs	r3, r2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800657e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	4313      	orrs	r3, r2
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006604:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800660c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d110      	bne.n	8006636 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d102      	bne.n	8006620 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800661a:	7b7b      	ldrb	r3, [r7, #13]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d001      	beq.n	8006624 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e069      	b.n	80066f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006634:	e031      	b.n	800669a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b04      	cmp	r3, #4
 800663a:	d110      	bne.n	800665e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d102      	bne.n	8006648 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006642:	7b3b      	ldrb	r3, [r7, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e055      	b.n	80066f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800665c:	e01d      	b.n	800669a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d108      	bne.n	8006676 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d105      	bne.n	8006676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800666a:	7b7b      	ldrb	r3, [r7, #13]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d102      	bne.n	8006676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006670:	7b3b      	ldrb	r3, [r7, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e03e      	b.n	80066f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_TIM_Encoder_Start+0xc4>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d008      	beq.n	80066b8 <HAL_TIM_Encoder_Start+0xd4>
 80066a6:	e00f      	b.n	80066c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2201      	movs	r2, #1
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fdfd 	bl	80072b0 <TIM_CCxChannelCmd>
      break;
 80066b6:	e016      	b.n	80066e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	2104      	movs	r1, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fdf5 	bl	80072b0 <TIM_CCxChannelCmd>
      break;
 80066c6:	e00e      	b.n	80066e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2201      	movs	r2, #1
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fded 	bl	80072b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2201      	movs	r2, #1
 80066dc:	2104      	movs	r1, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fde6 	bl	80072b0 <TIM_CCxChannelCmd>
      break;
 80066e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d020      	beq.n	8006764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01b      	beq.n	8006764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0202 	mvn.w	r2, #2
 8006734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa68 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fb f840 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa6b 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d020      	beq.n	80067b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0204 	mvn.w	r2, #4
 8006780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2202      	movs	r2, #2
 8006786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa42 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 800679c:	e005      	b.n	80067aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fb f81a 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fa45 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d020      	beq.n	80067fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01b      	beq.n	80067fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0208 	mvn.w	r2, #8
 80067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2204      	movs	r2, #4
 80067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa1c 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa fff4 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa1f 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	d020      	beq.n	8006848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01b      	beq.n	8006848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0210 	mvn.w	r2, #16
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2208      	movs	r2, #8
 800681e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9f6 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fa ffce 	bl	80017d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9f9 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00c      	beq.n	800686c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0201 	mvn.w	r2, #1
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fa ffde 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fdae 	bl	80073ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fda6 	bl	8007400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9b8 	bl	8006c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0220 	mvn.w	r2, #32
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fd6e 	bl	80073d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_TIM_OC_ConfigChannel+0x1e>
 800691e:	2302      	movs	r3, #2
 8006920:	e066      	b.n	80069f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b14      	cmp	r3, #20
 800692e:	d857      	bhi.n	80069e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	0800698d 	.word	0x0800698d
 800693c:	080069e1 	.word	0x080069e1
 8006940:	080069e1 	.word	0x080069e1
 8006944:	080069e1 	.word	0x080069e1
 8006948:	0800699b 	.word	0x0800699b
 800694c:	080069e1 	.word	0x080069e1
 8006950:	080069e1 	.word	0x080069e1
 8006954:	080069e1 	.word	0x080069e1
 8006958:	080069a9 	.word	0x080069a9
 800695c:	080069e1 	.word	0x080069e1
 8006960:	080069e1 	.word	0x080069e1
 8006964:	080069e1 	.word	0x080069e1
 8006968:	080069b7 	.word	0x080069b7
 800696c:	080069e1 	.word	0x080069e1
 8006970:	080069e1 	.word	0x080069e1
 8006974:	080069e1 	.word	0x080069e1
 8006978:	080069c5 	.word	0x080069c5
 800697c:	080069e1 	.word	0x080069e1
 8006980:	080069e1 	.word	0x080069e1
 8006984:	080069e1 	.word	0x080069e1
 8006988:	080069d3 	.word	0x080069d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f9e6 	bl	8006d64 <TIM_OC1_SetConfig>
      break;
 8006998:	e025      	b.n	80069e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fa65 	bl	8006e70 <TIM_OC2_SetConfig>
      break;
 80069a6:	e01e      	b.n	80069e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fade 	bl	8006f70 <TIM_OC3_SetConfig>
      break;
 80069b4:	e017      	b.n	80069e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fb55 	bl	800706c <TIM_OC4_SetConfig>
      break;
 80069c2:	e010      	b.n	80069e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fbb2 	bl	8007134 <TIM_OC5_SetConfig>
      break;
 80069d0:	e009      	b.n	80069e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fc09 	bl	80071f0 <TIM_OC6_SetConfig>
      break;
 80069de:	e002      	b.n	80069e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	75fb      	strb	r3, [r7, #23]
      break;
 80069e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0ff      	b.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b14      	cmp	r3, #20
 8006a22:	f200 80f0 	bhi.w	8006c06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a81 	.word	0x08006a81
 8006a30:	08006c07 	.word	0x08006c07
 8006a34:	08006c07 	.word	0x08006c07
 8006a38:	08006c07 	.word	0x08006c07
 8006a3c:	08006ac1 	.word	0x08006ac1
 8006a40:	08006c07 	.word	0x08006c07
 8006a44:	08006c07 	.word	0x08006c07
 8006a48:	08006c07 	.word	0x08006c07
 8006a4c:	08006b03 	.word	0x08006b03
 8006a50:	08006c07 	.word	0x08006c07
 8006a54:	08006c07 	.word	0x08006c07
 8006a58:	08006c07 	.word	0x08006c07
 8006a5c:	08006b43 	.word	0x08006b43
 8006a60:	08006c07 	.word	0x08006c07
 8006a64:	08006c07 	.word	0x08006c07
 8006a68:	08006c07 	.word	0x08006c07
 8006a6c:	08006b85 	.word	0x08006b85
 8006a70:	08006c07 	.word	0x08006c07
 8006a74:	08006c07 	.word	0x08006c07
 8006a78:	08006c07 	.word	0x08006c07
 8006a7c:	08006bc5 	.word	0x08006bc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 f96c 	bl	8006d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0208 	orr.w	r2, r2, #8
 8006a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0204 	bic.w	r2, r2, #4
 8006aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6999      	ldr	r1, [r3, #24]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	619a      	str	r2, [r3, #24]
      break;
 8006abe:	e0a5      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 f9d2 	bl	8006e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6999      	ldr	r1, [r3, #24]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	021a      	lsls	r2, r3, #8
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	619a      	str	r2, [r3, #24]
      break;
 8006b00:	e084      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fa31 	bl	8006f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0208 	orr.w	r2, r2, #8
 8006b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0204 	bic.w	r2, r2, #4
 8006b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69d9      	ldr	r1, [r3, #28]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	61da      	str	r2, [r3, #28]
      break;
 8006b40:	e064      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fa8f 	bl	800706c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69d9      	ldr	r1, [r3, #28]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	021a      	lsls	r2, r3, #8
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	61da      	str	r2, [r3, #28]
      break;
 8006b82:	e043      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fad2 	bl	8007134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0208 	orr.w	r2, r2, #8
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0204 	bic.w	r2, r2, #4
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bc2:	e023      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fb10 	bl	80071f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	021a      	lsls	r2, r3, #8
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c04:	e002      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop

08006c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <TIM_Base_SetConfig+0xf4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x28>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x28>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a35      	ldr	r2, [pc, #212]	; (8006d54 <TIM_Base_SetConfig+0xf8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <TIM_Base_SetConfig+0xf4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <TIM_Base_SetConfig+0x6a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca4:	d00f      	beq.n	8006cc6 <TIM_Base_SetConfig+0x6a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a2a      	ldr	r2, [pc, #168]	; (8006d54 <TIM_Base_SetConfig+0xf8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <TIM_Base_SetConfig+0x6a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a29      	ldr	r2, [pc, #164]	; (8006d58 <TIM_Base_SetConfig+0xfc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <TIM_Base_SetConfig+0x6a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a28      	ldr	r2, [pc, #160]	; (8006d5c <TIM_Base_SetConfig+0x100>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_Base_SetConfig+0x6a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	; (8006d60 <TIM_Base_SetConfig+0x104>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d108      	bne.n	8006cd8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a14      	ldr	r2, [pc, #80]	; (8006d50 <TIM_Base_SetConfig+0xf4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00b      	beq.n	8006d1c <TIM_Base_SetConfig+0xc0>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_Base_SetConfig+0xfc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_Base_SetConfig+0xc0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <TIM_Base_SetConfig+0x100>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_Base_SetConfig+0xc0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <TIM_Base_SetConfig+0x104>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d103      	bne.n	8006d24 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d105      	bne.n	8006d42 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f023 0201 	bic.w	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	611a      	str	r2, [r3, #16]
  }
}
 8006d42:	bf00      	nop
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40014400 	.word	0x40014400
 8006d60:	40014800 	.word	0x40014800

08006d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f023 0201 	bic.w	r2, r3, #1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f023 0302 	bic.w	r3, r3, #2
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <TIM_OC1_SetConfig+0xfc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00b      	beq.n	8006ddc <TIM_OC1_SetConfig+0x78>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <TIM_OC1_SetConfig+0x100>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <TIM_OC1_SetConfig+0x78>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <TIM_OC1_SetConfig+0x104>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_OC1_SetConfig+0x78>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <TIM_OC1_SetConfig+0x108>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d10c      	bne.n	8006df6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0308 	bic.w	r3, r3, #8
 8006de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a19      	ldr	r2, [pc, #100]	; (8006e60 <TIM_OC1_SetConfig+0xfc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00b      	beq.n	8006e16 <TIM_OC1_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <TIM_OC1_SetConfig+0x100>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_OC1_SetConfig+0xb2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <TIM_OC1_SetConfig+0x104>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_OC1_SetConfig+0xb2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a16      	ldr	r2, [pc, #88]	; (8006e6c <TIM_OC1_SetConfig+0x108>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d111      	bne.n	8006e3a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40014400 	.word	0x40014400
 8006e6c:	40014800 	.word	0x40014800

08006e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f023 0210 	bic.w	r2, r3, #16
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f023 0320 	bic.w	r3, r3, #32
 8006ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a24      	ldr	r2, [pc, #144]	; (8006f60 <TIM_OC2_SetConfig+0xf0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10d      	bne.n	8006ef0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <TIM_OC2_SetConfig+0xf0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <TIM_OC2_SetConfig+0xa0>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <TIM_OC2_SetConfig+0xf4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <TIM_OC2_SetConfig+0xa0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <TIM_OC2_SetConfig+0xf8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_OC2_SetConfig+0xa0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <TIM_OC2_SetConfig+0xfc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d113      	bne.n	8006f38 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a23      	ldr	r2, [pc, #140]	; (800705c <TIM_OC3_SetConfig+0xec>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d10d      	bne.n	8006fee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a1a      	ldr	r2, [pc, #104]	; (800705c <TIM_OC3_SetConfig+0xec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00b      	beq.n	800700e <TIM_OC3_SetConfig+0x9e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a19      	ldr	r2, [pc, #100]	; (8007060 <TIM_OC3_SetConfig+0xf0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d007      	beq.n	800700e <TIM_OC3_SetConfig+0x9e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a18      	ldr	r2, [pc, #96]	; (8007064 <TIM_OC3_SetConfig+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_OC3_SetConfig+0x9e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a17      	ldr	r2, [pc, #92]	; (8007068 <TIM_OC3_SetConfig+0xf8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d113      	bne.n	8007036 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800701c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800

0800706c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	031b      	lsls	r3, r3, #12
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a16      	ldr	r2, [pc, #88]	; (8007124 <TIM_OC4_SetConfig+0xb8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00b      	beq.n	80070e8 <TIM_OC4_SetConfig+0x7c>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <TIM_OC4_SetConfig+0xbc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_OC4_SetConfig+0x7c>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a14      	ldr	r2, [pc, #80]	; (800712c <TIM_OC4_SetConfig+0xc0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC4_SetConfig+0x7c>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a13      	ldr	r2, [pc, #76]	; (8007130 <TIM_OC4_SetConfig+0xc4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d109      	bne.n	80070fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	019b      	lsls	r3, r3, #6
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40014000 	.word	0x40014000
 800712c:	40014400 	.word	0x40014400
 8007130:	40014800 	.word	0x40014800

08007134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <TIM_OC5_SetConfig+0xac>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00b      	beq.n	80071a6 <TIM_OC5_SetConfig+0x72>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a14      	ldr	r2, [pc, #80]	; (80071e4 <TIM_OC5_SetConfig+0xb0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d007      	beq.n	80071a6 <TIM_OC5_SetConfig+0x72>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <TIM_OC5_SetConfig+0xb4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_OC5_SetConfig+0x72>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a12      	ldr	r2, [pc, #72]	; (80071ec <TIM_OC5_SetConfig+0xb8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d109      	bne.n	80071ba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	621a      	str	r2, [r3, #32]
}
 80071d4:	bf00      	nop
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	051b      	lsls	r3, r3, #20
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <TIM_OC6_SetConfig+0xb0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00b      	beq.n	8007264 <TIM_OC6_SetConfig+0x74>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <TIM_OC6_SetConfig+0xb4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <TIM_OC6_SetConfig+0x74>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <TIM_OC6_SetConfig+0xb8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC6_SetConfig+0x74>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a13      	ldr	r2, [pc, #76]	; (80072ac <TIM_OC6_SetConfig+0xbc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d109      	bne.n	8007278 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	029b      	lsls	r3, r3, #10
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800

080072b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2201      	movs	r2, #1
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	431a      	orrs	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
	...

080072fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007310:	2302      	movs	r3, #2
 8007312:	e054      	b.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a24      	ldr	r2, [pc, #144]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007344:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737c:	d009      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a11      	ldr	r2, [pc, #68]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d10c      	bne.n	80073ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40014000 	.word	0x40014000

080073d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <CalculateBytesToWrite>:
 * @param  size The size of the data to write in bytes.
 * @param  offset The starting byte offset within the page.
 * @return The number of bytes to write.
 */
uint16_t CalculateBytesToWrite(uint16_t size, uint16_t offset)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	460a      	mov	r2, r1
 800741e:	80fb      	strh	r3, [r7, #6]
 8007420:	4613      	mov	r3, r2
 8007422:	80bb      	strh	r3, [r7, #4]
    return ((size + offset) < EEPROM_PAGE_SIZE) ? size : (EEPROM_PAGE_SIZE - offset);
 8007424:	88fa      	ldrh	r2, [r7, #6]
 8007426:	88bb      	ldrh	r3, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	2b3f      	cmp	r3, #63	; 0x3f
 800742c:	dd04      	ble.n	8007438 <CalculateBytesToWrite+0x24>
 800742e:	88bb      	ldrh	r3, [r7, #4]
 8007430:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007434:	b29b      	uxth	r3, r3
 8007436:	e000      	b.n	800743a <CalculateBytesToWrite+0x26>
 8007438:	88fb      	ldrh	r3, [r7, #6]
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <WriteToEeprom>:
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data Pointer to the data buffer to be written.
 * @param  size The size of the data in bytes.
 */
void WriteToEeprom(uint16_t page, uint16_t offset, uint8_t* data, uint16_t size)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08e      	sub	sp, #56	; 0x38
 800744c:	af04      	add	r7, sp, #16
 800744e:	60ba      	str	r2, [r7, #8]
 8007450:	461a      	mov	r2, r3
 8007452:	4603      	mov	r3, r0
 8007454:	81fb      	strh	r3, [r7, #14]
 8007456:	460b      	mov	r3, r1
 8007458:	81bb      	strh	r3, [r7, #12]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
    // Calculate the bit position where page addressing starts
    int pageAddressShift = log(EEPROM_PAGE_SIZE) / log(2);
 800745e:	2306      	movs	r3, #6
 8007460:	61fb      	str	r3, [r7, #28]

    // Calculate the start and end page numbers
    uint16_t startPage = page;
 8007462:	89fb      	ldrh	r3, [r7, #14]
 8007464:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t endPage = page + ((size + offset) / EEPROM_PAGE_SIZE);
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	89bb      	ldrh	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	da00      	bge.n	8007472 <WriteToEeprom+0x2a>
 8007470:	333f      	adds	r3, #63	; 0x3f
 8007472:	119b      	asrs	r3, r3, #6
 8007474:	b29a      	uxth	r2, r3
 8007476:	89fb      	ldrh	r3, [r7, #14]
 8007478:	4413      	add	r3, r2
 800747a:	837b      	strh	r3, [r7, #26]

    // Number of pages to be written
    uint16_t numberOfPages = (endPage - startPage) + 1;
 800747c:	8b7a      	ldrh	r2, [r7, #26]
 800747e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	3301      	adds	r3, #1
 8007486:	833b      	strh	r3, [r7, #24]
    uint16_t dataPosition = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Write data to EEPROM
    for (int i = 0; i < numberOfPages; i++)
 800748c:	2300      	movs	r3, #0
 800748e:	623b      	str	r3, [r7, #32]
 8007490:	e034      	b.n	80074fc <WriteToEeprom+0xb4>
    {
        // Calculate memory address by combining page and byte addresses
        uint16_t memoryAddress = (startPage << pageAddressShift) | offset;
 8007492:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	b21a      	sxth	r2, r3
 800749c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	82fb      	strh	r3, [r7, #22]
        uint16_t bytesRemaining = CalculateBytesToWrite(size, offset);
 80074a6:	89ba      	ldrh	r2, [r7, #12]
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ffb1 	bl	8007414 <CalculateBytesToWrite>
 80074b2:	4603      	mov	r3, r0
 80074b4:	82bb      	strh	r3, [r7, #20]

        HAL_I2C_Mem_Write(EEPROM_I2C_HANDLE, EEPROM_I2C_ADDRESS, memoryAddress, 2, &data[dataPosition], bytesRemaining, 1000);
 80074b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	4413      	add	r3, r2
 80074bc:	8af9      	ldrh	r1, [r7, #22]
 80074be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074c2:	9202      	str	r2, [sp, #8]
 80074c4:	8aba      	ldrh	r2, [r7, #20]
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2302      	movs	r3, #2
 80074cc:	460a      	mov	r2, r1
 80074ce:	21a0      	movs	r1, #160	; 0xa0
 80074d0:	480f      	ldr	r0, [pc, #60]	; (8007510 <WriteToEeprom+0xc8>)
 80074d2:	f7fc f995 	bl	8003800 <HAL_I2C_Mem_Write>

        // Move to the next page
        startPage++;
 80074d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074d8:	3301      	adds	r3, #1
 80074da:	84fb      	strh	r3, [r7, #38]	; 0x26
        offset = 0;  // Reset offset for new page
 80074dc:	2300      	movs	r3, #0
 80074de:	81bb      	strh	r3, [r7, #12]
        size -= bytesRemaining;  // Reduce size by bytes written
 80074e0:	88fa      	ldrh	r2, [r7, #6]
 80074e2:	8abb      	ldrh	r3, [r7, #20]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	80fb      	strh	r3, [r7, #6]
        dataPosition += bytesRemaining;  // Update data buffer position
 80074e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074ea:	8abb      	ldrh	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	84bb      	strh	r3, [r7, #36]	; 0x24

        HAL_Delay(5);  // Write cycle delay (5 ms)
 80074f0:	2005      	movs	r0, #5
 80074f2:	f7fa fd99 	bl	8002028 <HAL_Delay>
    for (int i = 0; i < numberOfPages; i++)
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3301      	adds	r3, #1
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	8b3b      	ldrh	r3, [r7, #24]
 80074fe:	6a3a      	ldr	r2, [r7, #32]
 8007500:	429a      	cmp	r2, r3
 8007502:	dbc6      	blt.n	8007492 <WriteToEeprom+0x4a>
    }
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	3728      	adds	r7, #40	; 0x28
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000460 	.word	0x20000460

08007514 <FloatToByteArray>:
 * @brief  Converts a floating-point number to a byte array.
 * @param  byteArray Pointer to the array where the converted bytes will be stored.
 * @param  floatValue The floating-point value to convert.
 */
void FloatToByteArray(uint8_t* byteArray, float floatValue)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	ed87 0a00 	vstr	s0, [r7]
    union {
        float floatVal;
        uint8_t bytes[4];
    } floatUnion;

    floatUnion.floatVal = floatValue;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++)
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
 8007528:	e00b      	b.n	8007542 <FloatToByteArray+0x2e>
    {
        byteArray[i] = floatUnion.bytes[i];
 800752a:	7bfa      	ldrb	r2, [r7, #15]
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	440b      	add	r3, r1
 8007532:	3210      	adds	r2, #16
 8007534:	443a      	add	r2, r7
 8007536:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800753a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	3301      	adds	r3, #1
 8007540:	73fb      	strb	r3, [r7, #15]
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b03      	cmp	r3, #3
 8007546:	d9f0      	bls.n	800752a <FloatToByteArray+0x16>
    }
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <ByteArrayToFloat>:
 * @brief  Converts a byte array to a floating-point number.
 * @param  byteArray Pointer to the byte array containing the data.
 * @return The floating-point number obtained from the byte array.
 */
float ByteArrayToFloat(uint8_t* byteArray)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
    union {
        float floatVal;
        uint8_t bytes[4];
    } floatUnion;

    for (uint8_t i = 0; i < 4; i++)
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	e00b      	b.n	800757c <ByteArrayToFloat+0x26>
    {
        floatUnion.bytes[i] = byteArray[i];
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	441a      	add	r2, r3
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	3310      	adds	r3, #16
 8007570:	443b      	add	r3, r7
 8007572:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = 0; i < 4; i++)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	3301      	adds	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d9f0      	bls.n	8007564 <ByteArrayToFloat+0xe>
    }

    return floatUnion.floatVal;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	ee07 3a90 	vmov	s15, r3
}
 8007588:	eeb0 0a67 	vmov.f32	s0, s15
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <WriteFloatToEeprom>:
 * @param  page The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data The floating-point number to be written.
 */
void WriteFloatToEeprom(uint16_t page, uint16_t offset, float data)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	460a      	mov	r2, r1
 80075a2:	ed87 0a00 	vstr	s0, [r7]
 80075a6:	80fb      	strh	r3, [r7, #6]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80bb      	strh	r3, [r7, #4]
    FloatToByteArray(tempByteArray, data);
 80075ac:	ed97 0a00 	vldr	s0, [r7]
 80075b0:	4806      	ldr	r0, [pc, #24]	; (80075cc <WriteFloatToEeprom+0x34>)
 80075b2:	f7ff ffaf 	bl	8007514 <FloatToByteArray>
    WriteToEeprom(page, offset, tempByteArray, 4);
 80075b6:	88b9      	ldrh	r1, [r7, #4]
 80075b8:	88f8      	ldrh	r0, [r7, #6]
 80075ba:	2304      	movs	r3, #4
 80075bc:	4a03      	ldr	r2, [pc, #12]	; (80075cc <WriteFloatToEeprom+0x34>)
 80075be:	f7ff ff43 	bl	8007448 <WriteToEeprom>
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200005c8 	.word	0x200005c8

080075d0 <ReadFloatFromEeprom>:
 * @param  page The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @return The floating-point number read from the EEPROM.
 */
float ReadFloatFromEeprom(uint16_t page, uint16_t offset)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	460a      	mov	r2, r1
 80075da:	80fb      	strh	r3, [r7, #6]
 80075dc:	4613      	mov	r3, r2
 80075de:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[4];
    ReadFromEeprom(page, offset, buffer, 4);
 80075e0:	f107 020c 	add.w	r2, r7, #12
 80075e4:	88b9      	ldrh	r1, [r7, #4]
 80075e6:	88f8      	ldrh	r0, [r7, #6]
 80075e8:	2304      	movs	r3, #4
 80075ea:	f000 f80d 	bl	8007608 <ReadFromEeprom>
    return ByteArrayToFloat(buffer);
 80075ee:	f107 030c 	add.w	r3, r7, #12
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff ffaf 	bl	8007556 <ByteArrayToFloat>
 80075f8:	eef0 7a40 	vmov.f32	s15, s0
}
 80075fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <ReadFromEeprom>:
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data Pointer to the buffer where the read data will be stored.
 * @param  size The number of bytes to read.
 */
void ReadFromEeprom(uint16_t page, uint16_t offset, uint8_t* data, uint16_t size)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08e      	sub	sp, #56	; 0x38
 800760c:	af04      	add	r7, sp, #16
 800760e:	60ba      	str	r2, [r7, #8]
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	81fb      	strh	r3, [r7, #14]
 8007616:	460b      	mov	r3, r1
 8007618:	81bb      	strh	r3, [r7, #12]
 800761a:	4613      	mov	r3, r2
 800761c:	80fb      	strh	r3, [r7, #6]
    int pageAddressShift = log(EEPROM_PAGE_SIZE) / log(2);
 800761e:	2306      	movs	r3, #6
 8007620:	61fb      	str	r3, [r7, #28]

    uint16_t startPage = page;
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t endPage = page + ((size + offset) / EEPROM_PAGE_SIZE);
 8007626:	88fa      	ldrh	r2, [r7, #6]
 8007628:	89bb      	ldrh	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	da00      	bge.n	8007632 <ReadFromEeprom+0x2a>
 8007630:	333f      	adds	r3, #63	; 0x3f
 8007632:	119b      	asrs	r3, r3, #6
 8007634:	b29a      	uxth	r2, r3
 8007636:	89fb      	ldrh	r3, [r7, #14]
 8007638:	4413      	add	r3, r2
 800763a:	837b      	strh	r3, [r7, #26]

    uint16_t numberOfPages = (endPage - startPage) + 1;
 800763c:	8b7a      	ldrh	r2, [r7, #26]
 800763e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	b29b      	uxth	r3, r3
 8007644:	3301      	adds	r3, #1
 8007646:	833b      	strh	r3, [r7, #24]
    uint16_t dataPosition = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (int i = 0; i < numberOfPages; i++)
 800764c:	2300      	movs	r3, #0
 800764e:	623b      	str	r3, [r7, #32]
 8007650:	e031      	b.n	80076b6 <ReadFromEeprom+0xae>
    {
        uint16_t memoryAddress = (startPage << pageAddressShift) | offset;
 8007652:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	fa02 f303 	lsl.w	r3, r2, r3
 800765a:	b21a      	sxth	r2, r3
 800765c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	b21b      	sxth	r3, r3
 8007664:	82fb      	strh	r3, [r7, #22]
        uint16_t bytesRemaining = CalculateBytesToWrite(size, offset);
 8007666:	89ba      	ldrh	r2, [r7, #12]
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fed1 	bl	8007414 <CalculateBytesToWrite>
 8007672:	4603      	mov	r3, r0
 8007674:	82bb      	strh	r3, [r7, #20]
	    HAL_I2C_Mem_Read(EEPROM_I2C_HANDLE, EEPROM_I2C_ADDRESS, memoryAddress, 2, &data[dataPosition], bytesRemaining, 1000);
 8007676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4413      	add	r3, r2
 800767c:	8af9      	ldrh	r1, [r7, #22]
 800767e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007682:	9202      	str	r2, [sp, #8]
 8007684:	8aba      	ldrh	r2, [r7, #20]
 8007686:	9201      	str	r2, [sp, #4]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	2302      	movs	r3, #2
 800768c:	460a      	mov	r2, r1
 800768e:	21a0      	movs	r1, #160	; 0xa0
 8007690:	480d      	ldr	r0, [pc, #52]	; (80076c8 <ReadFromEeprom+0xc0>)
 8007692:	f7fc f9c9 	bl	8003a28 <HAL_I2C_Mem_Read>

        startPage++;
 8007696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007698:	3301      	adds	r3, #1
 800769a:	84fb      	strh	r3, [r7, #38]	; 0x26
        offset = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	81bb      	strh	r3, [r7, #12]
        size -= bytesRemaining;
 80076a0:	88fa      	ldrh	r2, [r7, #6]
 80076a2:	8abb      	ldrh	r3, [r7, #20]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	80fb      	strh	r3, [r7, #6]
        dataPosition += bytesRemaining;
 80076a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076aa:	8abb      	ldrh	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	84bb      	strh	r3, [r7, #36]	; 0x24
    for (int i = 0; i < numberOfPages; i++)
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	3301      	adds	r3, #1
 80076b4:	623b      	str	r3, [r7, #32]
 80076b6:	8b3b      	ldrh	r3, [r7, #24]
 80076b8:	6a3a      	ldr	r2, [r7, #32]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	dbc9      	blt.n	8007652 <ReadFromEeprom+0x4a>
    }
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	3728      	adds	r7, #40	; 0x28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000460 	.word	0x20000460

080076cc <CheckInputDebounced>:

DebounceState debounceState = INPUT_IDLE;
uint32_t debounceStart = 0;

void CheckInputDebounced(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
    switch (debounceState)
 80076d0:	4b1f      	ldr	r3, [pc, #124]	; (8007750 <CheckInputDebounced+0x84>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d02f      	beq.n	8007738 <CheckInputDebounced+0x6c>
 80076d8:	2b02      	cmp	r3, #2
 80076da:	dc37      	bgt.n	800774c <CheckInputDebounced+0x80>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <CheckInputDebounced+0x1a>
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d011      	beq.n	8007708 <CheckInputDebounced+0x3c>
        	SetErrorState(SHORTCIRCUIT);
            //error_state = SHORTCIRCUIT;
            debounceState = INPUT_IDLE;
            break;
    }
}
 80076e4:	e032      	b.n	800774c <CheckInputDebounced+0x80>
            if (HAL_GPIO_ReadPin(ShortCircuitDetect_GPIO_Port, ShortCircuitDetect_Pin) == GPIO_PIN_RESET)
 80076e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076ea:	481a      	ldr	r0, [pc, #104]	; (8007754 <CheckInputDebounced+0x88>)
 80076ec:	f7fb ffa2 	bl	8003634 <HAL_GPIO_ReadPin>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d127      	bne.n	8007746 <CheckInputDebounced+0x7a>
                debounceState = INPUT_WAIT;
 80076f6:	4b16      	ldr	r3, [pc, #88]	; (8007750 <CheckInputDebounced+0x84>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	701a      	strb	r2, [r3, #0]
                debounceStart = HAL_GetTick();
 80076fc:	f7fa fc88 	bl	8002010 <HAL_GetTick>
 8007700:	4603      	mov	r3, r0
 8007702:	4a15      	ldr	r2, [pc, #84]	; (8007758 <CheckInputDebounced+0x8c>)
 8007704:	6013      	str	r3, [r2, #0]
            break;
 8007706:	e01e      	b.n	8007746 <CheckInputDebounced+0x7a>
            if (HAL_GPIO_ReadPin(ShortCircuitDetect_GPIO_Port, ShortCircuitDetect_Pin) == GPIO_PIN_RESET)
 8007708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800770c:	4811      	ldr	r0, [pc, #68]	; (8007754 <CheckInputDebounced+0x88>)
 800770e:	f7fb ff91 	bl	8003634 <HAL_GPIO_ReadPin>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10b      	bne.n	8007730 <CheckInputDebounced+0x64>
                if ((HAL_GetTick() - debounceStart) >= 10)  // 10ms debounce
 8007718:	f7fa fc7a 	bl	8002010 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <CheckInputDebounced+0x8c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b09      	cmp	r3, #9
 8007726:	d910      	bls.n	800774a <CheckInputDebounced+0x7e>
                    debounceState = INPUT_CONFIRMED;
 8007728:	4b09      	ldr	r3, [pc, #36]	; (8007750 <CheckInputDebounced+0x84>)
 800772a:	2202      	movs	r2, #2
 800772c:	701a      	strb	r2, [r3, #0]
            break;
 800772e:	e00c      	b.n	800774a <CheckInputDebounced+0x7e>
                debounceState = INPUT_IDLE;  //It was noise
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <CheckInputDebounced+0x84>)
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
            break;
 8007736:	e008      	b.n	800774a <CheckInputDebounced+0x7e>
        	SetErrorState(SHORTCIRCUIT);
 8007738:	2000      	movs	r0, #0
 800773a:	f000 fa29 	bl	8007b90 <SetErrorState>
            debounceState = INPUT_IDLE;
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <CheckInputDebounced+0x84>)
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
            break;
 8007744:	e002      	b.n	800774c <CheckInputDebounced+0x80>
            break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <CheckInputDebounced+0x80>
            break;
 800774a:	bf00      	nop
}
 800774c:	bf00      	nop
 800774e:	bd80      	pop	{r7, pc}
 8007750:	200005cc 	.word	0x200005cc
 8007754:	48000400 	.word	0x48000400
 8007758:	200005d0 	.word	0x200005d0

0800775c <LcdRstLow>:
LcdOption Options;

/**
 * @brief  Set the reset pin low.
 */
void LcdRstLow(void){ HAL_GPIO_WritePin(LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); }
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
 8007760:	2200      	movs	r2, #0
 8007762:	2180      	movs	r1, #128	; 0x80
 8007764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007768:	f7fb ff7c 	bl	8003664 <HAL_GPIO_WritePin>
 800776c:	bf00      	nop
 800776e:	bd80      	pop	{r7, pc}

08007770 <LcdRstHigh>:

/**
 * @brief  Set the reset pin high.
 */
void LcdRstHigh(void){ HAL_GPIO_WritePin(LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET); }
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
 8007774:	2201      	movs	r2, #1
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800777c:	f7fb ff72 	bl	8003664 <HAL_GPIO_WritePin>
 8007780:	bf00      	nop
 8007782:	bd80      	pop	{r7, pc}

08007784 <LcdEnLow>:

/**
 * @brief  Set the enable pin low.
 */
void LcdEnLow(void){ HAL_GPIO_WritePin(LcdEn_GPIO_Port, LcdEn_Pin, GPIO_PIN_RESET); }
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
 8007788:	2200      	movs	r2, #0
 800778a:	2104      	movs	r1, #4
 800778c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007790:	f7fb ff68 	bl	8003664 <HAL_GPIO_WritePin>
 8007794:	bf00      	nop
 8007796:	bd80      	pop	{r7, pc}

08007798 <LcdEnHigh>:

/**
 * @brief  Set the enable pin high.
 */
void LcdEnHigh(void){ HAL_GPIO_WritePin(LcdEn_GPIO_Port, LcdEn_Pin, GPIO_PIN_SET); }
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
 800779c:	2201      	movs	r2, #1
 800779e:	2104      	movs	r1, #4
 80077a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077a4:	f7fb ff5e 	bl	8003664 <HAL_GPIO_WritePin>
 80077a8:	bf00      	nop
 80077aa:	bd80      	pop	{r7, pc}

080077ac <LcdEnBlink>:

/**
 * @brief  Enable blinking.
 */
void LcdEnBlink(void){ LcdEnHigh(); LcdDelay_us(100); LcdEnLow(); LcdDelay_us(100); }
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	f7ff fff2 	bl	8007798 <LcdEnHigh>
 80077b4:	2064      	movs	r0, #100	; 0x64
 80077b6:	f000 f813 	bl	80077e0 <LcdDelay_us>
 80077ba:	f7ff ffe3 	bl	8007784 <LcdEnLow>
 80077be:	2064      	movs	r0, #100	; 0x64
 80077c0:	f000 f80e 	bl	80077e0 <LcdDelay_us>
 80077c4:	bf00      	nop
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <LcdBackLightSet>:

/**
 * @brief  Set the backlight.
 */
void LcdBackLightSet(void){ HAL_GPIO_WritePin(LcdBackLight_GPIO_Port, LcdBackLight_Pin, GPIO_PIN_SET); };
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	2201      	movs	r2, #1
 80077ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077d2:	4802      	ldr	r0, [pc, #8]	; (80077dc <LcdBackLightSet+0x14>)
 80077d4:	f7fb ff46 	bl	8003664 <HAL_GPIO_WritePin>
 80077d8:	bf00      	nop
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	48000800 	.word	0x48000800

080077e0 <LcdDelay_us>:
/**
 * @brief  Delay for a specified number of microseconds.
 * @param  us The number of microseconds to delay.
 */
void LcdDelay_us(uint16_t us)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	80fb      	strh	r3, [r7, #6]
  uint32_t  Div = (SysTick->LOAD+1)/1000;
 80077ea:	4b19      	ldr	r3, [pc, #100]	; (8007850 <LcdDelay_us+0x70>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <LcdDelay_us+0x74>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	099b      	lsrs	r3, r3, #6
 80077f8:	60fb      	str	r3, [r7, #12]
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
 80077fa:	f7fa fc09 	bl	8002010 <HAL_GetTick>
 80077fe:	4603      	mov	r3, r0
 8007800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007804:	fb03 f202 	mul.w	r2, r3, r2
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <LcdDelay_us+0x70>)
 800780a:	6899      	ldr	r1, [r3, #8]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007818:	60bb      	str	r3, [r7, #8]
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));  
 800781a:	bf00      	nop
 800781c:	f7fa fbf8 	bl	8002010 <HAL_GetTick>
 8007820:	4603      	mov	r3, r0
 8007822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007826:	fb03 f202 	mul.w	r2, r3, r2
 800782a:	4b09      	ldr	r3, [pc, #36]	; (8007850 <LcdDelay_us+0x70>)
 800782c:	6899      	ldr	r1, [r3, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	fbb1 f3f3 	udiv	r3, r1, r3
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	429a      	cmp	r2, r3
 8007842:	d3eb      	bcc.n	800781c <LcdDelay_us+0x3c>
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	e000e010 	.word	0xe000e010
 8007854:	10624dd3 	.word	0x10624dd3

08007858 <LcdDelay_ms>:
/**
 * @brief  Delay for a specified number of milliseconds.
 * @param  ms The number of milliseconds to delay.
 */
void LcdDelay_ms(uint8_t ms)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
  //#if _LCD_USE_FREERTOS==1
  //osDelay(ms);
  //#else
  HAL_Delay(ms);
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	4618      	mov	r0, r3
 8007866:	f7fa fbdf 	bl	8002028 <HAL_Delay>
  //#endif
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <LcdInit>:

/**
 * @brief  Initialize the LCD.
 */
void LcdInit(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
	while(HAL_GetTick()<200)
 8007878:	e002      	b.n	8007880 <LcdInit+0xc>
	   LcdDelay_ms(1);
 800787a:	2001      	movs	r0, #1
 800787c:	f7ff ffec 	bl	8007858 <LcdDelay_ms>
	while(HAL_GetTick()<200)
 8007880:	f7fa fbc6 	bl	8002010 <HAL_GetTick>
 8007884:	4603      	mov	r3, r0
 8007886:	2bc7      	cmp	r3, #199	; 0xc7
 8007888:	d9f7      	bls.n	800787a <LcdInit+0x6>
	/* Set cursor pointer to beginning for LCD */
	Options.currentX = 0;
 800788a:	4b23      	ldr	r3, [pc, #140]	; (8007918 <LcdInit+0xa4>)
 800788c:	2200      	movs	r2, #0
 800788e:	70da      	strb	r2, [r3, #3]
	Options.currentY = 0;
 8007890:	4b21      	ldr	r3, [pc, #132]	; (8007918 <LcdInit+0xa4>)
 8007892:	2200      	movs	r2, #0
 8007894:	711a      	strb	r2, [r3, #4]
	Options.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 8007896:	4b20      	ldr	r3, [pc, #128]	; (8007918 <LcdInit+0xa4>)
 8007898:	2200      	movs	r2, #0
 800789a:	705a      	strb	r2, [r3, #1]
	if (_LCD_ROWS > 1)
		Options.DisplayFunction |= LCD_2LINE;
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <LcdInit+0xa4>)
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	f043 0308 	orr.w	r3, r3, #8
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	4b1c      	ldr	r3, [pc, #112]	; (8007918 <LcdInit+0xa4>)
 80078a8:	705a      	strb	r2, [r3, #1]
	/* Try to set 4bit mode */
	LcdCmd4bit(0x03);
 80078aa:	2003      	movs	r0, #3
 80078ac:	f000 f8f8 	bl	8007aa0 <LcdCmd4bit>
	LcdDelay_ms(5);
 80078b0:	2005      	movs	r0, #5
 80078b2:	f7ff ffd1 	bl	8007858 <LcdDelay_ms>
	/* Second try */
	LcdCmd4bit(0x03);
 80078b6:	2003      	movs	r0, #3
 80078b8:	f000 f8f2 	bl	8007aa0 <LcdCmd4bit>
	LcdDelay_ms(5);
 80078bc:	2005      	movs	r0, #5
 80078be:	f7ff ffcb 	bl	8007858 <LcdDelay_ms>
	/* Third goo! */
	LcdCmd4bit(0x03);
 80078c2:	2003      	movs	r0, #3
 80078c4:	f000 f8ec 	bl	8007aa0 <LcdCmd4bit>
	LcdDelay_ms(5);
 80078c8:	2005      	movs	r0, #5
 80078ca:	f7ff ffc5 	bl	8007858 <LcdDelay_ms>
	/* Set 4-bit interface */
	LcdCmd4bit(0x02);
 80078ce:	2002      	movs	r0, #2
 80078d0:	f000 f8e6 	bl	8007aa0 <LcdCmd4bit>
	LcdDelay_ms(5);
 80078d4:	2005      	movs	r0, #5
 80078d6:	f7ff ffbf 	bl	8007858 <LcdDelay_ms>
	/* Set # lines, font size, etc. */
	LcdCmd(LCD_FUNCTIONSET | Options.DisplayFunction);
 80078da:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <LcdInit+0xa4>)
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	f043 0320 	orr.w	r3, r3, #32
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f8c2 	bl	8007a6e <LcdCmd>
	/* Turn the display on with no cursor or blinking default */
	Options.DisplayControl = LCD_DISPLAYON;
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <LcdInit+0xa4>)
 80078ec:	2204      	movs	r2, #4
 80078ee:	701a      	strb	r2, [r3, #0]
	LcdDisplayOn();
 80078f0:	f000 f822 	bl	8007938 <LcdDisplayOn>
	LcdClear();
 80078f4:	f000 f812 	bl	800791c <LcdClear>
	/* Default font directions */
	Options.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80078f8:	4b07      	ldr	r3, [pc, #28]	; (8007918 <LcdInit+0xa4>)
 80078fa:	2202      	movs	r2, #2
 80078fc:	709a      	strb	r2, [r3, #2]
	LcdCmd(LCD_ENTRYMODESET | Options.DisplayMode);
 80078fe:	4b06      	ldr	r3, [pc, #24]	; (8007918 <LcdInit+0xa4>)
 8007900:	789b      	ldrb	r3, [r3, #2]
 8007902:	f043 0304 	orr.w	r3, r3, #4
 8007906:	b2db      	uxtb	r3, r3
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f8b0 	bl	8007a6e <LcdCmd>
	LcdDelay_ms(5);
 800790e:	2005      	movs	r0, #5
 8007910:	f7ff ffa2 	bl	8007858 <LcdDelay_ms>
}
 8007914:	bf00      	nop
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200005d4 	.word	0x200005d4

0800791c <LcdClear>:

/**
 * @brief  Clear the display.
 */
void LcdClear(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
	LcdDelay_ms(5);
 8007920:	2005      	movs	r0, #5
 8007922:	f7ff ff99 	bl	8007858 <LcdDelay_ms>
	LcdCmd(LCD_CLEARDISPLAY);
 8007926:	2001      	movs	r0, #1
 8007928:	f000 f8a1 	bl	8007a6e <LcdCmd>
	LcdDelay_ms(5);
 800792c:	2005      	movs	r0, #5
 800792e:	f7ff ff93 	bl	8007858 <LcdDelay_ms>
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <LcdDisplayOn>:

/**
 * @brief  Turn the display on.
 */
void LcdDisplayOn(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
	Options.DisplayControl |= LCD_DISPLAYON;
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <LcdDisplayOn+0x28>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f043 0304 	orr.w	r3, r3, #4
 8007944:	b2da      	uxtb	r2, r3
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <LcdDisplayOn+0x28>)
 8007948:	701a      	strb	r2, [r3, #0]
	LcdCmd(LCD_DISPLAYCONTROL | Options.DisplayControl);
 800794a:	4b05      	ldr	r3, [pc, #20]	; (8007960 <LcdDisplayOn+0x28>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f043 0308 	orr.w	r3, r3, #8
 8007952:	b2db      	uxtb	r3, r3
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f88a 	bl	8007a6e <LcdCmd>
}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	200005d4 	.word	0x200005d4

08007964 <LcdPuts>:
 * @param  x The X position to start printing.
 * @param  y The Y position to start printing.
 * @param  str The string to print.
 */
void LcdPuts(uint8_t x, uint8_t y, char const *str)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	603a      	str	r2, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
 8007970:	460b      	mov	r3, r1
 8007972:	71bb      	strb	r3, [r7, #6]
	LcdCursorSet(x, y);
 8007974:	79ba      	ldrb	r2, [r7, #6]
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f8da 	bl	8007b34 <LcdCursorSet>
	while (*str)
 8007980:	e040      	b.n	8007a04 <LcdPuts+0xa0>
    {
		if (Options.currentX >= _LCD_COLS)
 8007982:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <LcdPuts+0xb4>)
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	2b13      	cmp	r3, #19
 8007988:	d910      	bls.n	80079ac <LcdPuts+0x48>
       {
			Options.currentX = 0;
 800798a:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <LcdPuts+0xb4>)
 800798c:	2200      	movs	r2, #0
 800798e:	70da      	strb	r2, [r3, #3]
			Options.currentY++;
 8007990:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <LcdPuts+0xb4>)
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	3301      	adds	r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	4b1f      	ldr	r3, [pc, #124]	; (8007a18 <LcdPuts+0xb4>)
 800799a:	711a      	strb	r2, [r3, #4]
			LcdCursorSet(Options.currentX, Options.currentY);
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <LcdPuts+0xb4>)
 800799e:	78db      	ldrb	r3, [r3, #3]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <LcdPuts+0xb4>)
 80079a2:	7912      	ldrb	r2, [r2, #4]
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f8c4 	bl	8007b34 <LcdCursorSet>
		}
		if (*str == '\n')
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b0a      	cmp	r3, #10
 80079b2:	d10e      	bne.n	80079d2 <LcdPuts+0x6e>
        {
			Options.currentY++;
 80079b4:	4b18      	ldr	r3, [pc, #96]	; (8007a18 <LcdPuts+0xb4>)
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	3301      	adds	r3, #1
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <LcdPuts+0xb4>)
 80079be:	711a      	strb	r2, [r3, #4]
			LcdCursorSet(Options.currentX, Options.currentY);
 80079c0:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <LcdPuts+0xb4>)
 80079c2:	78db      	ldrb	r3, [r3, #3]
 80079c4:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <LcdPuts+0xb4>)
 80079c6:	7912      	ldrb	r2, [r2, #4]
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f8b2 	bl	8007b34 <LcdCursorSet>
 80079d0:	e015      	b.n	80079fe <LcdPuts+0x9a>
		}
		else if (*str == '\r')
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b0d      	cmp	r3, #13
 80079d8:	d106      	bne.n	80079e8 <LcdPuts+0x84>
		{
			LcdCursorSet(0, Options.currentY);
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <LcdPuts+0xb4>)
 80079dc:	791b      	ldrb	r3, [r3, #4]
 80079de:	4619      	mov	r1, r3
 80079e0:	2000      	movs	r0, #0
 80079e2:	f000 f8a7 	bl	8007b34 <LcdCursorSet>
 80079e6:	e00a      	b.n	80079fe <LcdPuts+0x9a>
		}
		else
		{
			LcdData(*str);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 f889 	bl	8007b04 <LcdData>
			Options.currentX++;
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <LcdPuts+0xb4>)
 80079f4:	78db      	ldrb	r3, [r3, #3]
 80079f6:	3301      	adds	r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <LcdPuts+0xb4>)
 80079fc:	70da      	strb	r2, [r3, #3]
		}
		str++;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	603b      	str	r3, [r7, #0]
	while (*str)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1ba      	bne.n	8007982 <LcdPuts+0x1e>
	}
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200005d4 	.word	0x200005d4

08007a1c <LcdCreateChar>:
 * @brief  Create a custom character.
 * @param  location The location of the custom character.
 * @param  data The data for the custom character.
 */
void LcdCreateChar(uint8_t location, uint8_t const *data)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	6039      	str	r1, [r7, #0]
 8007a26:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* We have 8 locations available for custom characters */
	location &= 0x07;
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	71fb      	strb	r3, [r7, #7]
	LcdCmd(LCD_SETCGRAMADDR | (location << 3));
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	b25b      	sxtb	r3, r3
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f815 	bl	8007a6e <LcdCmd>
	
	for (i = 0; i < 8; i++) {
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e009      	b.n	8007a5e <LcdCreateChar+0x42>
		LcdData(data[i]);
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f856 	bl	8007b04 <LcdData>
	for (i = 0; i < 8; i++) {
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b07      	cmp	r3, #7
 8007a62:	d9f2      	bls.n	8007a4a <LcdCreateChar+0x2e>
	}
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <LcdCmd>:
/**
 * @brief  Send a command to the LCD.
 * @param  cmd The command to send.
 */
void LcdCmd(uint8_t cmd)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	4603      	mov	r3, r0
 8007a76:	71fb      	strb	r3, [r7, #7]
	LcdRstLow();
 8007a78:	f7ff fe70 	bl	800775c <LcdRstLow>
	LcdCmd4bit(cmd >> 4);
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f80c 	bl	8007aa0 <LcdCmd4bit>
	LcdCmd4bit(cmd & 0x0F);
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f805 	bl	8007aa0 <LcdCmd4bit>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <LcdCmd4bit>:
/**
 * @brief  Send a 4-bit command to the LCD.
 * @param  cmd The 4-bit command to send.
 */
void LcdCmd4bit(uint8_t cmd)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Lcd7_GPIO_Port, Lcd7_Pin, (GPIO_PinState)(cmd & 0x08));
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2108      	movs	r1, #8
 8007ab6:	4812      	ldr	r0, [pc, #72]	; (8007b00 <LcdCmd4bit+0x60>)
 8007ab8:	f7fb fdd4 	bl	8003664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd6_GPIO_Port, Lcd6_Pin, (GPIO_PinState)(cmd & 0x04));
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2104      	movs	r1, #4
 8007ac8:	480d      	ldr	r0, [pc, #52]	; (8007b00 <LcdCmd4bit+0x60>)
 8007aca:	f7fb fdcb 	bl	8003664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd5_GPIO_Port, Lcd5_Pin, (GPIO_PinState)(cmd & 0x02));
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4809      	ldr	r0, [pc, #36]	; (8007b00 <LcdCmd4bit+0x60>)
 8007adc:	f7fb fdc2 	bl	8003664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd4_GPIO_Port, Lcd4_Pin, (GPIO_PinState)(cmd & 0x01));
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2101      	movs	r1, #1
 8007aec:	4804      	ldr	r0, [pc, #16]	; (8007b00 <LcdCmd4bit+0x60>)
 8007aee:	f7fb fdb9 	bl	8003664 <HAL_GPIO_WritePin>
	LcdEnBlink();
 8007af2:	f7ff fe5b 	bl	80077ac <LcdEnBlink>
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	48000800 	.word	0x48000800

08007b04 <LcdData>:
/**
 * @brief  Send data to the LCD.
 * @param  data The data to send.
 */
void LcdData(uint8_t data)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	71fb      	strb	r3, [r7, #7]
	LcdRstHigh();
 8007b0e:	f7ff fe2f 	bl	8007770 <LcdRstHigh>
	LcdCmd4bit(data >> 4);
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff ffc1 	bl	8007aa0 <LcdCmd4bit>
	LcdCmd4bit(data & 0x0F);
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	f003 030f 	and.w	r3, r3, #15
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff ffba 	bl	8007aa0 <LcdCmd4bit>
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <LcdCursorSet>:
 * @brief  Set the cursor position.
 * @param  col The column position.
 * @param  row The row position.
 */
void LcdCursorSet(uint8_t col, uint8_t row)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	460a      	mov	r2, r1
 8007b3e:	71fb      	strb	r3, [r7, #7]
 8007b40:	4613      	mov	r3, r2
 8007b42:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <LcdCursorSet+0x54>)
 8007b46:	60fb      	str	r3, [r7, #12]
	if (row >= _LCD_ROWS)
 8007b48:	79bb      	ldrb	r3, [r7, #6]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d901      	bls.n	8007b52 <LcdCursorSet+0x1e>
		row = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	71bb      	strb	r3, [r7, #6]
	Options.currentX = col;
 8007b52:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <LcdCursorSet+0x58>)
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	70d3      	strb	r3, [r2, #3]
	Options.currentY = row;
 8007b58:	4a0c      	ldr	r2, [pc, #48]	; (8007b8c <LcdCursorSet+0x58>)
 8007b5a:	79bb      	ldrb	r3, [r7, #6]
 8007b5c:	7113      	strb	r3, [r2, #4]
	LcdCmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8007b5e:	79bb      	ldrb	r3, [r7, #6]
 8007b60:	3310      	adds	r3, #16
 8007b62:	443b      	add	r3, r7
 8007b64:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	b25b      	sxtb	r3, r3
 8007b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff ff78 	bl	8007a6e <LcdCmd>
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	54144000 	.word	0x54144000
 8007b8c:	200005d4 	.word	0x200005d4

08007b90 <SetErrorState>:
};

static uint8_t nextVariable = VA_FIRST_VARIABLE;

void SetErrorState(error_state_t errorstate)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
	error_state = errorstate;
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <SetErrorState+0x1c>)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	7013      	strb	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20000073 	.word	0x20000073

08007bb0 <LedUpdateBlink>:
{
	return error_state;
}

void LedUpdateBlink(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
	if (led_blink_timeout > 0)
 8007bb4:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <LedUpdateBlink+0x84>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d038      	beq.n	8007c2e <LedUpdateBlink+0x7e>
	{
		if (error_state == SHORTCIRCUIT)
 8007bbc:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <LedUpdateBlink+0x88>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <LedUpdateBlink+0x20>
			HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 8007bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bc8:	481c      	ldr	r0, [pc, #112]	; (8007c3c <LedUpdateBlink+0x8c>)
 8007bca:	f7fb fd63 	bl	8003694 <HAL_GPIO_TogglePin>
 8007bce:	e007      	b.n	8007be0 <LedUpdateBlink+0x30>
		else if (error_state == HV)
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <LedUpdateBlink+0x88>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d103      	bne.n	8007be0 <LedUpdateBlink+0x30>
			HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8007bd8:	2104      	movs	r1, #4
 8007bda:	4819      	ldr	r0, [pc, #100]	; (8007c40 <LedUpdateBlink+0x90>)
 8007bdc:	f7fb fd5a 	bl	8003694 <HAL_GPIO_TogglePin>
		led_blink_timeout--;
 8007be0:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <LedUpdateBlink+0x84>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <LedUpdateBlink+0x84>)
 8007bea:	701a      	strb	r2, [r3, #0]
		if (led_blink_timeout == 0)
 8007bec:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <LedUpdateBlink+0x84>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d11c      	bne.n	8007c2e <LedUpdateBlink+0x7e>
		{
			if (error_state == SHORTCIRCUIT)
 8007bf4:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <LedUpdateBlink+0x88>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <LedUpdateBlink+0x5a>
				Led3(1);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c02:	480e      	ldr	r0, [pc, #56]	; (8007c3c <LedUpdateBlink+0x8c>)
 8007c04:	f7fb fd2e 	bl	8003664 <HAL_GPIO_WritePin>
 8007c08:	e008      	b.n	8007c1c <LedUpdateBlink+0x6c>
			else if (error_state == HV)
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	; (8007c38 <LedUpdateBlink+0x88>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d104      	bne.n	8007c1c <LedUpdateBlink+0x6c>
				Led4(1);
 8007c12:	2201      	movs	r2, #1
 8007c14:	2104      	movs	r1, #4
 8007c16:	480a      	ldr	r0, [pc, #40]	; (8007c40 <LedUpdateBlink+0x90>)
 8007c18:	f7fb fd24 	bl	8003664 <HAL_GPIO_WritePin>
			blink_enable = false;
 8007c1c:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <LedUpdateBlink+0x94>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
			//Led3(0);
			//Led4(0);
			error_state = IDLE;
 8007c22:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <LedUpdateBlink+0x88>)
 8007c24:	2202      	movs	r2, #2
 8007c26:	701a      	strb	r2, [r3, #0]
			one_time_excute = true;
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <LedUpdateBlink+0x98>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007c2e:	bf00      	nop
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	200005f7 	.word	0x200005f7
 8007c38:	20000073 	.word	0x20000073
 8007c3c:	48000800 	.word	0x48000800
 8007c40:	48000c00 	.word	0x48000c00
 8007c44:	200005f8 	.word	0x200005f8
 8007c48:	20000072 	.word	0x20000072

08007c4c <ReadVoltageADC>:

void ReadVoltageADC(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8007c52:	482f      	ldr	r0, [pc, #188]	; (8007d10 <ReadVoltageADC+0xc4>)
 8007c54:	f7fa fb9e 	bl	8002394 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8007c58:	f04f 31ff 	mov.w	r1, #4294967295
 8007c5c:	482c      	ldr	r0, [pc, #176]	; (8007d10 <ReadVoltageADC+0xc4>)
 8007c5e:	f7fa fc85 	bl	800256c <HAL_ADC_PollForConversion>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d14c      	bne.n	8007d02 <ReadVoltageADC+0xb6>
	{
		uint32_t adc_value = HAL_ADC_GetValue(&hadc2);
 8007c68:	4829      	ldr	r0, [pc, #164]	; (8007d10 <ReadVoltageADC+0xc4>)
 8007c6a:	f7fa fd4d 	bl	8002708 <HAL_ADC_GetValue>
 8007c6e:	6078      	str	r0, [r7, #4]
		float voltage = (((float)adc_value - AdcOffset) * ADC_VOLTAGE_REFRENCE * AdcCalib) / ADC_STEP;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c7a:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <ReadVoltageADC+0xc8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c8a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007c8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c92:	4b21      	ldr	r3, [pc, #132]	; (8007d18 <ReadVoltageADC+0xcc>)
 8007c94:	edd3 7a00 	vldr	s15, [r3]
 8007c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c9c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007d1c <ReadVoltageADC+0xd0>
 8007ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ca4:	edc7 7a00 	vstr	s15, [r7]
		//values[3].ival = voltage;
		values[3].ival = (int)(VolDivider*voltage);
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <ReadVoltageADC+0xd4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cb4:	edd7 7a00 	vldr	s15, [r7]
 8007cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cc0:	ee17 2a90 	vmov	r2, s15
 8007cc4:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <ReadVoltageADC+0xd8>)
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
		values[4].fval = (float)((VolRatio*VolDivider*voltage)/1000.00);
 8007cc8:	4b17      	ldr	r3, [pc, #92]	; (8007d28 <ReadVoltageADC+0xdc>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a14      	ldr	r2, [pc, #80]	; (8007d20 <ReadVoltageADC+0xd4>)
 8007cce:	6812      	ldr	r2, [r2, #0]
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cdc:	edd7 7a00 	vldr	s15, [r7]
 8007ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ce4:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007d2c <ReadVoltageADC+0xe0>
 8007ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <ReadVoltageADC+0xd8>)
 8007cee:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		//values[4].fval = voltage;
		if(values[3].ival >= 820)
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <ReadVoltageADC+0xd8>)
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8007cfa:	db02      	blt.n	8007d02 <ReadVoltageADC+0xb6>
		{
			error_state = HV;
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <ReadVoltageADC+0xe4>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_ADC_Stop(&hadc2);
 8007d02:	4803      	ldr	r0, [pc, #12]	; (8007d10 <ReadVoltageADC+0xc4>)
 8007d04:	f7fa fbfc 	bl	8002500 <HAL_ADC_Stop>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000410 	.word	0x20000410
 8007d14:	20000604 	.word	0x20000604
 8007d18:	20000608 	.word	0x20000608
 8007d1c:	457ff000 	.word	0x457ff000
 8007d20:	2000060c 	.word	0x2000060c
 8007d24:	20000630 	.word	0x20000630
 8007d28:	20000610 	.word	0x20000610
 8007d2c:	447a0000 	.word	0x447a0000
 8007d30:	20000073 	.word	0x20000073

08007d34 <SetFrequency>:
/**
 * @brief This function change frequency of your PWM.
 * @param frequency Is period of the PWM.
 */
void SetFrequency(int frequency)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	 * Frequency_PWM = It is the input of function that user want to set
	 * Frequency_CLK = 72 MHz
	 * APRx = Auto-reload register
	 * PSCx = The value of prescaler */
	volatile static uint32_t PWM_APR;
	PWM_APR = (PWM_CLK/frequency) /*- 1*/ ;
 8007d3c:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <SetFrequency+0x2c>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <SetFrequency+0x30>)
 8007d48:	601a      	str	r2, [r3, #0]
	TIM2->ARR = PWM_APR;
 8007d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d4e:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <SetFrequency+0x30>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	000f4240 	.word	0x000f4240
 8007d64:	2000079c 	.word	0x2000079c

08007d68 <SetDutyCycle_us>:
/**
 * @brief This function change Ton/Width of the PWM.
 * @param Ton Is width that set for PWM.
 */
void SetDutyCycle_us(int Ton)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	// If using Channel 1 change it to CCR1
	//TIM2->CCR1 = Ton;
	TIM2->CCR1 = TimeOnPre;
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <SetDutyCycle_us+0x44>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d78:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = TIM2->CCR1 + PhaseDelay;
 8007d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d80:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <SetDutyCycle_us+0x48>)
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	4611      	mov	r1, r2
 8007d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d8a:	440b      	add	r3, r1
 8007d8c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = Ton + TIM2->CCR2;
 8007d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007d9a:	4413      	add	r3, r2
 8007d9c:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000614 	.word	0x20000614
 8007db0:	20000618 	.word	0x20000618

08007db4 <HLine>:

/**
 * @brief It draws lines in lcd.
 */
void HLine(char x, char y, uint8_t KindofLine, char mem8)
{
 8007db4:	b590      	push	{r4, r7, lr}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4623      	mov	r3, r4
 8007dc4:	71fb      	strb	r3, [r7, #7]
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	71bb      	strb	r3, [r7, #6]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	717b      	strb	r3, [r7, #5]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	713b      	strb	r3, [r7, #4]
	LcdCreateChar(mem8, Line[KindofLine]);
 8007dd2:	797b      	ldrb	r3, [r7, #5]
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4a0a      	ldr	r2, [pc, #40]	; (8007e00 <HLine+0x4c>)
 8007dd8:	441a      	add	r2, r3
 8007dda:	793b      	ldrb	r3, [r7, #4]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fe1c 	bl	8007a1c <LcdCreateChar>
	LcdCursorSet(x, y);
 8007de4:	79ba      	ldrb	r2, [r7, #6]
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	4611      	mov	r1, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff fea2 	bl	8007b34 <LcdCursorSet>
	LcdData(mem8);
 8007df0:	793b      	ldrb	r3, [r7, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fe86 	bl	8007b04 <LcdData>
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd90      	pop	{r4, r7, pc}
 8007e00:	0800dedc 	.word	0x0800dedc

08007e04 <ContactUs>:
 * @brief It runs when the user select contact us menu
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char ContactUs(char input)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	71fb      	strb	r3, [r7, #7]
	static uint8_t enterFunction = 1;
	if (enterFunction == 1)
 8007e0e:	4b22      	ldr	r3, [pc, #136]	; (8007e98 <ContactUs+0x94>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d115      	bne.n	8007e42 <ContactUs+0x3e>
	{
		LcdClear();
 8007e16:	f7ff fd81 	bl	800791c <LcdClear>
		LcdPuts(1, LCD_LINE1, "Tel:021-66735875");
 8007e1a:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <ContactUs+0x98>)
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f7ff fda0 	bl	8007964 <LcdPuts>
		LcdPuts(1, LCD_LINE2, "Tel:09191143937");
 8007e24:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <ContactUs+0x9c>)
 8007e26:	2101      	movs	r1, #1
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f7ff fd9b 	bl	8007964 <LcdPuts>
		LcdPuts(1, LCD_LINE3, "website:");
 8007e2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ea4 <ContactUs+0xa0>)
 8007e30:	2102      	movs	r1, #2
 8007e32:	2001      	movs	r0, #1
 8007e34:	f7ff fd96 	bl	8007964 <LcdPuts>
		LcdPuts(2, LCD_LINE4, "Nekoorad.com");
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <ContactUs+0xa4>)
 8007e3a:	2103      	movs	r1, #3
 8007e3c:	2002      	movs	r0, #2
 8007e3e:	f7ff fd91 	bl	8007964 <LcdPuts>
	}
	enterFunction = 0;
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <ContactUs+0x94>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
	if (input == KEY_STANDBY)
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d10d      	bne.n	8007e6a <ContactUs+0x66>
	{
		//enterFunction = 1;
		//return ST_STANDBY;

		count1 = 19;
 8007e4e:	4b17      	ldr	r3, [pc, #92]	; (8007eac <ContactUs+0xa8>)
 8007e50:	2213      	movs	r2, #19
 8007e52:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8007e54:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <ContactUs+0xac>)
 8007e56:	221f      	movs	r2, #31
 8007e58:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 8007e5a:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <ContactUs+0xb0>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8007e60:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <ContactUs+0xb4>)
 8007e62:	2250      	movs	r2, #80	; 0x50
 8007e64:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8007e66:	2314      	movs	r3, #20
 8007e68:	e011      	b.n	8007e8e <ContactUs+0x8a>
	}
	else if (input == KEY_ACCEPT || input == KEY_BACK)
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d002      	beq.n	8007e76 <ContactUs+0x72>
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d10a      	bne.n	8007e8c <ContactUs+0x88>
	{
		refreshLcd = true; // atention to DisplyRunMenu	function
 8007e76:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <ContactUs+0xb8>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	701a      	strb	r2, [r3, #0]
		variable = ST_CHANGE_MENU;
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <ContactUs+0xb4>)
 8007e7e:	2250      	movs	r2, #80	; 0x50
 8007e80:	701a      	strb	r2, [r3, #0]
		enterFunction = 1;
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <ContactUs+0x94>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 8007e88:	231e      	movs	r3, #30
 8007e8a:	e000      	b.n	8007e8e <ContactUs+0x8a>
	}

	return ST_CONTACT_US;
 8007e8c:	2364      	movs	r3, #100	; 0x64
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200001cd 	.word	0x200001cd
 8007e9c:	0800de10 	.word	0x0800de10
 8007ea0:	0800de24 	.word	0x0800de24
 8007ea4:	0800de34 	.word	0x0800de34
 8007ea8:	0800de40 	.word	0x0800de40
 8007eac:	200005f6 	.word	0x200005f6
 8007eb0:	200001cc 	.word	0x200001cc
 8007eb4:	200005da 	.word	0x200005da
 8007eb8:	200005d9 	.word	0x200005d9
 8007ebc:	200005f0 	.word	0x200005f0

08007ec0 <WeldDisplay>:

/**
 * @brief It shows weld animation.
 */
void WeldDisplay(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
	uint8_t ArcNumber = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	71fb      	strb	r3, [r7, #7]
	while (ArcNumber < 5)
 8007eca:	e019      	b.n	8007f00 <WeldDisplay+0x40>
	{
		if (flcd100ms)
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <WeldDisplay+0x50>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d014      	beq.n	8007f00 <WeldDisplay+0x40>
		{
			LcdCreateChar(LCD_Mem7, arcSymbol[ArcNumber]);
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	4a0e      	ldr	r2, [pc, #56]	; (8007f14 <WeldDisplay+0x54>)
 8007edc:	4413      	add	r3, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	2007      	movs	r0, #7
 8007ee2:	f7ff fd9b 	bl	8007a1c <LcdCreateChar>
			LcdCursorSet(10, LCD_LINE1);
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	200a      	movs	r0, #10
 8007eea:	f7ff fe23 	bl	8007b34 <LcdCursorSet>
			LcdData(LCD_Mem7);
 8007eee:	2007      	movs	r0, #7
 8007ef0:	f7ff fe08 	bl	8007b04 <LcdData>
			ArcNumber++;
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	71fb      	strb	r3, [r7, #7]
			flcd100ms = false;
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <WeldDisplay+0x50>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]
	while (ArcNumber < 5)
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d9e2      	bls.n	8007ecc <WeldDisplay+0xc>
		}

	}
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000059e 	.word	0x2000059e
 8007f14:	0800deb4 	.word	0x0800deb4

08007f18 <DisplayRunMenu>:
/**
 * @brief This function displays LCD texts.
 * @note This function displays LCD texts each 500 mS or if when a change in data occurs.
 */
void DisplayRunMenu(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
	char lcdBuffer[12];
	if ( flcd500ms == true )
 8007f1e:	4b65      	ldr	r3, [pc, #404]	; (80080b4 <DisplayRunMenu+0x19c>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d058      	beq.n	8007fda <DisplayRunMenu+0xc2>
	{

		for (uint8_t n = 0; n < 4; n++)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
 8007f2c:	e04f      	b.n	8007fce <DisplayRunMenu+0xb6>
		{
			// refresh
			LcdPuts(1, n, statetext[n]);
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	4a61      	ldr	r2, [pc, #388]	; (80080b8 <DisplayRunMenu+0x1a0>)
 8007f32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	f7ff fd12 	bl	8007964 <LcdPuts>

			// Display values
			switch (elementType[n])
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	4a5e      	ldr	r2, [pc, #376]	; (80080bc <DisplayRunMenu+0x1a4>)
 8007f44:	5cd3      	ldrb	r3, [r2, r3]
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d02c      	beq.n	8007fa4 <DisplayRunMenu+0x8c>
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	dc3c      	bgt.n	8007fc8 <DisplayRunMenu+0xb0>
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d002      	beq.n	8007f58 <DisplayRunMenu+0x40>
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d015      	beq.n	8007f82 <DisplayRunMenu+0x6a>
 8007f56:	e037      	b.n	8007fc8 <DisplayRunMenu+0xb0>
			{
			case ET_FLT:	sprintf(lcdBuffer, "%0.2f", pValues[n]->fval);
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4a59      	ldr	r2, [pc, #356]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8007f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7f8 fb00 	bl	8000568 <__aeabi_f2d>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	4955      	ldr	r1, [pc, #340]	; (80080c4 <DisplayRunMenu+0x1ac>)
 8007f70:	f002 fb0e 	bl	800a590 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8007f74:	463a      	mov	r2, r7
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	200f      	movs	r0, #15
 8007f7c:	f7ff fcf2 	bl	8007964 <LcdPuts>
				            break;
 8007f80:	e022      	b.n	8007fc8 <DisplayRunMenu+0xb0>

			case ET_INT:	sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	4a4e      	ldr	r2, [pc, #312]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8007f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	494e      	ldr	r1, [pc, #312]	; (80080c8 <DisplayRunMenu+0x1b0>)
 8007f90:	4618      	mov	r0, r3
 8007f92:	f002 fafd 	bl	800a590 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8007f96:	463a      	mov	r2, r7
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	200f      	movs	r0, #15
 8007f9e:	f7ff fce1 	bl	8007964 <LcdPuts>
				            break;
 8007fa2:	e011      	b.n	8007fc8 <DisplayRunMenu+0xb0>

			case ET_FSTR:	LcdPuts(LCD_X, n, pValues[n]->pText[pValues[n]->strNum]);
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	4a46      	ldr	r2, [pc, #280]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8007fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fac:	7bfa      	ldrb	r2, [r7, #15]
 8007fae:	4944      	ldr	r1, [pc, #272]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8007fb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fb4:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8007fb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	200f      	movs	r0, #15
 8007fc2:	f7ff fccf 	bl	8007964 <LcdPuts>
				            break;
 8007fc6:	bf00      	nop
		for (uint8_t n = 0; n < 4; n++)
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	73fb      	strb	r3, [r7, #15]
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d9ac      	bls.n	8007f2e <DisplayRunMenu+0x16>
			}
		}
		flcd500ms = false;
 8007fd4:	4b37      	ldr	r3, [pc, #220]	; (80080b4 <DisplayRunMenu+0x19c>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
	}
	// Plain menu text
	if (refreshLcd == true)
 8007fda:	4b3c      	ldr	r3, [pc, #240]	; (80080cc <DisplayRunMenu+0x1b4>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d163      	bne.n	80080aa <DisplayRunMenu+0x192>
	{
		//LcdEnHigh;
		LcdClear();
 8007fe2:	f7ff fc9b 	bl	800791c <LcdClear>
		LcdCursorSet(0, cursorLine);
 8007fe6:	4b3a      	ldr	r3, [pc, #232]	; (80080d0 <DisplayRunMenu+0x1b8>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	4619      	mov	r1, r3
 8007fec:	2000      	movs	r0, #0
 8007fee:	f7ff fda1 	bl	8007b34 <LcdCursorSet>
		LcdData(0x7E); //  "->" character
 8007ff2:	207e      	movs	r0, #126	; 0x7e
 8007ff4:	f7ff fd86 	bl	8007b04 <LcdData>

		for (uint8_t n = 0; n < 4; n++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73bb      	strb	r3, [r7, #14]
 8007ffc:	e04f      	b.n	800809e <DisplayRunMenu+0x186>
		{
			// refresh 
			LcdPuts(1, n, statetext[n]);
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	4a2d      	ldr	r2, [pc, #180]	; (80080b8 <DisplayRunMenu+0x1a0>)
 8008002:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	4619      	mov	r1, r3
 800800a:	2001      	movs	r0, #1
 800800c:	f7ff fcaa 	bl	8007964 <LcdPuts>

			/* Display values */
			switch (elementType[n])
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <DisplayRunMenu+0x1a4>)
 8008014:	5cd3      	ldrb	r3, [r2, r3]
 8008016:	2b04      	cmp	r3, #4
 8008018:	d02c      	beq.n	8008074 <DisplayRunMenu+0x15c>
 800801a:	2b04      	cmp	r3, #4
 800801c:	dc3c      	bgt.n	8008098 <DisplayRunMenu+0x180>
 800801e:	2b01      	cmp	r3, #1
 8008020:	d002      	beq.n	8008028 <DisplayRunMenu+0x110>
 8008022:	2b03      	cmp	r3, #3
 8008024:	d015      	beq.n	8008052 <DisplayRunMenu+0x13a>
 8008026:	e037      	b.n	8008098 <DisplayRunMenu+0x180>
			{
			case ET_FLT:	sprintf(lcdBuffer, "%0.2f", pValues[n]->fval);
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	4a25      	ldr	r2, [pc, #148]	; (80080c0 <DisplayRunMenu+0x1a8>)
 800802c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7f8 fa98 	bl	8000568 <__aeabi_f2d>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4638      	mov	r0, r7
 800803e:	4921      	ldr	r1, [pc, #132]	; (80080c4 <DisplayRunMenu+0x1ac>)
 8008040:	f002 faa6 	bl	800a590 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8008044:	463a      	mov	r2, r7
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	4619      	mov	r1, r3
 800804a:	200f      	movs	r0, #15
 800804c:	f7ff fc8a 	bl	8007964 <LcdPuts>
				            break;
 8008050:	e022      	b.n	8008098 <DisplayRunMenu+0x180>

			case ET_INT:	sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	4a1a      	ldr	r2, [pc, #104]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8008056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	463b      	mov	r3, r7
 800805e:	491a      	ldr	r1, [pc, #104]	; (80080c8 <DisplayRunMenu+0x1b0>)
 8008060:	4618      	mov	r0, r3
 8008062:	f002 fa95 	bl	800a590 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8008066:	463a      	mov	r2, r7
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	4619      	mov	r1, r3
 800806c:	200f      	movs	r0, #15
 800806e:	f7ff fc79 	bl	8007964 <LcdPuts>
				            break;
 8008072:	e011      	b.n	8008098 <DisplayRunMenu+0x180>

			case ET_FSTR:	LcdPuts(LCD_X, n, pValues[n]->pText[pValues[n]->strNum]);
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	4a12      	ldr	r2, [pc, #72]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8008078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807c:	7bba      	ldrb	r2, [r7, #14]
 800807e:	4910      	ldr	r1, [pc, #64]	; (80080c0 <DisplayRunMenu+0x1a8>)
 8008080:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008084:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8008088:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	4619      	mov	r1, r3
 8008090:	200f      	movs	r0, #15
 8008092:	f7ff fc67 	bl	8007964 <LcdPuts>
				            break;
 8008096:	bf00      	nop
		for (uint8_t n = 0; n < 4; n++)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	3301      	adds	r3, #1
 800809c:	73bb      	strb	r3, [r7, #14]
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d9ac      	bls.n	8007ffe <DisplayRunMenu+0xe6>
				/*case ET_ULNG:	sprintf(lcdBuffer, "%lu", pValues[n]->ulval);
				                LCD_Puts(LCD_X,n, lcdBuffer);
								break;*/
			}
		}
		refreshLcd = false;
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <DisplayRunMenu+0x1b4>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]
	}
}
 80080aa:	bf00      	nop
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200005a0 	.word	0x200005a0
 80080b8:	200005dc 	.word	0x200005dc
 80080bc:	200005ec 	.word	0x200005ec
 80080c0:	20000620 	.word	0x20000620
 80080c4:	0800de50 	.word	0x0800de50
 80080c8:	0800de58 	.word	0x0800de58
 80080cc:	200005f0 	.word	0x200005f0
 80080d0:	200005da 	.word	0x200005da

080080d4 <VariableMachine>:
 * @brief This function shifts between the different variables.
 * @param stimuli is Button input.
 * @return nextState is next state according to the current state and button input.
 */
unsigned char VariableMachine(unsigned char stimuli)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
	unsigned char nextVariable = variable; // Default stay in same state
 80080de:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <VariableMachine+0x80>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	73fb      	strb	r3, [r7, #15]
	unsigned char i, j;
	uint8_t cursorBuffer;

	for (i = 0; (j = StateNextVariable[i].variable); i++)
 80080e4:	2300      	movs	r3, #0
 80080e6:	73bb      	strb	r3, [r7, #14]
 80080e8:	e022      	b.n	8008130 <VariableMachine+0x5c>
	{
		if (j == variable &&
 80080ea:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <VariableMachine+0x80>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	7b7a      	ldrb	r2, [r7, #13]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d11a      	bne.n	800812a <VariableMachine+0x56>
				StateNextVariable[i].input == stimuli)
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	4a18      	ldr	r2, [pc, #96]	; (8008158 <VariableMachine+0x84>)
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	785b      	ldrb	r3, [r3, #1]
		if (j == variable &&
 80080fe:	79fa      	ldrb	r2, [r7, #7]
 8008100:	429a      	cmp	r2, r3
 8008102:	d112      	bne.n	800812a <VariableMachine+0x56>

		{
			nextVariable = StateNextVariable[i].nextVariable;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	4a14      	ldr	r2, [pc, #80]	; (8008158 <VariableMachine+0x84>)
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	789b      	ldrb	r3, [r3, #2]
 800810e:	73fb      	strb	r3, [r7, #15]
			cursorBuffer = StateNextVariable[i].cursorLine;
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	4a11      	ldr	r2, [pc, #68]	; (8008158 <VariableMachine+0x84>)
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	78db      	ldrb	r3, [r3, #3]
 800811a:	733b      	strb	r3, [r7, #12]

			if (cursorBuffer != LCD_LINE_RECENT)
 800811c:	7b3b      	ldrb	r3, [r7, #12]
 800811e:	2b04      	cmp	r3, #4
 8008120:	d00f      	beq.n	8008142 <VariableMachine+0x6e>
				cursorLine = cursorBuffer;
 8008122:	4a0e      	ldr	r2, [pc, #56]	; (800815c <VariableMachine+0x88>)
 8008124:	7b3b      	ldrb	r3, [r7, #12]
 8008126:	7013      	strb	r3, [r2, #0]

			break;
 8008128:	e00b      	b.n	8008142 <VariableMachine+0x6e>
	for (i = 0; (j = StateNextVariable[i].variable); i++)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	3301      	adds	r3, #1
 800812e:	73bb      	strb	r3, [r7, #14]
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	4a09      	ldr	r2, [pc, #36]	; (8008158 <VariableMachine+0x84>)
 8008134:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8008138:	737b      	strb	r3, [r7, #13]
 800813a:	7b7b      	ldrb	r3, [r7, #13]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1d4      	bne.n	80080ea <VariableMachine+0x16>
 8008140:	e000      	b.n	8008144 <VariableMachine+0x70>
			break;
 8008142:	bf00      	nop
		}
	}
	return nextVariable;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	200005d9 	.word	0x200005d9
 8008158:	20000074 	.word	0x20000074
 800815c:	200005da 	.word	0x200005da

08008160 <StandBy>:
 * @brief This function run when is in standby mode.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char StandBy(char input)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	71fb      	strb	r3, [r7, #7]
	Led1(0);
 800816a:	2200      	movs	r2, #0
 800816c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008170:	4882      	ldr	r0, [pc, #520]	; (800837c <StandBy+0x21c>)
 8008172:	f7fb fa77 	bl	8003664 <HAL_GPIO_WritePin>
	Led3(0);
 8008176:	2200      	movs	r2, #0
 8008178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800817c:	487f      	ldr	r0, [pc, #508]	; (800837c <StandBy+0x21c>)
 800817e:	f7fb fa71 	bl	8003664 <HAL_GPIO_WritePin>
	Led4(0);
 8008182:	2200      	movs	r2, #0
 8008184:	2104      	movs	r1, #4
 8008186:	487e      	ldr	r0, [pc, #504]	; (8008380 <StandBy+0x220>)
 8008188:	f7fb fa6c 	bl	8003664 <HAL_GPIO_WritePin>
	led_blink_timeout=0;
 800818c:	4b7d      	ldr	r3, [pc, #500]	; (8008384 <StandBy+0x224>)
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
	buzzer[BUZZ_NUM] = 0;
 8008192:	4b7d      	ldr	r3, [pc, #500]	; (8008388 <StandBy+0x228>)
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
	buzzer[BUZZ_DELAY] = 0;
 8008198:	4b7b      	ldr	r3, [pc, #492]	; (8008388 <StandBy+0x228>)
 800819a:	2200      	movs	r2, #0
 800819c:	705a      	strb	r2, [r3, #1]
	blink_enable = false;
 800819e:	4b7b      	ldr	r3, [pc, #492]	; (800838c <StandBy+0x22c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0;
 80081a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081a8:	2200      	movs	r2, #0
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24
	SetDutyCycle_us(0);
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7ff fddb 	bl	8007d68 <SetDutyCycle_us>
	HAL_TIM_Base_Stop_IT(&htim2);
 80081b2:	4877      	ldr	r0, [pc, #476]	; (8008390 <StandBy+0x230>)
 80081b4:	f7fd fcf8 	bl	8005ba8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80081b8:	2100      	movs	r1, #0
 80081ba:	4875      	ldr	r0, [pc, #468]	; (8008390 <StandBy+0x230>)
 80081bc:	f7fe f8de 	bl	800637c <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
 80081c0:	2104      	movs	r1, #4
 80081c2:	4873      	ldr	r0, [pc, #460]	; (8008390 <StandBy+0x230>)
 80081c4:	f7fd feba 	bl	8005f3c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_3);
 80081c8:	2108      	movs	r1, #8
 80081ca:	4871      	ldr	r0, [pc, #452]	; (8008390 <StandBy+0x230>)
 80081cc:	f7fd feb6 	bl	8005f3c <HAL_TIM_OC_Stop_IT>
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80081d0:	2200      	movs	r2, #0
 80081d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80081d6:	4869      	ldr	r0, [pc, #420]	; (800837c <StandBy+0x21c>)
 80081d8:	f7fb fa44 	bl	8003664 <HAL_GPIO_WritePin>
	mode_state = STANDBY;
 80081dc:	4b6d      	ldr	r3, [pc, #436]	; (8008394 <StandBy+0x234>)
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
	error_state = IDLE;
 80081e2:	4b6d      	ldr	r3, [pc, #436]	; (8008398 <StandBy+0x238>)
 80081e4:	2202      	movs	r2, #2
 80081e6:	701a      	strb	r2, [r3, #0]
	static char x1_dot = 0/*,count1=0*/;
	static uint8_t showARMWELD = 1; // ARMWELD animation in standBy.
	static uint8_t	enterFunction = 1;

	if (enterFunction == 1)
 80081e8:	4b6c      	ldr	r3, [pc, #432]	; (800839c <StandBy+0x23c>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d108      	bne.n	8008202 <StandBy+0xa2>
	{
		buzzer[BUZZ_NUM] = 1;
 80081f0:	4b65      	ldr	r3, [pc, #404]	; (8008388 <StandBy+0x228>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_DELAY] = 255;
 80081f6:	4b64      	ldr	r3, [pc, #400]	; (8008388 <StandBy+0x228>)
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	705a      	strb	r2, [r3, #1]
		enterFunction = 0;
 80081fc:	4b67      	ldr	r3, [pc, #412]	; (800839c <StandBy+0x23c>)
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
	}


	if (reWarning == 0 || warningVar == 0)	//need for show after some second warning occured or not any warnings.
 8008202:	4b67      	ldr	r3, [pc, #412]	; (80083a0 <StandBy+0x240>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <StandBy+0xb4>
 800820a:	4b66      	ldr	r3, [pc, #408]	; (80083a4 <StandBy+0x244>)
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 80a4 	bne.w	800835c <StandBy+0x1fc>
	{
		if (f2lcd100ms)
 8008214:	4b64      	ldr	r3, [pc, #400]	; (80083a8 <StandBy+0x248>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d075      	beq.n	800830a <StandBy+0x1aa>
		{

			// display animation of medinalTeb first time when turn on after that show "STANDBY"
			if (x1_dot >= 6 && count1 < 19)
 800821e:	4b63      	ldr	r3, [pc, #396]	; (80083ac <StandBy+0x24c>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b05      	cmp	r3, #5
 8008224:	d958      	bls.n	80082d8 <StandBy+0x178>
 8008226:	4b62      	ldr	r3, [pc, #392]	; (80083b0 <StandBy+0x250>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b12      	cmp	r3, #18
 800822c:	d854      	bhi.n	80082d8 <StandBy+0x178>
			{
				count1++;
 800822e:	4b60      	ldr	r3, [pc, #384]	; (80083b0 <StandBy+0x250>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	4b5e      	ldr	r3, [pc, #376]	; (80083b0 <StandBy+0x250>)
 8008238:	701a      	strb	r2, [r3, #0]
				if (count1 <= 5)
 800823a:	4b5d      	ldr	r3, [pc, #372]	; (80083b0 <StandBy+0x250>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b05      	cmp	r3, #5
 8008240:	d813      	bhi.n	800826a <StandBy+0x10a>
				{
					HLine(9 + count1, LCD_LINE3, LCD_UpLine, LCD_Mem0);
 8008242:	4b5b      	ldr	r3, [pc, #364]	; (80083b0 <StandBy+0x250>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	3309      	adds	r3, #9
 8008248:	b2d8      	uxtb	r0, r3
 800824a:	2300      	movs	r3, #0
 800824c:	2202      	movs	r2, #2
 800824e:	2102      	movs	r1, #2
 8008250:	f7ff fdb0 	bl	8007db4 <HLine>
					HLine(10 - count1, LCD_LINE3, LCD_UpLine, LCD_Mem0);
 8008254:	4b56      	ldr	r3, [pc, #344]	; (80083b0 <StandBy+0x250>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f1c3 030a 	rsb	r3, r3, #10
 800825c:	b2d8      	uxtb	r0, r3
 800825e:	2300      	movs	r3, #0
 8008260:	2202      	movs	r2, #2
 8008262:	2102      	movs	r1, #2
 8008264:	f7ff fda6 	bl	8007db4 <HLine>
				if (count1 <= 5)
 8008268:	e04b      	b.n	8008302 <StandBy+0x1a2>
				}
				else if (count1 == 6)
 800826a:	4b51      	ldr	r3, [pc, #324]	; (80083b0 <StandBy+0x250>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b06      	cmp	r3, #6
 8008270:	d113      	bne.n	800829a <StandBy+0x13a>
				{
					HLine(9 + count1, LCD_LINE2, LCD_RightLine, LCD_Mem1);
 8008272:	4b4f      	ldr	r3, [pc, #316]	; (80083b0 <StandBy+0x250>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	3309      	adds	r3, #9
 8008278:	b2d8      	uxtb	r0, r3
 800827a:	2301      	movs	r3, #1
 800827c:	2201      	movs	r2, #1
 800827e:	2101      	movs	r1, #1
 8008280:	f7ff fd98 	bl	8007db4 <HLine>
					HLine(10 - count1, LCD_LINE2, LCD_LeftLine, LCD_Mem2);
 8008284:	4b4a      	ldr	r3, [pc, #296]	; (80083b0 <StandBy+0x250>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	f1c3 030a 	rsb	r3, r3, #10
 800828c:	b2d8      	uxtb	r0, r3
 800828e:	2302      	movs	r3, #2
 8008290:	2203      	movs	r2, #3
 8008292:	2101      	movs	r1, #1
 8008294:	f7ff fd8e 	bl	8007db4 <HLine>
				if (count1 <= 5)
 8008298:	e033      	b.n	8008302 <StandBy+0x1a2>
				}
				else if (count1 <= 11)
 800829a:	4b45      	ldr	r3, [pc, #276]	; (80083b0 <StandBy+0x250>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d813      	bhi.n	80082ca <StandBy+0x16a>
				{
					HLine(21 - count1, LCD_LINE1, LCD_DownLine, LCD_Mem3);
 80082a2:	4b43      	ldr	r3, [pc, #268]	; (80083b0 <StandBy+0x250>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f1c3 0315 	rsb	r3, r3, #21
 80082aa:	b2d8      	uxtb	r0, r3
 80082ac:	2303      	movs	r3, #3
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	f7ff fd7f 	bl	8007db4 <HLine>
					HLine(count1 - 2, LCD_LINE1, LCD_DownLine, LCD_Mem3);
 80082b6:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <StandBy+0x250>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	3b02      	subs	r3, #2
 80082bc:	b2d8      	uxtb	r0, r3
 80082be:	2303      	movs	r3, #3
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	f7ff fd76 	bl	8007db4 <HLine>
				if (count1 <= 5)
 80082c8:	e01b      	b.n	8008302 <StandBy+0x1a2>
				}
				else if (count1 <= 12)
 80082ca:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <StandBy+0x250>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b0c      	cmp	r3, #12
 80082d0:	d817      	bhi.n	8008302 <StandBy+0x1a2>
					WeldDisplay();
 80082d2:	f7ff fdf5 	bl	8007ec0 <WeldDisplay>
				if (count1 <= 5)
 80082d6:	e014      	b.n	8008302 <StandBy+0x1a2>

			}
			else if (count1 == 19)
 80082d8:	4b35      	ldr	r3, [pc, #212]	; (80083b0 <StandBy+0x250>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b13      	cmp	r3, #19
 80082de:	d111      	bne.n	8008304 <StandBy+0x1a4>
			{
				LcdClear();
 80082e0:	f7ff fb1c 	bl	800791c <LcdClear>
				LcdPuts(7, LCD_LINE2, "STANDBY");
 80082e4:	4a33      	ldr	r2, [pc, #204]	; (80083b4 <StandBy+0x254>)
 80082e6:	2101      	movs	r1, #1
 80082e8:	2007      	movs	r0, #7
 80082ea:	f7ff fb3b 	bl	8007964 <LcdPuts>
				showARMWELD = false;
 80082ee:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <StandBy+0x258>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
				//					WELD_FAN_OFF;   // turn off fan when ARMWELD animation finish.
				count1++; // it runs just first time this (if).
 80082f4:	4b2e      	ldr	r3, [pc, #184]	; (80083b0 <StandBy+0x250>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	3301      	adds	r3, #1
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <StandBy+0x250>)
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e000      	b.n	8008304 <StandBy+0x1a4>
				if (count1 <= 5)
 8008302:	bf00      	nop
			}
			f2lcd100ms = false;
 8008304:	4b28      	ldr	r3, [pc, #160]	; (80083a8 <StandBy+0x248>)
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
		}

		if (flcd500ms)
 800830a:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <StandBy+0x25c>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d023      	beq.n	800835c <StandBy+0x1fc>
		{
			if (showARMWELD == true)
 8008314:	4b28      	ldr	r3, [pc, #160]	; (80083b8 <StandBy+0x258>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d11c      	bne.n	8008356 <StandBy+0x1f6>
			{
				//					WELD_FAN_ON;   // turn on fan when the device  is turning on.
				if (x1_dot < 6)
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <StandBy+0x24c>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b05      	cmp	r3, #5
 8008322:	d807      	bhi.n	8008334 <StandBy+0x1d4>
				{
					LcdClear();
 8008324:	f7ff fafa 	bl	800791c <LcdClear>
					x1_dot++;
 8008328:	4b20      	ldr	r3, [pc, #128]	; (80083ac <StandBy+0x24c>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	4b1e      	ldr	r3, [pc, #120]	; (80083ac <StandBy+0x24c>)
 8008332:	701a      	strb	r2, [r3, #0]
				}
				LcdPuts(x1_dot, 1, "NEKOO");
 8008334:	4b1d      	ldr	r3, [pc, #116]	; (80083ac <StandBy+0x24c>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	4a21      	ldr	r2, [pc, #132]	; (80083c0 <StandBy+0x260>)
 800833a:	2101      	movs	r1, #1
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fb11 	bl	8007964 <LcdPuts>
				LcdPuts((17 - x1_dot), 1, "RAD");
 8008342:	4b1a      	ldr	r3, [pc, #104]	; (80083ac <StandBy+0x24c>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	f1c3 0311 	rsb	r3, r3, #17
 800834a:	b2db      	uxtb	r3, r3
 800834c:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <StandBy+0x264>)
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fb07 	bl	8007964 <LcdPuts>
			}
			flcd500ms = false;
 8008356:	4b19      	ldr	r3, [pc, #100]	; (80083bc <StandBy+0x25c>)
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]
		}

	}
	if (input == KEY_STANDBY)
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	2b08      	cmp	r3, #8
 8008360:	d107      	bne.n	8008372 <StandBy+0x212>
	{
		//enterFunction = 1;
		showARMWELD = false; // because of don't show ARMWELD when come from RunMeno.
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <StandBy+0x258>)
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
		mode_state = STOP;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <StandBy+0x234>)
 800836a:	2202      	movs	r2, #2
 800836c:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 800836e:	231e      	movs	r3, #30
 8008370:	e000      	b.n	8008374 <StandBy+0x214>
	}

	return ST_STANDBY;
 8008372:	2314      	movs	r3, #20
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	48000800 	.word	0x48000800
 8008380:	48000c00 	.word	0x48000c00
 8008384:	200005f7 	.word	0x200005f7
 8008388:	200005b4 	.word	0x200005b4
 800838c:	200005f8 	.word	0x200005f8
 8008390:	20000500 	.word	0x20000500
 8008394:	2000061c 	.word	0x2000061c
 8008398:	20000073 	.word	0x20000073
 800839c:	200001ce 	.word	0x200001ce
 80083a0:	20000071 	.word	0x20000071
 80083a4:	200005f4 	.word	0x200005f4
 80083a8:	2000059f 	.word	0x2000059f
 80083ac:	200007a0 	.word	0x200007a0
 80083b0:	200005f6 	.word	0x200005f6
 80083b4:	0800de60 	.word	0x0800de60
 80083b8:	200001cf 	.word	0x200001cf
 80083bc:	200005a0 	.word	0x200005a0
 80083c0:	0800de68 	.word	0x0800de68
 80083c4:	0800de70 	.word	0x0800de70

080083c8 <MainMenu>:
 * @brief This function run when is in menue or submenu untill one of the values choose.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char MainMenu(char input)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]

	//if (HAL_GPIO_ReadPin(ShortCircuitDetect_GPIO_Port, ShortCircuitDetect_Pin) == GPIO_PIN_RESET)
	//{
		//error_state = SHORTCIRCUIT;
	//}
	if (error_state != IDLE && one_time_excute == true)
 80083d2:	4ba4      	ldr	r3, [pc, #656]	; (8008664 <MainMenu+0x29c>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d033      	beq.n	8008442 <MainMenu+0x7a>
 80083da:	4ba3      	ldr	r3, [pc, #652]	; (8008668 <MainMenu+0x2a0>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d02f      	beq.n	8008442 <MainMenu+0x7a>
	{
		HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80083e2:	2200      	movs	r2, #0
 80083e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083e8:	48a0      	ldr	r0, [pc, #640]	; (800866c <MainMenu+0x2a4>)
 80083ea:	f7fb f93b 	bl	8003664 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim2);
 80083ee:	48a0      	ldr	r0, [pc, #640]	; (8008670 <MainMenu+0x2a8>)
 80083f0:	f7fd fbda 	bl	8005ba8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80083f4:	2100      	movs	r1, #0
 80083f6:	489e      	ldr	r0, [pc, #632]	; (8008670 <MainMenu+0x2a8>)
 80083f8:	f7fd ffc0 	bl	800637c <HAL_TIM_PWM_Stop>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
 80083fc:	2104      	movs	r1, #4
 80083fe:	489c      	ldr	r0, [pc, #624]	; (8008670 <MainMenu+0x2a8>)
 8008400:	f7fd fd9c 	bl	8005f3c <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_3);
 8008404:	2108      	movs	r1, #8
 8008406:	489a      	ldr	r0, [pc, #616]	; (8008670 <MainMenu+0x2a8>)
 8008408:	f7fd fd98 	bl	8005f3c <HAL_TIM_OC_Stop_IT>
		Led1(0);
 800840c:	2200      	movs	r2, #0
 800840e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008412:	4896      	ldr	r0, [pc, #600]	; (800866c <MainMenu+0x2a4>)
 8008414:	f7fb f926 	bl	8003664 <HAL_GPIO_WritePin>
		enterFunction = 1;
 8008418:	4b96      	ldr	r3, [pc, #600]	; (8008674 <MainMenu+0x2ac>)
 800841a:	2201      	movs	r2, #1
 800841c:	701a      	strb	r2, [r3, #0]
		mode_state = STOP;
 800841e:	4b96      	ldr	r3, [pc, #600]	; (8008678 <MainMenu+0x2b0>)
 8008420:	2202      	movs	r2, #2
 8008422:	701a      	strb	r2, [r3, #0]
		blink_enable = true;
 8008424:	4b95      	ldr	r3, [pc, #596]	; (800867c <MainMenu+0x2b4>)
 8008426:	2201      	movs	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
		led_blink_timeout = 10 ;
 800842a:	4b95      	ldr	r3, [pc, #596]	; (8008680 <MainMenu+0x2b8>)
 800842c:	220a      	movs	r2, #10
 800842e:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_NUM] = 15;
 8008430:	4b94      	ldr	r3, [pc, #592]	; (8008684 <MainMenu+0x2bc>)
 8008432:	220f      	movs	r2, #15
 8008434:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_DELAY] = 200;
 8008436:	4b93      	ldr	r3, [pc, #588]	; (8008684 <MainMenu+0x2bc>)
 8008438:	22c8      	movs	r2, #200	; 0xc8
 800843a:	705a      	strb	r2, [r3, #1]
		one_time_excute = false;
 800843c:	4b8a      	ldr	r3, [pc, #552]	; (8008668 <MainMenu+0x2a0>)
 800843e:	2200      	movs	r2, #0
 8008440:	701a      	strb	r2, [r3, #0]
	}

	if (nextVariable != variable)
 8008442:	4b91      	ldr	r3, [pc, #580]	; (8008688 <MainMenu+0x2c0>)
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	4b91      	ldr	r3, [pc, #580]	; (800868c <MainMenu+0x2c4>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d067      	beq.n	800851e <MainMenu+0x156>
	{
		variable = nextVariable;
 800844e:	4b8e      	ldr	r3, [pc, #568]	; (8008688 <MainMenu+0x2c0>)
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	4b8e      	ldr	r3, [pc, #568]	; (800868c <MainMenu+0x2c4>)
 8008454:	701a      	strb	r2, [r3, #0]
		refreshLcd = true; // atention to DisplyRunMenu	function
 8008456:	4b8e      	ldr	r3, [pc, #568]	; (8008690 <MainMenu+0x2c8>)
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
		for (uint8_t currentVariable = 0; (j = StateVariable[currentVariable].variable); currentVariable++)
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e051      	b.n	8008506 <MainMenu+0x13e>
		{
			/* macro to determine which variable must be displayed in first line in  */
            #define FIRST_LINE_VAR		currentVariable-cursorLine

			if (j == variable)
 8008462:	4b8a      	ldr	r3, [pc, #552]	; (800868c <MainMenu+0x2c4>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	7b7a      	ldrb	r2, [r7, #13]
 8008468:	429a      	cmp	r2, r3
 800846a:	d149      	bne.n	8008500 <MainMenu+0x138>
			{
				adjustState = StateVariable[currentVariable].adjustState;
 800846c:	7bfa      	ldrb	r2, [r7, #15]
 800846e:	4989      	ldr	r1, [pc, #548]	; (8008694 <MainMenu+0x2cc>)
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	3308      	adds	r3, #8
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	4b86      	ldr	r3, [pc, #536]	; (8008698 <MainMenu+0x2d0>)
 8008480:	701a      	strb	r2, [r3, #0]
				for (uint8_t n = 0; n < 4; n++)
 8008482:	2300      	movs	r3, #0
 8008484:	73bb      	strb	r3, [r7, #14]
 8008486:	e037      	b.n	80084f8 <MainMenu+0x130>
				{
					statetext[n]  = StateVariable[FIRST_LINE_VAR + n].pText;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	4a84      	ldr	r2, [pc, #528]	; (800869c <MainMenu+0x2d4>)
 800848c:	7812      	ldrb	r2, [r2, #0]
 800848e:	1a9a      	subs	r2, r3, r2
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	441a      	add	r2, r3
 8008494:	7bb9      	ldrb	r1, [r7, #14]
 8008496:	487f      	ldr	r0, [pc, #508]	; (8008694 <MainMenu+0x2cc>)
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4403      	add	r3, r0
 80084a2:	3304      	adds	r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a7e      	ldr	r2, [pc, #504]	; (80086a0 <MainMenu+0x2d8>)
 80084a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					elementType[n] = StateVariable[FIRST_LINE_VAR + n].elementType;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4a7b      	ldr	r2, [pc, #492]	; (800869c <MainMenu+0x2d4>)
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	1a9a      	subs	r2, r3, r2
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	441a      	add	r2, r3
 80084b8:	7bb9      	ldrb	r1, [r7, #14]
 80084ba:	4876      	ldr	r0, [pc, #472]	; (8008694 <MainMenu+0x2cc>)
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4403      	add	r3, r0
 80084c6:	3310      	adds	r3, #16
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	4b76      	ldr	r3, [pc, #472]	; (80086a4 <MainMenu+0x2dc>)
 80084cc:	545a      	strb	r2, [r3, r1]
					pValues[n] = (ValueStruct*)StateVariable[FIRST_LINE_VAR + n].pValueStruct;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	4a72      	ldr	r2, [pc, #456]	; (800869c <MainMenu+0x2d4>)
 80084d2:	7812      	ldrb	r2, [r2, #0]
 80084d4:	1a9a      	subs	r2, r3, r2
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	441a      	add	r2, r3
 80084da:	7bb9      	ldrb	r1, [r7, #14]
 80084dc:	486d      	ldr	r0, [pc, #436]	; (8008694 <MainMenu+0x2cc>)
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4403      	add	r3, r0
 80084e8:	330c      	adds	r3, #12
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a6e      	ldr	r2, [pc, #440]	; (80086a8 <MainMenu+0x2e0>)
 80084ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				for (uint8_t n = 0; n < 4; n++)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	3301      	adds	r3, #1
 80084f6:	73bb      	strb	r3, [r7, #14]
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d9c4      	bls.n	8008488 <MainMenu+0xc0>
				}
				break;
 80084fe:	e00e      	b.n	800851e <MainMenu+0x156>
		for (uint8_t currentVariable = 0; (j = StateVariable[currentVariable].variable); currentVariable++)
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	3301      	adds	r3, #1
 8008504:	73fb      	strb	r3, [r7, #15]
 8008506:	7bfa      	ldrb	r2, [r7, #15]
 8008508:	4962      	ldr	r1, [pc, #392]	; (8008694 <MainMenu+0x2cc>)
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	737b      	strb	r3, [r7, #13]
 8008518:	7b7b      	ldrb	r3, [r7, #13]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1a1      	bne.n	8008462 <MainMenu+0x9a>
			}
		}
	}
	if (reWarning == 0 || warningVar == 0)	//need for show after some second warning occurred or not any warnings.
 800851e:	4b63      	ldr	r3, [pc, #396]	; (80086ac <MainMenu+0x2e4>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <MainMenu+0x166>
 8008526:	4b62      	ldr	r3, [pc, #392]	; (80086b0 <MainMenu+0x2e8>)
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <MainMenu+0x16a>
		DisplayRunMenu();
 800852e:	f7ff fcf3 	bl	8007f18 <DisplayRunMenu>

	if (input == KEY_STANDBY && error_state == IDLE)
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	2b08      	cmp	r3, #8
 8008536:	d111      	bne.n	800855c <MainMenu+0x194>
 8008538:	4b4a      	ldr	r3, [pc, #296]	; (8008664 <MainMenu+0x29c>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d10d      	bne.n	800855c <MainMenu+0x194>
	{
		count1 = 19;
 8008540:	4b5c      	ldr	r3, [pc, #368]	; (80086b4 <MainMenu+0x2ec>)
 8008542:	2213      	movs	r2, #19
 8008544:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8008546:	4b50      	ldr	r3, [pc, #320]	; (8008688 <MainMenu+0x2c0>)
 8008548:	221f      	movs	r2, #31
 800854a:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 800854c:	4b53      	ldr	r3, [pc, #332]	; (800869c <MainMenu+0x2d4>)
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
		variable = VA_SECOND_VARIABLE;
 8008552:	4b4e      	ldr	r3, [pc, #312]	; (800868c <MainMenu+0x2c4>)
 8008554:	2220      	movs	r2, #32
 8008556:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8008558:	2314      	movs	r3, #20
 800855a:	e07e      	b.n	800865a <MainMenu+0x292>
	}
	else if (input == KEY_ACCEPT)
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d102      	bne.n	8008568 <MainMenu+0x1a0>
	{
		return adjustState;
 8008562:	4b4d      	ldr	r3, [pc, #308]	; (8008698 <MainMenu+0x2d0>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	e078      	b.n	800865a <MainMenu+0x292>
	{
		//nextVariable = cursorLine+1;
		nextVariable = VA_FIRST_VARIABLE;
		return ST_MAIN_STATE;
	}*/
	else if (input == KEY_START && error_state == IDLE)
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d169      	bne.n	8008642 <MainMenu+0x27a>
 800856e:	4b3d      	ldr	r3, [pc, #244]	; (8008664 <MainMenu+0x29c>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d165      	bne.n	8008642 <MainMenu+0x27a>
	{
		// Act like Start Buttom
		if (enterFunction == 1)  // If it is the first time the button is pushed and the variables of frequency and time-on(duty cycle) are set
 8008576:	4b3f      	ldr	r3, [pc, #252]	; (8008674 <MainMenu+0x2ac>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d13a      	bne.n	80085f4 <MainMenu+0x22c>
		{
			TIM2->CNT = 0;
 800857e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008582:	2200      	movs	r2, #0
 8008584:	625a      	str	r2, [r3, #36]	; 0x24
			SetFrequency(Frequency);
 8008586:	4b4c      	ldr	r3, [pc, #304]	; (80086b8 <MainMenu+0x2f0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff fbd2 	bl	8007d34 <SetFrequency>
			SetDutyCycle_us(TimeOn);
 8008590:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <MainMenu+0x2f4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fbe7 	bl	8007d68 <SetDutyCycle_us>
			HAL_TIM_Base_Start(&htim2);
 800859a:	4835      	ldr	r0, [pc, #212]	; (8008670 <MainMenu+0x2a8>)
 800859c:	f7fd fa54 	bl	8005a48 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80085a0:	2100      	movs	r1, #0
 80085a2:	4833      	ldr	r0, [pc, #204]	; (8008670 <MainMenu+0x2a8>)
 80085a4:	f7fd fdfe 	bl	80061a4 <HAL_TIM_PWM_Start>
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 80085a8:	2104      	movs	r1, #4
 80085aa:	4831      	ldr	r0, [pc, #196]	; (8008670 <MainMenu+0x2a8>)
 80085ac:	f7fd fb8c 	bl	8005cc8 <HAL_TIM_OC_Start_IT>
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 80085b0:	2108      	movs	r1, #8
 80085b2:	482f      	ldr	r0, [pc, #188]	; (8008670 <MainMenu+0x2a8>)
 80085b4:	f7fd fb88 	bl	8005cc8 <HAL_TIM_OC_Start_IT>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80085b8:	2201      	movs	r2, #1
 80085ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085be:	482b      	ldr	r0, [pc, #172]	; (800866c <MainMenu+0x2a4>)
 80085c0:	f7fb f850 	bl	8003664 <HAL_GPIO_WritePin>
			Led1(1);
 80085c4:	2201      	movs	r2, #1
 80085c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085ca:	4828      	ldr	r0, [pc, #160]	; (800866c <MainMenu+0x2a4>)
 80085cc:	f7fb f84a 	bl	8003664 <HAL_GPIO_WritePin>
			enterFunction = 0;
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <MainMenu+0x2ac>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
			mode_state = RUN;
 80085d6:	4b28      	ldr	r3, [pc, #160]	; (8008678 <MainMenu+0x2b0>)
 80085d8:	2201      	movs	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
			Led3(0);
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085e2:	4822      	ldr	r0, [pc, #136]	; (800866c <MainMenu+0x2a4>)
 80085e4:	f7fb f83e 	bl	8003664 <HAL_GPIO_WritePin>
			Led4(0);
 80085e8:	2200      	movs	r2, #0
 80085ea:	2104      	movs	r1, #4
 80085ec:	4834      	ldr	r0, [pc, #208]	; (80086c0 <MainMenu+0x2f8>)
 80085ee:	f7fb f839 	bl	8003664 <HAL_GPIO_WritePin>
 80085f2:	e024      	b.n	800863e <MainMenu+0x276>
		}
		/* Act like Stop Buttom */
		else if (enterFunction == 0)
 80085f4:	4b1f      	ldr	r3, [pc, #124]	; (8008674 <MainMenu+0x2ac>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d120      	bne.n	800863e <MainMenu+0x276>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80085fc:	481c      	ldr	r0, [pc, #112]	; (8008670 <MainMenu+0x2a8>)
 80085fe:	f7fd fad3 	bl	8005ba8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8008602:	2100      	movs	r1, #0
 8008604:	481a      	ldr	r0, [pc, #104]	; (8008670 <MainMenu+0x2a8>)
 8008606:	f7fd feb9 	bl	800637c <HAL_TIM_PWM_Stop>
			HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
 800860a:	2104      	movs	r1, #4
 800860c:	4818      	ldr	r0, [pc, #96]	; (8008670 <MainMenu+0x2a8>)
 800860e:	f7fd fc95 	bl	8005f3c <HAL_TIM_OC_Stop_IT>
			HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_3);
 8008612:	2108      	movs	r1, #8
 8008614:	4816      	ldr	r0, [pc, #88]	; (8008670 <MainMenu+0x2a8>)
 8008616:	f7fd fc91 	bl	8005f3c <HAL_TIM_OC_Stop_IT>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800861a:	2200      	movs	r2, #0
 800861c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008620:	4812      	ldr	r0, [pc, #72]	; (800866c <MainMenu+0x2a4>)
 8008622:	f7fb f81f 	bl	8003664 <HAL_GPIO_WritePin>
			Led1(0);
 8008626:	2200      	movs	r2, #0
 8008628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800862c:	480f      	ldr	r0, [pc, #60]	; (800866c <MainMenu+0x2a4>)
 800862e:	f7fb f819 	bl	8003664 <HAL_GPIO_WritePin>
			enterFunction = 1;
 8008632:	4b10      	ldr	r3, [pc, #64]	; (8008674 <MainMenu+0x2ac>)
 8008634:	2201      	movs	r2, #1
 8008636:	701a      	strb	r2, [r3, #0]
			mode_state = STOP;
 8008638:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <MainMenu+0x2b0>)
 800863a:	2202      	movs	r2, #2
 800863c:	701a      	strb	r2, [r3, #0]
		}
		return ST_MAIN_STATE;
 800863e:	231e      	movs	r3, #30
 8008640:	e00b      	b.n	800865a <MainMenu+0x292>
	}
	else if (input != KEY_NULL)
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <MainMenu+0x290>
	{
		// Plain menu, clock the state machine
		nextVariable = VariableMachine(input);
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fd42 	bl	80080d4 <VariableMachine>
 8008650:	4603      	mov	r3, r0
 8008652:	461a      	mov	r2, r3
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <MainMenu+0x2c0>)
 8008656:	701a      	strb	r2, [r3, #0]
	}

	return ST_MAIN_STATE;
 8008658:	231e      	movs	r3, #30
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000073 	.word	0x20000073
 8008668:	20000072 	.word	0x20000072
 800866c:	48000800 	.word	0x48000800
 8008670:	20000500 	.word	0x20000500
 8008674:	200001d0 	.word	0x200001d0
 8008678:	2000061c 	.word	0x2000061c
 800867c:	200005f8 	.word	0x200005f8
 8008680:	200005f7 	.word	0x200005f7
 8008684:	200005b4 	.word	0x200005b4
 8008688:	200001cc 	.word	0x200001cc
 800868c:	200005d9 	.word	0x200005d9
 8008690:	200005f0 	.word	0x200005f0
 8008694:	200000c8 	.word	0x200000c8
 8008698:	200001d1 	.word	0x200001d1
 800869c:	200005da 	.word	0x200005da
 80086a0:	200005dc 	.word	0x200005dc
 80086a4:	200005ec 	.word	0x200005ec
 80086a8:	20000620 	.word	0x20000620
 80086ac:	20000071 	.word	0x20000071
 80086b0:	200005f4 	.word	0x200005f4
 80086b4:	200005f6 	.word	0x200005f6
 80086b8:	200005fc 	.word	0x200005fc
 80086bc:	20000600 	.word	0x20000600
 80086c0:	48000c00 	.word	0x48000c00

080086c4 <IntAdjust>:
 * @brief This function adjusts integer values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char IntAdjust(char input)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	71fb      	strb	r3, [r7, #7]
	//uint8_t j = 1;
	static char enterFunction = 1;

	char lcdBufferIA[15];

	if (enterFunction == 1)
 80086ce:	4ba6      	ldr	r3, [pc, #664]	; (8008968 <IntAdjust+0x2a4>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d10c      	bne.n	80086f0 <IntAdjust+0x2c>
	{
		//pValues[cursorLine]->ival=values[cursorLine+1].ival;
		TIM1->CNT = (pValues[cursorLine]->ival)*ROTARY_SPC; //The amount of variable(that cursor point it)  return to CNT of timer or QDEC .
 80086d6:	4ba5      	ldr	r3, [pc, #660]	; (800896c <IntAdjust+0x2a8>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	4ba4      	ldr	r3, [pc, #656]	; (8008970 <IntAdjust+0x2ac>)
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	005a      	lsls	r2, r3, #1
 80086e6:	4ba3      	ldr	r3, [pc, #652]	; (8008974 <IntAdjust+0x2b0>)
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24
		enterFunction = 0;
 80086ea:	4b9f      	ldr	r3, [pc, #636]	; (8008968 <IntAdjust+0x2a4>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
	}
	LcdCreateChar(0, UpDownCharacter); // "<>" character
 80086f0:	49a1      	ldr	r1, [pc, #644]	; (8008978 <IntAdjust+0x2b4>)
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7ff f992 	bl	8007a1c <LcdCreateChar>
	LcdCursorSet(13, cursorLine);
 80086f8:	4b9c      	ldr	r3, [pc, #624]	; (800896c <IntAdjust+0x2a8>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4619      	mov	r1, r3
 80086fe:	200d      	movs	r0, #13
 8008700:	f7ff fa18 	bl	8007b34 <LcdCursorSet>
	LcdData(0); //  "<>" character
 8008704:	2000      	movs	r0, #0
 8008706:	f7ff f9fd 	bl	8007b04 <LcdData>


	/* Check timer valueIA to be in range. */
	valueIA = (int16_t)TIM1->CNT / ROTARY_SPC; // int16_t to avoid of roll over timer valueIA from bottom to top.
 800870a:	4b9a      	ldr	r3, [pc, #616]	; (8008974 <IntAdjust+0x2b0>)
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	b21b      	sxth	r3, r3
 8008710:	0fda      	lsrs	r2, r3, #31
 8008712:	4413      	add	r3, r2
 8008714:	105b      	asrs	r3, r3, #1
 8008716:	83fb      	strh	r3, [r7, #30]

	if (valueIA > (int16_t)pValues[cursorLine]->upLimit)
 8008718:	4b94      	ldr	r3, [pc, #592]	; (800896c <IntAdjust+0x2a8>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	4b94      	ldr	r3, [pc, #592]	; (8008970 <IntAdjust+0x2ac>)
 8008720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008724:	edd3 7a06 	vldr	s15, [r3, #24]
 8008728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800872c:	ee17 3a90 	vmov	r3, s15
 8008730:	b21b      	sxth	r3, r3
 8008732:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008736:	429a      	cmp	r2, r3
 8008738:	dd10      	ble.n	800875c <IntAdjust+0x98>
		TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 800873a:	4b8c      	ldr	r3, [pc, #560]	; (800896c <IntAdjust+0x2a8>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	4b8b      	ldr	r3, [pc, #556]	; (8008970 <IntAdjust+0x2ac>)
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	edd3 7a06 	vldr	s15, [r3, #24]
 800874a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800874e:	ee17 3a90 	vmov	r3, s15
 8008752:	b21b      	sxth	r3, r3
 8008754:	005a      	lsls	r2, r3, #1
 8008756:	4b87      	ldr	r3, [pc, #540]	; (8008974 <IntAdjust+0x2b0>)
 8008758:	625a      	str	r2, [r3, #36]	; 0x24
 800875a:	e020      	b.n	800879e <IntAdjust+0xda>

	else if (valueIA < (int16_t)pValues[cursorLine]->downLimit)
 800875c:	4b83      	ldr	r3, [pc, #524]	; (800896c <IntAdjust+0x2a8>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	4b83      	ldr	r3, [pc, #524]	; (8008970 <IntAdjust+0x2ac>)
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	edd3 7a05 	vldr	s15, [r3, #20]
 800876c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008770:	ee17 3a90 	vmov	r3, s15
 8008774:	b21b      	sxth	r3, r3
 8008776:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800877a:	429a      	cmp	r2, r3
 800877c:	da0f      	bge.n	800879e <IntAdjust+0xda>
		TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 800877e:	4b7b      	ldr	r3, [pc, #492]	; (800896c <IntAdjust+0x2a8>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	4b7a      	ldr	r3, [pc, #488]	; (8008970 <IntAdjust+0x2ac>)
 8008786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878a:	edd3 7a05 	vldr	s15, [r3, #20]
 800878e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008792:	ee17 3a90 	vmov	r3, s15
 8008796:	b21b      	sxth	r3, r3
 8008798:	005a      	lsls	r2, r3, #1
 800879a:	4b76      	ldr	r3, [pc, #472]	; (8008974 <IntAdjust+0x2b0>)
 800879c:	625a      	str	r2, [r3, #36]	; 0x24

	// Ensure TIM1->CNT is never negative
	if ((int16_t)TIM1->CNT < 0) {
 800879e:	4b75      	ldr	r3, [pc, #468]	; (8008974 <IntAdjust+0x2b0>)
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	b21b      	sxth	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	da02      	bge.n	80087ae <IntAdjust+0xea>
	    TIM1->CNT = 0;
 80087a8:	4b72      	ldr	r3, [pc, #456]	; (8008974 <IntAdjust+0x2b0>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24
	}

	sprintf(lcdBufferIA, "%-3d", TIM1->CNT / ROTARY_SPC);
 80087ae:	4b71      	ldr	r3, [pc, #452]	; (8008974 <IntAdjust+0x2b0>)
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	085a      	lsrs	r2, r3, #1
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	4970      	ldr	r1, [pc, #448]	; (800897c <IntAdjust+0x2b8>)
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fee8 	bl	800a590 <siprintf>
	LcdPuts(LCD_X, cursorLine, lcdBufferIA);
 80087c0:	4b6a      	ldr	r3, [pc, #424]	; (800896c <IntAdjust+0x2a8>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f107 020c 	add.w	r2, r7, #12
 80087c8:	4619      	mov	r1, r3
 80087ca:	200f      	movs	r0, #15
 80087cc:	f7ff f8ca 	bl	8007964 <LcdPuts>

	switch (input)
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	f000 80b5 	beq.w	8008942 <IntAdjust+0x27e>
 80087d8:	2b08      	cmp	r3, #8
 80087da:	f300 80c0 	bgt.w	800895e <IntAdjust+0x29a>
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d003      	beq.n	80087ea <IntAdjust+0x126>
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	f000 809f 	beq.w	8008926 <IntAdjust+0x262>
 80087e8:	e0b9      	b.n	800895e <IntAdjust+0x29a>
	{
	case KEY_ACCEPT:
		pValues[cursorLine]->ival = TIM1->CNT / ROTARY_SPC;
 80087ea:	4b62      	ldr	r3, [pc, #392]	; (8008974 <IntAdjust+0x2b0>)
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	085a      	lsrs	r2, r3, #1
 80087f0:	4b5e      	ldr	r3, [pc, #376]	; (800896c <IntAdjust+0x2a8>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	4b5e      	ldr	r3, [pc, #376]	; (8008970 <IntAdjust+0x2ac>)
 80087f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087fc:	601a      	str	r2, [r3, #0]
		if (variable == VA_FREQUENCY)
 80087fe:	4b60      	ldr	r3, [pc, #384]	; (8008980 <IntAdjust+0x2bc>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b1f      	cmp	r3, #31
 8008804:	d109      	bne.n	800881a <IntAdjust+0x156>
		{
			Frequency = pValues[cursorLine]->ival;
 8008806:	4b59      	ldr	r3, [pc, #356]	; (800896c <IntAdjust+0x2a8>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	4b58      	ldr	r3, [pc, #352]	; (8008970 <IntAdjust+0x2ac>)
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a5b      	ldr	r2, [pc, #364]	; (8008984 <IntAdjust+0x2c0>)
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e06d      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_TIME_ON)
 800881a:	4b59      	ldr	r3, [pc, #356]	; (8008980 <IntAdjust+0x2bc>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b20      	cmp	r3, #32
 8008820:	d109      	bne.n	8008836 <IntAdjust+0x172>
		{
			TimeOn = pValues[cursorLine]->ival;
 8008822:	4b52      	ldr	r3, [pc, #328]	; (800896c <IntAdjust+0x2a8>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	4b51      	ldr	r3, [pc, #324]	; (8008970 <IntAdjust+0x2ac>)
 800882a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a55      	ldr	r2, [pc, #340]	; (8008988 <IntAdjust+0x2c4>)
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	e05f      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_OFFSET)
 8008836:	4b52      	ldr	r3, [pc, #328]	; (8008980 <IntAdjust+0x2bc>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b29      	cmp	r3, #41	; 0x29
 800883c:	d109      	bne.n	8008852 <IntAdjust+0x18e>
		{
			AdcOffset = pValues[cursorLine]->ival;
 800883e:	4b4b      	ldr	r3, [pc, #300]	; (800896c <IntAdjust+0x2a8>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	4b4a      	ldr	r3, [pc, #296]	; (8008970 <IntAdjust+0x2ac>)
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a4f      	ldr	r2, [pc, #316]	; (800898c <IntAdjust+0x2c8>)
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	e051      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_CALIBRATION)
 8008852:	4b4b      	ldr	r3, [pc, #300]	; (8008980 <IntAdjust+0x2bc>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b2a      	cmp	r3, #42	; 0x2a
 8008858:	d116      	bne.n	8008888 <IntAdjust+0x1c4>
		{
			AdcCalib = (float)((pValues[cursorLine]->ival * 0.001f) + 1.000f);
 800885a:	4b44      	ldr	r3, [pc, #272]	; (800896c <IntAdjust+0x2a8>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	4b43      	ldr	r3, [pc, #268]	; (8008970 <IntAdjust+0x2ac>)
 8008862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008870:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008990 <IntAdjust+0x2cc>
 8008874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800887c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008880:	4b44      	ldr	r3, [pc, #272]	; (8008994 <IntAdjust+0x2d0>)
 8008882:	edc3 7a00 	vstr	s15, [r3]
 8008886:	e036      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_DIVIDER)
 8008888:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <IntAdjust+0x2bc>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b2b      	cmp	r3, #43	; 0x2b
 800888e:	d109      	bne.n	80088a4 <IntAdjust+0x1e0>
		{
			VolDivider = pValues[cursorLine]->ival;
 8008890:	4b36      	ldr	r3, [pc, #216]	; (800896c <IntAdjust+0x2a8>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	461a      	mov	r2, r3
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <IntAdjust+0x2ac>)
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a3e      	ldr	r2, [pc, #248]	; (8008998 <IntAdjust+0x2d4>)
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	e028      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_RATIO)
 80088a4:	4b36      	ldr	r3, [pc, #216]	; (8008980 <IntAdjust+0x2bc>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b2c      	cmp	r3, #44	; 0x2c
 80088aa:	d109      	bne.n	80088c0 <IntAdjust+0x1fc>
		{
			VolRatio = pValues[cursorLine]->ival;
 80088ac:	4b2f      	ldr	r3, [pc, #188]	; (800896c <IntAdjust+0x2a8>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	4b2f      	ldr	r3, [pc, #188]	; (8008970 <IntAdjust+0x2ac>)
 80088b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a38      	ldr	r2, [pc, #224]	; (800899c <IntAdjust+0x2d8>)
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	e01a      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_TON_PRE)
 80088c0:	4b2f      	ldr	r3, [pc, #188]	; (8008980 <IntAdjust+0x2bc>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b2d      	cmp	r3, #45	; 0x2d
 80088c6:	d109      	bne.n	80088dc <IntAdjust+0x218>
		{
			TimeOnPre = pValues[cursorLine]->ival;
 80088c8:	4b28      	ldr	r3, [pc, #160]	; (800896c <IntAdjust+0x2a8>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	4b28      	ldr	r3, [pc, #160]	; (8008970 <IntAdjust+0x2ac>)
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a32      	ldr	r2, [pc, #200]	; (80089a0 <IntAdjust+0x2dc>)
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	e00c      	b.n	80088f6 <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_DELAY)
 80088dc:	4b28      	ldr	r3, [pc, #160]	; (8008980 <IntAdjust+0x2bc>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b2e      	cmp	r3, #46	; 0x2e
 80088e2:	d108      	bne.n	80088f6 <IntAdjust+0x232>
		{
			PhaseDelay = pValues[cursorLine]->ival;
 80088e4:	4b21      	ldr	r3, [pc, #132]	; (800896c <IntAdjust+0x2a8>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	4b21      	ldr	r3, [pc, #132]	; (8008970 <IntAdjust+0x2ac>)
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a2c      	ldr	r2, [pc, #176]	; (80089a4 <IntAdjust+0x2e0>)
 80088f4:	6013      	str	r3, [r2, #0]
		}
		WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);
 80088f6:	2206      	movs	r2, #6
 80088f8:	492b      	ldr	r1, [pc, #172]	; (80089a8 <IntAdjust+0x2e4>)
 80088fa:	2000      	movs	r0, #0
 80088fc:	f000 fd96 	bl	800942c <WriteValueStructArrayToEeprom>
		WriteValueStructArrayToEeprom(50,bldValues, NUMBER_OF_BLD_VARIABLES+1);
 8008900:	2207      	movs	r2, #7
 8008902:	492a      	ldr	r1, [pc, #168]	; (80089ac <IntAdjust+0x2e8>)
 8008904:	2032      	movs	r0, #50	; 0x32
 8008906:	f000 fd91 	bl	800942c <WriteValueStructArrayToEeprom>

		enterFunction = 1;
 800890a:	4b17      	ldr	r3, [pc, #92]	; (8008968 <IntAdjust+0x2a4>)
 800890c:	2201      	movs	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8008910:	4b16      	ldr	r3, [pc, #88]	; (800896c <IntAdjust+0x2a8>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	4619      	mov	r1, r3
 8008916:	200d      	movs	r0, #13
 8008918:	f7ff f90c 	bl	8007b34 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 800891c:	2020      	movs	r0, #32
 800891e:	f7ff f8f1 	bl	8007b04 <LcdData>
		return ST_MAIN_STATE;
 8008922:	231e      	movs	r3, #30
 8008924:	e01c      	b.n	8008960 <IntAdjust+0x29c>

	case KEY_BACK:
		enterFunction = 1;
 8008926:	4b10      	ldr	r3, [pc, #64]	; (8008968 <IntAdjust+0x2a4>)
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13,cursorLine);
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <IntAdjust+0x2a8>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	200d      	movs	r0, #13
 8008934:	f7ff f8fe 	bl	8007b34 <LcdCursorSet>
		LcdData(0x20);  //  "blank" character
 8008938:	2020      	movs	r0, #32
 800893a:	f7ff f8e3 	bl	8007b04 <LcdData>
		return ST_MAIN_STATE;
 800893e:	231e      	movs	r3, #30
 8008940:	e00e      	b.n	8008960 <IntAdjust+0x29c>
	case KEY_STANDBY:
		/*enterFunction = 1;
		LcdCursorSet(13, cursorLine);
		LcdData(0x20); //  "blank" character
		return ST_STANDBY;*/
		count1 = 19;
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <IntAdjust+0x2ec>)
 8008944:	2213      	movs	r2, #19
 8008946:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8008948:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <IntAdjust+0x2f0>)
 800894a:	221f      	movs	r2, #31
 800894c:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 800894e:	4b07      	ldr	r3, [pc, #28]	; (800896c <IntAdjust+0x2a8>)
 8008950:	2200      	movs	r2, #0
 8008952:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <IntAdjust+0x2bc>)
 8008956:	2250      	movs	r2, #80	; 0x50
 8008958:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 800895a:	2314      	movs	r3, #20
 800895c:	e000      	b.n	8008960 <IntAdjust+0x29c>
	}
	return ST_INT_ADJUST;
 800895e:	2332      	movs	r3, #50	; 0x32
}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	200001d2 	.word	0x200001d2
 800896c:	200005da 	.word	0x200005da
 8008970:	20000620 	.word	0x20000620
 8008974:	40012c00 	.word	0x40012c00
 8008978:	0800deac 	.word	0x0800deac
 800897c:	0800de58 	.word	0x0800de58
 8008980:	200005d9 	.word	0x200005d9
 8008984:	200005fc 	.word	0x200005fc
 8008988:	20000600 	.word	0x20000600
 800898c:	20000604 	.word	0x20000604
 8008990:	3a83126f 	.word	0x3a83126f
 8008994:	20000608 	.word	0x20000608
 8008998:	2000060c 	.word	0x2000060c
 800899c:	20000610 	.word	0x20000610
 80089a0:	20000614 	.word	0x20000614
 80089a4:	20000618 	.word	0x20000618
 80089a8:	20000630 	.word	0x20000630
 80089ac:	200006d8 	.word	0x200006d8
 80089b0:	200005f6 	.word	0x200005f6
 80089b4:	200001cc 	.word	0x200001cc

080089b8 <StringChange>:
 * @brief This function adjusts string values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char StringChange(char input)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	71fb      	strb	r3, [r7, #7]
	static char enterFunction = 1;
	static int8_t strNumTemp;
	if (enterFunction == 1)
 80089c2:	4b86      	ldr	r3, [pc, #536]	; (8008bdc <StringChange+0x224>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d10c      	bne.n	80089e4 <StringChange+0x2c>
	{
		strNumTemp = pValues[cursorLine]->strNum;
 80089ca:	4b85      	ldr	r3, [pc, #532]	; (8008be0 <StringChange+0x228>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b84      	ldr	r3, [pc, #528]	; (8008be4 <StringChange+0x22c>)
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	f993 2010 	ldrsb.w	r2, [r3, #16]
 80089da:	4b83      	ldr	r3, [pc, #524]	; (8008be8 <StringChange+0x230>)
 80089dc:	701a      	strb	r2, [r3, #0]
		enterFunction = 0;
 80089de:	4b7f      	ldr	r3, [pc, #508]	; (8008bdc <StringChange+0x224>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
	}

	switch (input)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b1f      	cmp	r3, #31
 80089ea:	f200 808b 	bhi.w	8008b04 <StringChange+0x14c>
 80089ee:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <StringChange+0x3c>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a9d 	.word	0x08008a9d
 80089f8:	08008b05 	.word	0x08008b05
 80089fc:	08008b05 	.word	0x08008b05
 8008a00:	08008acd 	.word	0x08008acd
 8008a04:	08008b05 	.word	0x08008b05
 8008a08:	08008b05 	.word	0x08008b05
 8008a0c:	08008b05 	.word	0x08008b05
 8008a10:	08008ae9 	.word	0x08008ae9
 8008a14:	08008b05 	.word	0x08008b05
 8008a18:	08008b05 	.word	0x08008b05
 8008a1c:	08008b05 	.word	0x08008b05
 8008a20:	08008b05 	.word	0x08008b05
 8008a24:	08008b05 	.word	0x08008b05
 8008a28:	08008b05 	.word	0x08008b05
 8008a2c:	08008b05 	.word	0x08008b05
 8008a30:	08008a75 	.word	0x08008a75
 8008a34:	08008b05 	.word	0x08008b05
 8008a38:	08008b05 	.word	0x08008b05
 8008a3c:	08008b05 	.word	0x08008b05
 8008a40:	08008b05 	.word	0x08008b05
 8008a44:	08008b05 	.word	0x08008b05
 8008a48:	08008b05 	.word	0x08008b05
 8008a4c:	08008b05 	.word	0x08008b05
 8008a50:	08008b05 	.word	0x08008b05
 8008a54:	08008b05 	.word	0x08008b05
 8008a58:	08008b05 	.word	0x08008b05
 8008a5c:	08008b05 	.word	0x08008b05
 8008a60:	08008b05 	.word	0x08008b05
 8008a64:	08008b05 	.word	0x08008b05
 8008a68:	08008b05 	.word	0x08008b05
 8008a6c:	08008b05 	.word	0x08008b05
 8008a70:	08008a89 	.word	0x08008a89
	{
	case ROTARY_CW_DIR:		strNumTemp++; break;
 8008a74:	4b5c      	ldr	r3, [pc, #368]	; (8008be8 <StringChange+0x230>)
 8008a76:	f993 3000 	ldrsb.w	r3, [r3]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	b25a      	sxtb	r2, r3
 8008a82:	4b59      	ldr	r3, [pc, #356]	; (8008be8 <StringChange+0x230>)
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e03d      	b.n	8008b04 <StringChange+0x14c>

	case ROTARY_CCW_DIR:	strNumTemp--; break;
 8008a88:	4b57      	ldr	r3, [pc, #348]	; (8008be8 <StringChange+0x230>)
 8008a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	b25a      	sxtb	r2, r3
 8008a96:	4b54      	ldr	r3, [pc, #336]	; (8008be8 <StringChange+0x230>)
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e033      	b.n	8008b04 <StringChange+0x14c>

	case KEY_ACCEPT:

		// store the temporary adjusted value to the global variable
		pValues[cursorLine]->strNum = strNumTemp;
 8008a9c:	4b50      	ldr	r3, [pc, #320]	; (8008be0 <StringChange+0x228>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4b50      	ldr	r3, [pc, #320]	; (8008be4 <StringChange+0x22c>)
 8008aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa8:	4a4f      	ldr	r2, [pc, #316]	; (8008be8 <StringChange+0x230>)
 8008aaa:	f992 2000 	ldrsb.w	r2, [r2]
 8008aae:	741a      	strb	r2, [r3, #16]
		{
		}

		WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);*/

		enterFunction = 1;
 8008ab0:	4b4a      	ldr	r3, [pc, #296]	; (8008bdc <StringChange+0x224>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8008ab6:	4b4a      	ldr	r3, [pc, #296]	; (8008be0 <StringChange+0x228>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	4619      	mov	r1, r3
 8008abc:	200d      	movs	r0, #13
 8008abe:	f7ff f839 	bl	8007b34 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8008ac2:	2020      	movs	r0, #32
 8008ac4:	f7ff f81e 	bl	8007b04 <LcdData>

		return ST_MAIN_STATE;
 8008ac8:	231e      	movs	r3, #30
 8008aca:	e083      	b.n	8008bd4 <StringChange+0x21c>

		case KEY_BACK:
			enterFunction = 1;
 8008acc:	4b43      	ldr	r3, [pc, #268]	; (8008bdc <StringChange+0x224>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 8008ad2:	4b43      	ldr	r3, [pc, #268]	; (8008be0 <StringChange+0x228>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	200d      	movs	r0, #13
 8008ada:	f7ff f82b 	bl	8007b34 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 8008ade:	2020      	movs	r0, #32
 8008ae0:	f7ff f810 	bl	8007b04 <LcdData>
			return ST_MAIN_STATE;
 8008ae4:	231e      	movs	r3, #30
 8008ae6:	e075      	b.n	8008bd4 <StringChange+0x21c>
	case KEY_STANDBY:
		/*enterFunction = 1;
		LcdCursorSet(13, cursorLine);
		LcdData(0x20); //  "blank" character
		return ST_STANDBY;*/
		count1 = 19;
 8008ae8:	4b40      	ldr	r3, [pc, #256]	; (8008bec <StringChange+0x234>)
 8008aea:	2213      	movs	r2, #19
 8008aec:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8008aee:	4b40      	ldr	r3, [pc, #256]	; (8008bf0 <StringChange+0x238>)
 8008af0:	221f      	movs	r2, #31
 8008af2:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 8008af4:	4b3a      	ldr	r3, [pc, #232]	; (8008be0 <StringChange+0x228>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8008afa:	4b3e      	ldr	r3, [pc, #248]	; (8008bf4 <StringChange+0x23c>)
 8008afc:	2250      	movs	r2, #80	; 0x50
 8008afe:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8008b00:	2314      	movs	r3, #20
 8008b02:	e067      	b.n	8008bd4 <StringChange+0x21c>
	}

	LcdCreateChar(0, UpDownCharacter); // "<>" character
 8008b04:	493c      	ldr	r1, [pc, #240]	; (8008bf8 <StringChange+0x240>)
 8008b06:	2000      	movs	r0, #0
 8008b08:	f7fe ff88 	bl	8007a1c <LcdCreateChar>
	LcdCursorSet(13, cursorLine);
 8008b0c:	4b34      	ldr	r3, [pc, #208]	; (8008be0 <StringChange+0x228>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	4619      	mov	r1, r3
 8008b12:	200d      	movs	r0, #13
 8008b14:	f7ff f80e 	bl	8007b34 <LcdCursorSet>
	LcdData(0); //  "<>" character
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f7fe fff3 	bl	8007b04 <LcdData>


	if (strNumTemp > pValues[cursorLine]->upLimit)
 8008b1e:	4b32      	ldr	r3, [pc, #200]	; (8008be8 <StringChange+0x230>)
 8008b20:	f993 3000 	ldrsb.w	r3, [r3]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b2c:	4b2c      	ldr	r3, [pc, #176]	; (8008be0 <StringChange+0x228>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b2c      	ldr	r3, [pc, #176]	; (8008be4 <StringChange+0x22c>)
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	edd3 7a06 	vldr	s15, [r3, #24]
 8008b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b44:	dd10      	ble.n	8008b68 <StringChange+0x1b0>
	{
		strNumTemp = pValues[cursorLine]->upLimit;
 8008b46:	4b26      	ldr	r3, [pc, #152]	; (8008be0 <StringChange+0x228>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4b25      	ldr	r3, [pc, #148]	; (8008be4 <StringChange+0x22c>)
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	edd3 7a06 	vldr	s15, [r3, #24]
 8008b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b5a:	edc7 7a00 	vstr	s15, [r7]
 8008b5e:	783b      	ldrb	r3, [r7, #0]
 8008b60:	b25a      	sxtb	r2, r3
 8008b62:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <StringChange+0x230>)
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e023      	b.n	8008bb0 <StringChange+0x1f8>
	}
	else if (strNumTemp < pValues[cursorLine]->downLimit)
 8008b68:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <StringChange+0x230>)
 8008b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b76:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <StringChange+0x228>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4b19      	ldr	r3, [pc, #100]	; (8008be4 <StringChange+0x22c>)
 8008b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b82:	edd3 7a05 	vldr	s15, [r3, #20]
 8008b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8e:	d50f      	bpl.n	8008bb0 <StringChange+0x1f8>
	{
		strNumTemp = pValues[cursorLine]->downLimit;
 8008b90:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <StringChange+0x228>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <StringChange+0x22c>)
 8008b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ba4:	edc7 7a00 	vstr	s15, [r7]
 8008ba8:	783b      	ldrb	r3, [r7, #0]
 8008baa:	b25a      	sxtb	r2, r3
 8008bac:	4b0e      	ldr	r3, [pc, #56]	; (8008be8 <StringChange+0x230>)
 8008bae:	701a      	strb	r2, [r3, #0]
	}
	LcdPuts(LCD_X, cursorLine, pValues[cursorLine]->pText[strNumTemp]);
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <StringChange+0x228>)
 8008bb2:	7819      	ldrb	r1, [r3, #0]
 8008bb4:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <StringChange+0x228>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <StringChange+0x22c>)
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	4a09      	ldr	r2, [pc, #36]	; (8008be8 <StringChange+0x230>)
 8008bc2:	f992 2000 	ldrsb.w	r2, [r2]
 8008bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	200f      	movs	r0, #15
 8008bce:	f7fe fec9 	bl	8007964 <LcdPuts>

	return ST_STR_CHANGE;
 8008bd2:	2346      	movs	r3, #70	; 0x46
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	200001d3 	.word	0x200001d3
 8008be0:	200005da 	.word	0x200005da
 8008be4:	20000620 	.word	0x20000620
 8008be8:	200007a1 	.word	0x200007a1
 8008bec:	200005f6 	.word	0x200005f6
 8008bf0:	200001cc 	.word	0x200001cc
 8008bf4:	200005d9 	.word	0x200005d9
 8008bf8:	0800deac 	.word	0x0800deac

08008bfc <FloatAdjust>:
 * @brief This function adjusts float values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char FloatAdjust(char input)
{
 8008bfc:	b5b0      	push	{r4, r5, r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
	static uint8_t mode = INTEGER_PART;
	static int FloatTemp[2];
	static char enterFunction = 1;
	char lcdBufferIA[15];

	if (enterFunction == 1)
 8008c06:	4b62      	ldr	r3, [pc, #392]	; (8008d90 <FloatAdjust+0x194>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d141      	bne.n	8008c92 <FloatAdjust+0x96>
	{
		//FloatTemp[DECIMAL_PART] = modf(pValues[cursorLine]->fval, &FloatTemp[INTEGER_PART]);
		FloatTemp[INTEGER_PART] = (int) pValues[cursorLine]->fval;
 8008c0e:	4b61      	ldr	r3, [pc, #388]	; (8008d94 <FloatAdjust+0x198>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	4b60      	ldr	r3, [pc, #384]	; (8008d98 <FloatAdjust+0x19c>)
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	edd3 7a00 	vldr	s15, [r3]
 8008c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c22:	ee17 2a90 	vmov	r2, s15
 8008c26:	4b5d      	ldr	r3, [pc, #372]	; (8008d9c <FloatAdjust+0x1a0>)
 8008c28:	601a      	str	r2, [r3, #0]
		FloatTemp[DECIMAL_PART] = round((pValues[cursorLine]->fval - FloatTemp[INTEGER_PART]) * 10);
 8008c2a:	4b5a      	ldr	r3, [pc, #360]	; (8008d94 <FloatAdjust+0x198>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4b59      	ldr	r3, [pc, #356]	; (8008d98 <FloatAdjust+0x19c>)
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	ed93 7a00 	vldr	s14, [r3]
 8008c3a:	4b58      	ldr	r3, [pc, #352]	; (8008d9c <FloatAdjust+0x1a0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c52:	ee17 0a90 	vmov	r0, s15
 8008c56:	f7f7 fc87 	bl	8000568 <__aeabi_f2d>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	ec43 2b10 	vmov	d0, r2, r3
 8008c62:	f005 f881 	bl	800dd68 <round>
 8008c66:	ec53 2b10 	vmov	r2, r3, d0
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f7f7 ff83 	bl	8000b78 <__aeabi_d2iz>
 8008c72:	4603      	mov	r3, r0
 8008c74:	4a49      	ldr	r2, [pc, #292]	; (8008d9c <FloatAdjust+0x1a0>)
 8008c76:	6053      	str	r3, [r2, #4]

		//UpLimit_DEC = round((pValues[cursorLine]->upLimit - (int)pValues[cursorLine]->upLimit)*10);
		//DownLimit_DEC = round((pValues[cursorLine]->downLimit - (int)pValues[cursorLine]->downLimit) * 10);

		if (mode == INTEGER_PART)
 8008c78:	4b49      	ldr	r3, [pc, #292]	; (8008da0 <FloatAdjust+0x1a4>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d105      	bne.n	8008c8c <FloatAdjust+0x90>
		{
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 8008c80:	4b46      	ldr	r3, [pc, #280]	; (8008d9c <FloatAdjust+0x1a0>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	b21b      	sxth	r3, r3
 8008c86:	005a      	lsls	r2, r3, #1
 8008c88:	4b46      	ldr	r3, [pc, #280]	; (8008da4 <FloatAdjust+0x1a8>)
 8008c8a:	625a      	str	r2, [r3, #36]	; 0x24
		}
		/*else if ( mode == DECIMAL_PART)
		{
			TIM1->CNT = ((int16_t)(FloatTemp[DECIMAL_PART])*10)*ROTARY_SPC;
		}*/
		enterFunction = 0;
 8008c8c:	4b40      	ldr	r3, [pc, #256]	; (8008d90 <FloatAdjust+0x194>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
	}
	if (mode == INTEGER_PART)
 8008c92:	4b43      	ldr	r3, [pc, #268]	; (8008da0 <FloatAdjust+0x1a4>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d163      	bne.n	8008d62 <FloatAdjust+0x166>
	{
		FloatTemp[INTEGER_PART] = (int16_t)TIM1->CNT / ROTARY_SPC;
 8008c9a:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <FloatAdjust+0x1a8>)
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	b21b      	sxth	r3, r3
 8008ca0:	0fda      	lsrs	r2, r3, #31
 8008ca2:	4413      	add	r3, r2
 8008ca4:	105b      	asrs	r3, r3, #1
 8008ca6:	b21b      	sxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b3c      	ldr	r3, [pc, #240]	; (8008d9c <FloatAdjust+0x1a0>)
 8008cac:	601a      	str	r2, [r3, #0]
		if (FloatTemp[INTEGER_PART] > (int16_t)pValues[cursorLine]->upLimit)
 8008cae:	4b3b      	ldr	r3, [pc, #236]	; (8008d9c <FloatAdjust+0x1a0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a38      	ldr	r2, [pc, #224]	; (8008d94 <FloatAdjust+0x198>)
 8008cb4:	7812      	ldrb	r2, [r2, #0]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4a37      	ldr	r2, [pc, #220]	; (8008d98 <FloatAdjust+0x19c>)
 8008cba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008cbe:	edd2 7a06 	vldr	s15, [r2, #24]
 8008cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cc6:	ee17 2a90 	vmov	r2, s15
 8008cca:	b212      	sxth	r2, r2
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	dd10      	ble.n	8008cf2 <FloatAdjust+0xf6>
			TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 8008cd0:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <FloatAdjust+0x198>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4b30      	ldr	r3, [pc, #192]	; (8008d98 <FloatAdjust+0x19c>)
 8008cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cdc:	edd3 7a06 	vldr	s15, [r3, #24]
 8008ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ce4:	ee17 3a90 	vmov	r3, s15
 8008ce8:	b21b      	sxth	r3, r3
 8008cea:	005a      	lsls	r2, r3, #1
 8008cec:	4b2d      	ldr	r3, [pc, #180]	; (8008da4 <FloatAdjust+0x1a8>)
 8008cee:	625a      	str	r2, [r3, #36]	; 0x24
 8008cf0:	e020      	b.n	8008d34 <FloatAdjust+0x138>

		else if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit)
 8008cf2:	4b2a      	ldr	r3, [pc, #168]	; (8008d9c <FloatAdjust+0x1a0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a27      	ldr	r2, [pc, #156]	; (8008d94 <FloatAdjust+0x198>)
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4a26      	ldr	r2, [pc, #152]	; (8008d98 <FloatAdjust+0x19c>)
 8008cfe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008d02:	edd2 7a05 	vldr	s15, [r2, #20]
 8008d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d0a:	ee17 2a90 	vmov	r2, s15
 8008d0e:	b212      	sxth	r2, r2
 8008d10:	4293      	cmp	r3, r2
 8008d12:	da0f      	bge.n	8008d34 <FloatAdjust+0x138>
			TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 8008d14:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <FloatAdjust+0x198>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4b1f      	ldr	r3, [pc, #124]	; (8008d98 <FloatAdjust+0x19c>)
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d28:	ee17 3a90 	vmov	r3, s15
 8008d2c:	b21b      	sxth	r3, r3
 8008d2e:	005a      	lsls	r2, r3, #1
 8008d30:	4b1c      	ldr	r3, [pc, #112]	; (8008da4 <FloatAdjust+0x1a8>)
 8008d32:	625a      	str	r2, [r3, #36]	; 0x24

		LcdCreateChar(0, UpDownCharacter); // "<>" character
 8008d34:	491c      	ldr	r1, [pc, #112]	; (8008da8 <FloatAdjust+0x1ac>)
 8008d36:	2000      	movs	r0, #0
 8008d38:	f7fe fe70 	bl	8007a1c <LcdCreateChar>
		   
		LcdCursorSet(19, cursorLine);
 8008d3c:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <FloatAdjust+0x198>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	2013      	movs	r0, #19
 8008d44:	f7fe fef6 	bl	8007b34 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8008d48:	2020      	movs	r0, #32
 8008d4a:	f7fe fedb 	bl	8007b04 <LcdData>
		   
		LcdCursorSet(13, cursorLine);
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <FloatAdjust+0x198>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	4619      	mov	r1, r3
 8008d54:	200d      	movs	r0, #13
 8008d56:	f7fe feed 	bl	8007b34 <LcdCursorSet>
		LcdData(0); //  "<>" character
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f7fe fed2 	bl	8007b04 <LcdData>
 8008d60:	e0c4      	b.n	8008eec <FloatAdjust+0x2f0>
	}
	else if (mode == DECIMAL_PART)
 8008d62:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <FloatAdjust+0x1a4>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	f040 80c0 	bne.w	8008eec <FloatAdjust+0x2f0>
	{
		FloatTemp[DECIMAL_PART] = (int16_t)TIM1->CNT / ROTARY_SPC;
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <FloatAdjust+0x1a8>)
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	b21b      	sxth	r3, r3
 8008d72:	0fda      	lsrs	r2, r3, #31
 8008d74:	4413      	add	r3, r2
 8008d76:	105b      	asrs	r3, r3, #1
 8008d78:	b21b      	sxth	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <FloatAdjust+0x1a0>)
 8008d7e:	605a      	str	r2, [r3, #4]
		if (FloatTemp[DECIMAL_PART] > 9)
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <FloatAdjust+0x1a0>)
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b09      	cmp	r3, #9
 8008d86:	dd11      	ble.n	8008dac <FloatAdjust+0x1b0>
			TIM1->CNT = 9*ROTARY_SPC;
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <FloatAdjust+0x1a8>)
 8008d8a:	2212      	movs	r2, #18
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d8e:	e014      	b.n	8008dba <FloatAdjust+0x1be>
 8008d90:	200001d4 	.word	0x200001d4
 8008d94:	200005da 	.word	0x200005da
 8008d98:	20000620 	.word	0x20000620
 8008d9c:	200007a4 	.word	0x200007a4
 8008da0:	200007ac 	.word	0x200007ac
 8008da4:	40012c00 	.word	0x40012c00
 8008da8:	0800deac 	.word	0x0800deac

		else if (FloatTemp[DECIMAL_PART] < 0)
 8008dac:	4bbd      	ldr	r3, [pc, #756]	; (80090a4 <FloatAdjust+0x4a8>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da02      	bge.n	8008dba <FloatAdjust+0x1be>
			TIM1->CNT = 0*ROTARY_SPC;
 8008db4:	4bbc      	ldr	r3, [pc, #752]	; (80090a8 <FloatAdjust+0x4ac>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24

        //The value of the float number should not be below downlimit of the value
		//else if (FloatTemp[DECIMAL_PART] == 0 && FloatTemp[INTEGER_PART] == 0)
			//TIM1->CNT = DownLimit_DEC*ROTARY_SPC;

		if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit ||
 8008dba:	4bba      	ldr	r3, [pc, #744]	; (80090a4 <FloatAdjust+0x4a8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4abb      	ldr	r2, [pc, #748]	; (80090ac <FloatAdjust+0x4b0>)
 8008dc0:	7812      	ldrb	r2, [r2, #0]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4aba      	ldr	r2, [pc, #744]	; (80090b0 <FloatAdjust+0x4b4>)
 8008dc6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008dca:	edd2 7a05 	vldr	s15, [r2, #20]
 8008dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dd2:	ee17 2a90 	vmov	r2, s15
 8008dd6:	b212      	sxth	r2, r2
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	db38      	blt.n	8008e4e <FloatAdjust+0x252>
		    (FloatTemp[INTEGER_PART] == (int16_t)pValues[cursorLine]->downLimit &&
 8008ddc:	4bb1      	ldr	r3, [pc, #708]	; (80090a4 <FloatAdjust+0x4a8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4ab2      	ldr	r2, [pc, #712]	; (80090ac <FloatAdjust+0x4b0>)
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4ab2      	ldr	r2, [pc, #712]	; (80090b0 <FloatAdjust+0x4b4>)
 8008de8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008dec:	edd2 7a05 	vldr	s15, [r2, #20]
 8008df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008df4:	ee17 2a90 	vmov	r2, s15
 8008df8:	b212      	sxth	r2, r2
		if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit ||
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d160      	bne.n	8008ec0 <FloatAdjust+0x2c4>
		     FloatTemp[DECIMAL_PART] < (int16_t)((pValues[cursorLine]->downLimit - (int16_t)pValues[cursorLine]->downLimit) * 10)))
 8008dfe:	4ba9      	ldr	r3, [pc, #676]	; (80090a4 <FloatAdjust+0x4a8>)
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	4aaa      	ldr	r2, [pc, #680]	; (80090ac <FloatAdjust+0x4b0>)
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	4611      	mov	r1, r2
 8008e08:	4aa9      	ldr	r2, [pc, #676]	; (80090b0 <FloatAdjust+0x4b4>)
 8008e0a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008e0e:	ed92 7a05 	vldr	s14, [r2, #20]
 8008e12:	4aa6      	ldr	r2, [pc, #664]	; (80090ac <FloatAdjust+0x4b0>)
 8008e14:	7812      	ldrb	r2, [r2, #0]
 8008e16:	4611      	mov	r1, r2
 8008e18:	4aa5      	ldr	r2, [pc, #660]	; (80090b0 <FloatAdjust+0x4b4>)
 8008e1a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008e1e:	edd2 7a05 	vldr	s15, [r2, #20]
 8008e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e26:	ee17 2a90 	vmov	r2, s15
 8008e2a:	b212      	sxth	r2, r2
 8008e2c:	ee07 2a90 	vmov	s15, r2
 8008e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e44:	ee17 2a90 	vmov	r2, s15
 8008e48:	b212      	sxth	r2, r2
		    (FloatTemp[INTEGER_PART] == (int16_t)pValues[cursorLine]->downLimit &&
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	da38      	bge.n	8008ec0 <FloatAdjust+0x2c4>
		{
		    FloatTemp[INTEGER_PART] = (int16_t)pValues[cursorLine]->downLimit;
 8008e4e:	4b97      	ldr	r3, [pc, #604]	; (80090ac <FloatAdjust+0x4b0>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b96      	ldr	r3, [pc, #600]	; (80090b0 <FloatAdjust+0x4b4>)
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e62:	ee17 3a90 	vmov	r3, s15
 8008e66:	b21b      	sxth	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4b8e      	ldr	r3, [pc, #568]	; (80090a4 <FloatAdjust+0x4a8>)
 8008e6c:	601a      	str	r2, [r3, #0]
		    FloatTemp[DECIMAL_PART] = (int16_t)((pValues[cursorLine]->downLimit - FloatTemp[INTEGER_PART]) * 10);
 8008e6e:	4b8f      	ldr	r3, [pc, #572]	; (80090ac <FloatAdjust+0x4b0>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	4b8e      	ldr	r3, [pc, #568]	; (80090b0 <FloatAdjust+0x4b4>)
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8008e7e:	4b89      	ldr	r3, [pc, #548]	; (80090a4 <FloatAdjust+0x4a8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e9a:	ee17 3a90 	vmov	r3, s15
 8008e9e:	b21b      	sxth	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b80      	ldr	r3, [pc, #512]	; (80090a4 <FloatAdjust+0x4a8>)
 8008ea4:	605a      	str	r2, [r3, #4]
		    TIM1->CNT = (FloatTemp[INTEGER_PART] * 10 + FloatTemp[DECIMAL_PART]) * ROTARY_SPC;
 8008ea6:	4b7f      	ldr	r3, [pc, #508]	; (80090a4 <FloatAdjust+0x4a8>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	4b7b      	ldr	r3, [pc, #492]	; (80090a4 <FloatAdjust+0x4a8>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	005a      	lsls	r2, r3, #1
 8008ebc:	4b7a      	ldr	r3, [pc, #488]	; (80090a8 <FloatAdjust+0x4ac>)
 8008ebe:	625a      	str	r2, [r3, #36]	; 0x24
		}
		LcdCreateChar(0, UpDownCharacter); // "<>" character
 8008ec0:	497c      	ldr	r1, [pc, #496]	; (80090b4 <FloatAdjust+0x4b8>)
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	f7fe fdaa 	bl	8007a1c <LcdCreateChar>

		LcdCursorSet(19, cursorLine);
 8008ec8:	4b78      	ldr	r3, [pc, #480]	; (80090ac <FloatAdjust+0x4b0>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	2013      	movs	r0, #19
 8008ed0:	f7fe fe30 	bl	8007b34 <LcdCursorSet>
		LcdData(0); //  "<>" character
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	f7fe fe15 	bl	8007b04 <LcdData>

		LcdCursorSet(13, cursorLine);
 8008eda:	4b74      	ldr	r3, [pc, #464]	; (80090ac <FloatAdjust+0x4b0>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	200d      	movs	r0, #13
 8008ee2:	f7fe fe27 	bl	8007b34 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8008ee6:	2020      	movs	r0, #32
 8008ee8:	f7fe fe0c 	bl	8007b04 <LcdData>
	}

	// store the temporary adjusted value to the global variable
	pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART] / 10.0f));
 8008eec:	4b6d      	ldr	r3, [pc, #436]	; (80090a4 <FloatAdjust+0x4a8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	ee07 3a90 	vmov	s15, r3
 8008ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ef8:	4b6a      	ldr	r3, [pc, #424]	; (80090a4 <FloatAdjust+0x4a8>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008f04:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8008f08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008f0c:	4b67      	ldr	r3, [pc, #412]	; (80090ac <FloatAdjust+0x4b0>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4b67      	ldr	r3, [pc, #412]	; (80090b0 <FloatAdjust+0x4b4>)
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f1c:	edc3 7a00 	vstr	s15, [r3]
	sprintf(lcdBufferIA, "%-4.1f ", pValues[cursorLine]->fval);
 8008f20:	4b62      	ldr	r3, [pc, #392]	; (80090ac <FloatAdjust+0x4b0>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b62      	ldr	r3, [pc, #392]	; (80090b0 <FloatAdjust+0x4b4>)
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f7 fb1a 	bl	8000568 <__aeabi_f2d>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	f107 0008 	add.w	r0, r7, #8
 8008f3c:	495e      	ldr	r1, [pc, #376]	; (80090b8 <FloatAdjust+0x4bc>)
 8008f3e:	f001 fb27 	bl	800a590 <siprintf>
	LcdPuts(LCD_X, cursorLine, lcdBufferIA);
 8008f42:	4b5a      	ldr	r3, [pc, #360]	; (80090ac <FloatAdjust+0x4b0>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	f107 0208 	add.w	r2, r7, #8
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	200f      	movs	r0, #15
 8008f4e:	f7fe fd09 	bl	8007964 <LcdPuts>

	switch (input)
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	2b1f      	cmp	r3, #31
 8008f58:	f200 80e0 	bhi.w	800911c <FloatAdjust+0x520>
 8008f5c:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <FloatAdjust+0x368>)
 8008f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f62:	bf00      	nop
 8008f64:	0800900d 	.word	0x0800900d
 8008f68:	0800911d 	.word	0x0800911d
 8008f6c:	0800911d 	.word	0x0800911d
 8008f70:	080090c9 	.word	0x080090c9
 8008f74:	0800911d 	.word	0x0800911d
 8008f78:	0800911d 	.word	0x0800911d
 8008f7c:	0800911d 	.word	0x0800911d
 8008f80:	08009101 	.word	0x08009101
 8008f84:	0800911d 	.word	0x0800911d
 8008f88:	0800911d 	.word	0x0800911d
 8008f8c:	0800911d 	.word	0x0800911d
 8008f90:	0800911d 	.word	0x0800911d
 8008f94:	0800911d 	.word	0x0800911d
 8008f98:	0800911d 	.word	0x0800911d
 8008f9c:	0800911d 	.word	0x0800911d
 8008fa0:	08008fe5 	.word	0x08008fe5
 8008fa4:	0800911d 	.word	0x0800911d
 8008fa8:	0800911d 	.word	0x0800911d
 8008fac:	0800911d 	.word	0x0800911d
 8008fb0:	0800911d 	.word	0x0800911d
 8008fb4:	0800911d 	.word	0x0800911d
 8008fb8:	0800911d 	.word	0x0800911d
 8008fbc:	0800911d 	.word	0x0800911d
 8008fc0:	0800911d 	.word	0x0800911d
 8008fc4:	0800911d 	.word	0x0800911d
 8008fc8:	0800911d 	.word	0x0800911d
 8008fcc:	0800911d 	.word	0x0800911d
 8008fd0:	0800911d 	.word	0x0800911d
 8008fd4:	0800911d 	.word	0x0800911d
 8008fd8:	0800911d 	.word	0x0800911d
 8008fdc:	0800911d 	.word	0x0800911d
 8008fe0:	08008ff9 	.word	0x08008ff9
	{
	case ROTARY_CW_DIR:  FloatTemp[mode]++; break;
 8008fe4:	4b35      	ldr	r3, [pc, #212]	; (80090bc <FloatAdjust+0x4c0>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	; (80090a4 <FloatAdjust+0x4a8>)
 8008fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008fee:	3201      	adds	r2, #1
 8008ff0:	492c      	ldr	r1, [pc, #176]	; (80090a4 <FloatAdjust+0x4a8>)
 8008ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ff6:	e091      	b.n	800911c <FloatAdjust+0x520>

	case ROTARY_CCW_DIR:  FloatTemp[mode]--; break;
 8008ff8:	4b30      	ldr	r3, [pc, #192]	; (80090bc <FloatAdjust+0x4c0>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	4a29      	ldr	r2, [pc, #164]	; (80090a4 <FloatAdjust+0x4a8>)
 8008ffe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009002:	3a01      	subs	r2, #1
 8009004:	4927      	ldr	r1, [pc, #156]	; (80090a4 <FloatAdjust+0x4a8>)
 8009006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800900a:	e087      	b.n	800911c <FloatAdjust+0x520>

	case KEY_ACCEPT:

		pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART] / 10.0));
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <FloatAdjust+0x4a8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4618      	mov	r0, r3
 8009012:	f7f7 fa97 	bl	8000544 <__aeabi_i2d>
 8009016:	4604      	mov	r4, r0
 8009018:	460d      	mov	r5, r1
 800901a:	4b22      	ldr	r3, [pc, #136]	; (80090a4 <FloatAdjust+0x4a8>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 fa90 	bl	8000544 <__aeabi_i2d>
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	4b25      	ldr	r3, [pc, #148]	; (80090c0 <FloatAdjust+0x4c4>)
 800902a:	f7f7 fc1f 	bl	800086c <__aeabi_ddiv>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 f939 	bl	80002ac <__adddf3>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	491b      	ldr	r1, [pc, #108]	; (80090ac <FloatAdjust+0x4b0>)
 8009040:	7809      	ldrb	r1, [r1, #0]
 8009042:	4608      	mov	r0, r1
 8009044:	491a      	ldr	r1, [pc, #104]	; (80090b0 <FloatAdjust+0x4b4>)
 8009046:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	f7f7 fddb 	bl	8000c08 <__aeabi_d2f>
 8009052:	4603      	mov	r3, r0
 8009054:	6023      	str	r3, [r4, #0]
		if (mode == INTEGER_PART)
 8009056:	4b19      	ldr	r3, [pc, #100]	; (80090bc <FloatAdjust+0x4c0>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10c      	bne.n	8009078 <FloatAdjust+0x47c>
		{
			mode++;
 800905e:	4b17      	ldr	r3, [pc, #92]	; (80090bc <FloatAdjust+0x4c0>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	b2da      	uxtb	r2, r3
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <FloatAdjust+0x4c0>)
 8009068:	701a      	strb	r2, [r3, #0]
			TIM1->CNT = (int16_t)(FloatTemp[DECIMAL_PART])*ROTARY_SPC;
 800906a:	4b0e      	ldr	r3, [pc, #56]	; (80090a4 <FloatAdjust+0x4a8>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	b21b      	sxth	r3, r3
 8009070:	005a      	lsls	r2, r3, #1
 8009072:	4b0d      	ldr	r3, [pc, #52]	; (80090a8 <FloatAdjust+0x4ac>)
 8009074:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8009076:	e051      	b.n	800911c <FloatAdjust+0x520>
		}
		else if (mode == DECIMAL_PART)
 8009078:	4b10      	ldr	r3, [pc, #64]	; (80090bc <FloatAdjust+0x4c0>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d123      	bne.n	80090c8 <FloatAdjust+0x4cc>
				TimeOn = (pValues[cursorLine]->fval / 1.000);
			}

			WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);*/

			mode = INTEGER_PART;
 8009080:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <FloatAdjust+0x4c0>)
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
			enterFunction = 1;
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <FloatAdjust+0x4c8>)
 8009088:	2201      	movs	r2, #1
 800908a:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(19, cursorLine);
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <FloatAdjust+0x4b0>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	2013      	movs	r0, #19
 8009094:	f7fe fd4e 	bl	8007b34 <LcdCursorSet>
			LcdData(0x20); //  "blank" character
 8009098:	2020      	movs	r0, #32
 800909a:	f7fe fd33 	bl	8007b04 <LcdData>
			return ST_MAIN_STATE;
 800909e:	231e      	movs	r3, #30
 80090a0:	e03d      	b.n	800911e <FloatAdjust+0x522>
 80090a2:	bf00      	nop
 80090a4:	200007a4 	.word	0x200007a4
 80090a8:	40012c00 	.word	0x40012c00
 80090ac:	200005da 	.word	0x200005da
 80090b0:	20000620 	.word	0x20000620
 80090b4:	0800deac 	.word	0x0800deac
 80090b8:	0800de74 	.word	0x0800de74
 80090bc:	200007ac 	.word	0x200007ac
 80090c0:	40240000 	.word	0x40240000
 80090c4:	200001d4 	.word	0x200001d4
		}

    case KEY_BACK:
		if (mode == DECIMAL_PART)
 80090c8:	4b17      	ldr	r3, [pc, #92]	; (8009128 <FloatAdjust+0x52c>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d109      	bne.n	80090e4 <FloatAdjust+0x4e8>
		{
			mode=INTEGER_PART;
 80090d0:	4b15      	ldr	r3, [pc, #84]	; (8009128 <FloatAdjust+0x52c>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	701a      	strb	r2, [r3, #0]
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 80090d6:	4b15      	ldr	r3, [pc, #84]	; (800912c <FloatAdjust+0x530>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	b21b      	sxth	r3, r3
 80090dc:	005a      	lsls	r2, r3, #1
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <FloatAdjust+0x534>)
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80090e2:	e01b      	b.n	800911c <FloatAdjust+0x520>
		}

		else
		{
			enterFunction = 1;
 80090e4:	4b13      	ldr	r3, [pc, #76]	; (8009134 <FloatAdjust+0x538>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 80090ea:	4b13      	ldr	r3, [pc, #76]	; (8009138 <FloatAdjust+0x53c>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	200d      	movs	r0, #13
 80090f2:	f7fe fd1f 	bl	8007b34 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 80090f6:	2020      	movs	r0, #32
 80090f8:	f7fe fd04 	bl	8007b04 <LcdData>
			return ST_MAIN_STATE;
 80090fc:	231e      	movs	r3, #30
 80090fe:	e00e      	b.n	800911e <FloatAdjust+0x522>
	case KEY_STANDBY:
		/*enterFunction = 1;
		LcdCursorSet(13, cursorLine);
		LcdData(0x20); //  "blank" character
		return ST_STANDBY;*/
		count1 = 19;
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <FloatAdjust+0x540>)
 8009102:	2213      	movs	r2, #19
 8009104:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8009106:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <FloatAdjust+0x544>)
 8009108:	221f      	movs	r2, #31
 800910a:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <FloatAdjust+0x53c>)
 800910e:	2200      	movs	r2, #0
 8009110:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8009112:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <FloatAdjust+0x548>)
 8009114:	2250      	movs	r2, #80	; 0x50
 8009116:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8009118:	2314      	movs	r3, #20
 800911a:	e000      	b.n	800911e <FloatAdjust+0x522>
	}

	return ST_FLT_ADJUST;
 800911c:	233c      	movs	r3, #60	; 0x3c
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bdb0      	pop	{r4, r5, r7, pc}
 8009126:	bf00      	nop
 8009128:	200007ac 	.word	0x200007ac
 800912c:	200007a4 	.word	0x200007a4
 8009130:	40012c00 	.word	0x40012c00
 8009134:	200001d4 	.word	0x200001d4
 8009138:	200005da 	.word	0x200005da
 800913c:	200005f6 	.word	0x200005f6
 8009140:	200001cc 	.word	0x200001cc
 8009144:	200005d9 	.word	0x200005d9

08009148 <WriteValueStructToEeprom>:
 * @param page The page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param data Pointer to the ValueStruct to be written.
 */
void WriteValueStructToEeprom(uint16_t page, uint16_t offset, ValueStruct* data)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	603a      	str	r2, [r7, #0]
 8009152:	80fb      	strh	r3, [r7, #6]
 8009154:	460b      	mov	r3, r1
 8009156:	80bb      	strh	r3, [r7, #4]
	    return;

	if (page >= EEPROM_TOTAL_PAGES)
	    return;*/

    uint16_t currentOffset = offset;
 8009158:	88bb      	ldrh	r3, [r7, #4]
 800915a:	82fb      	strh	r3, [r7, #22]

    // Write strNum
    WriteToEeprom(page, currentOffset, (uint8_t*)&data->strNum, sizeof(int8_t));
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f103 0210 	add.w	r2, r3, #16
 8009162:	8af9      	ldrh	r1, [r7, #22]
 8009164:	88f8      	ldrh	r0, [r7, #6]
 8009166:	2301      	movs	r3, #1
 8009168:	f7fe f96e 	bl	8007448 <WriteToEeprom>
    currentOffset += sizeof(int8_t);
 800916c:	8afb      	ldrh	r3, [r7, #22]
 800916e:	3301      	adds	r3, #1
 8009170:	82fb      	strh	r3, [r7, #22]

    // Write downLimit
    WriteFloatToEeprom(page, currentOffset, data->downLimit);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	edd3 7a05 	vldr	s15, [r3, #20]
 8009178:	8afa      	ldrh	r2, [r7, #22]
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	eeb0 0a67 	vmov.f32	s0, s15
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fa08 	bl	8007598 <WriteFloatToEeprom>
    currentOffset += sizeof(float);
 8009188:	8afb      	ldrh	r3, [r7, #22]
 800918a:	3304      	adds	r3, #4
 800918c:	82fb      	strh	r3, [r7, #22]

    // Write upLimit
    WriteFloatToEeprom(page, currentOffset, data->upLimit);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	edd3 7a06 	vldr	s15, [r3, #24]
 8009194:	8afa      	ldrh	r2, [r7, #22]
 8009196:	88fb      	ldrh	r3, [r7, #6]
 8009198:	eeb0 0a67 	vmov.f32	s0, s15
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe f9fa 	bl	8007598 <WriteFloatToEeprom>
    currentOffset += sizeof(float);
 80091a4:	8afb      	ldrh	r3, [r7, #22]
 80091a6:	3304      	adds	r3, #4
 80091a8:	82fb      	strh	r3, [r7, #22]

    // Write union data based on strNum
    if (data->strNum >= 0 && data->strNum <= 3) {
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	db44      	blt.n	800923e <WriteValueStructToEeprom+0xf6>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	dc3f      	bgt.n	800923e <WriteValueStructToEeprom+0xf6>
        // Write pText array
        for (int i = 0; i < 4; i++) {
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	e038      	b.n	8009236 <WriteValueStructToEeprom+0xee>
            if (data->pText[i] != NULL) {
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d023      	beq.n	8009218 <WriteValueStructToEeprom+0xd0>
                uint8_t len = strlen(data->pText[i]);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	4618      	mov	r0, r3
 80091da:	f7f7 f859 	bl	8000290 <strlen>
 80091de:	4603      	mov	r3, r0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	73fb      	strb	r3, [r7, #15]
                WriteToEeprom(page, currentOffset, &len, sizeof(uint8_t));
 80091e4:	f107 020f 	add.w	r2, r7, #15
 80091e8:	8af9      	ldrh	r1, [r7, #22]
 80091ea:	88f8      	ldrh	r0, [r7, #6]
 80091ec:	2301      	movs	r3, #1
 80091ee:	f7fe f92b 	bl	8007448 <WriteToEeprom>
                currentOffset += sizeof(uint8_t);
 80091f2:	8afb      	ldrh	r3, [r7, #22]
 80091f4:	3301      	adds	r3, #1
 80091f6:	82fb      	strh	r3, [r7, #22]
                WriteToEeprom(page, currentOffset, (uint8_t*)data->pText[i], len);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	b29b      	uxth	r3, r3
 8009204:	8af9      	ldrh	r1, [r7, #22]
 8009206:	88f8      	ldrh	r0, [r7, #6]
 8009208:	f7fe f91e 	bl	8007448 <WriteToEeprom>
                currentOffset += len;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	b29a      	uxth	r2, r3
 8009210:	8afb      	ldrh	r3, [r7, #22]
 8009212:	4413      	add	r3, r2
 8009214:	82fb      	strh	r3, [r7, #22]
 8009216:	e00b      	b.n	8009230 <WriteValueStructToEeprom+0xe8>
            } else {
                uint8_t len = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	73bb      	strb	r3, [r7, #14]
                WriteToEeprom(page, currentOffset, &len, sizeof(uint8_t));
 800921c:	f107 020e 	add.w	r2, r7, #14
 8009220:	8af9      	ldrh	r1, [r7, #22]
 8009222:	88f8      	ldrh	r0, [r7, #6]
 8009224:	2301      	movs	r3, #1
 8009226:	f7fe f90f 	bl	8007448 <WriteToEeprom>
                currentOffset += sizeof(uint8_t);
 800922a:	8afb      	ldrh	r3, [r7, #22]
 800922c:	3301      	adds	r3, #1
 800922e:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 4; i++) {
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3301      	adds	r3, #1
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b03      	cmp	r3, #3
 800923a:	ddc3      	ble.n	80091c4 <WriteValueStructToEeprom+0x7c>
 800923c:	e01c      	b.n	8009278 <WriteValueStructToEeprom+0x130>
            }
        }
    } else if (data->strNum == 10) {
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009244:	2b0a      	cmp	r3, #10
 8009246:	d10b      	bne.n	8009260 <WriteValueStructToEeprom+0x118>
        // Write fval
        WriteFloatToEeprom(page, currentOffset, data->fval);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	edd3 7a00 	vldr	s15, [r3]
 800924e:	8afa      	ldrh	r2, [r7, #22]
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	eeb0 0a67 	vmov.f32	s0, s15
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe f99d 	bl	8007598 <WriteFloatToEeprom>
    } else if (data->strNum == 20){
        // Write ival
        WriteToEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
    }
}
 800925e:	e00b      	b.n	8009278 <WriteValueStructToEeprom+0x130>
    } else if (data->strNum == 20){
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009266:	2b14      	cmp	r3, #20
 8009268:	d106      	bne.n	8009278 <WriteValueStructToEeprom+0x130>
        WriteToEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	8af9      	ldrh	r1, [r7, #22]
 800926e:	88f8      	ldrh	r0, [r7, #6]
 8009270:	2304      	movs	r3, #4
 8009272:	f7fe f8e9 	bl	8007448 <WriteToEeprom>
}
 8009276:	e7ff      	b.n	8009278 <WriteValueStructToEeprom+0x130>
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <ReadValueStructFromEeprom>:
 * @param page The page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param data Pointer to the ValueStruct where the read data will be stored.
 */
void ReadValueStructFromEeprom(uint16_t page, uint16_t offset, ValueStruct* data)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	603a      	str	r2, [r7, #0]
 800928a:	80fb      	strh	r3, [r7, #6]
 800928c:	460b      	mov	r3, r1
 800928e:	80bb      	strh	r3, [r7, #4]
    uint16_t currentOffset = offset;
 8009290:	88bb      	ldrh	r3, [r7, #4]
 8009292:	82fb      	strh	r3, [r7, #22]

    // Read strNum
    ReadFromEeprom(page, currentOffset, (uint8_t*)&data->strNum, sizeof(int8_t));
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	f103 0210 	add.w	r2, r3, #16
 800929a:	8af9      	ldrh	r1, [r7, #22]
 800929c:	88f8      	ldrh	r0, [r7, #6]
 800929e:	2301      	movs	r3, #1
 80092a0:	f7fe f9b2 	bl	8007608 <ReadFromEeprom>
    currentOffset += sizeof(int8_t);
 80092a4:	8afb      	ldrh	r3, [r7, #22]
 80092a6:	3301      	adds	r3, #1
 80092a8:	82fb      	strh	r3, [r7, #22]

    // Read downLimit
    data->downLimit = ReadFloatFromEeprom(page, currentOffset);
 80092aa:	8afa      	ldrh	r2, [r7, #22]
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe f98d 	bl	80075d0 <ReadFloatFromEeprom>
 80092b6:	eef0 7a40 	vmov.f32	s15, s0
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	edc3 7a05 	vstr	s15, [r3, #20]
    currentOffset += sizeof(float);
 80092c0:	8afb      	ldrh	r3, [r7, #22]
 80092c2:	3304      	adds	r3, #4
 80092c4:	82fb      	strh	r3, [r7, #22]

    // Read upLimit
    data->upLimit = ReadFloatFromEeprom(page, currentOffset);
 80092c6:	8afa      	ldrh	r2, [r7, #22]
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe f97f 	bl	80075d0 <ReadFloatFromEeprom>
 80092d2:	eef0 7a40 	vmov.f32	s15, s0
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	edc3 7a06 	vstr	s15, [r3, #24]
    currentOffset += sizeof(float);
 80092dc:	8afb      	ldrh	r3, [r7, #22]
 80092de:	3304      	adds	r3, #4
 80092e0:	82fb      	strh	r3, [r7, #22]

    // Read union data based on strNum
    if (data->strNum >= 0 && data->strNum <= 3) {
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	db76      	blt.n	80093da <ReadValueStructFromEeprom+0x15a>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	dc71      	bgt.n	80093da <ReadValueStructFromEeprom+0x15a>
        // Read pText array
        for (int i = 0; i < 4; i++) {
 80092f6:	2300      	movs	r3, #0
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	e06a      	b.n	80093d2 <ReadValueStructFromEeprom+0x152>
            uint8_t len;
            ReadFromEeprom(page, currentOffset, &len, sizeof(uint8_t));
 80092fc:	f107 020b 	add.w	r2, r7, #11
 8009300:	8af9      	ldrh	r1, [r7, #22]
 8009302:	88f8      	ldrh	r0, [r7, #6]
 8009304:	2301      	movs	r3, #1
 8009306:	f7fe f97f 	bl	8007608 <ReadFromEeprom>
            currentOffset += sizeof(uint8_t);
 800930a:	8afb      	ldrh	r3, [r7, #22]
 800930c:	3301      	adds	r3, #1
 800930e:	82fb      	strh	r3, [r7, #22]

            if (len > 0) {
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d055      	beq.n	80093c2 <ReadValueStructFromEeprom+0x142>
                char* temp = (char*)malloc(len + 1);
 8009316:	7afb      	ldrb	r3, [r7, #11]
 8009318:	3301      	adds	r3, #1
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f944 	bl	80095a8 <malloc>
 8009320:	4603      	mov	r3, r0
 8009322:	60fb      	str	r3, [r7, #12]
                ReadFromEeprom(page, currentOffset, (uint8_t*)temp, len);
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	b29b      	uxth	r3, r3
 8009328:	8af9      	ldrh	r1, [r7, #22]
 800932a:	88f8      	ldrh	r0, [r7, #6]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	f7fe f96b 	bl	8007608 <ReadFromEeprom>
                temp[len] = '\0';
 8009332:	7afb      	ldrb	r3, [r7, #11]
 8009334:	461a      	mov	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4413      	add	r3, r2
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
                currentOffset += len;
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	b29a      	uxth	r2, r3
 8009342:	8afb      	ldrh	r3, [r7, #22]
 8009344:	4413      	add	r3, r2
 8009346:	82fb      	strh	r3, [r7, #22]

                // Match the read string with the constants
                if (strcmp(temp, NON) == 0) data->pText[i] = NON;
 8009348:	4934      	ldr	r1, [pc, #208]	; (800941c <ReadValueStructFromEeprom+0x19c>)
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7f6 ff40 	bl	80001d0 <strcmp>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <ReadValueStructFromEeprom+0xe2>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4930      	ldr	r1, [pc, #192]	; (800941c <ReadValueStructFromEeprom+0x19c>)
 800935c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009360:	e02b      	b.n	80093ba <ReadValueStructFromEeprom+0x13a>
                else if (strcmp(temp, LOW) == 0) data->pText[i] = LOW;
 8009362:	492f      	ldr	r1, [pc, #188]	; (8009420 <ReadValueStructFromEeprom+0x1a0>)
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7f6 ff33 	bl	80001d0 <strcmp>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <ReadValueStructFromEeprom+0xfc>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	492a      	ldr	r1, [pc, #168]	; (8009420 <ReadValueStructFromEeprom+0x1a0>)
 8009376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800937a:	e01e      	b.n	80093ba <ReadValueStructFromEeprom+0x13a>
                else if (strcmp(temp, MED) == 0) data->pText[i] = MED;
 800937c:	4929      	ldr	r1, [pc, #164]	; (8009424 <ReadValueStructFromEeprom+0x1a4>)
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f7f6 ff26 	bl	80001d0 <strcmp>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <ReadValueStructFromEeprom+0x116>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4925      	ldr	r1, [pc, #148]	; (8009424 <ReadValueStructFromEeprom+0x1a4>)
 8009390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009394:	e011      	b.n	80093ba <ReadValueStructFromEeprom+0x13a>
                else if (strcmp(temp, HIGH) == 0) data->pText[i] = HIGH;
 8009396:	4924      	ldr	r1, [pc, #144]	; (8009428 <ReadValueStructFromEeprom+0x1a8>)
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7f6 ff19 	bl	80001d0 <strcmp>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d105      	bne.n	80093b0 <ReadValueStructFromEeprom+0x130>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	491f      	ldr	r1, [pc, #124]	; (8009428 <ReadValueStructFromEeprom+0x1a8>)
 80093aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80093ae:	e004      	b.n	80093ba <ReadValueStructFromEeprom+0x13a>
                else data->pText[i] = NULL;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	2100      	movs	r1, #0
 80093b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                free(temp);
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 f8fc 	bl	80095b8 <free>
 80093c0:	e004      	b.n	80093cc <ReadValueStructFromEeprom+0x14c>
            } else {
                data->pText[i] = NULL;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	2100      	movs	r1, #0
 80093c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < 4; i++) {
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3301      	adds	r3, #1
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	dd91      	ble.n	80092fc <ReadValueStructFromEeprom+0x7c>
 80093d8:	e01c      	b.n	8009414 <ReadValueStructFromEeprom+0x194>
            }
        }
    } else if (data->strNum == 10) {
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80093e0:	2b0a      	cmp	r3, #10
 80093e2:	d10b      	bne.n	80093fc <ReadValueStructFromEeprom+0x17c>
        // Read fval
        data->fval = ReadFloatFromEeprom(page, currentOffset);
 80093e4:	8afa      	ldrh	r2, [r7, #22]
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe f8f0 	bl	80075d0 <ReadFloatFromEeprom>
 80093f0:	eef0 7a40 	vmov.f32	s15, s0
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	edc3 7a00 	vstr	s15, [r3]
    } else if (data->strNum == 20){
        // Read ival
        ReadFromEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
    }
}
 80093fa:	e00b      	b.n	8009414 <ReadValueStructFromEeprom+0x194>
    } else if (data->strNum == 20){
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009402:	2b14      	cmp	r3, #20
 8009404:	d106      	bne.n	8009414 <ReadValueStructFromEeprom+0x194>
        ReadFromEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	8af9      	ldrh	r1, [r7, #22]
 800940a:	88f8      	ldrh	r0, [r7, #6]
 800940c:	2304      	movs	r3, #4
 800940e:	f7fe f8fb 	bl	8007608 <ReadFromEeprom>
}
 8009412:	e7ff      	b.n	8009414 <ReadValueStructFromEeprom+0x194>
 8009414:	bf00      	nop
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	0800defc 	.word	0x0800defc
 8009420:	0800df04 	.word	0x0800df04
 8009424:	0800df0c 	.word	0x0800df0c
 8009428:	0800df14 	.word	0x0800df14

0800942c <WriteValueStructArrayToEeprom>:
 * @param startPage The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param data Pointer to the array of ValueStruct to be written.
 * @param arraySize The number of ValueStruct elements in the array.
 */
void WriteValueStructArrayToEeprom(uint16_t startPage, ValueStruct* data, uint16_t arraySize)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	80fb      	strh	r3, [r7, #6]
 8009438:	4613      	mov	r3, r2
 800943a:	80bb      	strh	r3, [r7, #4]
    uint16_t currentPage = startPage;
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	81fb      	strh	r3, [r7, #14]
    uint16_t currentOffset = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < arraySize; i++)
 8009444:	2300      	movs	r3, #0
 8009446:	817b      	strh	r3, [r7, #10]
 8009448:	e01b      	b.n	8009482 <WriteValueStructArrayToEeprom+0x56>
    {
        WriteValueStructToEeprom(currentPage, currentOffset, &data[i]);
 800944a:	897a      	ldrh	r2, [r7, #10]
 800944c:	4613      	mov	r3, r2
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	461a      	mov	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	441a      	add	r2, r3
 800945a:	89b9      	ldrh	r1, [r7, #12]
 800945c:	89fb      	ldrh	r3, [r7, #14]
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff fe72 	bl	8009148 <WriteValueStructToEeprom>

        // Move to the next page if we're close to the end of the current page
        currentOffset += sizeof(ValueStruct);
 8009464:	89bb      	ldrh	r3, [r7, #12]
 8009466:	331c      	adds	r3, #28
 8009468:	81bb      	strh	r3, [r7, #12]
        if (currentOffset + sizeof(ValueStruct) > EEPROM_PAGE_SIZE)
 800946a:	89bb      	ldrh	r3, [r7, #12]
 800946c:	331c      	adds	r3, #28
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d904      	bls.n	800947c <WriteValueStructArrayToEeprom+0x50>
        {
            currentPage++;
 8009472:	89fb      	ldrh	r3, [r7, #14]
 8009474:	3301      	adds	r3, #1
 8009476:	81fb      	strh	r3, [r7, #14]
            currentOffset = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < arraySize; i++)
 800947c:	897b      	ldrh	r3, [r7, #10]
 800947e:	3301      	adds	r3, #1
 8009480:	817b      	strh	r3, [r7, #10]
 8009482:	897a      	ldrh	r2, [r7, #10]
 8009484:	88bb      	ldrh	r3, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d3df      	bcc.n	800944a <WriteValueStructArrayToEeprom+0x1e>
        }
    }
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <ReadValueStructArrayFromEeprom>:
 * @param startPage The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param data Pointer to the array where the read ValueStruct elements will be stored.
 * @param arraySize The number of ValueStruct elements to read.
 */
void ReadValueStructArrayFromEeprom(uint16_t startPage, ValueStruct* data, uint16_t arraySize)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	80fb      	strh	r3, [r7, #6]
 80094a0:	4613      	mov	r3, r2
 80094a2:	80bb      	strh	r3, [r7, #4]
    uint16_t currentPage = startPage;
 80094a4:	88fb      	ldrh	r3, [r7, #6]
 80094a6:	81fb      	strh	r3, [r7, #14]
    uint16_t currentOffset = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < arraySize; i++)
 80094ac:	2300      	movs	r3, #0
 80094ae:	817b      	strh	r3, [r7, #10]
 80094b0:	e01b      	b.n	80094ea <ReadValueStructArrayFromEeprom+0x56>
    {
        ReadValueStructFromEeprom(currentPage, currentOffset, &data[i]);
 80094b2:	897a      	ldrh	r2, [r7, #10]
 80094b4:	4613      	mov	r3, r2
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	461a      	mov	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	441a      	add	r2, r3
 80094c2:	89b9      	ldrh	r1, [r7, #12]
 80094c4:	89fb      	ldrh	r3, [r7, #14]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7ff feda 	bl	8009280 <ReadValueStructFromEeprom>

        // Move to the next page if we're close to the end of the current page
        currentOffset += sizeof(ValueStruct);
 80094cc:	89bb      	ldrh	r3, [r7, #12]
 80094ce:	331c      	adds	r3, #28
 80094d0:	81bb      	strh	r3, [r7, #12]
        if (currentOffset + sizeof(ValueStruct) > EEPROM_PAGE_SIZE)
 80094d2:	89bb      	ldrh	r3, [r7, #12]
 80094d4:	331c      	adds	r3, #28
 80094d6:	2b40      	cmp	r3, #64	; 0x40
 80094d8:	d904      	bls.n	80094e4 <ReadValueStructArrayFromEeprom+0x50>
        {
            currentPage++;
 80094da:	89fb      	ldrh	r3, [r7, #14]
 80094dc:	3301      	adds	r3, #1
 80094de:	81fb      	strh	r3, [r7, #14]
            currentOffset = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < arraySize; i++)
 80094e4:	897b      	ldrh	r3, [r7, #10]
 80094e6:	3301      	adds	r3, #1
 80094e8:	817b      	strh	r3, [r7, #10]
 80094ea:	897a      	ldrh	r2, [r7, #10]
 80094ec:	88bb      	ldrh	r3, [r7, #4]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d3df      	bcc.n	80094b2 <ReadValueStructArrayFromEeprom+0x1e>
        }
    }
}
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <InitValueReadFromEeprom>:

/**
 * @brief read init values from external eeprom.
 */
void InitValueReadFromEeprom(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
	ReadValueStructArrayFromEeprom(0,values, NUMBER_OF_VARIABLES+1);
 8009500:	2206      	movs	r2, #6
 8009502:	491e      	ldr	r1, [pc, #120]	; (800957c <InitValueReadFromEeprom+0x80>)
 8009504:	2000      	movs	r0, #0
 8009506:	f7ff ffc5 	bl	8009494 <ReadValueStructArrayFromEeprom>
	Frequency = values[1].ival;
 800950a:	4b1c      	ldr	r3, [pc, #112]	; (800957c <InitValueReadFromEeprom+0x80>)
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	4a1c      	ldr	r2, [pc, #112]	; (8009580 <InitValueReadFromEeprom+0x84>)
 8009510:	6013      	str	r3, [r2, #0]
	TimeOn = values[2].ival;
 8009512:	4b1a      	ldr	r3, [pc, #104]	; (800957c <InitValueReadFromEeprom+0x80>)
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	4a1b      	ldr	r2, [pc, #108]	; (8009584 <InitValueReadFromEeprom+0x88>)
 8009518:	6013      	str	r3, [r2, #0]
	ReadVoltageADC();
 800951a:	f7fe fb97 	bl	8007c4c <ReadVoltageADC>
	ReadValueStructArrayFromEeprom(50,bldValues, NUMBER_OF_BLD_VARIABLES+1);
 800951e:	2207      	movs	r2, #7
 8009520:	4919      	ldr	r1, [pc, #100]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 8009522:	2032      	movs	r0, #50	; 0x32
 8009524:	f7ff ffb6 	bl	8009494 <ReadValueStructArrayFromEeprom>
	AdcOffset = bldValues[1].ival;
 8009528:	4b17      	ldr	r3, [pc, #92]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	4a17      	ldr	r2, [pc, #92]	; (800958c <InitValueReadFromEeprom+0x90>)
 800952e:	6013      	str	r3, [r2, #0]
	AdcCalib = (float)((bldValues[2].ival * 0.001f) + 1.000f);
 8009530:	4b15      	ldr	r3, [pc, #84]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800953c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009590 <InitValueReadFromEeprom+0x94>
 8009540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800954c:	4b11      	ldr	r3, [pc, #68]	; (8009594 <InitValueReadFromEeprom+0x98>)
 800954e:	edc3 7a00 	vstr	s15, [r3]
	VolDivider = bldValues[3].ival;
 8009552:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <InitValueReadFromEeprom+0x9c>)
 8009558:	6013      	str	r3, [r2, #0]
	VolRatio = bldValues[4].ival;
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 800955c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955e:	4a0f      	ldr	r2, [pc, #60]	; (800959c <InitValueReadFromEeprom+0xa0>)
 8009560:	6013      	str	r3, [r2, #0]
	TimeOnPre = bldValues[5].ival;
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 8009564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009568:	4a0d      	ldr	r2, [pc, #52]	; (80095a0 <InitValueReadFromEeprom+0xa4>)
 800956a:	6013      	str	r3, [r2, #0]
	PhaseDelay = bldValues[6].ival;
 800956c:	4b06      	ldr	r3, [pc, #24]	; (8009588 <InitValueReadFromEeprom+0x8c>)
 800956e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009572:	4a0c      	ldr	r2, [pc, #48]	; (80095a4 <InitValueReadFromEeprom+0xa8>)
 8009574:	6013      	str	r3, [r2, #0]

}
 8009576:	bf00      	nop
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000630 	.word	0x20000630
 8009580:	200005fc 	.word	0x200005fc
 8009584:	20000600 	.word	0x20000600
 8009588:	200006d8 	.word	0x200006d8
 800958c:	20000604 	.word	0x20000604
 8009590:	3a83126f 	.word	0x3a83126f
 8009594:	20000608 	.word	0x20000608
 8009598:	2000060c 	.word	0x2000060c
 800959c:	20000610 	.word	0x20000610
 80095a0:	20000614 	.word	0x20000614
 80095a4:	20000618 	.word	0x20000618

080095a8 <malloc>:
 80095a8:	4b02      	ldr	r3, [pc, #8]	; (80095b4 <malloc+0xc>)
 80095aa:	4601      	mov	r1, r0
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f000 b82b 	b.w	8009608 <_malloc_r>
 80095b2:	bf00      	nop
 80095b4:	20000230 	.word	0x20000230

080095b8 <free>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <free+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f001 bf5d 	b.w	800b47c <_free_r>
 80095c2:	bf00      	nop
 80095c4:	20000230 	.word	0x20000230

080095c8 <sbrk_aligned>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	4e0e      	ldr	r6, [pc, #56]	; (8009604 <sbrk_aligned+0x3c>)
 80095cc:	460c      	mov	r4, r1
 80095ce:	6831      	ldr	r1, [r6, #0]
 80095d0:	4605      	mov	r5, r0
 80095d2:	b911      	cbnz	r1, 80095da <sbrk_aligned+0x12>
 80095d4:	f001 f880 	bl	800a6d8 <_sbrk_r>
 80095d8:	6030      	str	r0, [r6, #0]
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	f001 f87b 	bl	800a6d8 <_sbrk_r>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d00a      	beq.n	80095fc <sbrk_aligned+0x34>
 80095e6:	1cc4      	adds	r4, r0, #3
 80095e8:	f024 0403 	bic.w	r4, r4, #3
 80095ec:	42a0      	cmp	r0, r4
 80095ee:	d007      	beq.n	8009600 <sbrk_aligned+0x38>
 80095f0:	1a21      	subs	r1, r4, r0
 80095f2:	4628      	mov	r0, r5
 80095f4:	f001 f870 	bl	800a6d8 <_sbrk_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d101      	bne.n	8009600 <sbrk_aligned+0x38>
 80095fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009600:	4620      	mov	r0, r4
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	200007b4 	.word	0x200007b4

08009608 <_malloc_r>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	1ccd      	adds	r5, r1, #3
 800960e:	f025 0503 	bic.w	r5, r5, #3
 8009612:	3508      	adds	r5, #8
 8009614:	2d0c      	cmp	r5, #12
 8009616:	bf38      	it	cc
 8009618:	250c      	movcc	r5, #12
 800961a:	2d00      	cmp	r5, #0
 800961c:	4607      	mov	r7, r0
 800961e:	db01      	blt.n	8009624 <_malloc_r+0x1c>
 8009620:	42a9      	cmp	r1, r5
 8009622:	d905      	bls.n	8009630 <_malloc_r+0x28>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	2600      	movs	r6, #0
 800962a:	4630      	mov	r0, r6
 800962c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009704 <_malloc_r+0xfc>
 8009634:	f000 f868 	bl	8009708 <__malloc_lock>
 8009638:	f8d8 3000 	ldr.w	r3, [r8]
 800963c:	461c      	mov	r4, r3
 800963e:	bb5c      	cbnz	r4, 8009698 <_malloc_r+0x90>
 8009640:	4629      	mov	r1, r5
 8009642:	4638      	mov	r0, r7
 8009644:	f7ff ffc0 	bl	80095c8 <sbrk_aligned>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	4604      	mov	r4, r0
 800964c:	d155      	bne.n	80096fa <_malloc_r+0xf2>
 800964e:	f8d8 4000 	ldr.w	r4, [r8]
 8009652:	4626      	mov	r6, r4
 8009654:	2e00      	cmp	r6, #0
 8009656:	d145      	bne.n	80096e4 <_malloc_r+0xdc>
 8009658:	2c00      	cmp	r4, #0
 800965a:	d048      	beq.n	80096ee <_malloc_r+0xe6>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	4631      	mov	r1, r6
 8009660:	4638      	mov	r0, r7
 8009662:	eb04 0903 	add.w	r9, r4, r3
 8009666:	f001 f837 	bl	800a6d8 <_sbrk_r>
 800966a:	4581      	cmp	r9, r0
 800966c:	d13f      	bne.n	80096ee <_malloc_r+0xe6>
 800966e:	6821      	ldr	r1, [r4, #0]
 8009670:	1a6d      	subs	r5, r5, r1
 8009672:	4629      	mov	r1, r5
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ffa7 	bl	80095c8 <sbrk_aligned>
 800967a:	3001      	adds	r0, #1
 800967c:	d037      	beq.n	80096ee <_malloc_r+0xe6>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	442b      	add	r3, r5
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	f8d8 3000 	ldr.w	r3, [r8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d038      	beq.n	80096fe <_malloc_r+0xf6>
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	42a2      	cmp	r2, r4
 8009690:	d12b      	bne.n	80096ea <_malloc_r+0xe2>
 8009692:	2200      	movs	r2, #0
 8009694:	605a      	str	r2, [r3, #4]
 8009696:	e00f      	b.n	80096b8 <_malloc_r+0xb0>
 8009698:	6822      	ldr	r2, [r4, #0]
 800969a:	1b52      	subs	r2, r2, r5
 800969c:	d41f      	bmi.n	80096de <_malloc_r+0xd6>
 800969e:	2a0b      	cmp	r2, #11
 80096a0:	d917      	bls.n	80096d2 <_malloc_r+0xca>
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	6025      	str	r5, [r4, #0]
 80096a8:	bf18      	it	ne
 80096aa:	6059      	strne	r1, [r3, #4]
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	bf08      	it	eq
 80096b0:	f8c8 1000 	streq.w	r1, [r8]
 80096b4:	5162      	str	r2, [r4, r5]
 80096b6:	604b      	str	r3, [r1, #4]
 80096b8:	4638      	mov	r0, r7
 80096ba:	f104 060b 	add.w	r6, r4, #11
 80096be:	f000 f829 	bl	8009714 <__malloc_unlock>
 80096c2:	f026 0607 	bic.w	r6, r6, #7
 80096c6:	1d23      	adds	r3, r4, #4
 80096c8:	1af2      	subs	r2, r6, r3
 80096ca:	d0ae      	beq.n	800962a <_malloc_r+0x22>
 80096cc:	1b9b      	subs	r3, r3, r6
 80096ce:	50a3      	str	r3, [r4, r2]
 80096d0:	e7ab      	b.n	800962a <_malloc_r+0x22>
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	6862      	ldr	r2, [r4, #4]
 80096d6:	d1dd      	bne.n	8009694 <_malloc_r+0x8c>
 80096d8:	f8c8 2000 	str.w	r2, [r8]
 80096dc:	e7ec      	b.n	80096b8 <_malloc_r+0xb0>
 80096de:	4623      	mov	r3, r4
 80096e0:	6864      	ldr	r4, [r4, #4]
 80096e2:	e7ac      	b.n	800963e <_malloc_r+0x36>
 80096e4:	4634      	mov	r4, r6
 80096e6:	6876      	ldr	r6, [r6, #4]
 80096e8:	e7b4      	b.n	8009654 <_malloc_r+0x4c>
 80096ea:	4613      	mov	r3, r2
 80096ec:	e7cc      	b.n	8009688 <_malloc_r+0x80>
 80096ee:	230c      	movs	r3, #12
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	4638      	mov	r0, r7
 80096f4:	f000 f80e 	bl	8009714 <__malloc_unlock>
 80096f8:	e797      	b.n	800962a <_malloc_r+0x22>
 80096fa:	6025      	str	r5, [r4, #0]
 80096fc:	e7dc      	b.n	80096b8 <_malloc_r+0xb0>
 80096fe:	605b      	str	r3, [r3, #4]
 8009700:	deff      	udf	#255	; 0xff
 8009702:	bf00      	nop
 8009704:	200007b0 	.word	0x200007b0

08009708 <__malloc_lock>:
 8009708:	4801      	ldr	r0, [pc, #4]	; (8009710 <__malloc_lock+0x8>)
 800970a:	f001 b832 	b.w	800a772 <__retarget_lock_acquire_recursive>
 800970e:	bf00      	nop
 8009710:	200008f8 	.word	0x200008f8

08009714 <__malloc_unlock>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__malloc_unlock+0x8>)
 8009716:	f001 b82d 	b.w	800a774 <__retarget_lock_release_recursive>
 800971a:	bf00      	nop
 800971c:	200008f8 	.word	0x200008f8

08009720 <__cvt>:
 8009720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	ec55 4b10 	vmov	r4, r5, d0
 8009728:	2d00      	cmp	r5, #0
 800972a:	460e      	mov	r6, r1
 800972c:	4619      	mov	r1, r3
 800972e:	462b      	mov	r3, r5
 8009730:	bfbb      	ittet	lt
 8009732:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009736:	461d      	movlt	r5, r3
 8009738:	2300      	movge	r3, #0
 800973a:	232d      	movlt	r3, #45	; 0x2d
 800973c:	700b      	strb	r3, [r1, #0]
 800973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009740:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009744:	4691      	mov	r9, r2
 8009746:	f023 0820 	bic.w	r8, r3, #32
 800974a:	bfbc      	itt	lt
 800974c:	4622      	movlt	r2, r4
 800974e:	4614      	movlt	r4, r2
 8009750:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009754:	d005      	beq.n	8009762 <__cvt+0x42>
 8009756:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800975a:	d100      	bne.n	800975e <__cvt+0x3e>
 800975c:	3601      	adds	r6, #1
 800975e:	2102      	movs	r1, #2
 8009760:	e000      	b.n	8009764 <__cvt+0x44>
 8009762:	2103      	movs	r1, #3
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	ab02      	add	r3, sp, #8
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	ec45 4b10 	vmov	d0, r4, r5
 8009770:	4653      	mov	r3, sl
 8009772:	4632      	mov	r2, r6
 8009774:	f001 f890 	bl	800a898 <_dtoa_r>
 8009778:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800977c:	4607      	mov	r7, r0
 800977e:	d102      	bne.n	8009786 <__cvt+0x66>
 8009780:	f019 0f01 	tst.w	r9, #1
 8009784:	d022      	beq.n	80097cc <__cvt+0xac>
 8009786:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800978a:	eb07 0906 	add.w	r9, r7, r6
 800978e:	d110      	bne.n	80097b2 <__cvt+0x92>
 8009790:	783b      	ldrb	r3, [r7, #0]
 8009792:	2b30      	cmp	r3, #48	; 0x30
 8009794:	d10a      	bne.n	80097ac <__cvt+0x8c>
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	4620      	mov	r0, r4
 800979c:	4629      	mov	r1, r5
 800979e:	f7f7 f9a3 	bl	8000ae8 <__aeabi_dcmpeq>
 80097a2:	b918      	cbnz	r0, 80097ac <__cvt+0x8c>
 80097a4:	f1c6 0601 	rsb	r6, r6, #1
 80097a8:	f8ca 6000 	str.w	r6, [sl]
 80097ac:	f8da 3000 	ldr.w	r3, [sl]
 80097b0:	4499      	add	r9, r3
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	4620      	mov	r0, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	f7f7 f995 	bl	8000ae8 <__aeabi_dcmpeq>
 80097be:	b108      	cbz	r0, 80097c4 <__cvt+0xa4>
 80097c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80097c4:	2230      	movs	r2, #48	; 0x30
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	454b      	cmp	r3, r9
 80097ca:	d307      	bcc.n	80097dc <__cvt+0xbc>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097d0:	1bdb      	subs	r3, r3, r7
 80097d2:	4638      	mov	r0, r7
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	b004      	add	sp, #16
 80097d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097dc:	1c59      	adds	r1, r3, #1
 80097de:	9103      	str	r1, [sp, #12]
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	e7f0      	b.n	80097c6 <__cvt+0xa6>

080097e4 <__exponent>:
 80097e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097e6:	4603      	mov	r3, r0
 80097e8:	2900      	cmp	r1, #0
 80097ea:	bfb8      	it	lt
 80097ec:	4249      	neglt	r1, r1
 80097ee:	f803 2b02 	strb.w	r2, [r3], #2
 80097f2:	bfb4      	ite	lt
 80097f4:	222d      	movlt	r2, #45	; 0x2d
 80097f6:	222b      	movge	r2, #43	; 0x2b
 80097f8:	2909      	cmp	r1, #9
 80097fa:	7042      	strb	r2, [r0, #1]
 80097fc:	dd2a      	ble.n	8009854 <__exponent+0x70>
 80097fe:	f10d 0207 	add.w	r2, sp, #7
 8009802:	4617      	mov	r7, r2
 8009804:	260a      	movs	r6, #10
 8009806:	4694      	mov	ip, r2
 8009808:	fb91 f5f6 	sdiv	r5, r1, r6
 800980c:	fb06 1415 	mls	r4, r6, r5, r1
 8009810:	3430      	adds	r4, #48	; 0x30
 8009812:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009816:	460c      	mov	r4, r1
 8009818:	2c63      	cmp	r4, #99	; 0x63
 800981a:	f102 32ff 	add.w	r2, r2, #4294967295
 800981e:	4629      	mov	r1, r5
 8009820:	dcf1      	bgt.n	8009806 <__exponent+0x22>
 8009822:	3130      	adds	r1, #48	; 0x30
 8009824:	f1ac 0402 	sub.w	r4, ip, #2
 8009828:	f802 1c01 	strb.w	r1, [r2, #-1]
 800982c:	1c41      	adds	r1, r0, #1
 800982e:	4622      	mov	r2, r4
 8009830:	42ba      	cmp	r2, r7
 8009832:	d30a      	bcc.n	800984a <__exponent+0x66>
 8009834:	f10d 0209 	add.w	r2, sp, #9
 8009838:	eba2 020c 	sub.w	r2, r2, ip
 800983c:	42bc      	cmp	r4, r7
 800983e:	bf88      	it	hi
 8009840:	2200      	movhi	r2, #0
 8009842:	4413      	add	r3, r2
 8009844:	1a18      	subs	r0, r3, r0
 8009846:	b003      	add	sp, #12
 8009848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800984e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009852:	e7ed      	b.n	8009830 <__exponent+0x4c>
 8009854:	2330      	movs	r3, #48	; 0x30
 8009856:	3130      	adds	r1, #48	; 0x30
 8009858:	7083      	strb	r3, [r0, #2]
 800985a:	70c1      	strb	r1, [r0, #3]
 800985c:	1d03      	adds	r3, r0, #4
 800985e:	e7f1      	b.n	8009844 <__exponent+0x60>

08009860 <_printf_float>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	ed2d 8b02 	vpush	{d8}
 8009868:	b08d      	sub	sp, #52	; 0x34
 800986a:	460c      	mov	r4, r1
 800986c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009870:	4616      	mov	r6, r2
 8009872:	461f      	mov	r7, r3
 8009874:	4605      	mov	r5, r0
 8009876:	f000 fef7 	bl	800a668 <_localeconv_r>
 800987a:	f8d0 a000 	ldr.w	sl, [r0]
 800987e:	4650      	mov	r0, sl
 8009880:	f7f6 fd06 	bl	8000290 <strlen>
 8009884:	2300      	movs	r3, #0
 8009886:	930a      	str	r3, [sp, #40]	; 0x28
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	9305      	str	r3, [sp, #20]
 800988c:	f8d8 3000 	ldr.w	r3, [r8]
 8009890:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009894:	3307      	adds	r3, #7
 8009896:	f023 0307 	bic.w	r3, r3, #7
 800989a:	f103 0208 	add.w	r2, r3, #8
 800989e:	f8c8 2000 	str.w	r2, [r8]
 80098a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098aa:	9307      	str	r3, [sp, #28]
 80098ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80098b0:	ee08 0a10 	vmov	s16, r0
 80098b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80098b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098bc:	4b9e      	ldr	r3, [pc, #632]	; (8009b38 <_printf_float+0x2d8>)
 80098be:	f04f 32ff 	mov.w	r2, #4294967295
 80098c2:	f7f7 f943 	bl	8000b4c <__aeabi_dcmpun>
 80098c6:	bb88      	cbnz	r0, 800992c <_printf_float+0xcc>
 80098c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098cc:	4b9a      	ldr	r3, [pc, #616]	; (8009b38 <_printf_float+0x2d8>)
 80098ce:	f04f 32ff 	mov.w	r2, #4294967295
 80098d2:	f7f7 f91d 	bl	8000b10 <__aeabi_dcmple>
 80098d6:	bb48      	cbnz	r0, 800992c <_printf_float+0xcc>
 80098d8:	2200      	movs	r2, #0
 80098da:	2300      	movs	r3, #0
 80098dc:	4640      	mov	r0, r8
 80098de:	4649      	mov	r1, r9
 80098e0:	f7f7 f90c 	bl	8000afc <__aeabi_dcmplt>
 80098e4:	b110      	cbz	r0, 80098ec <_printf_float+0x8c>
 80098e6:	232d      	movs	r3, #45	; 0x2d
 80098e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ec:	4a93      	ldr	r2, [pc, #588]	; (8009b3c <_printf_float+0x2dc>)
 80098ee:	4b94      	ldr	r3, [pc, #592]	; (8009b40 <_printf_float+0x2e0>)
 80098f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80098f4:	bf94      	ite	ls
 80098f6:	4690      	movls	r8, r2
 80098f8:	4698      	movhi	r8, r3
 80098fa:	2303      	movs	r3, #3
 80098fc:	6123      	str	r3, [r4, #16]
 80098fe:	9b05      	ldr	r3, [sp, #20]
 8009900:	f023 0304 	bic.w	r3, r3, #4
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	f04f 0900 	mov.w	r9, #0
 800990a:	9700      	str	r7, [sp, #0]
 800990c:	4633      	mov	r3, r6
 800990e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009910:	4621      	mov	r1, r4
 8009912:	4628      	mov	r0, r5
 8009914:	f000 f9da 	bl	8009ccc <_printf_common>
 8009918:	3001      	adds	r0, #1
 800991a:	f040 8090 	bne.w	8009a3e <_printf_float+0x1de>
 800991e:	f04f 30ff 	mov.w	r0, #4294967295
 8009922:	b00d      	add	sp, #52	; 0x34
 8009924:	ecbd 8b02 	vpop	{d8}
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	4640      	mov	r0, r8
 8009932:	4649      	mov	r1, r9
 8009934:	f7f7 f90a 	bl	8000b4c <__aeabi_dcmpun>
 8009938:	b140      	cbz	r0, 800994c <_printf_float+0xec>
 800993a:	464b      	mov	r3, r9
 800993c:	2b00      	cmp	r3, #0
 800993e:	bfbc      	itt	lt
 8009940:	232d      	movlt	r3, #45	; 0x2d
 8009942:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009946:	4a7f      	ldr	r2, [pc, #508]	; (8009b44 <_printf_float+0x2e4>)
 8009948:	4b7f      	ldr	r3, [pc, #508]	; (8009b48 <_printf_float+0x2e8>)
 800994a:	e7d1      	b.n	80098f0 <_printf_float+0x90>
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009952:	9206      	str	r2, [sp, #24]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	d13f      	bne.n	80099d8 <_printf_float+0x178>
 8009958:	2306      	movs	r3, #6
 800995a:	6063      	str	r3, [r4, #4]
 800995c:	9b05      	ldr	r3, [sp, #20]
 800995e:	6861      	ldr	r1, [r4, #4]
 8009960:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009964:	2300      	movs	r3, #0
 8009966:	9303      	str	r3, [sp, #12]
 8009968:	ab0a      	add	r3, sp, #40	; 0x28
 800996a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800996e:	ab09      	add	r3, sp, #36	; 0x24
 8009970:	ec49 8b10 	vmov	d0, r8, r9
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800997c:	4628      	mov	r0, r5
 800997e:	f7ff fecf 	bl	8009720 <__cvt>
 8009982:	9b06      	ldr	r3, [sp, #24]
 8009984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009986:	2b47      	cmp	r3, #71	; 0x47
 8009988:	4680      	mov	r8, r0
 800998a:	d108      	bne.n	800999e <_printf_float+0x13e>
 800998c:	1cc8      	adds	r0, r1, #3
 800998e:	db02      	blt.n	8009996 <_printf_float+0x136>
 8009990:	6863      	ldr	r3, [r4, #4]
 8009992:	4299      	cmp	r1, r3
 8009994:	dd41      	ble.n	8009a1a <_printf_float+0x1ba>
 8009996:	f1ab 0302 	sub.w	r3, fp, #2
 800999a:	fa5f fb83 	uxtb.w	fp, r3
 800999e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099a2:	d820      	bhi.n	80099e6 <_printf_float+0x186>
 80099a4:	3901      	subs	r1, #1
 80099a6:	465a      	mov	r2, fp
 80099a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099ac:	9109      	str	r1, [sp, #36]	; 0x24
 80099ae:	f7ff ff19 	bl	80097e4 <__exponent>
 80099b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099b4:	1813      	adds	r3, r2, r0
 80099b6:	2a01      	cmp	r2, #1
 80099b8:	4681      	mov	r9, r0
 80099ba:	6123      	str	r3, [r4, #16]
 80099bc:	dc02      	bgt.n	80099c4 <_printf_float+0x164>
 80099be:	6822      	ldr	r2, [r4, #0]
 80099c0:	07d2      	lsls	r2, r2, #31
 80099c2:	d501      	bpl.n	80099c8 <_printf_float+0x168>
 80099c4:	3301      	adds	r3, #1
 80099c6:	6123      	str	r3, [r4, #16]
 80099c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d09c      	beq.n	800990a <_printf_float+0xaa>
 80099d0:	232d      	movs	r3, #45	; 0x2d
 80099d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d6:	e798      	b.n	800990a <_printf_float+0xaa>
 80099d8:	9a06      	ldr	r2, [sp, #24]
 80099da:	2a47      	cmp	r2, #71	; 0x47
 80099dc:	d1be      	bne.n	800995c <_printf_float+0xfc>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1bc      	bne.n	800995c <_printf_float+0xfc>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7b9      	b.n	800995a <_printf_float+0xfa>
 80099e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80099ea:	d118      	bne.n	8009a1e <_printf_float+0x1be>
 80099ec:	2900      	cmp	r1, #0
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	dd0b      	ble.n	8009a0a <_printf_float+0x1aa>
 80099f2:	6121      	str	r1, [r4, #16]
 80099f4:	b913      	cbnz	r3, 80099fc <_printf_float+0x19c>
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	07d0      	lsls	r0, r2, #31
 80099fa:	d502      	bpl.n	8009a02 <_printf_float+0x1a2>
 80099fc:	3301      	adds	r3, #1
 80099fe:	440b      	add	r3, r1
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a04:	f04f 0900 	mov.w	r9, #0
 8009a08:	e7de      	b.n	80099c8 <_printf_float+0x168>
 8009a0a:	b913      	cbnz	r3, 8009a12 <_printf_float+0x1b2>
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	07d2      	lsls	r2, r2, #31
 8009a10:	d501      	bpl.n	8009a16 <_printf_float+0x1b6>
 8009a12:	3302      	adds	r3, #2
 8009a14:	e7f4      	b.n	8009a00 <_printf_float+0x1a0>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e7f2      	b.n	8009a00 <_printf_float+0x1a0>
 8009a1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a20:	4299      	cmp	r1, r3
 8009a22:	db05      	blt.n	8009a30 <_printf_float+0x1d0>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	6121      	str	r1, [r4, #16]
 8009a28:	07d8      	lsls	r0, r3, #31
 8009a2a:	d5ea      	bpl.n	8009a02 <_printf_float+0x1a2>
 8009a2c:	1c4b      	adds	r3, r1, #1
 8009a2e:	e7e7      	b.n	8009a00 <_printf_float+0x1a0>
 8009a30:	2900      	cmp	r1, #0
 8009a32:	bfd4      	ite	le
 8009a34:	f1c1 0202 	rsble	r2, r1, #2
 8009a38:	2201      	movgt	r2, #1
 8009a3a:	4413      	add	r3, r2
 8009a3c:	e7e0      	b.n	8009a00 <_printf_float+0x1a0>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	055a      	lsls	r2, r3, #21
 8009a42:	d407      	bmi.n	8009a54 <_printf_float+0x1f4>
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	4642      	mov	r2, r8
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d12c      	bne.n	8009aac <_printf_float+0x24c>
 8009a52:	e764      	b.n	800991e <_printf_float+0xbe>
 8009a54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a58:	f240 80e0 	bls.w	8009c1c <_printf_float+0x3bc>
 8009a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a60:	2200      	movs	r2, #0
 8009a62:	2300      	movs	r3, #0
 8009a64:	f7f7 f840 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d034      	beq.n	8009ad6 <_printf_float+0x276>
 8009a6c:	4a37      	ldr	r2, [pc, #220]	; (8009b4c <_printf_float+0x2ec>)
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4631      	mov	r1, r6
 8009a72:	4628      	mov	r0, r5
 8009a74:	47b8      	blx	r7
 8009a76:	3001      	adds	r0, #1
 8009a78:	f43f af51 	beq.w	800991e <_printf_float+0xbe>
 8009a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a80:	429a      	cmp	r2, r3
 8009a82:	db02      	blt.n	8009a8a <_printf_float+0x22a>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	07d8      	lsls	r0, r3, #31
 8009a88:	d510      	bpl.n	8009aac <_printf_float+0x24c>
 8009a8a:	ee18 3a10 	vmov	r3, s16
 8009a8e:	4652      	mov	r2, sl
 8009a90:	4631      	mov	r1, r6
 8009a92:	4628      	mov	r0, r5
 8009a94:	47b8      	blx	r7
 8009a96:	3001      	adds	r0, #1
 8009a98:	f43f af41 	beq.w	800991e <_printf_float+0xbe>
 8009a9c:	f04f 0800 	mov.w	r8, #0
 8009aa0:	f104 091a 	add.w	r9, r4, #26
 8009aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4543      	cmp	r3, r8
 8009aaa:	dc09      	bgt.n	8009ac0 <_printf_float+0x260>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	079b      	lsls	r3, r3, #30
 8009ab0:	f100 8107 	bmi.w	8009cc2 <_printf_float+0x462>
 8009ab4:	68e0      	ldr	r0, [r4, #12]
 8009ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab8:	4298      	cmp	r0, r3
 8009aba:	bfb8      	it	lt
 8009abc:	4618      	movlt	r0, r3
 8009abe:	e730      	b.n	8009922 <_printf_float+0xc2>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	464a      	mov	r2, r9
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b8      	blx	r7
 8009aca:	3001      	adds	r0, #1
 8009acc:	f43f af27 	beq.w	800991e <_printf_float+0xbe>
 8009ad0:	f108 0801 	add.w	r8, r8, #1
 8009ad4:	e7e6      	b.n	8009aa4 <_printf_float+0x244>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc39      	bgt.n	8009b50 <_printf_float+0x2f0>
 8009adc:	4a1b      	ldr	r2, [pc, #108]	; (8009b4c <_printf_float+0x2ec>)
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f43f af19 	beq.w	800991e <_printf_float+0xbe>
 8009aec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d102      	bne.n	8009afa <_printf_float+0x29a>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07d9      	lsls	r1, r3, #31
 8009af8:	d5d8      	bpl.n	8009aac <_printf_float+0x24c>
 8009afa:	ee18 3a10 	vmov	r3, s16
 8009afe:	4652      	mov	r2, sl
 8009b00:	4631      	mov	r1, r6
 8009b02:	4628      	mov	r0, r5
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	f43f af09 	beq.w	800991e <_printf_float+0xbe>
 8009b0c:	f04f 0900 	mov.w	r9, #0
 8009b10:	f104 0a1a 	add.w	sl, r4, #26
 8009b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b16:	425b      	negs	r3, r3
 8009b18:	454b      	cmp	r3, r9
 8009b1a:	dc01      	bgt.n	8009b20 <_printf_float+0x2c0>
 8009b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b1e:	e792      	b.n	8009a46 <_printf_float+0x1e6>
 8009b20:	2301      	movs	r3, #1
 8009b22:	4652      	mov	r2, sl
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f aef7 	beq.w	800991e <_printf_float+0xbe>
 8009b30:	f109 0901 	add.w	r9, r9, #1
 8009b34:	e7ee      	b.n	8009b14 <_printf_float+0x2b4>
 8009b36:	bf00      	nop
 8009b38:	7fefffff 	.word	0x7fefffff
 8009b3c:	0800df9e 	.word	0x0800df9e
 8009b40:	0800dfa2 	.word	0x0800dfa2
 8009b44:	0800dfa6 	.word	0x0800dfa6
 8009b48:	0800dfaa 	.word	0x0800dfaa
 8009b4c:	0800dfae 	.word	0x0800dfae
 8009b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b54:	429a      	cmp	r2, r3
 8009b56:	bfa8      	it	ge
 8009b58:	461a      	movge	r2, r3
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	4691      	mov	r9, r2
 8009b5e:	dc37      	bgt.n	8009bd0 <_printf_float+0x370>
 8009b60:	f04f 0b00 	mov.w	fp, #0
 8009b64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b68:	f104 021a 	add.w	r2, r4, #26
 8009b6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	eba3 0309 	sub.w	r3, r3, r9
 8009b74:	455b      	cmp	r3, fp
 8009b76:	dc33      	bgt.n	8009be0 <_printf_float+0x380>
 8009b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	db3b      	blt.n	8009bf8 <_printf_float+0x398>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	07da      	lsls	r2, r3, #31
 8009b84:	d438      	bmi.n	8009bf8 <_printf_float+0x398>
 8009b86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b8a:	eba2 0903 	sub.w	r9, r2, r3
 8009b8e:	9b05      	ldr	r3, [sp, #20]
 8009b90:	1ad2      	subs	r2, r2, r3
 8009b92:	4591      	cmp	r9, r2
 8009b94:	bfa8      	it	ge
 8009b96:	4691      	movge	r9, r2
 8009b98:	f1b9 0f00 	cmp.w	r9, #0
 8009b9c:	dc35      	bgt.n	8009c0a <_printf_float+0x3aa>
 8009b9e:	f04f 0800 	mov.w	r8, #0
 8009ba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ba6:	f104 0a1a 	add.w	sl, r4, #26
 8009baa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	eba3 0309 	sub.w	r3, r3, r9
 8009bb4:	4543      	cmp	r3, r8
 8009bb6:	f77f af79 	ble.w	8009aac <_printf_float+0x24c>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4652      	mov	r2, sl
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f43f aeaa 	beq.w	800991e <_printf_float+0xbe>
 8009bca:	f108 0801 	add.w	r8, r8, #1
 8009bce:	e7ec      	b.n	8009baa <_printf_float+0x34a>
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	d1c0      	bne.n	8009b60 <_printf_float+0x300>
 8009bde:	e69e      	b.n	800991e <_printf_float+0xbe>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	9205      	str	r2, [sp, #20]
 8009be8:	47b8      	blx	r7
 8009bea:	3001      	adds	r0, #1
 8009bec:	f43f ae97 	beq.w	800991e <_printf_float+0xbe>
 8009bf0:	9a05      	ldr	r2, [sp, #20]
 8009bf2:	f10b 0b01 	add.w	fp, fp, #1
 8009bf6:	e7b9      	b.n	8009b6c <_printf_float+0x30c>
 8009bf8:	ee18 3a10 	vmov	r3, s16
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	d1be      	bne.n	8009b86 <_printf_float+0x326>
 8009c08:	e689      	b.n	800991e <_printf_float+0xbe>
 8009c0a:	9a05      	ldr	r2, [sp, #20]
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	4442      	add	r2, r8
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	d1c1      	bne.n	8009b9e <_printf_float+0x33e>
 8009c1a:	e680      	b.n	800991e <_printf_float+0xbe>
 8009c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1e:	2a01      	cmp	r2, #1
 8009c20:	dc01      	bgt.n	8009c26 <_printf_float+0x3c6>
 8009c22:	07db      	lsls	r3, r3, #31
 8009c24:	d53a      	bpl.n	8009c9c <_printf_float+0x43c>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4642      	mov	r2, r8
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	f43f ae74 	beq.w	800991e <_printf_float+0xbe>
 8009c36:	ee18 3a10 	vmov	r3, s16
 8009c3a:	4652      	mov	r2, sl
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	f43f ae6b 	beq.w	800991e <_printf_float+0xbe>
 8009c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009c54:	f7f6 ff48 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c58:	b9d8      	cbnz	r0, 8009c92 <_printf_float+0x432>
 8009c5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c5e:	f108 0201 	add.w	r2, r8, #1
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d10e      	bne.n	8009c8a <_printf_float+0x42a>
 8009c6c:	e657      	b.n	800991e <_printf_float+0xbe>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f ae50 	beq.w	800991e <_printf_float+0xbe>
 8009c7e:	f108 0801 	add.w	r8, r8, #1
 8009c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c84:	3b01      	subs	r3, #1
 8009c86:	4543      	cmp	r3, r8
 8009c88:	dcf1      	bgt.n	8009c6e <_printf_float+0x40e>
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c90:	e6da      	b.n	8009a48 <_printf_float+0x1e8>
 8009c92:	f04f 0800 	mov.w	r8, #0
 8009c96:	f104 0a1a 	add.w	sl, r4, #26
 8009c9a:	e7f2      	b.n	8009c82 <_printf_float+0x422>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	4642      	mov	r2, r8
 8009ca0:	e7df      	b.n	8009c62 <_printf_float+0x402>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	464a      	mov	r2, r9
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f ae36 	beq.w	800991e <_printf_float+0xbe>
 8009cb2:	f108 0801 	add.w	r8, r8, #1
 8009cb6:	68e3      	ldr	r3, [r4, #12]
 8009cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cba:	1a5b      	subs	r3, r3, r1
 8009cbc:	4543      	cmp	r3, r8
 8009cbe:	dcf0      	bgt.n	8009ca2 <_printf_float+0x442>
 8009cc0:	e6f8      	b.n	8009ab4 <_printf_float+0x254>
 8009cc2:	f04f 0800 	mov.w	r8, #0
 8009cc6:	f104 0919 	add.w	r9, r4, #25
 8009cca:	e7f4      	b.n	8009cb6 <_printf_float+0x456>

08009ccc <_printf_common>:
 8009ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd0:	4616      	mov	r6, r2
 8009cd2:	4699      	mov	r9, r3
 8009cd4:	688a      	ldr	r2, [r1, #8]
 8009cd6:	690b      	ldr	r3, [r1, #16]
 8009cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	bfb8      	it	lt
 8009ce0:	4613      	movlt	r3, r2
 8009ce2:	6033      	str	r3, [r6, #0]
 8009ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	b10a      	cbz	r2, 8009cf2 <_printf_common+0x26>
 8009cee:	3301      	adds	r3, #1
 8009cf0:	6033      	str	r3, [r6, #0]
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	0699      	lsls	r1, r3, #26
 8009cf6:	bf42      	ittt	mi
 8009cf8:	6833      	ldrmi	r3, [r6, #0]
 8009cfa:	3302      	addmi	r3, #2
 8009cfc:	6033      	strmi	r3, [r6, #0]
 8009cfe:	6825      	ldr	r5, [r4, #0]
 8009d00:	f015 0506 	ands.w	r5, r5, #6
 8009d04:	d106      	bne.n	8009d14 <_printf_common+0x48>
 8009d06:	f104 0a19 	add.w	sl, r4, #25
 8009d0a:	68e3      	ldr	r3, [r4, #12]
 8009d0c:	6832      	ldr	r2, [r6, #0]
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	dc26      	bgt.n	8009d62 <_printf_common+0x96>
 8009d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d18:	1e13      	subs	r3, r2, #0
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	bf18      	it	ne
 8009d1e:	2301      	movne	r3, #1
 8009d20:	0692      	lsls	r2, r2, #26
 8009d22:	d42b      	bmi.n	8009d7c <_printf_common+0xb0>
 8009d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d28:	4649      	mov	r1, r9
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	47c0      	blx	r8
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d01e      	beq.n	8009d70 <_printf_common+0xa4>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	6922      	ldr	r2, [r4, #16]
 8009d36:	f003 0306 	and.w	r3, r3, #6
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	bf02      	ittt	eq
 8009d3e:	68e5      	ldreq	r5, [r4, #12]
 8009d40:	6833      	ldreq	r3, [r6, #0]
 8009d42:	1aed      	subeq	r5, r5, r3
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	bf0c      	ite	eq
 8009d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d4c:	2500      	movne	r5, #0
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	bfc4      	itt	gt
 8009d52:	1a9b      	subgt	r3, r3, r2
 8009d54:	18ed      	addgt	r5, r5, r3
 8009d56:	2600      	movs	r6, #0
 8009d58:	341a      	adds	r4, #26
 8009d5a:	42b5      	cmp	r5, r6
 8009d5c:	d11a      	bne.n	8009d94 <_printf_common+0xc8>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e008      	b.n	8009d74 <_printf_common+0xa8>
 8009d62:	2301      	movs	r3, #1
 8009d64:	4652      	mov	r2, sl
 8009d66:	4649      	mov	r1, r9
 8009d68:	4638      	mov	r0, r7
 8009d6a:	47c0      	blx	r8
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d103      	bne.n	8009d78 <_printf_common+0xac>
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d78:	3501      	adds	r5, #1
 8009d7a:	e7c6      	b.n	8009d0a <_printf_common+0x3e>
 8009d7c:	18e1      	adds	r1, r4, r3
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	2030      	movs	r0, #48	; 0x30
 8009d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d86:	4422      	add	r2, r4
 8009d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d90:	3302      	adds	r3, #2
 8009d92:	e7c7      	b.n	8009d24 <_printf_common+0x58>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4622      	mov	r2, r4
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	47c0      	blx	r8
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d0e6      	beq.n	8009d70 <_printf_common+0xa4>
 8009da2:	3601      	adds	r6, #1
 8009da4:	e7d9      	b.n	8009d5a <_printf_common+0x8e>
	...

08009da8 <_printf_i>:
 8009da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	7e0f      	ldrb	r7, [r1, #24]
 8009dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009db0:	2f78      	cmp	r7, #120	; 0x78
 8009db2:	4691      	mov	r9, r2
 8009db4:	4680      	mov	r8, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	469a      	mov	sl, r3
 8009dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dbe:	d807      	bhi.n	8009dd0 <_printf_i+0x28>
 8009dc0:	2f62      	cmp	r7, #98	; 0x62
 8009dc2:	d80a      	bhi.n	8009dda <_printf_i+0x32>
 8009dc4:	2f00      	cmp	r7, #0
 8009dc6:	f000 80d4 	beq.w	8009f72 <_printf_i+0x1ca>
 8009dca:	2f58      	cmp	r7, #88	; 0x58
 8009dcc:	f000 80c0 	beq.w	8009f50 <_printf_i+0x1a8>
 8009dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dd8:	e03a      	b.n	8009e50 <_printf_i+0xa8>
 8009dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dde:	2b15      	cmp	r3, #21
 8009de0:	d8f6      	bhi.n	8009dd0 <_printf_i+0x28>
 8009de2:	a101      	add	r1, pc, #4	; (adr r1, 8009de8 <_printf_i+0x40>)
 8009de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009de8:	08009e41 	.word	0x08009e41
 8009dec:	08009e55 	.word	0x08009e55
 8009df0:	08009dd1 	.word	0x08009dd1
 8009df4:	08009dd1 	.word	0x08009dd1
 8009df8:	08009dd1 	.word	0x08009dd1
 8009dfc:	08009dd1 	.word	0x08009dd1
 8009e00:	08009e55 	.word	0x08009e55
 8009e04:	08009dd1 	.word	0x08009dd1
 8009e08:	08009dd1 	.word	0x08009dd1
 8009e0c:	08009dd1 	.word	0x08009dd1
 8009e10:	08009dd1 	.word	0x08009dd1
 8009e14:	08009f59 	.word	0x08009f59
 8009e18:	08009e81 	.word	0x08009e81
 8009e1c:	08009f13 	.word	0x08009f13
 8009e20:	08009dd1 	.word	0x08009dd1
 8009e24:	08009dd1 	.word	0x08009dd1
 8009e28:	08009f7b 	.word	0x08009f7b
 8009e2c:	08009dd1 	.word	0x08009dd1
 8009e30:	08009e81 	.word	0x08009e81
 8009e34:	08009dd1 	.word	0x08009dd1
 8009e38:	08009dd1 	.word	0x08009dd1
 8009e3c:	08009f1b 	.word	0x08009f1b
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	1d1a      	adds	r2, r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	602a      	str	r2, [r5, #0]
 8009e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e50:	2301      	movs	r3, #1
 8009e52:	e09f      	b.n	8009f94 <_printf_i+0x1ec>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	0607      	lsls	r7, r0, #24
 8009e5a:	f103 0104 	add.w	r1, r3, #4
 8009e5e:	6029      	str	r1, [r5, #0]
 8009e60:	d501      	bpl.n	8009e66 <_printf_i+0xbe>
 8009e62:	681e      	ldr	r6, [r3, #0]
 8009e64:	e003      	b.n	8009e6e <_printf_i+0xc6>
 8009e66:	0646      	lsls	r6, r0, #25
 8009e68:	d5fb      	bpl.n	8009e62 <_printf_i+0xba>
 8009e6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e6e:	2e00      	cmp	r6, #0
 8009e70:	da03      	bge.n	8009e7a <_printf_i+0xd2>
 8009e72:	232d      	movs	r3, #45	; 0x2d
 8009e74:	4276      	negs	r6, r6
 8009e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7a:	485a      	ldr	r0, [pc, #360]	; (8009fe4 <_printf_i+0x23c>)
 8009e7c:	230a      	movs	r3, #10
 8009e7e:	e012      	b.n	8009ea6 <_printf_i+0xfe>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	6820      	ldr	r0, [r4, #0]
 8009e84:	1d19      	adds	r1, r3, #4
 8009e86:	6029      	str	r1, [r5, #0]
 8009e88:	0605      	lsls	r5, r0, #24
 8009e8a:	d501      	bpl.n	8009e90 <_printf_i+0xe8>
 8009e8c:	681e      	ldr	r6, [r3, #0]
 8009e8e:	e002      	b.n	8009e96 <_printf_i+0xee>
 8009e90:	0641      	lsls	r1, r0, #25
 8009e92:	d5fb      	bpl.n	8009e8c <_printf_i+0xe4>
 8009e94:	881e      	ldrh	r6, [r3, #0]
 8009e96:	4853      	ldr	r0, [pc, #332]	; (8009fe4 <_printf_i+0x23c>)
 8009e98:	2f6f      	cmp	r7, #111	; 0x6f
 8009e9a:	bf0c      	ite	eq
 8009e9c:	2308      	moveq	r3, #8
 8009e9e:	230a      	movne	r3, #10
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ea6:	6865      	ldr	r5, [r4, #4]
 8009ea8:	60a5      	str	r5, [r4, #8]
 8009eaa:	2d00      	cmp	r5, #0
 8009eac:	bfa2      	ittt	ge
 8009eae:	6821      	ldrge	r1, [r4, #0]
 8009eb0:	f021 0104 	bicge.w	r1, r1, #4
 8009eb4:	6021      	strge	r1, [r4, #0]
 8009eb6:	b90e      	cbnz	r6, 8009ebc <_printf_i+0x114>
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	d04b      	beq.n	8009f54 <_printf_i+0x1ac>
 8009ebc:	4615      	mov	r5, r2
 8009ebe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ec2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ec6:	5dc7      	ldrb	r7, [r0, r7]
 8009ec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ecc:	4637      	mov	r7, r6
 8009ece:	42bb      	cmp	r3, r7
 8009ed0:	460e      	mov	r6, r1
 8009ed2:	d9f4      	bls.n	8009ebe <_printf_i+0x116>
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d10b      	bne.n	8009ef0 <_printf_i+0x148>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	07de      	lsls	r6, r3, #31
 8009edc:	d508      	bpl.n	8009ef0 <_printf_i+0x148>
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	6861      	ldr	r1, [r4, #4]
 8009ee2:	4299      	cmp	r1, r3
 8009ee4:	bfde      	ittt	le
 8009ee6:	2330      	movle	r3, #48	; 0x30
 8009ee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009eec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ef0:	1b52      	subs	r2, r2, r5
 8009ef2:	6122      	str	r2, [r4, #16]
 8009ef4:	f8cd a000 	str.w	sl, [sp]
 8009ef8:	464b      	mov	r3, r9
 8009efa:	aa03      	add	r2, sp, #12
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff fee4 	bl	8009ccc <_printf_common>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d14a      	bne.n	8009f9e <_printf_i+0x1f6>
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0c:	b004      	add	sp, #16
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f043 0320 	orr.w	r3, r3, #32
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	4833      	ldr	r0, [pc, #204]	; (8009fe8 <_printf_i+0x240>)
 8009f1c:	2778      	movs	r7, #120	; 0x78
 8009f1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	6829      	ldr	r1, [r5, #0]
 8009f26:	061f      	lsls	r7, r3, #24
 8009f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f2c:	d402      	bmi.n	8009f34 <_printf_i+0x18c>
 8009f2e:	065f      	lsls	r7, r3, #25
 8009f30:	bf48      	it	mi
 8009f32:	b2b6      	uxthmi	r6, r6
 8009f34:	07df      	lsls	r7, r3, #31
 8009f36:	bf48      	it	mi
 8009f38:	f043 0320 	orrmi.w	r3, r3, #32
 8009f3c:	6029      	str	r1, [r5, #0]
 8009f3e:	bf48      	it	mi
 8009f40:	6023      	strmi	r3, [r4, #0]
 8009f42:	b91e      	cbnz	r6, 8009f4c <_printf_i+0x1a4>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	f023 0320 	bic.w	r3, r3, #32
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	2310      	movs	r3, #16
 8009f4e:	e7a7      	b.n	8009ea0 <_printf_i+0xf8>
 8009f50:	4824      	ldr	r0, [pc, #144]	; (8009fe4 <_printf_i+0x23c>)
 8009f52:	e7e4      	b.n	8009f1e <_printf_i+0x176>
 8009f54:	4615      	mov	r5, r2
 8009f56:	e7bd      	b.n	8009ed4 <_printf_i+0x12c>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	6826      	ldr	r6, [r4, #0]
 8009f5c:	6961      	ldr	r1, [r4, #20]
 8009f5e:	1d18      	adds	r0, r3, #4
 8009f60:	6028      	str	r0, [r5, #0]
 8009f62:	0635      	lsls	r5, r6, #24
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	d501      	bpl.n	8009f6c <_printf_i+0x1c4>
 8009f68:	6019      	str	r1, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <_printf_i+0x1ca>
 8009f6c:	0670      	lsls	r0, r6, #25
 8009f6e:	d5fb      	bpl.n	8009f68 <_printf_i+0x1c0>
 8009f70:	8019      	strh	r1, [r3, #0]
 8009f72:	2300      	movs	r3, #0
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	4615      	mov	r5, r2
 8009f78:	e7bc      	b.n	8009ef4 <_printf_i+0x14c>
 8009f7a:	682b      	ldr	r3, [r5, #0]
 8009f7c:	1d1a      	adds	r2, r3, #4
 8009f7e:	602a      	str	r2, [r5, #0]
 8009f80:	681d      	ldr	r5, [r3, #0]
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4628      	mov	r0, r5
 8009f88:	f7f6 f932 	bl	80001f0 <memchr>
 8009f8c:	b108      	cbz	r0, 8009f92 <_printf_i+0x1ea>
 8009f8e:	1b40      	subs	r0, r0, r5
 8009f90:	6060      	str	r0, [r4, #4]
 8009f92:	6863      	ldr	r3, [r4, #4]
 8009f94:	6123      	str	r3, [r4, #16]
 8009f96:	2300      	movs	r3, #0
 8009f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f9c:	e7aa      	b.n	8009ef4 <_printf_i+0x14c>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	47d0      	blx	sl
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d0ad      	beq.n	8009f08 <_printf_i+0x160>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	079b      	lsls	r3, r3, #30
 8009fb0:	d413      	bmi.n	8009fda <_printf_i+0x232>
 8009fb2:	68e0      	ldr	r0, [r4, #12]
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	4298      	cmp	r0, r3
 8009fb8:	bfb8      	it	lt
 8009fba:	4618      	movlt	r0, r3
 8009fbc:	e7a6      	b.n	8009f0c <_printf_i+0x164>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	47d0      	blx	sl
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d09d      	beq.n	8009f08 <_printf_i+0x160>
 8009fcc:	3501      	adds	r5, #1
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	9903      	ldr	r1, [sp, #12]
 8009fd2:	1a5b      	subs	r3, r3, r1
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	dcf2      	bgt.n	8009fbe <_printf_i+0x216>
 8009fd8:	e7eb      	b.n	8009fb2 <_printf_i+0x20a>
 8009fda:	2500      	movs	r5, #0
 8009fdc:	f104 0619 	add.w	r6, r4, #25
 8009fe0:	e7f5      	b.n	8009fce <_printf_i+0x226>
 8009fe2:	bf00      	nop
 8009fe4:	0800dfb0 	.word	0x0800dfb0
 8009fe8:	0800dfc1 	.word	0x0800dfc1

08009fec <_scanf_float>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	b087      	sub	sp, #28
 8009ff2:	4617      	mov	r7, r2
 8009ff4:	9303      	str	r3, [sp, #12]
 8009ff6:	688b      	ldr	r3, [r1, #8]
 8009ff8:	1e5a      	subs	r2, r3, #1
 8009ffa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ffe:	bf83      	ittte	hi
 800a000:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a004:	195b      	addhi	r3, r3, r5
 800a006:	9302      	strhi	r3, [sp, #8]
 800a008:	2300      	movls	r3, #0
 800a00a:	bf86      	itte	hi
 800a00c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a010:	608b      	strhi	r3, [r1, #8]
 800a012:	9302      	strls	r3, [sp, #8]
 800a014:	680b      	ldr	r3, [r1, #0]
 800a016:	468b      	mov	fp, r1
 800a018:	2500      	movs	r5, #0
 800a01a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a01e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a022:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a026:	4680      	mov	r8, r0
 800a028:	460c      	mov	r4, r1
 800a02a:	465e      	mov	r6, fp
 800a02c:	46aa      	mov	sl, r5
 800a02e:	46a9      	mov	r9, r5
 800a030:	9501      	str	r5, [sp, #4]
 800a032:	68a2      	ldr	r2, [r4, #8]
 800a034:	b152      	cbz	r2, 800a04c <_scanf_float+0x60>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b4e      	cmp	r3, #78	; 0x4e
 800a03c:	d864      	bhi.n	800a108 <_scanf_float+0x11c>
 800a03e:	2b40      	cmp	r3, #64	; 0x40
 800a040:	d83c      	bhi.n	800a0bc <_scanf_float+0xd0>
 800a042:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a046:	b2c8      	uxtb	r0, r1
 800a048:	280e      	cmp	r0, #14
 800a04a:	d93a      	bls.n	800a0c2 <_scanf_float+0xd6>
 800a04c:	f1b9 0f00 	cmp.w	r9, #0
 800a050:	d003      	beq.n	800a05a <_scanf_float+0x6e>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a05e:	f1ba 0f01 	cmp.w	sl, #1
 800a062:	f200 8113 	bhi.w	800a28c <_scanf_float+0x2a0>
 800a066:	455e      	cmp	r6, fp
 800a068:	f200 8105 	bhi.w	800a276 <_scanf_float+0x28a>
 800a06c:	2501      	movs	r5, #1
 800a06e:	4628      	mov	r0, r5
 800a070:	b007      	add	sp, #28
 800a072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a076:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a07a:	2a0d      	cmp	r2, #13
 800a07c:	d8e6      	bhi.n	800a04c <_scanf_float+0x60>
 800a07e:	a101      	add	r1, pc, #4	; (adr r1, 800a084 <_scanf_float+0x98>)
 800a080:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a084:	0800a1c3 	.word	0x0800a1c3
 800a088:	0800a04d 	.word	0x0800a04d
 800a08c:	0800a04d 	.word	0x0800a04d
 800a090:	0800a04d 	.word	0x0800a04d
 800a094:	0800a223 	.word	0x0800a223
 800a098:	0800a1fb 	.word	0x0800a1fb
 800a09c:	0800a04d 	.word	0x0800a04d
 800a0a0:	0800a04d 	.word	0x0800a04d
 800a0a4:	0800a1d1 	.word	0x0800a1d1
 800a0a8:	0800a04d 	.word	0x0800a04d
 800a0ac:	0800a04d 	.word	0x0800a04d
 800a0b0:	0800a04d 	.word	0x0800a04d
 800a0b4:	0800a04d 	.word	0x0800a04d
 800a0b8:	0800a189 	.word	0x0800a189
 800a0bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a0c0:	e7db      	b.n	800a07a <_scanf_float+0x8e>
 800a0c2:	290e      	cmp	r1, #14
 800a0c4:	d8c2      	bhi.n	800a04c <_scanf_float+0x60>
 800a0c6:	a001      	add	r0, pc, #4	; (adr r0, 800a0cc <_scanf_float+0xe0>)
 800a0c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a0cc:	0800a17b 	.word	0x0800a17b
 800a0d0:	0800a04d 	.word	0x0800a04d
 800a0d4:	0800a17b 	.word	0x0800a17b
 800a0d8:	0800a20f 	.word	0x0800a20f
 800a0dc:	0800a04d 	.word	0x0800a04d
 800a0e0:	0800a129 	.word	0x0800a129
 800a0e4:	0800a165 	.word	0x0800a165
 800a0e8:	0800a165 	.word	0x0800a165
 800a0ec:	0800a165 	.word	0x0800a165
 800a0f0:	0800a165 	.word	0x0800a165
 800a0f4:	0800a165 	.word	0x0800a165
 800a0f8:	0800a165 	.word	0x0800a165
 800a0fc:	0800a165 	.word	0x0800a165
 800a100:	0800a165 	.word	0x0800a165
 800a104:	0800a165 	.word	0x0800a165
 800a108:	2b6e      	cmp	r3, #110	; 0x6e
 800a10a:	d809      	bhi.n	800a120 <_scanf_float+0x134>
 800a10c:	2b60      	cmp	r3, #96	; 0x60
 800a10e:	d8b2      	bhi.n	800a076 <_scanf_float+0x8a>
 800a110:	2b54      	cmp	r3, #84	; 0x54
 800a112:	d077      	beq.n	800a204 <_scanf_float+0x218>
 800a114:	2b59      	cmp	r3, #89	; 0x59
 800a116:	d199      	bne.n	800a04c <_scanf_float+0x60>
 800a118:	2d07      	cmp	r5, #7
 800a11a:	d197      	bne.n	800a04c <_scanf_float+0x60>
 800a11c:	2508      	movs	r5, #8
 800a11e:	e029      	b.n	800a174 <_scanf_float+0x188>
 800a120:	2b74      	cmp	r3, #116	; 0x74
 800a122:	d06f      	beq.n	800a204 <_scanf_float+0x218>
 800a124:	2b79      	cmp	r3, #121	; 0x79
 800a126:	e7f6      	b.n	800a116 <_scanf_float+0x12a>
 800a128:	6821      	ldr	r1, [r4, #0]
 800a12a:	05c8      	lsls	r0, r1, #23
 800a12c:	d51a      	bpl.n	800a164 <_scanf_float+0x178>
 800a12e:	9b02      	ldr	r3, [sp, #8]
 800a130:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a134:	6021      	str	r1, [r4, #0]
 800a136:	f109 0901 	add.w	r9, r9, #1
 800a13a:	b11b      	cbz	r3, 800a144 <_scanf_float+0x158>
 800a13c:	3b01      	subs	r3, #1
 800a13e:	3201      	adds	r2, #1
 800a140:	9302      	str	r3, [sp, #8]
 800a142:	60a2      	str	r2, [r4, #8]
 800a144:	68a3      	ldr	r3, [r4, #8]
 800a146:	3b01      	subs	r3, #1
 800a148:	60a3      	str	r3, [r4, #8]
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	3301      	adds	r3, #1
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3b01      	subs	r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	607b      	str	r3, [r7, #4]
 800a158:	f340 8084 	ble.w	800a264 <_scanf_float+0x278>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	3301      	adds	r3, #1
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	e766      	b.n	800a032 <_scanf_float+0x46>
 800a164:	eb1a 0f05 	cmn.w	sl, r5
 800a168:	f47f af70 	bne.w	800a04c <_scanf_float+0x60>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	f806 3b01 	strb.w	r3, [r6], #1
 800a178:	e7e4      	b.n	800a144 <_scanf_float+0x158>
 800a17a:	6822      	ldr	r2, [r4, #0]
 800a17c:	0610      	lsls	r0, r2, #24
 800a17e:	f57f af65 	bpl.w	800a04c <_scanf_float+0x60>
 800a182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a186:	e7f4      	b.n	800a172 <_scanf_float+0x186>
 800a188:	f1ba 0f00 	cmp.w	sl, #0
 800a18c:	d10e      	bne.n	800a1ac <_scanf_float+0x1c0>
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	d10e      	bne.n	800a1b2 <_scanf_float+0x1c6>
 800a194:	6822      	ldr	r2, [r4, #0]
 800a196:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a19a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a19e:	d108      	bne.n	800a1b2 <_scanf_float+0x1c6>
 800a1a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1a4:	6022      	str	r2, [r4, #0]
 800a1a6:	f04f 0a01 	mov.w	sl, #1
 800a1aa:	e7e3      	b.n	800a174 <_scanf_float+0x188>
 800a1ac:	f1ba 0f02 	cmp.w	sl, #2
 800a1b0:	d055      	beq.n	800a25e <_scanf_float+0x272>
 800a1b2:	2d01      	cmp	r5, #1
 800a1b4:	d002      	beq.n	800a1bc <_scanf_float+0x1d0>
 800a1b6:	2d04      	cmp	r5, #4
 800a1b8:	f47f af48 	bne.w	800a04c <_scanf_float+0x60>
 800a1bc:	3501      	adds	r5, #1
 800a1be:	b2ed      	uxtb	r5, r5
 800a1c0:	e7d8      	b.n	800a174 <_scanf_float+0x188>
 800a1c2:	f1ba 0f01 	cmp.w	sl, #1
 800a1c6:	f47f af41 	bne.w	800a04c <_scanf_float+0x60>
 800a1ca:	f04f 0a02 	mov.w	sl, #2
 800a1ce:	e7d1      	b.n	800a174 <_scanf_float+0x188>
 800a1d0:	b97d      	cbnz	r5, 800a1f2 <_scanf_float+0x206>
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	f47f af3c 	bne.w	800a052 <_scanf_float+0x66>
 800a1da:	6822      	ldr	r2, [r4, #0]
 800a1dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1e4:	f47f af39 	bne.w	800a05a <_scanf_float+0x6e>
 800a1e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1ec:	6022      	str	r2, [r4, #0]
 800a1ee:	2501      	movs	r5, #1
 800a1f0:	e7c0      	b.n	800a174 <_scanf_float+0x188>
 800a1f2:	2d03      	cmp	r5, #3
 800a1f4:	d0e2      	beq.n	800a1bc <_scanf_float+0x1d0>
 800a1f6:	2d05      	cmp	r5, #5
 800a1f8:	e7de      	b.n	800a1b8 <_scanf_float+0x1cc>
 800a1fa:	2d02      	cmp	r5, #2
 800a1fc:	f47f af26 	bne.w	800a04c <_scanf_float+0x60>
 800a200:	2503      	movs	r5, #3
 800a202:	e7b7      	b.n	800a174 <_scanf_float+0x188>
 800a204:	2d06      	cmp	r5, #6
 800a206:	f47f af21 	bne.w	800a04c <_scanf_float+0x60>
 800a20a:	2507      	movs	r5, #7
 800a20c:	e7b2      	b.n	800a174 <_scanf_float+0x188>
 800a20e:	6822      	ldr	r2, [r4, #0]
 800a210:	0591      	lsls	r1, r2, #22
 800a212:	f57f af1b 	bpl.w	800a04c <_scanf_float+0x60>
 800a216:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a220:	e7a8      	b.n	800a174 <_scanf_float+0x188>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a228:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a22c:	d006      	beq.n	800a23c <_scanf_float+0x250>
 800a22e:	0550      	lsls	r0, r2, #21
 800a230:	f57f af0c 	bpl.w	800a04c <_scanf_float+0x60>
 800a234:	f1b9 0f00 	cmp.w	r9, #0
 800a238:	f43f af0f 	beq.w	800a05a <_scanf_float+0x6e>
 800a23c:	0591      	lsls	r1, r2, #22
 800a23e:	bf58      	it	pl
 800a240:	9901      	ldrpl	r1, [sp, #4]
 800a242:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a246:	bf58      	it	pl
 800a248:	eba9 0101 	subpl.w	r1, r9, r1
 800a24c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a250:	bf58      	it	pl
 800a252:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a256:	6022      	str	r2, [r4, #0]
 800a258:	f04f 0900 	mov.w	r9, #0
 800a25c:	e78a      	b.n	800a174 <_scanf_float+0x188>
 800a25e:	f04f 0a03 	mov.w	sl, #3
 800a262:	e787      	b.n	800a174 <_scanf_float+0x188>
 800a264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a268:	4639      	mov	r1, r7
 800a26a:	4640      	mov	r0, r8
 800a26c:	4798      	blx	r3
 800a26e:	2800      	cmp	r0, #0
 800a270:	f43f aedf 	beq.w	800a032 <_scanf_float+0x46>
 800a274:	e6ea      	b.n	800a04c <_scanf_float+0x60>
 800a276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a27a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a27e:	463a      	mov	r2, r7
 800a280:	4640      	mov	r0, r8
 800a282:	4798      	blx	r3
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	3b01      	subs	r3, #1
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	e6ec      	b.n	800a066 <_scanf_float+0x7a>
 800a28c:	1e6b      	subs	r3, r5, #1
 800a28e:	2b06      	cmp	r3, #6
 800a290:	d825      	bhi.n	800a2de <_scanf_float+0x2f2>
 800a292:	2d02      	cmp	r5, #2
 800a294:	d836      	bhi.n	800a304 <_scanf_float+0x318>
 800a296:	455e      	cmp	r6, fp
 800a298:	f67f aee8 	bls.w	800a06c <_scanf_float+0x80>
 800a29c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4798      	blx	r3
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	e7f1      	b.n	800a296 <_scanf_float+0x2aa>
 800a2b2:	9802      	ldr	r0, [sp, #8]
 800a2b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a2bc:	9002      	str	r0, [sp, #8]
 800a2be:	463a      	mov	r2, r7
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4798      	blx	r3
 800a2c4:	6923      	ldr	r3, [r4, #16]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ce:	fa5f fa8a 	uxtb.w	sl, sl
 800a2d2:	f1ba 0f02 	cmp.w	sl, #2
 800a2d6:	d1ec      	bne.n	800a2b2 <_scanf_float+0x2c6>
 800a2d8:	3d03      	subs	r5, #3
 800a2da:	b2ed      	uxtb	r5, r5
 800a2dc:	1b76      	subs	r6, r6, r5
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	05da      	lsls	r2, r3, #23
 800a2e2:	d52f      	bpl.n	800a344 <_scanf_float+0x358>
 800a2e4:	055b      	lsls	r3, r3, #21
 800a2e6:	d510      	bpl.n	800a30a <_scanf_float+0x31e>
 800a2e8:	455e      	cmp	r6, fp
 800a2ea:	f67f aebf 	bls.w	800a06c <_scanf_float+0x80>
 800a2ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2f6:	463a      	mov	r2, r7
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4798      	blx	r3
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	6123      	str	r3, [r4, #16]
 800a302:	e7f1      	b.n	800a2e8 <_scanf_float+0x2fc>
 800a304:	46aa      	mov	sl, r5
 800a306:	9602      	str	r6, [sp, #8]
 800a308:	e7df      	b.n	800a2ca <_scanf_float+0x2de>
 800a30a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	2965      	cmp	r1, #101	; 0x65
 800a312:	f103 33ff 	add.w	r3, r3, #4294967295
 800a316:	f106 35ff 	add.w	r5, r6, #4294967295
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	d00c      	beq.n	800a338 <_scanf_float+0x34c>
 800a31e:	2945      	cmp	r1, #69	; 0x45
 800a320:	d00a      	beq.n	800a338 <_scanf_float+0x34c>
 800a322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a326:	463a      	mov	r2, r7
 800a328:	4640      	mov	r0, r8
 800a32a:	4798      	blx	r3
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a332:	3b01      	subs	r3, #1
 800a334:	1eb5      	subs	r5, r6, #2
 800a336:	6123      	str	r3, [r4, #16]
 800a338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a33c:	463a      	mov	r2, r7
 800a33e:	4640      	mov	r0, r8
 800a340:	4798      	blx	r3
 800a342:	462e      	mov	r6, r5
 800a344:	6825      	ldr	r5, [r4, #0]
 800a346:	f015 0510 	ands.w	r5, r5, #16
 800a34a:	d158      	bne.n	800a3fe <_scanf_float+0x412>
 800a34c:	7035      	strb	r5, [r6, #0]
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a358:	d11c      	bne.n	800a394 <_scanf_float+0x3a8>
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	454b      	cmp	r3, r9
 800a35e:	eba3 0209 	sub.w	r2, r3, r9
 800a362:	d124      	bne.n	800a3ae <_scanf_float+0x3c2>
 800a364:	2200      	movs	r2, #0
 800a366:	4659      	mov	r1, fp
 800a368:	4640      	mov	r0, r8
 800a36a:	f002 fb8d 	bl	800ca88 <_strtod_r>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	6821      	ldr	r1, [r4, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f011 0f02 	tst.w	r1, #2
 800a378:	ec57 6b10 	vmov	r6, r7, d0
 800a37c:	f103 0204 	add.w	r2, r3, #4
 800a380:	d020      	beq.n	800a3c4 <_scanf_float+0x3d8>
 800a382:	9903      	ldr	r1, [sp, #12]
 800a384:	600a      	str	r2, [r1, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	e9c3 6700 	strd	r6, r7, [r3]
 800a38c:	68e3      	ldr	r3, [r4, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	60e3      	str	r3, [r4, #12]
 800a392:	e66c      	b.n	800a06e <_scanf_float+0x82>
 800a394:	9b04      	ldr	r3, [sp, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0e4      	beq.n	800a364 <_scanf_float+0x378>
 800a39a:	9905      	ldr	r1, [sp, #20]
 800a39c:	230a      	movs	r3, #10
 800a39e:	462a      	mov	r2, r5
 800a3a0:	3101      	adds	r1, #1
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	f002 fbf8 	bl	800cb98 <_strtol_r>
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	9e05      	ldr	r6, [sp, #20]
 800a3ac:	1ac2      	subs	r2, r0, r3
 800a3ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a3b2:	429e      	cmp	r6, r3
 800a3b4:	bf28      	it	cs
 800a3b6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a3ba:	4912      	ldr	r1, [pc, #72]	; (800a404 <_scanf_float+0x418>)
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f000 f8e7 	bl	800a590 <siprintf>
 800a3c2:	e7cf      	b.n	800a364 <_scanf_float+0x378>
 800a3c4:	f011 0f04 	tst.w	r1, #4
 800a3c8:	9903      	ldr	r1, [sp, #12]
 800a3ca:	600a      	str	r2, [r1, #0]
 800a3cc:	d1db      	bne.n	800a386 <_scanf_float+0x39a>
 800a3ce:	f8d3 8000 	ldr.w	r8, [r3]
 800a3d2:	ee10 2a10 	vmov	r2, s0
 800a3d6:	ee10 0a10 	vmov	r0, s0
 800a3da:	463b      	mov	r3, r7
 800a3dc:	4639      	mov	r1, r7
 800a3de:	f7f6 fbb5 	bl	8000b4c <__aeabi_dcmpun>
 800a3e2:	b128      	cbz	r0, 800a3f0 <_scanf_float+0x404>
 800a3e4:	4808      	ldr	r0, [pc, #32]	; (800a408 <_scanf_float+0x41c>)
 800a3e6:	f000 f9c7 	bl	800a778 <nanf>
 800a3ea:	ed88 0a00 	vstr	s0, [r8]
 800a3ee:	e7cd      	b.n	800a38c <_scanf_float+0x3a0>
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 fc08 	bl	8000c08 <__aeabi_d2f>
 800a3f8:	f8c8 0000 	str.w	r0, [r8]
 800a3fc:	e7c6      	b.n	800a38c <_scanf_float+0x3a0>
 800a3fe:	2500      	movs	r5, #0
 800a400:	e635      	b.n	800a06e <_scanf_float+0x82>
 800a402:	bf00      	nop
 800a404:	0800dfd2 	.word	0x0800dfd2
 800a408:	0800e365 	.word	0x0800e365

0800a40c <std>:
 800a40c:	2300      	movs	r3, #0
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	e9c0 3300 	strd	r3, r3, [r0]
 800a416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	8181      	strh	r1, [r0, #12]
 800a41e:	6643      	str	r3, [r0, #100]	; 0x64
 800a420:	81c2      	strh	r2, [r0, #14]
 800a422:	6183      	str	r3, [r0, #24]
 800a424:	4619      	mov	r1, r3
 800a426:	2208      	movs	r2, #8
 800a428:	305c      	adds	r0, #92	; 0x5c
 800a42a:	f000 f914 	bl	800a656 <memset>
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <std+0x58>)
 800a430:	6263      	str	r3, [r4, #36]	; 0x24
 800a432:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <std+0x5c>)
 800a434:	62a3      	str	r3, [r4, #40]	; 0x28
 800a436:	4b0d      	ldr	r3, [pc, #52]	; (800a46c <std+0x60>)
 800a438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a43a:	4b0d      	ldr	r3, [pc, #52]	; (800a470 <std+0x64>)
 800a43c:	6323      	str	r3, [r4, #48]	; 0x30
 800a43e:	4b0d      	ldr	r3, [pc, #52]	; (800a474 <std+0x68>)
 800a440:	6224      	str	r4, [r4, #32]
 800a442:	429c      	cmp	r4, r3
 800a444:	d006      	beq.n	800a454 <std+0x48>
 800a446:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a44a:	4294      	cmp	r4, r2
 800a44c:	d002      	beq.n	800a454 <std+0x48>
 800a44e:	33d0      	adds	r3, #208	; 0xd0
 800a450:	429c      	cmp	r4, r3
 800a452:	d105      	bne.n	800a460 <std+0x54>
 800a454:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45c:	f000 b988 	b.w	800a770 <__retarget_lock_init_recursive>
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	0800a5d1 	.word	0x0800a5d1
 800a468:	0800a5f3 	.word	0x0800a5f3
 800a46c:	0800a62b 	.word	0x0800a62b
 800a470:	0800a64f 	.word	0x0800a64f
 800a474:	200007b8 	.word	0x200007b8

0800a478 <stdio_exit_handler>:
 800a478:	4a02      	ldr	r2, [pc, #8]	; (800a484 <stdio_exit_handler+0xc>)
 800a47a:	4903      	ldr	r1, [pc, #12]	; (800a488 <stdio_exit_handler+0x10>)
 800a47c:	4803      	ldr	r0, [pc, #12]	; (800a48c <stdio_exit_handler+0x14>)
 800a47e:	f000 b869 	b.w	800a554 <_fwalk_sglue>
 800a482:	bf00      	nop
 800a484:	200001d8 	.word	0x200001d8
 800a488:	0800cf59 	.word	0x0800cf59
 800a48c:	200001e4 	.word	0x200001e4

0800a490 <cleanup_stdio>:
 800a490:	6841      	ldr	r1, [r0, #4]
 800a492:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <cleanup_stdio+0x34>)
 800a494:	4299      	cmp	r1, r3
 800a496:	b510      	push	{r4, lr}
 800a498:	4604      	mov	r4, r0
 800a49a:	d001      	beq.n	800a4a0 <cleanup_stdio+0x10>
 800a49c:	f002 fd5c 	bl	800cf58 <_fflush_r>
 800a4a0:	68a1      	ldr	r1, [r4, #8]
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <cleanup_stdio+0x38>)
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	d002      	beq.n	800a4ae <cleanup_stdio+0x1e>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f002 fd55 	bl	800cf58 <_fflush_r>
 800a4ae:	68e1      	ldr	r1, [r4, #12]
 800a4b0:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <cleanup_stdio+0x3c>)
 800a4b2:	4299      	cmp	r1, r3
 800a4b4:	d004      	beq.n	800a4c0 <cleanup_stdio+0x30>
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4bc:	f002 bd4c 	b.w	800cf58 <_fflush_r>
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	bf00      	nop
 800a4c4:	200007b8 	.word	0x200007b8
 800a4c8:	20000820 	.word	0x20000820
 800a4cc:	20000888 	.word	0x20000888

0800a4d0 <global_stdio_init.part.0>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <global_stdio_init.part.0+0x30>)
 800a4d4:	4c0b      	ldr	r4, [pc, #44]	; (800a504 <global_stdio_init.part.0+0x34>)
 800a4d6:	4a0c      	ldr	r2, [pc, #48]	; (800a508 <global_stdio_init.part.0+0x38>)
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2104      	movs	r1, #4
 800a4e0:	f7ff ff94 	bl	800a40c <std>
 800a4e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	2109      	movs	r1, #9
 800a4ec:	f7ff ff8e 	bl	800a40c <std>
 800a4f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fa:	2112      	movs	r1, #18
 800a4fc:	f7ff bf86 	b.w	800a40c <std>
 800a500:	200008f0 	.word	0x200008f0
 800a504:	200007b8 	.word	0x200007b8
 800a508:	0800a479 	.word	0x0800a479

0800a50c <__sfp_lock_acquire>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sfp_lock_acquire+0x8>)
 800a50e:	f000 b930 	b.w	800a772 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	200008f9 	.word	0x200008f9

0800a518 <__sfp_lock_release>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sfp_lock_release+0x8>)
 800a51a:	f000 b92b 	b.w	800a774 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	200008f9 	.word	0x200008f9

0800a524 <__sinit>:
 800a524:	b510      	push	{r4, lr}
 800a526:	4604      	mov	r4, r0
 800a528:	f7ff fff0 	bl	800a50c <__sfp_lock_acquire>
 800a52c:	6a23      	ldr	r3, [r4, #32]
 800a52e:	b11b      	cbz	r3, 800a538 <__sinit+0x14>
 800a530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a534:	f7ff bff0 	b.w	800a518 <__sfp_lock_release>
 800a538:	4b04      	ldr	r3, [pc, #16]	; (800a54c <__sinit+0x28>)
 800a53a:	6223      	str	r3, [r4, #32]
 800a53c:	4b04      	ldr	r3, [pc, #16]	; (800a550 <__sinit+0x2c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f5      	bne.n	800a530 <__sinit+0xc>
 800a544:	f7ff ffc4 	bl	800a4d0 <global_stdio_init.part.0>
 800a548:	e7f2      	b.n	800a530 <__sinit+0xc>
 800a54a:	bf00      	nop
 800a54c:	0800a491 	.word	0x0800a491
 800a550:	200008f0 	.word	0x200008f0

0800a554 <_fwalk_sglue>:
 800a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a558:	4607      	mov	r7, r0
 800a55a:	4688      	mov	r8, r1
 800a55c:	4614      	mov	r4, r2
 800a55e:	2600      	movs	r6, #0
 800a560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a564:	f1b9 0901 	subs.w	r9, r9, #1
 800a568:	d505      	bpl.n	800a576 <_fwalk_sglue+0x22>
 800a56a:	6824      	ldr	r4, [r4, #0]
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	d1f7      	bne.n	800a560 <_fwalk_sglue+0xc>
 800a570:	4630      	mov	r0, r6
 800a572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d907      	bls.n	800a58c <_fwalk_sglue+0x38>
 800a57c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a580:	3301      	adds	r3, #1
 800a582:	d003      	beq.n	800a58c <_fwalk_sglue+0x38>
 800a584:	4629      	mov	r1, r5
 800a586:	4638      	mov	r0, r7
 800a588:	47c0      	blx	r8
 800a58a:	4306      	orrs	r6, r0
 800a58c:	3568      	adds	r5, #104	; 0x68
 800a58e:	e7e9      	b.n	800a564 <_fwalk_sglue+0x10>

0800a590 <siprintf>:
 800a590:	b40e      	push	{r1, r2, r3}
 800a592:	b500      	push	{lr}
 800a594:	b09c      	sub	sp, #112	; 0x70
 800a596:	ab1d      	add	r3, sp, #116	; 0x74
 800a598:	9002      	str	r0, [sp, #8]
 800a59a:	9006      	str	r0, [sp, #24]
 800a59c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5a0:	4809      	ldr	r0, [pc, #36]	; (800a5c8 <siprintf+0x38>)
 800a5a2:	9107      	str	r1, [sp, #28]
 800a5a4:	9104      	str	r1, [sp, #16]
 800a5a6:	4909      	ldr	r1, [pc, #36]	; (800a5cc <siprintf+0x3c>)
 800a5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ac:	9105      	str	r1, [sp, #20]
 800a5ae:	6800      	ldr	r0, [r0, #0]
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	a902      	add	r1, sp, #8
 800a5b4:	f002 fb4c 	bl	800cc50 <_svfiprintf_r>
 800a5b8:	9b02      	ldr	r3, [sp, #8]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	b01c      	add	sp, #112	; 0x70
 800a5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c4:	b003      	add	sp, #12
 800a5c6:	4770      	bx	lr
 800a5c8:	20000230 	.word	0x20000230
 800a5cc:	ffff0208 	.word	0xffff0208

0800a5d0 <__sread>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d8:	f000 f86c 	bl	800a6b4 <_read_r>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	bfab      	itete	ge
 800a5e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a5e4:	181b      	addge	r3, r3, r0
 800a5e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5ea:	bfac      	ite	ge
 800a5ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5ee:	81a3      	strhlt	r3, [r4, #12]
 800a5f0:	bd10      	pop	{r4, pc}

0800a5f2 <__swrite>:
 800a5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f6:	461f      	mov	r7, r3
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	05db      	lsls	r3, r3, #23
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	460c      	mov	r4, r1
 800a600:	4616      	mov	r6, r2
 800a602:	d505      	bpl.n	800a610 <__swrite+0x1e>
 800a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a608:	2302      	movs	r3, #2
 800a60a:	2200      	movs	r2, #0
 800a60c:	f000 f840 	bl	800a690 <_lseek_r>
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	4632      	mov	r2, r6
 800a61e:	463b      	mov	r3, r7
 800a620:	4628      	mov	r0, r5
 800a622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a626:	f000 b867 	b.w	800a6f8 <_write_r>

0800a62a <__sseek>:
 800a62a:	b510      	push	{r4, lr}
 800a62c:	460c      	mov	r4, r1
 800a62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a632:	f000 f82d 	bl	800a690 <_lseek_r>
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	bf15      	itete	ne
 800a63c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a63e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a646:	81a3      	strheq	r3, [r4, #12]
 800a648:	bf18      	it	ne
 800a64a:	81a3      	strhne	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__sclose>:
 800a64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a652:	f000 b80d 	b.w	800a670 <_close_r>

0800a656 <memset>:
 800a656:	4402      	add	r2, r0
 800a658:	4603      	mov	r3, r0
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d100      	bne.n	800a660 <memset+0xa>
 800a65e:	4770      	bx	lr
 800a660:	f803 1b01 	strb.w	r1, [r3], #1
 800a664:	e7f9      	b.n	800a65a <memset+0x4>
	...

0800a668 <_localeconv_r>:
 800a668:	4800      	ldr	r0, [pc, #0]	; (800a66c <_localeconv_r+0x4>)
 800a66a:	4770      	bx	lr
 800a66c:	20000324 	.word	0x20000324

0800a670 <_close_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4d06      	ldr	r5, [pc, #24]	; (800a68c <_close_r+0x1c>)
 800a674:	2300      	movs	r3, #0
 800a676:	4604      	mov	r4, r0
 800a678:	4608      	mov	r0, r1
 800a67a:	602b      	str	r3, [r5, #0]
 800a67c:	f7f7 fbc7 	bl	8001e0e <_close>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_close_r+0x1a>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_close_r+0x1a>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	200008f4 	.word	0x200008f4

0800a690 <_lseek_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	; (800a6b0 <_lseek_r+0x20>)
 800a694:	4604      	mov	r4, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f7 fbdc 	bl	8001e5c <_lseek>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_lseek_r+0x1e>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_lseek_r+0x1e>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	200008f4 	.word	0x200008f4

0800a6b4 <_read_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_read_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f7 fb6a 	bl	8001d9c <_read>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_read_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_read_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	200008f4 	.word	0x200008f4

0800a6d8 <_sbrk_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	; (800a6f4 <_sbrk_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f7 fbc8 	bl	8001e78 <_sbrk>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_sbrk_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_sbrk_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	200008f4 	.word	0x200008f4

0800a6f8 <_write_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_write_r+0x20>)
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	4608      	mov	r0, r1
 800a700:	4611      	mov	r1, r2
 800a702:	2200      	movs	r2, #0
 800a704:	602a      	str	r2, [r5, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	f7f7 fb65 	bl	8001dd6 <_write>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_write_r+0x1e>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_write_r+0x1e>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	200008f4 	.word	0x200008f4

0800a71c <__errno>:
 800a71c:	4b01      	ldr	r3, [pc, #4]	; (800a724 <__errno+0x8>)
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20000230 	.word	0x20000230

0800a728 <__libc_init_array>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	4d0d      	ldr	r5, [pc, #52]	; (800a760 <__libc_init_array+0x38>)
 800a72c:	4c0d      	ldr	r4, [pc, #52]	; (800a764 <__libc_init_array+0x3c>)
 800a72e:	1b64      	subs	r4, r4, r5
 800a730:	10a4      	asrs	r4, r4, #2
 800a732:	2600      	movs	r6, #0
 800a734:	42a6      	cmp	r6, r4
 800a736:	d109      	bne.n	800a74c <__libc_init_array+0x24>
 800a738:	4d0b      	ldr	r5, [pc, #44]	; (800a768 <__libc_init_array+0x40>)
 800a73a:	4c0c      	ldr	r4, [pc, #48]	; (800a76c <__libc_init_array+0x44>)
 800a73c:	f003 fb5c 	bl	800ddf8 <_init>
 800a740:	1b64      	subs	r4, r4, r5
 800a742:	10a4      	asrs	r4, r4, #2
 800a744:	2600      	movs	r6, #0
 800a746:	42a6      	cmp	r6, r4
 800a748:	d105      	bne.n	800a756 <__libc_init_array+0x2e>
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a750:	4798      	blx	r3
 800a752:	3601      	adds	r6, #1
 800a754:	e7ee      	b.n	800a734 <__libc_init_array+0xc>
 800a756:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75a:	4798      	blx	r3
 800a75c:	3601      	adds	r6, #1
 800a75e:	e7f2      	b.n	800a746 <__libc_init_array+0x1e>
 800a760:	0800e3c8 	.word	0x0800e3c8
 800a764:	0800e3c8 	.word	0x0800e3c8
 800a768:	0800e3c8 	.word	0x0800e3c8
 800a76c:	0800e3cc 	.word	0x0800e3cc

0800a770 <__retarget_lock_init_recursive>:
 800a770:	4770      	bx	lr

0800a772 <__retarget_lock_acquire_recursive>:
 800a772:	4770      	bx	lr

0800a774 <__retarget_lock_release_recursive>:
 800a774:	4770      	bx	lr
	...

0800a778 <nanf>:
 800a778:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a780 <nanf+0x8>
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	7fc00000 	.word	0x7fc00000

0800a784 <quorem>:
 800a784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	6903      	ldr	r3, [r0, #16]
 800a78a:	690c      	ldr	r4, [r1, #16]
 800a78c:	42a3      	cmp	r3, r4
 800a78e:	4607      	mov	r7, r0
 800a790:	db7e      	blt.n	800a890 <quorem+0x10c>
 800a792:	3c01      	subs	r4, #1
 800a794:	f101 0814 	add.w	r8, r1, #20
 800a798:	f100 0514 	add.w	r5, r0, #20
 800a79c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7b6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7ba:	d331      	bcc.n	800a820 <quorem+0x9c>
 800a7bc:	f04f 0e00 	mov.w	lr, #0
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	46ac      	mov	ip, r5
 800a7c4:	46f2      	mov	sl, lr
 800a7c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7ca:	b293      	uxth	r3, r2
 800a7cc:	fb06 e303 	mla	r3, r6, r3, lr
 800a7d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7d4:	0c1a      	lsrs	r2, r3, #16
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7dc:	f8dc a000 	ldr.w	sl, [ip]
 800a7e0:	fa13 f38a 	uxtah	r3, r3, sl
 800a7e4:	fb06 220e 	mla	r2, r6, lr, r2
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7fa:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7fe:	4581      	cmp	r9, r0
 800a800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a804:	f84c 3b04 	str.w	r3, [ip], #4
 800a808:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a80c:	d2db      	bcs.n	800a7c6 <quorem+0x42>
 800a80e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a812:	b92b      	cbnz	r3, 800a820 <quorem+0x9c>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	3b04      	subs	r3, #4
 800a818:	429d      	cmp	r5, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	d32c      	bcc.n	800a878 <quorem+0xf4>
 800a81e:	613c      	str	r4, [r7, #16]
 800a820:	4638      	mov	r0, r7
 800a822:	f001 f93d 	bl	800baa0 <__mcmp>
 800a826:	2800      	cmp	r0, #0
 800a828:	db22      	blt.n	800a870 <quorem+0xec>
 800a82a:	3601      	adds	r6, #1
 800a82c:	4629      	mov	r1, r5
 800a82e:	2000      	movs	r0, #0
 800a830:	f858 2b04 	ldr.w	r2, [r8], #4
 800a834:	f8d1 c000 	ldr.w	ip, [r1]
 800a838:	b293      	uxth	r3, r2
 800a83a:	1ac3      	subs	r3, r0, r3
 800a83c:	0c12      	lsrs	r2, r2, #16
 800a83e:	fa13 f38c 	uxtah	r3, r3, ip
 800a842:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a846:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a850:	45c1      	cmp	r9, r8
 800a852:	f841 3b04 	str.w	r3, [r1], #4
 800a856:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a85a:	d2e9      	bcs.n	800a830 <quorem+0xac>
 800a85c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a864:	b922      	cbnz	r2, 800a870 <quorem+0xec>
 800a866:	3b04      	subs	r3, #4
 800a868:	429d      	cmp	r5, r3
 800a86a:	461a      	mov	r2, r3
 800a86c:	d30a      	bcc.n	800a884 <quorem+0x100>
 800a86e:	613c      	str	r4, [r7, #16]
 800a870:	4630      	mov	r0, r6
 800a872:	b003      	add	sp, #12
 800a874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a878:	6812      	ldr	r2, [r2, #0]
 800a87a:	3b04      	subs	r3, #4
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	d1ce      	bne.n	800a81e <quorem+0x9a>
 800a880:	3c01      	subs	r4, #1
 800a882:	e7c9      	b.n	800a818 <quorem+0x94>
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	3b04      	subs	r3, #4
 800a888:	2a00      	cmp	r2, #0
 800a88a:	d1f0      	bne.n	800a86e <quorem+0xea>
 800a88c:	3c01      	subs	r4, #1
 800a88e:	e7eb      	b.n	800a868 <quorem+0xe4>
 800a890:	2000      	movs	r0, #0
 800a892:	e7ee      	b.n	800a872 <quorem+0xee>
 800a894:	0000      	movs	r0, r0
	...

0800a898 <_dtoa_r>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	ed2d 8b04 	vpush	{d8-d9}
 800a8a0:	69c5      	ldr	r5, [r0, #28]
 800a8a2:	b093      	sub	sp, #76	; 0x4c
 800a8a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8a8:	ec57 6b10 	vmov	r6, r7, d0
 800a8ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8b0:	9107      	str	r1, [sp, #28]
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b8:	b975      	cbnz	r5, 800a8d8 <_dtoa_r+0x40>
 800a8ba:	2010      	movs	r0, #16
 800a8bc:	f7fe fe74 	bl	80095a8 <malloc>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	61e0      	str	r0, [r4, #28]
 800a8c4:	b920      	cbnz	r0, 800a8d0 <_dtoa_r+0x38>
 800a8c6:	4bae      	ldr	r3, [pc, #696]	; (800ab80 <_dtoa_r+0x2e8>)
 800a8c8:	21ef      	movs	r1, #239	; 0xef
 800a8ca:	48ae      	ldr	r0, [pc, #696]	; (800ab84 <_dtoa_r+0x2ec>)
 800a8cc:	f002 fbb0 	bl	800d030 <__assert_func>
 800a8d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8d4:	6005      	str	r5, [r0, #0]
 800a8d6:	60c5      	str	r5, [r0, #12]
 800a8d8:	69e3      	ldr	r3, [r4, #28]
 800a8da:	6819      	ldr	r1, [r3, #0]
 800a8dc:	b151      	cbz	r1, 800a8f4 <_dtoa_r+0x5c>
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	604a      	str	r2, [r1, #4]
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	4093      	lsls	r3, r2
 800a8e6:	608b      	str	r3, [r1, #8]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fe53 	bl	800b594 <_Bfree>
 800a8ee:	69e3      	ldr	r3, [r4, #28]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	1e3b      	subs	r3, r7, #0
 800a8f6:	bfbb      	ittet	lt
 800a8f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8fc:	9303      	strlt	r3, [sp, #12]
 800a8fe:	2300      	movge	r3, #0
 800a900:	2201      	movlt	r2, #1
 800a902:	bfac      	ite	ge
 800a904:	f8c8 3000 	strge.w	r3, [r8]
 800a908:	f8c8 2000 	strlt.w	r2, [r8]
 800a90c:	4b9e      	ldr	r3, [pc, #632]	; (800ab88 <_dtoa_r+0x2f0>)
 800a90e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a912:	ea33 0308 	bics.w	r3, r3, r8
 800a916:	d11b      	bne.n	800a950 <_dtoa_r+0xb8>
 800a918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a91a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a924:	4333      	orrs	r3, r6
 800a926:	f000 8593 	beq.w	800b450 <_dtoa_r+0xbb8>
 800a92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a92c:	b963      	cbnz	r3, 800a948 <_dtoa_r+0xb0>
 800a92e:	4b97      	ldr	r3, [pc, #604]	; (800ab8c <_dtoa_r+0x2f4>)
 800a930:	e027      	b.n	800a982 <_dtoa_r+0xea>
 800a932:	4b97      	ldr	r3, [pc, #604]	; (800ab90 <_dtoa_r+0x2f8>)
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	3308      	adds	r3, #8
 800a938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	9800      	ldr	r0, [sp, #0]
 800a93e:	b013      	add	sp, #76	; 0x4c
 800a940:	ecbd 8b04 	vpop	{d8-d9}
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	4b90      	ldr	r3, [pc, #576]	; (800ab8c <_dtoa_r+0x2f4>)
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	3303      	adds	r3, #3
 800a94e:	e7f3      	b.n	800a938 <_dtoa_r+0xa0>
 800a950:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a954:	2200      	movs	r2, #0
 800a956:	ec51 0b17 	vmov	r0, r1, d7
 800a95a:	eeb0 8a47 	vmov.f32	s16, s14
 800a95e:	eef0 8a67 	vmov.f32	s17, s15
 800a962:	2300      	movs	r3, #0
 800a964:	f7f6 f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a968:	4681      	mov	r9, r0
 800a96a:	b160      	cbz	r0, 800a986 <_dtoa_r+0xee>
 800a96c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a96e:	2301      	movs	r3, #1
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8568 	beq.w	800b44a <_dtoa_r+0xbb2>
 800a97a:	4b86      	ldr	r3, [pc, #536]	; (800ab94 <_dtoa_r+0x2fc>)
 800a97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	3b01      	subs	r3, #1
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	e7da      	b.n	800a93c <_dtoa_r+0xa4>
 800a986:	aa10      	add	r2, sp, #64	; 0x40
 800a988:	a911      	add	r1, sp, #68	; 0x44
 800a98a:	4620      	mov	r0, r4
 800a98c:	eeb0 0a48 	vmov.f32	s0, s16
 800a990:	eef0 0a68 	vmov.f32	s1, s17
 800a994:	f001 f99a 	bl	800bccc <__d2b>
 800a998:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a99c:	4682      	mov	sl, r0
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	d07f      	beq.n	800aaa2 <_dtoa_r+0x20a>
 800a9a2:	ee18 3a90 	vmov	r3, s17
 800a9a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9ae:	ec51 0b18 	vmov	r0, r1, d8
 800a9b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9be:	4619      	mov	r1, r3
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4b75      	ldr	r3, [pc, #468]	; (800ab98 <_dtoa_r+0x300>)
 800a9c4:	f7f5 fc70 	bl	80002a8 <__aeabi_dsub>
 800a9c8:	a367      	add	r3, pc, #412	; (adr r3, 800ab68 <_dtoa_r+0x2d0>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe23 	bl	8000618 <__aeabi_dmul>
 800a9d2:	a367      	add	r3, pc, #412	; (adr r3, 800ab70 <_dtoa_r+0x2d8>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fc68 	bl	80002ac <__adddf3>
 800a9dc:	4606      	mov	r6, r0
 800a9de:	4628      	mov	r0, r5
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	f7f5 fdaf 	bl	8000544 <__aeabi_i2d>
 800a9e6:	a364      	add	r3, pc, #400	; (adr r3, 800ab78 <_dtoa_r+0x2e0>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f7f5 fe14 	bl	8000618 <__aeabi_dmul>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	f7f5 fc58 	bl	80002ac <__adddf3>
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	f7f6 f8ba 	bl	8000b78 <__aeabi_d2iz>
 800aa04:	2200      	movs	r2, #0
 800aa06:	4683      	mov	fp, r0
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	f7f6 f875 	bl	8000afc <__aeabi_dcmplt>
 800aa12:	b148      	cbz	r0, 800aa28 <_dtoa_r+0x190>
 800aa14:	4658      	mov	r0, fp
 800aa16:	f7f5 fd95 	bl	8000544 <__aeabi_i2d>
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	f7f6 f863 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa22:	b908      	cbnz	r0, 800aa28 <_dtoa_r+0x190>
 800aa24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa28:	f1bb 0f16 	cmp.w	fp, #22
 800aa2c:	d857      	bhi.n	800aade <_dtoa_r+0x246>
 800aa2e:	4b5b      	ldr	r3, [pc, #364]	; (800ab9c <_dtoa_r+0x304>)
 800aa30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	ec51 0b18 	vmov	r0, r1, d8
 800aa3c:	f7f6 f85e 	bl	8000afc <__aeabi_dcmplt>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d04e      	beq.n	800aae2 <_dtoa_r+0x24a>
 800aa44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa48:	2300      	movs	r3, #0
 800aa4a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa4e:	1b5b      	subs	r3, r3, r5
 800aa50:	1e5a      	subs	r2, r3, #1
 800aa52:	bf45      	ittet	mi
 800aa54:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa58:	9305      	strmi	r3, [sp, #20]
 800aa5a:	2300      	movpl	r3, #0
 800aa5c:	2300      	movmi	r3, #0
 800aa5e:	9206      	str	r2, [sp, #24]
 800aa60:	bf54      	ite	pl
 800aa62:	9305      	strpl	r3, [sp, #20]
 800aa64:	9306      	strmi	r3, [sp, #24]
 800aa66:	f1bb 0f00 	cmp.w	fp, #0
 800aa6a:	db3c      	blt.n	800aae6 <_dtoa_r+0x24e>
 800aa6c:	9b06      	ldr	r3, [sp, #24]
 800aa6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa72:	445b      	add	r3, fp
 800aa74:	9306      	str	r3, [sp, #24]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9308      	str	r3, [sp, #32]
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	2b09      	cmp	r3, #9
 800aa7e:	d868      	bhi.n	800ab52 <_dtoa_r+0x2ba>
 800aa80:	2b05      	cmp	r3, #5
 800aa82:	bfc4      	itt	gt
 800aa84:	3b04      	subgt	r3, #4
 800aa86:	9307      	strgt	r3, [sp, #28]
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa8e:	bfcc      	ite	gt
 800aa90:	2500      	movgt	r5, #0
 800aa92:	2501      	movle	r5, #1
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	f200 8085 	bhi.w	800aba4 <_dtoa_r+0x30c>
 800aa9a:	e8df f003 	tbb	[pc, r3]
 800aa9e:	3b2e      	.short	0x3b2e
 800aaa0:	5839      	.short	0x5839
 800aaa2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aaa6:	441d      	add	r5, r3
 800aaa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	bfc1      	itttt	gt
 800aab0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aab4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aab8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aabc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aac0:	bfd6      	itet	le
 800aac2:	f1c3 0320 	rsble	r3, r3, #32
 800aac6:	ea48 0003 	orrgt.w	r0, r8, r3
 800aaca:	fa06 f003 	lslle.w	r0, r6, r3
 800aace:	f7f5 fd29 	bl	8000524 <__aeabi_ui2d>
 800aad2:	2201      	movs	r2, #1
 800aad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aad8:	3d01      	subs	r5, #1
 800aada:	920e      	str	r2, [sp, #56]	; 0x38
 800aadc:	e76f      	b.n	800a9be <_dtoa_r+0x126>
 800aade:	2301      	movs	r3, #1
 800aae0:	e7b3      	b.n	800aa4a <_dtoa_r+0x1b2>
 800aae2:	900c      	str	r0, [sp, #48]	; 0x30
 800aae4:	e7b2      	b.n	800aa4c <_dtoa_r+0x1b4>
 800aae6:	9b05      	ldr	r3, [sp, #20]
 800aae8:	eba3 030b 	sub.w	r3, r3, fp
 800aaec:	9305      	str	r3, [sp, #20]
 800aaee:	f1cb 0300 	rsb	r3, fp, #0
 800aaf2:	9308      	str	r3, [sp, #32]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaf8:	e7bf      	b.n	800aa7a <_dtoa_r+0x1e2>
 800aafa:	2300      	movs	r3, #0
 800aafc:	9309      	str	r3, [sp, #36]	; 0x24
 800aafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	dc52      	bgt.n	800abaa <_dtoa_r+0x312>
 800ab04:	2301      	movs	r3, #1
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	9304      	str	r3, [sp, #16]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab0e:	e00b      	b.n	800ab28 <_dtoa_r+0x290>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e7f3      	b.n	800aafc <_dtoa_r+0x264>
 800ab14:	2300      	movs	r3, #0
 800ab16:	9309      	str	r3, [sp, #36]	; 0x24
 800ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1a:	445b      	add	r3, fp
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	bfb8      	it	lt
 800ab26:	2301      	movlt	r3, #1
 800ab28:	69e0      	ldr	r0, [r4, #28]
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	2204      	movs	r2, #4
 800ab2e:	f102 0614 	add.w	r6, r2, #20
 800ab32:	429e      	cmp	r6, r3
 800ab34:	d93d      	bls.n	800abb2 <_dtoa_r+0x31a>
 800ab36:	6041      	str	r1, [r0, #4]
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 fceb 	bl	800b514 <_Balloc>
 800ab3e:	9000      	str	r0, [sp, #0]
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d139      	bne.n	800abb8 <_dtoa_r+0x320>
 800ab44:	4b16      	ldr	r3, [pc, #88]	; (800aba0 <_dtoa_r+0x308>)
 800ab46:	4602      	mov	r2, r0
 800ab48:	f240 11af 	movw	r1, #431	; 0x1af
 800ab4c:	e6bd      	b.n	800a8ca <_dtoa_r+0x32>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7e1      	b.n	800ab16 <_dtoa_r+0x27e>
 800ab52:	2501      	movs	r5, #1
 800ab54:	2300      	movs	r3, #0
 800ab56:	9307      	str	r3, [sp, #28]
 800ab58:	9509      	str	r5, [sp, #36]	; 0x24
 800ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	9304      	str	r3, [sp, #16]
 800ab62:	2200      	movs	r2, #0
 800ab64:	2312      	movs	r3, #18
 800ab66:	e7d1      	b.n	800ab0c <_dtoa_r+0x274>
 800ab68:	636f4361 	.word	0x636f4361
 800ab6c:	3fd287a7 	.word	0x3fd287a7
 800ab70:	8b60c8b3 	.word	0x8b60c8b3
 800ab74:	3fc68a28 	.word	0x3fc68a28
 800ab78:	509f79fb 	.word	0x509f79fb
 800ab7c:	3fd34413 	.word	0x3fd34413
 800ab80:	0800dfe4 	.word	0x0800dfe4
 800ab84:	0800dffb 	.word	0x0800dffb
 800ab88:	7ff00000 	.word	0x7ff00000
 800ab8c:	0800dfe0 	.word	0x0800dfe0
 800ab90:	0800dfd7 	.word	0x0800dfd7
 800ab94:	0800dfaf 	.word	0x0800dfaf
 800ab98:	3ff80000 	.word	0x3ff80000
 800ab9c:	0800e0e8 	.word	0x0800e0e8
 800aba0:	0800e053 	.word	0x0800e053
 800aba4:	2301      	movs	r3, #1
 800aba6:	9309      	str	r3, [sp, #36]	; 0x24
 800aba8:	e7d7      	b.n	800ab5a <_dtoa_r+0x2c2>
 800abaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	e7ba      	b.n	800ab28 <_dtoa_r+0x290>
 800abb2:	3101      	adds	r1, #1
 800abb4:	0052      	lsls	r2, r2, #1
 800abb6:	e7ba      	b.n	800ab2e <_dtoa_r+0x296>
 800abb8:	69e3      	ldr	r3, [r4, #28]
 800abba:	9a00      	ldr	r2, [sp, #0]
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	9b04      	ldr	r3, [sp, #16]
 800abc0:	2b0e      	cmp	r3, #14
 800abc2:	f200 80a8 	bhi.w	800ad16 <_dtoa_r+0x47e>
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	f000 80a5 	beq.w	800ad16 <_dtoa_r+0x47e>
 800abcc:	f1bb 0f00 	cmp.w	fp, #0
 800abd0:	dd38      	ble.n	800ac44 <_dtoa_r+0x3ac>
 800abd2:	4bc0      	ldr	r3, [pc, #768]	; (800aed4 <_dtoa_r+0x63c>)
 800abd4:	f00b 020f 	and.w	r2, fp, #15
 800abd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800abe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800abe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800abe8:	d019      	beq.n	800ac1e <_dtoa_r+0x386>
 800abea:	4bbb      	ldr	r3, [pc, #748]	; (800aed8 <_dtoa_r+0x640>)
 800abec:	ec51 0b18 	vmov	r0, r1, d8
 800abf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abf4:	f7f5 fe3a 	bl	800086c <__aeabi_ddiv>
 800abf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abfc:	f008 080f 	and.w	r8, r8, #15
 800ac00:	2503      	movs	r5, #3
 800ac02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aed8 <_dtoa_r+0x640>
 800ac06:	f1b8 0f00 	cmp.w	r8, #0
 800ac0a:	d10a      	bne.n	800ac22 <_dtoa_r+0x38a>
 800ac0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac10:	4632      	mov	r2, r6
 800ac12:	463b      	mov	r3, r7
 800ac14:	f7f5 fe2a 	bl	800086c <__aeabi_ddiv>
 800ac18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac1c:	e02b      	b.n	800ac76 <_dtoa_r+0x3de>
 800ac1e:	2502      	movs	r5, #2
 800ac20:	e7ef      	b.n	800ac02 <_dtoa_r+0x36a>
 800ac22:	f018 0f01 	tst.w	r8, #1
 800ac26:	d008      	beq.n	800ac3a <_dtoa_r+0x3a2>
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac30:	f7f5 fcf2 	bl	8000618 <__aeabi_dmul>
 800ac34:	3501      	adds	r5, #1
 800ac36:	4606      	mov	r6, r0
 800ac38:	460f      	mov	r7, r1
 800ac3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac3e:	f109 0908 	add.w	r9, r9, #8
 800ac42:	e7e0      	b.n	800ac06 <_dtoa_r+0x36e>
 800ac44:	f000 809f 	beq.w	800ad86 <_dtoa_r+0x4ee>
 800ac48:	f1cb 0600 	rsb	r6, fp, #0
 800ac4c:	4ba1      	ldr	r3, [pc, #644]	; (800aed4 <_dtoa_r+0x63c>)
 800ac4e:	4fa2      	ldr	r7, [pc, #648]	; (800aed8 <_dtoa_r+0x640>)
 800ac50:	f006 020f 	and.w	r2, r6, #15
 800ac54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	ec51 0b18 	vmov	r0, r1, d8
 800ac60:	f7f5 fcda 	bl	8000618 <__aeabi_dmul>
 800ac64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac68:	1136      	asrs	r6, r6, #4
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2502      	movs	r5, #2
 800ac6e:	2e00      	cmp	r6, #0
 800ac70:	d17e      	bne.n	800ad70 <_dtoa_r+0x4d8>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1d0      	bne.n	800ac18 <_dtoa_r+0x380>
 800ac76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 8084 	beq.w	800ad8a <_dtoa_r+0x4f2>
 800ac82:	4b96      	ldr	r3, [pc, #600]	; (800aedc <_dtoa_r+0x644>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	4640      	mov	r0, r8
 800ac88:	4649      	mov	r1, r9
 800ac8a:	f7f5 ff37 	bl	8000afc <__aeabi_dcmplt>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d07b      	beq.n	800ad8a <_dtoa_r+0x4f2>
 800ac92:	9b04      	ldr	r3, [sp, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d078      	beq.n	800ad8a <_dtoa_r+0x4f2>
 800ac98:	9b01      	ldr	r3, [sp, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dd39      	ble.n	800ad12 <_dtoa_r+0x47a>
 800ac9e:	4b90      	ldr	r3, [pc, #576]	; (800aee0 <_dtoa_r+0x648>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f7f5 fcb7 	bl	8000618 <__aeabi_dmul>
 800acaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acae:	9e01      	ldr	r6, [sp, #4]
 800acb0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800acb4:	3501      	adds	r5, #1
 800acb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acba:	4628      	mov	r0, r5
 800acbc:	f7f5 fc42 	bl	8000544 <__aeabi_i2d>
 800acc0:	4642      	mov	r2, r8
 800acc2:	464b      	mov	r3, r9
 800acc4:	f7f5 fca8 	bl	8000618 <__aeabi_dmul>
 800acc8:	4b86      	ldr	r3, [pc, #536]	; (800aee4 <_dtoa_r+0x64c>)
 800acca:	2200      	movs	r2, #0
 800accc:	f7f5 faee 	bl	80002ac <__adddf3>
 800acd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800acd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acd8:	9303      	str	r3, [sp, #12]
 800acda:	2e00      	cmp	r6, #0
 800acdc:	d158      	bne.n	800ad90 <_dtoa_r+0x4f8>
 800acde:	4b82      	ldr	r3, [pc, #520]	; (800aee8 <_dtoa_r+0x650>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7f5 fadf 	bl	80002a8 <__aeabi_dsub>
 800acea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acee:	4680      	mov	r8, r0
 800acf0:	4689      	mov	r9, r1
 800acf2:	f7f5 ff21 	bl	8000b38 <__aeabi_dcmpgt>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f040 8296 	bne.w	800b228 <_dtoa_r+0x990>
 800acfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad00:	4640      	mov	r0, r8
 800ad02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad06:	4649      	mov	r1, r9
 800ad08:	f7f5 fef8 	bl	8000afc <__aeabi_dcmplt>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f040 8289 	bne.w	800b224 <_dtoa_r+0x98c>
 800ad12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f2c0 814e 	blt.w	800afba <_dtoa_r+0x722>
 800ad1e:	f1bb 0f0e 	cmp.w	fp, #14
 800ad22:	f300 814a 	bgt.w	800afba <_dtoa_r+0x722>
 800ad26:	4b6b      	ldr	r3, [pc, #428]	; (800aed4 <_dtoa_r+0x63c>)
 800ad28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f280 80dc 	bge.w	800aef0 <_dtoa_r+0x658>
 800ad38:	9b04      	ldr	r3, [sp, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f300 80d8 	bgt.w	800aef0 <_dtoa_r+0x658>
 800ad40:	f040 826f 	bne.w	800b222 <_dtoa_r+0x98a>
 800ad44:	4b68      	ldr	r3, [pc, #416]	; (800aee8 <_dtoa_r+0x650>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	4640      	mov	r0, r8
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	f7f5 fc64 	bl	8000618 <__aeabi_dmul>
 800ad50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad54:	f7f5 fee6 	bl	8000b24 <__aeabi_dcmpge>
 800ad58:	9e04      	ldr	r6, [sp, #16]
 800ad5a:	4637      	mov	r7, r6
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f040 8245 	bne.w	800b1ec <_dtoa_r+0x954>
 800ad62:	9d00      	ldr	r5, [sp, #0]
 800ad64:	2331      	movs	r3, #49	; 0x31
 800ad66:	f805 3b01 	strb.w	r3, [r5], #1
 800ad6a:	f10b 0b01 	add.w	fp, fp, #1
 800ad6e:	e241      	b.n	800b1f4 <_dtoa_r+0x95c>
 800ad70:	07f2      	lsls	r2, r6, #31
 800ad72:	d505      	bpl.n	800ad80 <_dtoa_r+0x4e8>
 800ad74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad78:	f7f5 fc4e 	bl	8000618 <__aeabi_dmul>
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	2301      	movs	r3, #1
 800ad80:	1076      	asrs	r6, r6, #1
 800ad82:	3708      	adds	r7, #8
 800ad84:	e773      	b.n	800ac6e <_dtoa_r+0x3d6>
 800ad86:	2502      	movs	r5, #2
 800ad88:	e775      	b.n	800ac76 <_dtoa_r+0x3de>
 800ad8a:	9e04      	ldr	r6, [sp, #16]
 800ad8c:	465f      	mov	r7, fp
 800ad8e:	e792      	b.n	800acb6 <_dtoa_r+0x41e>
 800ad90:	9900      	ldr	r1, [sp, #0]
 800ad92:	4b50      	ldr	r3, [pc, #320]	; (800aed4 <_dtoa_r+0x63c>)
 800ad94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad98:	4431      	add	r1, r6
 800ad9a:	9102      	str	r1, [sp, #8]
 800ad9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad9e:	eeb0 9a47 	vmov.f32	s18, s14
 800ada2:	eef0 9a67 	vmov.f32	s19, s15
 800ada6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adae:	2900      	cmp	r1, #0
 800adb0:	d044      	beq.n	800ae3c <_dtoa_r+0x5a4>
 800adb2:	494e      	ldr	r1, [pc, #312]	; (800aeec <_dtoa_r+0x654>)
 800adb4:	2000      	movs	r0, #0
 800adb6:	f7f5 fd59 	bl	800086c <__aeabi_ddiv>
 800adba:	ec53 2b19 	vmov	r2, r3, d9
 800adbe:	f7f5 fa73 	bl	80002a8 <__aeabi_dsub>
 800adc2:	9d00      	ldr	r5, [sp, #0]
 800adc4:	ec41 0b19 	vmov	d9, r0, r1
 800adc8:	4649      	mov	r1, r9
 800adca:	4640      	mov	r0, r8
 800adcc:	f7f5 fed4 	bl	8000b78 <__aeabi_d2iz>
 800add0:	4606      	mov	r6, r0
 800add2:	f7f5 fbb7 	bl	8000544 <__aeabi_i2d>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	4640      	mov	r0, r8
 800addc:	4649      	mov	r1, r9
 800adde:	f7f5 fa63 	bl	80002a8 <__aeabi_dsub>
 800ade2:	3630      	adds	r6, #48	; 0x30
 800ade4:	f805 6b01 	strb.w	r6, [r5], #1
 800ade8:	ec53 2b19 	vmov	r2, r3, d9
 800adec:	4680      	mov	r8, r0
 800adee:	4689      	mov	r9, r1
 800adf0:	f7f5 fe84 	bl	8000afc <__aeabi_dcmplt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d164      	bne.n	800aec2 <_dtoa_r+0x62a>
 800adf8:	4642      	mov	r2, r8
 800adfa:	464b      	mov	r3, r9
 800adfc:	4937      	ldr	r1, [pc, #220]	; (800aedc <_dtoa_r+0x644>)
 800adfe:	2000      	movs	r0, #0
 800ae00:	f7f5 fa52 	bl	80002a8 <__aeabi_dsub>
 800ae04:	ec53 2b19 	vmov	r2, r3, d9
 800ae08:	f7f5 fe78 	bl	8000afc <__aeabi_dcmplt>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f040 80b6 	bne.w	800af7e <_dtoa_r+0x6e6>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	429d      	cmp	r5, r3
 800ae16:	f43f af7c 	beq.w	800ad12 <_dtoa_r+0x47a>
 800ae1a:	4b31      	ldr	r3, [pc, #196]	; (800aee0 <_dtoa_r+0x648>)
 800ae1c:	ec51 0b19 	vmov	r0, r1, d9
 800ae20:	2200      	movs	r2, #0
 800ae22:	f7f5 fbf9 	bl	8000618 <__aeabi_dmul>
 800ae26:	4b2e      	ldr	r3, [pc, #184]	; (800aee0 <_dtoa_r+0x648>)
 800ae28:	ec41 0b19 	vmov	d9, r0, r1
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4640      	mov	r0, r8
 800ae30:	4649      	mov	r1, r9
 800ae32:	f7f5 fbf1 	bl	8000618 <__aeabi_dmul>
 800ae36:	4680      	mov	r8, r0
 800ae38:	4689      	mov	r9, r1
 800ae3a:	e7c5      	b.n	800adc8 <_dtoa_r+0x530>
 800ae3c:	ec51 0b17 	vmov	r0, r1, d7
 800ae40:	f7f5 fbea 	bl	8000618 <__aeabi_dmul>
 800ae44:	9b02      	ldr	r3, [sp, #8]
 800ae46:	9d00      	ldr	r5, [sp, #0]
 800ae48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae4a:	ec41 0b19 	vmov	d9, r0, r1
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4640      	mov	r0, r8
 800ae52:	f7f5 fe91 	bl	8000b78 <__aeabi_d2iz>
 800ae56:	4606      	mov	r6, r0
 800ae58:	f7f5 fb74 	bl	8000544 <__aeabi_i2d>
 800ae5c:	3630      	adds	r6, #48	; 0x30
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4640      	mov	r0, r8
 800ae64:	4649      	mov	r1, r9
 800ae66:	f7f5 fa1f 	bl	80002a8 <__aeabi_dsub>
 800ae6a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	429d      	cmp	r5, r3
 800ae72:	4680      	mov	r8, r0
 800ae74:	4689      	mov	r9, r1
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	d124      	bne.n	800aec6 <_dtoa_r+0x62e>
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <_dtoa_r+0x654>)
 800ae7e:	ec51 0b19 	vmov	r0, r1, d9
 800ae82:	f7f5 fa13 	bl	80002ac <__adddf3>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	f7f5 fe53 	bl	8000b38 <__aeabi_dcmpgt>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d173      	bne.n	800af7e <_dtoa_r+0x6e6>
 800ae96:	ec53 2b19 	vmov	r2, r3, d9
 800ae9a:	4914      	ldr	r1, [pc, #80]	; (800aeec <_dtoa_r+0x654>)
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	f7f5 fa03 	bl	80002a8 <__aeabi_dsub>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4640      	mov	r0, r8
 800aea8:	4649      	mov	r1, r9
 800aeaa:	f7f5 fe27 	bl	8000afc <__aeabi_dcmplt>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f af2f 	beq.w	800ad12 <_dtoa_r+0x47a>
 800aeb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aeb6:	1e6b      	subs	r3, r5, #1
 800aeb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aebe:	2b30      	cmp	r3, #48	; 0x30
 800aec0:	d0f8      	beq.n	800aeb4 <_dtoa_r+0x61c>
 800aec2:	46bb      	mov	fp, r7
 800aec4:	e04a      	b.n	800af5c <_dtoa_r+0x6c4>
 800aec6:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <_dtoa_r+0x648>)
 800aec8:	f7f5 fba6 	bl	8000618 <__aeabi_dmul>
 800aecc:	4680      	mov	r8, r0
 800aece:	4689      	mov	r9, r1
 800aed0:	e7bd      	b.n	800ae4e <_dtoa_r+0x5b6>
 800aed2:	bf00      	nop
 800aed4:	0800e0e8 	.word	0x0800e0e8
 800aed8:	0800e0c0 	.word	0x0800e0c0
 800aedc:	3ff00000 	.word	0x3ff00000
 800aee0:	40240000 	.word	0x40240000
 800aee4:	401c0000 	.word	0x401c0000
 800aee8:	40140000 	.word	0x40140000
 800aeec:	3fe00000 	.word	0x3fe00000
 800aef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aef4:	9d00      	ldr	r5, [sp, #0]
 800aef6:	4642      	mov	r2, r8
 800aef8:	464b      	mov	r3, r9
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 fcb5 	bl	800086c <__aeabi_ddiv>
 800af02:	f7f5 fe39 	bl	8000b78 <__aeabi_d2iz>
 800af06:	9001      	str	r0, [sp, #4]
 800af08:	f7f5 fb1c 	bl	8000544 <__aeabi_i2d>
 800af0c:	4642      	mov	r2, r8
 800af0e:	464b      	mov	r3, r9
 800af10:	f7f5 fb82 	bl	8000618 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4630      	mov	r0, r6
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 f9c4 	bl	80002a8 <__aeabi_dsub>
 800af20:	9e01      	ldr	r6, [sp, #4]
 800af22:	9f04      	ldr	r7, [sp, #16]
 800af24:	3630      	adds	r6, #48	; 0x30
 800af26:	f805 6b01 	strb.w	r6, [r5], #1
 800af2a:	9e00      	ldr	r6, [sp, #0]
 800af2c:	1bae      	subs	r6, r5, r6
 800af2e:	42b7      	cmp	r7, r6
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	d134      	bne.n	800afa0 <_dtoa_r+0x708>
 800af36:	f7f5 f9b9 	bl	80002ac <__adddf3>
 800af3a:	4642      	mov	r2, r8
 800af3c:	464b      	mov	r3, r9
 800af3e:	4606      	mov	r6, r0
 800af40:	460f      	mov	r7, r1
 800af42:	f7f5 fdf9 	bl	8000b38 <__aeabi_dcmpgt>
 800af46:	b9c8      	cbnz	r0, 800af7c <_dtoa_r+0x6e4>
 800af48:	4642      	mov	r2, r8
 800af4a:	464b      	mov	r3, r9
 800af4c:	4630      	mov	r0, r6
 800af4e:	4639      	mov	r1, r7
 800af50:	f7f5 fdca 	bl	8000ae8 <__aeabi_dcmpeq>
 800af54:	b110      	cbz	r0, 800af5c <_dtoa_r+0x6c4>
 800af56:	9b01      	ldr	r3, [sp, #4]
 800af58:	07db      	lsls	r3, r3, #31
 800af5a:	d40f      	bmi.n	800af7c <_dtoa_r+0x6e4>
 800af5c:	4651      	mov	r1, sl
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 fb18 	bl	800b594 <_Bfree>
 800af64:	2300      	movs	r3, #0
 800af66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af68:	702b      	strb	r3, [r5, #0]
 800af6a:	f10b 0301 	add.w	r3, fp, #1
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af72:	2b00      	cmp	r3, #0
 800af74:	f43f ace2 	beq.w	800a93c <_dtoa_r+0xa4>
 800af78:	601d      	str	r5, [r3, #0]
 800af7a:	e4df      	b.n	800a93c <_dtoa_r+0xa4>
 800af7c:	465f      	mov	r7, fp
 800af7e:	462b      	mov	r3, r5
 800af80:	461d      	mov	r5, r3
 800af82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af86:	2a39      	cmp	r2, #57	; 0x39
 800af88:	d106      	bne.n	800af98 <_dtoa_r+0x700>
 800af8a:	9a00      	ldr	r2, [sp, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d1f7      	bne.n	800af80 <_dtoa_r+0x6e8>
 800af90:	9900      	ldr	r1, [sp, #0]
 800af92:	2230      	movs	r2, #48	; 0x30
 800af94:	3701      	adds	r7, #1
 800af96:	700a      	strb	r2, [r1, #0]
 800af98:	781a      	ldrb	r2, [r3, #0]
 800af9a:	3201      	adds	r2, #1
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	e790      	b.n	800aec2 <_dtoa_r+0x62a>
 800afa0:	4ba3      	ldr	r3, [pc, #652]	; (800b230 <_dtoa_r+0x998>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	f7f5 fb38 	bl	8000618 <__aeabi_dmul>
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	4606      	mov	r6, r0
 800afae:	460f      	mov	r7, r1
 800afb0:	f7f5 fd9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d09e      	beq.n	800aef6 <_dtoa_r+0x65e>
 800afb8:	e7d0      	b.n	800af5c <_dtoa_r+0x6c4>
 800afba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afbc:	2a00      	cmp	r2, #0
 800afbe:	f000 80ca 	beq.w	800b156 <_dtoa_r+0x8be>
 800afc2:	9a07      	ldr	r2, [sp, #28]
 800afc4:	2a01      	cmp	r2, #1
 800afc6:	f300 80ad 	bgt.w	800b124 <_dtoa_r+0x88c>
 800afca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afcc:	2a00      	cmp	r2, #0
 800afce:	f000 80a5 	beq.w	800b11c <_dtoa_r+0x884>
 800afd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afd6:	9e08      	ldr	r6, [sp, #32]
 800afd8:	9d05      	ldr	r5, [sp, #20]
 800afda:	9a05      	ldr	r2, [sp, #20]
 800afdc:	441a      	add	r2, r3
 800afde:	9205      	str	r2, [sp, #20]
 800afe0:	9a06      	ldr	r2, [sp, #24]
 800afe2:	2101      	movs	r1, #1
 800afe4:	441a      	add	r2, r3
 800afe6:	4620      	mov	r0, r4
 800afe8:	9206      	str	r2, [sp, #24]
 800afea:	f000 fbd3 	bl	800b794 <__i2b>
 800afee:	4607      	mov	r7, r0
 800aff0:	b165      	cbz	r5, 800b00c <_dtoa_r+0x774>
 800aff2:	9b06      	ldr	r3, [sp, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd09      	ble.n	800b00c <_dtoa_r+0x774>
 800aff8:	42ab      	cmp	r3, r5
 800affa:	9a05      	ldr	r2, [sp, #20]
 800affc:	bfa8      	it	ge
 800affe:	462b      	movge	r3, r5
 800b000:	1ad2      	subs	r2, r2, r3
 800b002:	9205      	str	r2, [sp, #20]
 800b004:	9a06      	ldr	r2, [sp, #24]
 800b006:	1aed      	subs	r5, r5, r3
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	9306      	str	r3, [sp, #24]
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	b1f3      	cbz	r3, 800b04e <_dtoa_r+0x7b6>
 800b010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 80a3 	beq.w	800b15e <_dtoa_r+0x8c6>
 800b018:	2e00      	cmp	r6, #0
 800b01a:	dd10      	ble.n	800b03e <_dtoa_r+0x7a6>
 800b01c:	4639      	mov	r1, r7
 800b01e:	4632      	mov	r2, r6
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fc77 	bl	800b914 <__pow5mult>
 800b026:	4652      	mov	r2, sl
 800b028:	4601      	mov	r1, r0
 800b02a:	4607      	mov	r7, r0
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fbc7 	bl	800b7c0 <__multiply>
 800b032:	4651      	mov	r1, sl
 800b034:	4680      	mov	r8, r0
 800b036:	4620      	mov	r0, r4
 800b038:	f000 faac 	bl	800b594 <_Bfree>
 800b03c:	46c2      	mov	sl, r8
 800b03e:	9b08      	ldr	r3, [sp, #32]
 800b040:	1b9a      	subs	r2, r3, r6
 800b042:	d004      	beq.n	800b04e <_dtoa_r+0x7b6>
 800b044:	4651      	mov	r1, sl
 800b046:	4620      	mov	r0, r4
 800b048:	f000 fc64 	bl	800b914 <__pow5mult>
 800b04c:	4682      	mov	sl, r0
 800b04e:	2101      	movs	r1, #1
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fb9f 	bl	800b794 <__i2b>
 800b056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	4606      	mov	r6, r0
 800b05c:	f340 8081 	ble.w	800b162 <_dtoa_r+0x8ca>
 800b060:	461a      	mov	r2, r3
 800b062:	4601      	mov	r1, r0
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fc55 	bl	800b914 <__pow5mult>
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	4606      	mov	r6, r0
 800b070:	dd7a      	ble.n	800b168 <_dtoa_r+0x8d0>
 800b072:	f04f 0800 	mov.w	r8, #0
 800b076:	6933      	ldr	r3, [r6, #16]
 800b078:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b07c:	6918      	ldr	r0, [r3, #16]
 800b07e:	f000 fb3b 	bl	800b6f8 <__hi0bits>
 800b082:	f1c0 0020 	rsb	r0, r0, #32
 800b086:	9b06      	ldr	r3, [sp, #24]
 800b088:	4418      	add	r0, r3
 800b08a:	f010 001f 	ands.w	r0, r0, #31
 800b08e:	f000 8094 	beq.w	800b1ba <_dtoa_r+0x922>
 800b092:	f1c0 0320 	rsb	r3, r0, #32
 800b096:	2b04      	cmp	r3, #4
 800b098:	f340 8085 	ble.w	800b1a6 <_dtoa_r+0x90e>
 800b09c:	9b05      	ldr	r3, [sp, #20]
 800b09e:	f1c0 001c 	rsb	r0, r0, #28
 800b0a2:	4403      	add	r3, r0
 800b0a4:	9305      	str	r3, [sp, #20]
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	4403      	add	r3, r0
 800b0aa:	4405      	add	r5, r0
 800b0ac:	9306      	str	r3, [sp, #24]
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dd05      	ble.n	800b0c0 <_dtoa_r+0x828>
 800b0b4:	4651      	mov	r1, sl
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fc85 	bl	800b9c8 <__lshift>
 800b0be:	4682      	mov	sl, r0
 800b0c0:	9b06      	ldr	r3, [sp, #24]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dd05      	ble.n	800b0d2 <_dtoa_r+0x83a>
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fc7c 	bl	800b9c8 <__lshift>
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d072      	beq.n	800b1be <_dtoa_r+0x926>
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4650      	mov	r0, sl
 800b0dc:	f000 fce0 	bl	800baa0 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	da6c      	bge.n	800b1be <_dtoa_r+0x926>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4651      	mov	r1, sl
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fa74 	bl	800b5d8 <__multadd>
 800b0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0f6:	4682      	mov	sl, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 81b0 	beq.w	800b45e <_dtoa_r+0xbc6>
 800b0fe:	2300      	movs	r3, #0
 800b100:	4639      	mov	r1, r7
 800b102:	220a      	movs	r2, #10
 800b104:	4620      	mov	r0, r4
 800b106:	f000 fa67 	bl	800b5d8 <__multadd>
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	4607      	mov	r7, r0
 800b110:	f300 8096 	bgt.w	800b240 <_dtoa_r+0x9a8>
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	2b02      	cmp	r3, #2
 800b118:	dc59      	bgt.n	800b1ce <_dtoa_r+0x936>
 800b11a:	e091      	b.n	800b240 <_dtoa_r+0x9a8>
 800b11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b122:	e758      	b.n	800afd6 <_dtoa_r+0x73e>
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	1e5e      	subs	r6, r3, #1
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	42b3      	cmp	r3, r6
 800b12c:	bfbf      	itttt	lt
 800b12e:	9b08      	ldrlt	r3, [sp, #32]
 800b130:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b132:	9608      	strlt	r6, [sp, #32]
 800b134:	1af3      	sublt	r3, r6, r3
 800b136:	bfb4      	ite	lt
 800b138:	18d2      	addlt	r2, r2, r3
 800b13a:	1b9e      	subge	r6, r3, r6
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	bfbc      	itt	lt
 800b140:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b142:	2600      	movlt	r6, #0
 800b144:	2b00      	cmp	r3, #0
 800b146:	bfb7      	itett	lt
 800b148:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b14c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b150:	1a9d      	sublt	r5, r3, r2
 800b152:	2300      	movlt	r3, #0
 800b154:	e741      	b.n	800afda <_dtoa_r+0x742>
 800b156:	9e08      	ldr	r6, [sp, #32]
 800b158:	9d05      	ldr	r5, [sp, #20]
 800b15a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b15c:	e748      	b.n	800aff0 <_dtoa_r+0x758>
 800b15e:	9a08      	ldr	r2, [sp, #32]
 800b160:	e770      	b.n	800b044 <_dtoa_r+0x7ac>
 800b162:	9b07      	ldr	r3, [sp, #28]
 800b164:	2b01      	cmp	r3, #1
 800b166:	dc19      	bgt.n	800b19c <_dtoa_r+0x904>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	b9bb      	cbnz	r3, 800b19c <_dtoa_r+0x904>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b172:	b99b      	cbnz	r3, 800b19c <_dtoa_r+0x904>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b17a:	0d1b      	lsrs	r3, r3, #20
 800b17c:	051b      	lsls	r3, r3, #20
 800b17e:	b183      	cbz	r3, 800b1a2 <_dtoa_r+0x90a>
 800b180:	9b05      	ldr	r3, [sp, #20]
 800b182:	3301      	adds	r3, #1
 800b184:	9305      	str	r3, [sp, #20]
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	3301      	adds	r3, #1
 800b18a:	9306      	str	r3, [sp, #24]
 800b18c:	f04f 0801 	mov.w	r8, #1
 800b190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b192:	2b00      	cmp	r3, #0
 800b194:	f47f af6f 	bne.w	800b076 <_dtoa_r+0x7de>
 800b198:	2001      	movs	r0, #1
 800b19a:	e774      	b.n	800b086 <_dtoa_r+0x7ee>
 800b19c:	f04f 0800 	mov.w	r8, #0
 800b1a0:	e7f6      	b.n	800b190 <_dtoa_r+0x8f8>
 800b1a2:	4698      	mov	r8, r3
 800b1a4:	e7f4      	b.n	800b190 <_dtoa_r+0x8f8>
 800b1a6:	d082      	beq.n	800b0ae <_dtoa_r+0x816>
 800b1a8:	9a05      	ldr	r2, [sp, #20]
 800b1aa:	331c      	adds	r3, #28
 800b1ac:	441a      	add	r2, r3
 800b1ae:	9205      	str	r2, [sp, #20]
 800b1b0:	9a06      	ldr	r2, [sp, #24]
 800b1b2:	441a      	add	r2, r3
 800b1b4:	441d      	add	r5, r3
 800b1b6:	9206      	str	r2, [sp, #24]
 800b1b8:	e779      	b.n	800b0ae <_dtoa_r+0x816>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	e7f4      	b.n	800b1a8 <_dtoa_r+0x910>
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dc37      	bgt.n	800b234 <_dtoa_r+0x99c>
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	dd34      	ble.n	800b234 <_dtoa_r+0x99c>
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	b963      	cbnz	r3, 800b1ec <_dtoa_r+0x954>
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	2205      	movs	r2, #5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 f9fe 	bl	800b5d8 <__multadd>
 800b1dc:	4601      	mov	r1, r0
 800b1de:	4606      	mov	r6, r0
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	f000 fc5d 	bl	800baa0 <__mcmp>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f73f adbb 	bgt.w	800ad62 <_dtoa_r+0x4ca>
 800b1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ee:	9d00      	ldr	r5, [sp, #0]
 800b1f0:	ea6f 0b03 	mvn.w	fp, r3
 800b1f4:	f04f 0800 	mov.w	r8, #0
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 f9ca 	bl	800b594 <_Bfree>
 800b200:	2f00      	cmp	r7, #0
 800b202:	f43f aeab 	beq.w	800af5c <_dtoa_r+0x6c4>
 800b206:	f1b8 0f00 	cmp.w	r8, #0
 800b20a:	d005      	beq.n	800b218 <_dtoa_r+0x980>
 800b20c:	45b8      	cmp	r8, r7
 800b20e:	d003      	beq.n	800b218 <_dtoa_r+0x980>
 800b210:	4641      	mov	r1, r8
 800b212:	4620      	mov	r0, r4
 800b214:	f000 f9be 	bl	800b594 <_Bfree>
 800b218:	4639      	mov	r1, r7
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 f9ba 	bl	800b594 <_Bfree>
 800b220:	e69c      	b.n	800af5c <_dtoa_r+0x6c4>
 800b222:	2600      	movs	r6, #0
 800b224:	4637      	mov	r7, r6
 800b226:	e7e1      	b.n	800b1ec <_dtoa_r+0x954>
 800b228:	46bb      	mov	fp, r7
 800b22a:	4637      	mov	r7, r6
 800b22c:	e599      	b.n	800ad62 <_dtoa_r+0x4ca>
 800b22e:	bf00      	nop
 800b230:	40240000 	.word	0x40240000
 800b234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 80c8 	beq.w	800b3cc <_dtoa_r+0xb34>
 800b23c:	9b04      	ldr	r3, [sp, #16]
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	2d00      	cmp	r5, #0
 800b242:	dd05      	ble.n	800b250 <_dtoa_r+0x9b8>
 800b244:	4639      	mov	r1, r7
 800b246:	462a      	mov	r2, r5
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fbbd 	bl	800b9c8 <__lshift>
 800b24e:	4607      	mov	r7, r0
 800b250:	f1b8 0f00 	cmp.w	r8, #0
 800b254:	d05b      	beq.n	800b30e <_dtoa_r+0xa76>
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 f95b 	bl	800b514 <_Balloc>
 800b25e:	4605      	mov	r5, r0
 800b260:	b928      	cbnz	r0, 800b26e <_dtoa_r+0x9d6>
 800b262:	4b83      	ldr	r3, [pc, #524]	; (800b470 <_dtoa_r+0xbd8>)
 800b264:	4602      	mov	r2, r0
 800b266:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b26a:	f7ff bb2e 	b.w	800a8ca <_dtoa_r+0x32>
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	3202      	adds	r2, #2
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	f107 010c 	add.w	r1, r7, #12
 800b278:	300c      	adds	r0, #12
 800b27a:	f001 fec1 	bl	800d000 <memcpy>
 800b27e:	2201      	movs	r2, #1
 800b280:	4629      	mov	r1, r5
 800b282:	4620      	mov	r0, r4
 800b284:	f000 fba0 	bl	800b9c8 <__lshift>
 800b288:	9b00      	ldr	r3, [sp, #0]
 800b28a:	3301      	adds	r3, #1
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b292:	4413      	add	r3, r2
 800b294:	9308      	str	r3, [sp, #32]
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	46b8      	mov	r8, r7
 800b29e:	9306      	str	r3, [sp, #24]
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	9b04      	ldr	r3, [sp, #16]
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	4650      	mov	r0, sl
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	f7ff fa6a 	bl	800a784 <quorem>
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	9002      	str	r0, [sp, #8]
 800b2b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	f000 fbf1 	bl	800baa0 <__mcmp>
 800b2be:	463a      	mov	r2, r7
 800b2c0:	9005      	str	r0, [sp, #20]
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 fc07 	bl	800bad8 <__mdiff>
 800b2ca:	68c2      	ldr	r2, [r0, #12]
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	bb02      	cbnz	r2, 800b312 <_dtoa_r+0xa7a>
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	4650      	mov	r0, sl
 800b2d4:	f000 fbe4 	bl	800baa0 <__mcmp>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4620      	mov	r0, r4
 800b2de:	9209      	str	r2, [sp, #36]	; 0x24
 800b2e0:	f000 f958 	bl	800b594 <_Bfree>
 800b2e4:	9b07      	ldr	r3, [sp, #28]
 800b2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e8:	9d04      	ldr	r5, [sp, #16]
 800b2ea:	ea43 0102 	orr.w	r1, r3, r2
 800b2ee:	9b06      	ldr	r3, [sp, #24]
 800b2f0:	4319      	orrs	r1, r3
 800b2f2:	d110      	bne.n	800b316 <_dtoa_r+0xa7e>
 800b2f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2f8:	d029      	beq.n	800b34e <_dtoa_r+0xab6>
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dd02      	ble.n	800b306 <_dtoa_r+0xa6e>
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	f883 9000 	strb.w	r9, [r3]
 800b30c:	e774      	b.n	800b1f8 <_dtoa_r+0x960>
 800b30e:	4638      	mov	r0, r7
 800b310:	e7ba      	b.n	800b288 <_dtoa_r+0x9f0>
 800b312:	2201      	movs	r2, #1
 800b314:	e7e1      	b.n	800b2da <_dtoa_r+0xa42>
 800b316:	9b05      	ldr	r3, [sp, #20]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	db04      	blt.n	800b326 <_dtoa_r+0xa8e>
 800b31c:	9907      	ldr	r1, [sp, #28]
 800b31e:	430b      	orrs	r3, r1
 800b320:	9906      	ldr	r1, [sp, #24]
 800b322:	430b      	orrs	r3, r1
 800b324:	d120      	bne.n	800b368 <_dtoa_r+0xad0>
 800b326:	2a00      	cmp	r2, #0
 800b328:	dded      	ble.n	800b306 <_dtoa_r+0xa6e>
 800b32a:	4651      	mov	r1, sl
 800b32c:	2201      	movs	r2, #1
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 fb4a 	bl	800b9c8 <__lshift>
 800b334:	4631      	mov	r1, r6
 800b336:	4682      	mov	sl, r0
 800b338:	f000 fbb2 	bl	800baa0 <__mcmp>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dc03      	bgt.n	800b348 <_dtoa_r+0xab0>
 800b340:	d1e1      	bne.n	800b306 <_dtoa_r+0xa6e>
 800b342:	f019 0f01 	tst.w	r9, #1
 800b346:	d0de      	beq.n	800b306 <_dtoa_r+0xa6e>
 800b348:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b34c:	d1d8      	bne.n	800b300 <_dtoa_r+0xa68>
 800b34e:	9a01      	ldr	r2, [sp, #4]
 800b350:	2339      	movs	r3, #57	; 0x39
 800b352:	7013      	strb	r3, [r2, #0]
 800b354:	462b      	mov	r3, r5
 800b356:	461d      	mov	r5, r3
 800b358:	3b01      	subs	r3, #1
 800b35a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b35e:	2a39      	cmp	r2, #57	; 0x39
 800b360:	d06c      	beq.n	800b43c <_dtoa_r+0xba4>
 800b362:	3201      	adds	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	e747      	b.n	800b1f8 <_dtoa_r+0x960>
 800b368:	2a00      	cmp	r2, #0
 800b36a:	dd07      	ble.n	800b37c <_dtoa_r+0xae4>
 800b36c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b370:	d0ed      	beq.n	800b34e <_dtoa_r+0xab6>
 800b372:	9a01      	ldr	r2, [sp, #4]
 800b374:	f109 0301 	add.w	r3, r9, #1
 800b378:	7013      	strb	r3, [r2, #0]
 800b37a:	e73d      	b.n	800b1f8 <_dtoa_r+0x960>
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	9a08      	ldr	r2, [sp, #32]
 800b380:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b384:	4293      	cmp	r3, r2
 800b386:	d043      	beq.n	800b410 <_dtoa_r+0xb78>
 800b388:	4651      	mov	r1, sl
 800b38a:	2300      	movs	r3, #0
 800b38c:	220a      	movs	r2, #10
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 f922 	bl	800b5d8 <__multadd>
 800b394:	45b8      	cmp	r8, r7
 800b396:	4682      	mov	sl, r0
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	f04f 020a 	mov.w	r2, #10
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	d107      	bne.n	800b3b6 <_dtoa_r+0xb1e>
 800b3a6:	f000 f917 	bl	800b5d8 <__multadd>
 800b3aa:	4680      	mov	r8, r0
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	9b04      	ldr	r3, [sp, #16]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	e775      	b.n	800b2a2 <_dtoa_r+0xa0a>
 800b3b6:	f000 f90f 	bl	800b5d8 <__multadd>
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	4680      	mov	r8, r0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f908 	bl	800b5d8 <__multadd>
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	e7f0      	b.n	800b3ae <_dtoa_r+0xb16>
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	9d00      	ldr	r5, [sp, #0]
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	f7ff f9d5 	bl	800a784 <quorem>
 800b3da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3de:	9b00      	ldr	r3, [sp, #0]
 800b3e0:	f805 9b01 	strb.w	r9, [r5], #1
 800b3e4:	1aea      	subs	r2, r5, r3
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	dd07      	ble.n	800b3fc <_dtoa_r+0xb64>
 800b3ec:	4651      	mov	r1, sl
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	220a      	movs	r2, #10
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 f8f0 	bl	800b5d8 <__multadd>
 800b3f8:	4682      	mov	sl, r0
 800b3fa:	e7ea      	b.n	800b3d2 <_dtoa_r+0xb3a>
 800b3fc:	9b01      	ldr	r3, [sp, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	bfc8      	it	gt
 800b402:	461d      	movgt	r5, r3
 800b404:	9b00      	ldr	r3, [sp, #0]
 800b406:	bfd8      	it	le
 800b408:	2501      	movle	r5, #1
 800b40a:	441d      	add	r5, r3
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	4651      	mov	r1, sl
 800b412:	2201      	movs	r2, #1
 800b414:	4620      	mov	r0, r4
 800b416:	f000 fad7 	bl	800b9c8 <__lshift>
 800b41a:	4631      	mov	r1, r6
 800b41c:	4682      	mov	sl, r0
 800b41e:	f000 fb3f 	bl	800baa0 <__mcmp>
 800b422:	2800      	cmp	r0, #0
 800b424:	dc96      	bgt.n	800b354 <_dtoa_r+0xabc>
 800b426:	d102      	bne.n	800b42e <_dtoa_r+0xb96>
 800b428:	f019 0f01 	tst.w	r9, #1
 800b42c:	d192      	bne.n	800b354 <_dtoa_r+0xabc>
 800b42e:	462b      	mov	r3, r5
 800b430:	461d      	mov	r5, r3
 800b432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b436:	2a30      	cmp	r2, #48	; 0x30
 800b438:	d0fa      	beq.n	800b430 <_dtoa_r+0xb98>
 800b43a:	e6dd      	b.n	800b1f8 <_dtoa_r+0x960>
 800b43c:	9a00      	ldr	r2, [sp, #0]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d189      	bne.n	800b356 <_dtoa_r+0xabe>
 800b442:	f10b 0b01 	add.w	fp, fp, #1
 800b446:	2331      	movs	r3, #49	; 0x31
 800b448:	e796      	b.n	800b378 <_dtoa_r+0xae0>
 800b44a:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <_dtoa_r+0xbdc>)
 800b44c:	f7ff ba99 	b.w	800a982 <_dtoa_r+0xea>
 800b450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b452:	2b00      	cmp	r3, #0
 800b454:	f47f aa6d 	bne.w	800a932 <_dtoa_r+0x9a>
 800b458:	4b07      	ldr	r3, [pc, #28]	; (800b478 <_dtoa_r+0xbe0>)
 800b45a:	f7ff ba92 	b.w	800a982 <_dtoa_r+0xea>
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	dcb5      	bgt.n	800b3d0 <_dtoa_r+0xb38>
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	2b02      	cmp	r3, #2
 800b468:	f73f aeb1 	bgt.w	800b1ce <_dtoa_r+0x936>
 800b46c:	e7b0      	b.n	800b3d0 <_dtoa_r+0xb38>
 800b46e:	bf00      	nop
 800b470:	0800e053 	.word	0x0800e053
 800b474:	0800dfae 	.word	0x0800dfae
 800b478:	0800dfd7 	.word	0x0800dfd7

0800b47c <_free_r>:
 800b47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b47e:	2900      	cmp	r1, #0
 800b480:	d044      	beq.n	800b50c <_free_r+0x90>
 800b482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b486:	9001      	str	r0, [sp, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f1a1 0404 	sub.w	r4, r1, #4
 800b48e:	bfb8      	it	lt
 800b490:	18e4      	addlt	r4, r4, r3
 800b492:	f7fe f939 	bl	8009708 <__malloc_lock>
 800b496:	4a1e      	ldr	r2, [pc, #120]	; (800b510 <_free_r+0x94>)
 800b498:	9801      	ldr	r0, [sp, #4]
 800b49a:	6813      	ldr	r3, [r2, #0]
 800b49c:	b933      	cbnz	r3, 800b4ac <_free_r+0x30>
 800b49e:	6063      	str	r3, [r4, #4]
 800b4a0:	6014      	str	r4, [r2, #0]
 800b4a2:	b003      	add	sp, #12
 800b4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4a8:	f7fe b934 	b.w	8009714 <__malloc_unlock>
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d908      	bls.n	800b4c2 <_free_r+0x46>
 800b4b0:	6825      	ldr	r5, [r4, #0]
 800b4b2:	1961      	adds	r1, r4, r5
 800b4b4:	428b      	cmp	r3, r1
 800b4b6:	bf01      	itttt	eq
 800b4b8:	6819      	ldreq	r1, [r3, #0]
 800b4ba:	685b      	ldreq	r3, [r3, #4]
 800b4bc:	1949      	addeq	r1, r1, r5
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	e7ed      	b.n	800b49e <_free_r+0x22>
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	b10b      	cbz	r3, 800b4cc <_free_r+0x50>
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	d9fa      	bls.n	800b4c2 <_free_r+0x46>
 800b4cc:	6811      	ldr	r1, [r2, #0]
 800b4ce:	1855      	adds	r5, r2, r1
 800b4d0:	42a5      	cmp	r5, r4
 800b4d2:	d10b      	bne.n	800b4ec <_free_r+0x70>
 800b4d4:	6824      	ldr	r4, [r4, #0]
 800b4d6:	4421      	add	r1, r4
 800b4d8:	1854      	adds	r4, r2, r1
 800b4da:	42a3      	cmp	r3, r4
 800b4dc:	6011      	str	r1, [r2, #0]
 800b4de:	d1e0      	bne.n	800b4a2 <_free_r+0x26>
 800b4e0:	681c      	ldr	r4, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	6053      	str	r3, [r2, #4]
 800b4e6:	440c      	add	r4, r1
 800b4e8:	6014      	str	r4, [r2, #0]
 800b4ea:	e7da      	b.n	800b4a2 <_free_r+0x26>
 800b4ec:	d902      	bls.n	800b4f4 <_free_r+0x78>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	6003      	str	r3, [r0, #0]
 800b4f2:	e7d6      	b.n	800b4a2 <_free_r+0x26>
 800b4f4:	6825      	ldr	r5, [r4, #0]
 800b4f6:	1961      	adds	r1, r4, r5
 800b4f8:	428b      	cmp	r3, r1
 800b4fa:	bf04      	itt	eq
 800b4fc:	6819      	ldreq	r1, [r3, #0]
 800b4fe:	685b      	ldreq	r3, [r3, #4]
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	bf04      	itt	eq
 800b504:	1949      	addeq	r1, r1, r5
 800b506:	6021      	streq	r1, [r4, #0]
 800b508:	6054      	str	r4, [r2, #4]
 800b50a:	e7ca      	b.n	800b4a2 <_free_r+0x26>
 800b50c:	b003      	add	sp, #12
 800b50e:	bd30      	pop	{r4, r5, pc}
 800b510:	200007b0 	.word	0x200007b0

0800b514 <_Balloc>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	69c6      	ldr	r6, [r0, #28]
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	b976      	cbnz	r6, 800b53c <_Balloc+0x28>
 800b51e:	2010      	movs	r0, #16
 800b520:	f7fe f842 	bl	80095a8 <malloc>
 800b524:	4602      	mov	r2, r0
 800b526:	61e0      	str	r0, [r4, #28]
 800b528:	b920      	cbnz	r0, 800b534 <_Balloc+0x20>
 800b52a:	4b18      	ldr	r3, [pc, #96]	; (800b58c <_Balloc+0x78>)
 800b52c:	4818      	ldr	r0, [pc, #96]	; (800b590 <_Balloc+0x7c>)
 800b52e:	216b      	movs	r1, #107	; 0x6b
 800b530:	f001 fd7e 	bl	800d030 <__assert_func>
 800b534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b538:	6006      	str	r6, [r0, #0]
 800b53a:	60c6      	str	r6, [r0, #12]
 800b53c:	69e6      	ldr	r6, [r4, #28]
 800b53e:	68f3      	ldr	r3, [r6, #12]
 800b540:	b183      	cbz	r3, 800b564 <_Balloc+0x50>
 800b542:	69e3      	ldr	r3, [r4, #28]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b54a:	b9b8      	cbnz	r0, 800b57c <_Balloc+0x68>
 800b54c:	2101      	movs	r1, #1
 800b54e:	fa01 f605 	lsl.w	r6, r1, r5
 800b552:	1d72      	adds	r2, r6, #5
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	4620      	mov	r0, r4
 800b558:	f001 fd88 	bl	800d06c <_calloc_r>
 800b55c:	b160      	cbz	r0, 800b578 <_Balloc+0x64>
 800b55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b562:	e00e      	b.n	800b582 <_Balloc+0x6e>
 800b564:	2221      	movs	r2, #33	; 0x21
 800b566:	2104      	movs	r1, #4
 800b568:	4620      	mov	r0, r4
 800b56a:	f001 fd7f 	bl	800d06c <_calloc_r>
 800b56e:	69e3      	ldr	r3, [r4, #28]
 800b570:	60f0      	str	r0, [r6, #12]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e4      	bne.n	800b542 <_Balloc+0x2e>
 800b578:	2000      	movs	r0, #0
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	6802      	ldr	r2, [r0, #0]
 800b57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b582:	2300      	movs	r3, #0
 800b584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b588:	e7f7      	b.n	800b57a <_Balloc+0x66>
 800b58a:	bf00      	nop
 800b58c:	0800dfe4 	.word	0x0800dfe4
 800b590:	0800e064 	.word	0x0800e064

0800b594 <_Bfree>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	69c6      	ldr	r6, [r0, #28]
 800b598:	4605      	mov	r5, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b976      	cbnz	r6, 800b5bc <_Bfree+0x28>
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f7fe f802 	bl	80095a8 <malloc>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	61e8      	str	r0, [r5, #28]
 800b5a8:	b920      	cbnz	r0, 800b5b4 <_Bfree+0x20>
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <_Bfree+0x3c>)
 800b5ac:	4809      	ldr	r0, [pc, #36]	; (800b5d4 <_Bfree+0x40>)
 800b5ae:	218f      	movs	r1, #143	; 0x8f
 800b5b0:	f001 fd3e 	bl	800d030 <__assert_func>
 800b5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b8:	6006      	str	r6, [r0, #0]
 800b5ba:	60c6      	str	r6, [r0, #12]
 800b5bc:	b13c      	cbz	r4, 800b5ce <_Bfree+0x3a>
 800b5be:	69eb      	ldr	r3, [r5, #28]
 800b5c0:	6862      	ldr	r2, [r4, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5c8:	6021      	str	r1, [r4, #0]
 800b5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	0800dfe4 	.word	0x0800dfe4
 800b5d4:	0800e064 	.word	0x0800e064

0800b5d8 <__multadd>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	690d      	ldr	r5, [r1, #16]
 800b5de:	4607      	mov	r7, r0
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	f101 0c14 	add.w	ip, r1, #20
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b5ee:	b299      	uxth	r1, r3
 800b5f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b5f4:	0c1e      	lsrs	r6, r3, #16
 800b5f6:	0c0b      	lsrs	r3, r1, #16
 800b5f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b5fc:	b289      	uxth	r1, r1
 800b5fe:	3001      	adds	r0, #1
 800b600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b604:	4285      	cmp	r5, r0
 800b606:	f84c 1b04 	str.w	r1, [ip], #4
 800b60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b60e:	dcec      	bgt.n	800b5ea <__multadd+0x12>
 800b610:	b30e      	cbz	r6, 800b656 <__multadd+0x7e>
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	42ab      	cmp	r3, r5
 800b616:	dc19      	bgt.n	800b64c <__multadd+0x74>
 800b618:	6861      	ldr	r1, [r4, #4]
 800b61a:	4638      	mov	r0, r7
 800b61c:	3101      	adds	r1, #1
 800b61e:	f7ff ff79 	bl	800b514 <_Balloc>
 800b622:	4680      	mov	r8, r0
 800b624:	b928      	cbnz	r0, 800b632 <__multadd+0x5a>
 800b626:	4602      	mov	r2, r0
 800b628:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <__multadd+0x84>)
 800b62a:	480d      	ldr	r0, [pc, #52]	; (800b660 <__multadd+0x88>)
 800b62c:	21ba      	movs	r1, #186	; 0xba
 800b62e:	f001 fcff 	bl	800d030 <__assert_func>
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	3202      	adds	r2, #2
 800b636:	f104 010c 	add.w	r1, r4, #12
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	300c      	adds	r0, #12
 800b63e:	f001 fcdf 	bl	800d000 <memcpy>
 800b642:	4621      	mov	r1, r4
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff ffa5 	bl	800b594 <_Bfree>
 800b64a:	4644      	mov	r4, r8
 800b64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b650:	3501      	adds	r5, #1
 800b652:	615e      	str	r6, [r3, #20]
 800b654:	6125      	str	r5, [r4, #16]
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	0800e053 	.word	0x0800e053
 800b660:	0800e064 	.word	0x0800e064

0800b664 <__s2b>:
 800b664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b668:	460c      	mov	r4, r1
 800b66a:	4615      	mov	r5, r2
 800b66c:	461f      	mov	r7, r3
 800b66e:	2209      	movs	r2, #9
 800b670:	3308      	adds	r3, #8
 800b672:	4606      	mov	r6, r0
 800b674:	fb93 f3f2 	sdiv	r3, r3, r2
 800b678:	2100      	movs	r1, #0
 800b67a:	2201      	movs	r2, #1
 800b67c:	429a      	cmp	r2, r3
 800b67e:	db09      	blt.n	800b694 <__s2b+0x30>
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ff47 	bl	800b514 <_Balloc>
 800b686:	b940      	cbnz	r0, 800b69a <__s2b+0x36>
 800b688:	4602      	mov	r2, r0
 800b68a:	4b19      	ldr	r3, [pc, #100]	; (800b6f0 <__s2b+0x8c>)
 800b68c:	4819      	ldr	r0, [pc, #100]	; (800b6f4 <__s2b+0x90>)
 800b68e:	21d3      	movs	r1, #211	; 0xd3
 800b690:	f001 fcce 	bl	800d030 <__assert_func>
 800b694:	0052      	lsls	r2, r2, #1
 800b696:	3101      	adds	r1, #1
 800b698:	e7f0      	b.n	800b67c <__s2b+0x18>
 800b69a:	9b08      	ldr	r3, [sp, #32]
 800b69c:	6143      	str	r3, [r0, #20]
 800b69e:	2d09      	cmp	r5, #9
 800b6a0:	f04f 0301 	mov.w	r3, #1
 800b6a4:	6103      	str	r3, [r0, #16]
 800b6a6:	dd16      	ble.n	800b6d6 <__s2b+0x72>
 800b6a8:	f104 0909 	add.w	r9, r4, #9
 800b6ac:	46c8      	mov	r8, r9
 800b6ae:	442c      	add	r4, r5
 800b6b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6b4:	4601      	mov	r1, r0
 800b6b6:	3b30      	subs	r3, #48	; 0x30
 800b6b8:	220a      	movs	r2, #10
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff ff8c 	bl	800b5d8 <__multadd>
 800b6c0:	45a0      	cmp	r8, r4
 800b6c2:	d1f5      	bne.n	800b6b0 <__s2b+0x4c>
 800b6c4:	f1a5 0408 	sub.w	r4, r5, #8
 800b6c8:	444c      	add	r4, r9
 800b6ca:	1b2d      	subs	r5, r5, r4
 800b6cc:	1963      	adds	r3, r4, r5
 800b6ce:	42bb      	cmp	r3, r7
 800b6d0:	db04      	blt.n	800b6dc <__s2b+0x78>
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	340a      	adds	r4, #10
 800b6d8:	2509      	movs	r5, #9
 800b6da:	e7f6      	b.n	800b6ca <__s2b+0x66>
 800b6dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6e0:	4601      	mov	r1, r0
 800b6e2:	3b30      	subs	r3, #48	; 0x30
 800b6e4:	220a      	movs	r2, #10
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7ff ff76 	bl	800b5d8 <__multadd>
 800b6ec:	e7ee      	b.n	800b6cc <__s2b+0x68>
 800b6ee:	bf00      	nop
 800b6f0:	0800e053 	.word	0x0800e053
 800b6f4:	0800e064 	.word	0x0800e064

0800b6f8 <__hi0bits>:
 800b6f8:	0c03      	lsrs	r3, r0, #16
 800b6fa:	041b      	lsls	r3, r3, #16
 800b6fc:	b9d3      	cbnz	r3, 800b734 <__hi0bits+0x3c>
 800b6fe:	0400      	lsls	r0, r0, #16
 800b700:	2310      	movs	r3, #16
 800b702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b706:	bf04      	itt	eq
 800b708:	0200      	lsleq	r0, r0, #8
 800b70a:	3308      	addeq	r3, #8
 800b70c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b710:	bf04      	itt	eq
 800b712:	0100      	lsleq	r0, r0, #4
 800b714:	3304      	addeq	r3, #4
 800b716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b71a:	bf04      	itt	eq
 800b71c:	0080      	lsleq	r0, r0, #2
 800b71e:	3302      	addeq	r3, #2
 800b720:	2800      	cmp	r0, #0
 800b722:	db05      	blt.n	800b730 <__hi0bits+0x38>
 800b724:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b728:	f103 0301 	add.w	r3, r3, #1
 800b72c:	bf08      	it	eq
 800b72e:	2320      	moveq	r3, #32
 800b730:	4618      	mov	r0, r3
 800b732:	4770      	bx	lr
 800b734:	2300      	movs	r3, #0
 800b736:	e7e4      	b.n	800b702 <__hi0bits+0xa>

0800b738 <__lo0bits>:
 800b738:	6803      	ldr	r3, [r0, #0]
 800b73a:	f013 0207 	ands.w	r2, r3, #7
 800b73e:	d00c      	beq.n	800b75a <__lo0bits+0x22>
 800b740:	07d9      	lsls	r1, r3, #31
 800b742:	d422      	bmi.n	800b78a <__lo0bits+0x52>
 800b744:	079a      	lsls	r2, r3, #30
 800b746:	bf49      	itett	mi
 800b748:	085b      	lsrmi	r3, r3, #1
 800b74a:	089b      	lsrpl	r3, r3, #2
 800b74c:	6003      	strmi	r3, [r0, #0]
 800b74e:	2201      	movmi	r2, #1
 800b750:	bf5c      	itt	pl
 800b752:	6003      	strpl	r3, [r0, #0]
 800b754:	2202      	movpl	r2, #2
 800b756:	4610      	mov	r0, r2
 800b758:	4770      	bx	lr
 800b75a:	b299      	uxth	r1, r3
 800b75c:	b909      	cbnz	r1, 800b762 <__lo0bits+0x2a>
 800b75e:	0c1b      	lsrs	r3, r3, #16
 800b760:	2210      	movs	r2, #16
 800b762:	b2d9      	uxtb	r1, r3
 800b764:	b909      	cbnz	r1, 800b76a <__lo0bits+0x32>
 800b766:	3208      	adds	r2, #8
 800b768:	0a1b      	lsrs	r3, r3, #8
 800b76a:	0719      	lsls	r1, r3, #28
 800b76c:	bf04      	itt	eq
 800b76e:	091b      	lsreq	r3, r3, #4
 800b770:	3204      	addeq	r2, #4
 800b772:	0799      	lsls	r1, r3, #30
 800b774:	bf04      	itt	eq
 800b776:	089b      	lsreq	r3, r3, #2
 800b778:	3202      	addeq	r2, #2
 800b77a:	07d9      	lsls	r1, r3, #31
 800b77c:	d403      	bmi.n	800b786 <__lo0bits+0x4e>
 800b77e:	085b      	lsrs	r3, r3, #1
 800b780:	f102 0201 	add.w	r2, r2, #1
 800b784:	d003      	beq.n	800b78e <__lo0bits+0x56>
 800b786:	6003      	str	r3, [r0, #0]
 800b788:	e7e5      	b.n	800b756 <__lo0bits+0x1e>
 800b78a:	2200      	movs	r2, #0
 800b78c:	e7e3      	b.n	800b756 <__lo0bits+0x1e>
 800b78e:	2220      	movs	r2, #32
 800b790:	e7e1      	b.n	800b756 <__lo0bits+0x1e>
	...

0800b794 <__i2b>:
 800b794:	b510      	push	{r4, lr}
 800b796:	460c      	mov	r4, r1
 800b798:	2101      	movs	r1, #1
 800b79a:	f7ff febb 	bl	800b514 <_Balloc>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	b928      	cbnz	r0, 800b7ae <__i2b+0x1a>
 800b7a2:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <__i2b+0x24>)
 800b7a4:	4805      	ldr	r0, [pc, #20]	; (800b7bc <__i2b+0x28>)
 800b7a6:	f240 1145 	movw	r1, #325	; 0x145
 800b7aa:	f001 fc41 	bl	800d030 <__assert_func>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	6144      	str	r4, [r0, #20]
 800b7b2:	6103      	str	r3, [r0, #16]
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800e053 	.word	0x0800e053
 800b7bc:	0800e064 	.word	0x0800e064

0800b7c0 <__multiply>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	4691      	mov	r9, r2
 800b7c6:	690a      	ldr	r2, [r1, #16]
 800b7c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bfb8      	it	lt
 800b7d0:	460b      	movlt	r3, r1
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	bfbc      	itt	lt
 800b7d6:	464c      	movlt	r4, r9
 800b7d8:	4699      	movlt	r9, r3
 800b7da:	6927      	ldr	r7, [r4, #16]
 800b7dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	6861      	ldr	r1, [r4, #4]
 800b7e4:	eb07 060a 	add.w	r6, r7, sl
 800b7e8:	42b3      	cmp	r3, r6
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	bfb8      	it	lt
 800b7ee:	3101      	addlt	r1, #1
 800b7f0:	f7ff fe90 	bl	800b514 <_Balloc>
 800b7f4:	b930      	cbnz	r0, 800b804 <__multiply+0x44>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b44      	ldr	r3, [pc, #272]	; (800b90c <__multiply+0x14c>)
 800b7fa:	4845      	ldr	r0, [pc, #276]	; (800b910 <__multiply+0x150>)
 800b7fc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b800:	f001 fc16 	bl	800d030 <__assert_func>
 800b804:	f100 0514 	add.w	r5, r0, #20
 800b808:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b80c:	462b      	mov	r3, r5
 800b80e:	2200      	movs	r2, #0
 800b810:	4543      	cmp	r3, r8
 800b812:	d321      	bcc.n	800b858 <__multiply+0x98>
 800b814:	f104 0314 	add.w	r3, r4, #20
 800b818:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b81c:	f109 0314 	add.w	r3, r9, #20
 800b820:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b824:	9202      	str	r2, [sp, #8]
 800b826:	1b3a      	subs	r2, r7, r4
 800b828:	3a15      	subs	r2, #21
 800b82a:	f022 0203 	bic.w	r2, r2, #3
 800b82e:	3204      	adds	r2, #4
 800b830:	f104 0115 	add.w	r1, r4, #21
 800b834:	428f      	cmp	r7, r1
 800b836:	bf38      	it	cc
 800b838:	2204      	movcc	r2, #4
 800b83a:	9201      	str	r2, [sp, #4]
 800b83c:	9a02      	ldr	r2, [sp, #8]
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	429a      	cmp	r2, r3
 800b842:	d80c      	bhi.n	800b85e <__multiply+0x9e>
 800b844:	2e00      	cmp	r6, #0
 800b846:	dd03      	ble.n	800b850 <__multiply+0x90>
 800b848:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d05b      	beq.n	800b908 <__multiply+0x148>
 800b850:	6106      	str	r6, [r0, #16]
 800b852:	b005      	add	sp, #20
 800b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b858:	f843 2b04 	str.w	r2, [r3], #4
 800b85c:	e7d8      	b.n	800b810 <__multiply+0x50>
 800b85e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b862:	f1ba 0f00 	cmp.w	sl, #0
 800b866:	d024      	beq.n	800b8b2 <__multiply+0xf2>
 800b868:	f104 0e14 	add.w	lr, r4, #20
 800b86c:	46a9      	mov	r9, r5
 800b86e:	f04f 0c00 	mov.w	ip, #0
 800b872:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b876:	f8d9 1000 	ldr.w	r1, [r9]
 800b87a:	fa1f fb82 	uxth.w	fp, r2
 800b87e:	b289      	uxth	r1, r1
 800b880:	fb0a 110b 	mla	r1, sl, fp, r1
 800b884:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b888:	f8d9 2000 	ldr.w	r2, [r9]
 800b88c:	4461      	add	r1, ip
 800b88e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b892:	fb0a c20b 	mla	r2, sl, fp, ip
 800b896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b89a:	b289      	uxth	r1, r1
 800b89c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8a0:	4577      	cmp	r7, lr
 800b8a2:	f849 1b04 	str.w	r1, [r9], #4
 800b8a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8aa:	d8e2      	bhi.n	800b872 <__multiply+0xb2>
 800b8ac:	9a01      	ldr	r2, [sp, #4]
 800b8ae:	f845 c002 	str.w	ip, [r5, r2]
 800b8b2:	9a03      	ldr	r2, [sp, #12]
 800b8b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	f1b9 0f00 	cmp.w	r9, #0
 800b8be:	d021      	beq.n	800b904 <__multiply+0x144>
 800b8c0:	6829      	ldr	r1, [r5, #0]
 800b8c2:	f104 0c14 	add.w	ip, r4, #20
 800b8c6:	46ae      	mov	lr, r5
 800b8c8:	f04f 0a00 	mov.w	sl, #0
 800b8cc:	f8bc b000 	ldrh.w	fp, [ip]
 800b8d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8d4:	fb09 220b 	mla	r2, r9, fp, r2
 800b8d8:	4452      	add	r2, sl
 800b8da:	b289      	uxth	r1, r1
 800b8dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8e0:	f84e 1b04 	str.w	r1, [lr], #4
 800b8e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8ec:	f8be 1000 	ldrh.w	r1, [lr]
 800b8f0:	fb09 110a 	mla	r1, r9, sl, r1
 800b8f4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8f8:	4567      	cmp	r7, ip
 800b8fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8fe:	d8e5      	bhi.n	800b8cc <__multiply+0x10c>
 800b900:	9a01      	ldr	r2, [sp, #4]
 800b902:	50a9      	str	r1, [r5, r2]
 800b904:	3504      	adds	r5, #4
 800b906:	e799      	b.n	800b83c <__multiply+0x7c>
 800b908:	3e01      	subs	r6, #1
 800b90a:	e79b      	b.n	800b844 <__multiply+0x84>
 800b90c:	0800e053 	.word	0x0800e053
 800b910:	0800e064 	.word	0x0800e064

0800b914 <__pow5mult>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	4615      	mov	r5, r2
 800b91a:	f012 0203 	ands.w	r2, r2, #3
 800b91e:	4606      	mov	r6, r0
 800b920:	460f      	mov	r7, r1
 800b922:	d007      	beq.n	800b934 <__pow5mult+0x20>
 800b924:	4c25      	ldr	r4, [pc, #148]	; (800b9bc <__pow5mult+0xa8>)
 800b926:	3a01      	subs	r2, #1
 800b928:	2300      	movs	r3, #0
 800b92a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b92e:	f7ff fe53 	bl	800b5d8 <__multadd>
 800b932:	4607      	mov	r7, r0
 800b934:	10ad      	asrs	r5, r5, #2
 800b936:	d03d      	beq.n	800b9b4 <__pow5mult+0xa0>
 800b938:	69f4      	ldr	r4, [r6, #28]
 800b93a:	b97c      	cbnz	r4, 800b95c <__pow5mult+0x48>
 800b93c:	2010      	movs	r0, #16
 800b93e:	f7fd fe33 	bl	80095a8 <malloc>
 800b942:	4602      	mov	r2, r0
 800b944:	61f0      	str	r0, [r6, #28]
 800b946:	b928      	cbnz	r0, 800b954 <__pow5mult+0x40>
 800b948:	4b1d      	ldr	r3, [pc, #116]	; (800b9c0 <__pow5mult+0xac>)
 800b94a:	481e      	ldr	r0, [pc, #120]	; (800b9c4 <__pow5mult+0xb0>)
 800b94c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b950:	f001 fb6e 	bl	800d030 <__assert_func>
 800b954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b958:	6004      	str	r4, [r0, #0]
 800b95a:	60c4      	str	r4, [r0, #12]
 800b95c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b964:	b94c      	cbnz	r4, 800b97a <__pow5mult+0x66>
 800b966:	f240 2171 	movw	r1, #625	; 0x271
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ff12 	bl	800b794 <__i2b>
 800b970:	2300      	movs	r3, #0
 800b972:	f8c8 0008 	str.w	r0, [r8, #8]
 800b976:	4604      	mov	r4, r0
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	f04f 0900 	mov.w	r9, #0
 800b97e:	07eb      	lsls	r3, r5, #31
 800b980:	d50a      	bpl.n	800b998 <__pow5mult+0x84>
 800b982:	4639      	mov	r1, r7
 800b984:	4622      	mov	r2, r4
 800b986:	4630      	mov	r0, r6
 800b988:	f7ff ff1a 	bl	800b7c0 <__multiply>
 800b98c:	4639      	mov	r1, r7
 800b98e:	4680      	mov	r8, r0
 800b990:	4630      	mov	r0, r6
 800b992:	f7ff fdff 	bl	800b594 <_Bfree>
 800b996:	4647      	mov	r7, r8
 800b998:	106d      	asrs	r5, r5, #1
 800b99a:	d00b      	beq.n	800b9b4 <__pow5mult+0xa0>
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	b938      	cbnz	r0, 800b9b0 <__pow5mult+0x9c>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	f7ff ff0b 	bl	800b7c0 <__multiply>
 800b9aa:	6020      	str	r0, [r4, #0]
 800b9ac:	f8c0 9000 	str.w	r9, [r0]
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	e7e4      	b.n	800b97e <__pow5mult+0x6a>
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0800e1b0 	.word	0x0800e1b0
 800b9c0:	0800dfe4 	.word	0x0800dfe4
 800b9c4:	0800e064 	.word	0x0800e064

0800b9c8 <__lshift>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	6849      	ldr	r1, [r1, #4]
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	4607      	mov	r7, r0
 800b9da:	4691      	mov	r9, r2
 800b9dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9e0:	f108 0601 	add.w	r6, r8, #1
 800b9e4:	42b3      	cmp	r3, r6
 800b9e6:	db0b      	blt.n	800ba00 <__lshift+0x38>
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7ff fd93 	bl	800b514 <_Balloc>
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	b948      	cbnz	r0, 800ba06 <__lshift+0x3e>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4b28      	ldr	r3, [pc, #160]	; (800ba98 <__lshift+0xd0>)
 800b9f6:	4829      	ldr	r0, [pc, #164]	; (800ba9c <__lshift+0xd4>)
 800b9f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9fc:	f001 fb18 	bl	800d030 <__assert_func>
 800ba00:	3101      	adds	r1, #1
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	e7ee      	b.n	800b9e4 <__lshift+0x1c>
 800ba06:	2300      	movs	r3, #0
 800ba08:	f100 0114 	add.w	r1, r0, #20
 800ba0c:	f100 0210 	add.w	r2, r0, #16
 800ba10:	4618      	mov	r0, r3
 800ba12:	4553      	cmp	r3, sl
 800ba14:	db33      	blt.n	800ba7e <__lshift+0xb6>
 800ba16:	6920      	ldr	r0, [r4, #16]
 800ba18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba1c:	f104 0314 	add.w	r3, r4, #20
 800ba20:	f019 091f 	ands.w	r9, r9, #31
 800ba24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba2c:	d02b      	beq.n	800ba86 <__lshift+0xbe>
 800ba2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba32:	468a      	mov	sl, r1
 800ba34:	2200      	movs	r2, #0
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	fa00 f009 	lsl.w	r0, r0, r9
 800ba3c:	4310      	orrs	r0, r2
 800ba3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ba42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba46:	459c      	cmp	ip, r3
 800ba48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba4c:	d8f3      	bhi.n	800ba36 <__lshift+0x6e>
 800ba4e:	ebac 0304 	sub.w	r3, ip, r4
 800ba52:	3b15      	subs	r3, #21
 800ba54:	f023 0303 	bic.w	r3, r3, #3
 800ba58:	3304      	adds	r3, #4
 800ba5a:	f104 0015 	add.w	r0, r4, #21
 800ba5e:	4584      	cmp	ip, r0
 800ba60:	bf38      	it	cc
 800ba62:	2304      	movcc	r3, #4
 800ba64:	50ca      	str	r2, [r1, r3]
 800ba66:	b10a      	cbz	r2, 800ba6c <__lshift+0xa4>
 800ba68:	f108 0602 	add.w	r6, r8, #2
 800ba6c:	3e01      	subs	r6, #1
 800ba6e:	4638      	mov	r0, r7
 800ba70:	612e      	str	r6, [r5, #16]
 800ba72:	4621      	mov	r1, r4
 800ba74:	f7ff fd8e 	bl	800b594 <_Bfree>
 800ba78:	4628      	mov	r0, r5
 800ba7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba82:	3301      	adds	r3, #1
 800ba84:	e7c5      	b.n	800ba12 <__lshift+0x4a>
 800ba86:	3904      	subs	r1, #4
 800ba88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba90:	459c      	cmp	ip, r3
 800ba92:	d8f9      	bhi.n	800ba88 <__lshift+0xc0>
 800ba94:	e7ea      	b.n	800ba6c <__lshift+0xa4>
 800ba96:	bf00      	nop
 800ba98:	0800e053 	.word	0x0800e053
 800ba9c:	0800e064 	.word	0x0800e064

0800baa0 <__mcmp>:
 800baa0:	b530      	push	{r4, r5, lr}
 800baa2:	6902      	ldr	r2, [r0, #16]
 800baa4:	690c      	ldr	r4, [r1, #16]
 800baa6:	1b12      	subs	r2, r2, r4
 800baa8:	d10e      	bne.n	800bac8 <__mcmp+0x28>
 800baaa:	f100 0314 	add.w	r3, r0, #20
 800baae:	3114      	adds	r1, #20
 800bab0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bab4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bab8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800babc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bac0:	42a5      	cmp	r5, r4
 800bac2:	d003      	beq.n	800bacc <__mcmp+0x2c>
 800bac4:	d305      	bcc.n	800bad2 <__mcmp+0x32>
 800bac6:	2201      	movs	r2, #1
 800bac8:	4610      	mov	r0, r2
 800baca:	bd30      	pop	{r4, r5, pc}
 800bacc:	4283      	cmp	r3, r0
 800bace:	d3f3      	bcc.n	800bab8 <__mcmp+0x18>
 800bad0:	e7fa      	b.n	800bac8 <__mcmp+0x28>
 800bad2:	f04f 32ff 	mov.w	r2, #4294967295
 800bad6:	e7f7      	b.n	800bac8 <__mcmp+0x28>

0800bad8 <__mdiff>:
 800bad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	460c      	mov	r4, r1
 800bade:	4606      	mov	r6, r0
 800bae0:	4611      	mov	r1, r2
 800bae2:	4620      	mov	r0, r4
 800bae4:	4690      	mov	r8, r2
 800bae6:	f7ff ffdb 	bl	800baa0 <__mcmp>
 800baea:	1e05      	subs	r5, r0, #0
 800baec:	d110      	bne.n	800bb10 <__mdiff+0x38>
 800baee:	4629      	mov	r1, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7ff fd0f 	bl	800b514 <_Balloc>
 800baf6:	b930      	cbnz	r0, 800bb06 <__mdiff+0x2e>
 800baf8:	4b3a      	ldr	r3, [pc, #232]	; (800bbe4 <__mdiff+0x10c>)
 800bafa:	4602      	mov	r2, r0
 800bafc:	f240 2137 	movw	r1, #567	; 0x237
 800bb00:	4839      	ldr	r0, [pc, #228]	; (800bbe8 <__mdiff+0x110>)
 800bb02:	f001 fa95 	bl	800d030 <__assert_func>
 800bb06:	2301      	movs	r3, #1
 800bb08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb10:	bfa4      	itt	ge
 800bb12:	4643      	movge	r3, r8
 800bb14:	46a0      	movge	r8, r4
 800bb16:	4630      	mov	r0, r6
 800bb18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb1c:	bfa6      	itte	ge
 800bb1e:	461c      	movge	r4, r3
 800bb20:	2500      	movge	r5, #0
 800bb22:	2501      	movlt	r5, #1
 800bb24:	f7ff fcf6 	bl	800b514 <_Balloc>
 800bb28:	b920      	cbnz	r0, 800bb34 <__mdiff+0x5c>
 800bb2a:	4b2e      	ldr	r3, [pc, #184]	; (800bbe4 <__mdiff+0x10c>)
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	f240 2145 	movw	r1, #581	; 0x245
 800bb32:	e7e5      	b.n	800bb00 <__mdiff+0x28>
 800bb34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb38:	6926      	ldr	r6, [r4, #16]
 800bb3a:	60c5      	str	r5, [r0, #12]
 800bb3c:	f104 0914 	add.w	r9, r4, #20
 800bb40:	f108 0514 	add.w	r5, r8, #20
 800bb44:	f100 0e14 	add.w	lr, r0, #20
 800bb48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb50:	f108 0210 	add.w	r2, r8, #16
 800bb54:	46f2      	mov	sl, lr
 800bb56:	2100      	movs	r1, #0
 800bb58:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb60:	fa11 f88b 	uxtah	r8, r1, fp
 800bb64:	b299      	uxth	r1, r3
 800bb66:	0c1b      	lsrs	r3, r3, #16
 800bb68:	eba8 0801 	sub.w	r8, r8, r1
 800bb6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb74:	fa1f f888 	uxth.w	r8, r8
 800bb78:	1419      	asrs	r1, r3, #16
 800bb7a:	454e      	cmp	r6, r9
 800bb7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb80:	f84a 3b04 	str.w	r3, [sl], #4
 800bb84:	d8e8      	bhi.n	800bb58 <__mdiff+0x80>
 800bb86:	1b33      	subs	r3, r6, r4
 800bb88:	3b15      	subs	r3, #21
 800bb8a:	f023 0303 	bic.w	r3, r3, #3
 800bb8e:	3304      	adds	r3, #4
 800bb90:	3415      	adds	r4, #21
 800bb92:	42a6      	cmp	r6, r4
 800bb94:	bf38      	it	cc
 800bb96:	2304      	movcc	r3, #4
 800bb98:	441d      	add	r5, r3
 800bb9a:	4473      	add	r3, lr
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	462e      	mov	r6, r5
 800bba0:	4566      	cmp	r6, ip
 800bba2:	d30e      	bcc.n	800bbc2 <__mdiff+0xea>
 800bba4:	f10c 0203 	add.w	r2, ip, #3
 800bba8:	1b52      	subs	r2, r2, r5
 800bbaa:	f022 0203 	bic.w	r2, r2, #3
 800bbae:	3d03      	subs	r5, #3
 800bbb0:	45ac      	cmp	ip, r5
 800bbb2:	bf38      	it	cc
 800bbb4:	2200      	movcc	r2, #0
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bbbc:	b17a      	cbz	r2, 800bbde <__mdiff+0x106>
 800bbbe:	6107      	str	r7, [r0, #16]
 800bbc0:	e7a4      	b.n	800bb0c <__mdiff+0x34>
 800bbc2:	f856 8b04 	ldr.w	r8, [r6], #4
 800bbc6:	fa11 f288 	uxtah	r2, r1, r8
 800bbca:	1414      	asrs	r4, r2, #16
 800bbcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbd0:	b292      	uxth	r2, r2
 800bbd2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bbd6:	f84e 2b04 	str.w	r2, [lr], #4
 800bbda:	1421      	asrs	r1, r4, #16
 800bbdc:	e7e0      	b.n	800bba0 <__mdiff+0xc8>
 800bbde:	3f01      	subs	r7, #1
 800bbe0:	e7ea      	b.n	800bbb8 <__mdiff+0xe0>
 800bbe2:	bf00      	nop
 800bbe4:	0800e053 	.word	0x0800e053
 800bbe8:	0800e064 	.word	0x0800e064

0800bbec <__ulp>:
 800bbec:	b082      	sub	sp, #8
 800bbee:	ed8d 0b00 	vstr	d0, [sp]
 800bbf2:	9a01      	ldr	r2, [sp, #4]
 800bbf4:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <__ulp+0x48>)
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dc08      	bgt.n	800bc12 <__ulp+0x26>
 800bc00:	425b      	negs	r3, r3
 800bc02:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bc06:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc0a:	da04      	bge.n	800bc16 <__ulp+0x2a>
 800bc0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc10:	4113      	asrs	r3, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	e008      	b.n	800bc28 <__ulp+0x3c>
 800bc16:	f1a2 0314 	sub.w	r3, r2, #20
 800bc1a:	2b1e      	cmp	r3, #30
 800bc1c:	bfda      	itte	le
 800bc1e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bc22:	40da      	lsrle	r2, r3
 800bc24:	2201      	movgt	r2, #1
 800bc26:	2300      	movs	r3, #0
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	ec41 0b10 	vmov	d0, r0, r1
 800bc30:	b002      	add	sp, #8
 800bc32:	4770      	bx	lr
 800bc34:	7ff00000 	.word	0x7ff00000

0800bc38 <__b2d>:
 800bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3c:	6906      	ldr	r6, [r0, #16]
 800bc3e:	f100 0814 	add.w	r8, r0, #20
 800bc42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bc46:	1f37      	subs	r7, r6, #4
 800bc48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	f7ff fd53 	bl	800b6f8 <__hi0bits>
 800bc52:	f1c0 0320 	rsb	r3, r0, #32
 800bc56:	280a      	cmp	r0, #10
 800bc58:	600b      	str	r3, [r1, #0]
 800bc5a:	491b      	ldr	r1, [pc, #108]	; (800bcc8 <__b2d+0x90>)
 800bc5c:	dc15      	bgt.n	800bc8a <__b2d+0x52>
 800bc5e:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc62:	fa22 f30c 	lsr.w	r3, r2, ip
 800bc66:	45b8      	cmp	r8, r7
 800bc68:	ea43 0501 	orr.w	r5, r3, r1
 800bc6c:	bf34      	ite	cc
 800bc6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc72:	2300      	movcs	r3, #0
 800bc74:	3015      	adds	r0, #21
 800bc76:	fa02 f000 	lsl.w	r0, r2, r0
 800bc7a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bc7e:	4303      	orrs	r3, r0
 800bc80:	461c      	mov	r4, r3
 800bc82:	ec45 4b10 	vmov	d0, r4, r5
 800bc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc8a:	45b8      	cmp	r8, r7
 800bc8c:	bf3a      	itte	cc
 800bc8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc92:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc96:	2300      	movcs	r3, #0
 800bc98:	380b      	subs	r0, #11
 800bc9a:	d012      	beq.n	800bcc2 <__b2d+0x8a>
 800bc9c:	f1c0 0120 	rsb	r1, r0, #32
 800bca0:	fa23 f401 	lsr.w	r4, r3, r1
 800bca4:	4082      	lsls	r2, r0
 800bca6:	4322      	orrs	r2, r4
 800bca8:	4547      	cmp	r7, r8
 800bcaa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bcae:	bf8c      	ite	hi
 800bcb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bcb4:	2200      	movls	r2, #0
 800bcb6:	4083      	lsls	r3, r0
 800bcb8:	40ca      	lsrs	r2, r1
 800bcba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	e7de      	b.n	800bc80 <__b2d+0x48>
 800bcc2:	ea42 0501 	orr.w	r5, r2, r1
 800bcc6:	e7db      	b.n	800bc80 <__b2d+0x48>
 800bcc8:	3ff00000 	.word	0x3ff00000

0800bccc <__d2b>:
 800bccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	ec59 8b10 	vmov	r8, r9, d0
 800bcd8:	4616      	mov	r6, r2
 800bcda:	f7ff fc1b 	bl	800b514 <_Balloc>
 800bcde:	4604      	mov	r4, r0
 800bce0:	b930      	cbnz	r0, 800bcf0 <__d2b+0x24>
 800bce2:	4602      	mov	r2, r0
 800bce4:	4b24      	ldr	r3, [pc, #144]	; (800bd78 <__d2b+0xac>)
 800bce6:	4825      	ldr	r0, [pc, #148]	; (800bd7c <__d2b+0xb0>)
 800bce8:	f240 310f 	movw	r1, #783	; 0x30f
 800bcec:	f001 f9a0 	bl	800d030 <__assert_func>
 800bcf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcf8:	bb2d      	cbnz	r5, 800bd46 <__d2b+0x7a>
 800bcfa:	9301      	str	r3, [sp, #4]
 800bcfc:	f1b8 0300 	subs.w	r3, r8, #0
 800bd00:	d026      	beq.n	800bd50 <__d2b+0x84>
 800bd02:	4668      	mov	r0, sp
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	f7ff fd17 	bl	800b738 <__lo0bits>
 800bd0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd0e:	b1e8      	cbz	r0, 800bd4c <__d2b+0x80>
 800bd10:	f1c0 0320 	rsb	r3, r0, #32
 800bd14:	fa02 f303 	lsl.w	r3, r2, r3
 800bd18:	430b      	orrs	r3, r1
 800bd1a:	40c2      	lsrs	r2, r0
 800bd1c:	6163      	str	r3, [r4, #20]
 800bd1e:	9201      	str	r2, [sp, #4]
 800bd20:	9b01      	ldr	r3, [sp, #4]
 800bd22:	61a3      	str	r3, [r4, #24]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bf14      	ite	ne
 800bd28:	2202      	movne	r2, #2
 800bd2a:	2201      	moveq	r2, #1
 800bd2c:	6122      	str	r2, [r4, #16]
 800bd2e:	b1bd      	cbz	r5, 800bd60 <__d2b+0x94>
 800bd30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd34:	4405      	add	r5, r0
 800bd36:	603d      	str	r5, [r7, #0]
 800bd38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd3c:	6030      	str	r0, [r6, #0]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	b003      	add	sp, #12
 800bd42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd4a:	e7d6      	b.n	800bcfa <__d2b+0x2e>
 800bd4c:	6161      	str	r1, [r4, #20]
 800bd4e:	e7e7      	b.n	800bd20 <__d2b+0x54>
 800bd50:	a801      	add	r0, sp, #4
 800bd52:	f7ff fcf1 	bl	800b738 <__lo0bits>
 800bd56:	9b01      	ldr	r3, [sp, #4]
 800bd58:	6163      	str	r3, [r4, #20]
 800bd5a:	3020      	adds	r0, #32
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	e7e5      	b.n	800bd2c <__d2b+0x60>
 800bd60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd68:	6038      	str	r0, [r7, #0]
 800bd6a:	6918      	ldr	r0, [r3, #16]
 800bd6c:	f7ff fcc4 	bl	800b6f8 <__hi0bits>
 800bd70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd74:	e7e2      	b.n	800bd3c <__d2b+0x70>
 800bd76:	bf00      	nop
 800bd78:	0800e053 	.word	0x0800e053
 800bd7c:	0800e064 	.word	0x0800e064

0800bd80 <__ratio>:
 800bd80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	4688      	mov	r8, r1
 800bd86:	4669      	mov	r1, sp
 800bd88:	4681      	mov	r9, r0
 800bd8a:	f7ff ff55 	bl	800bc38 <__b2d>
 800bd8e:	a901      	add	r1, sp, #4
 800bd90:	4640      	mov	r0, r8
 800bd92:	ec55 4b10 	vmov	r4, r5, d0
 800bd96:	f7ff ff4f 	bl	800bc38 <__b2d>
 800bd9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bda2:	eba3 0c02 	sub.w	ip, r3, r2
 800bda6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bdb0:	ec51 0b10 	vmov	r0, r1, d0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	bfd6      	itet	le
 800bdb8:	460a      	movle	r2, r1
 800bdba:	462a      	movgt	r2, r5
 800bdbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	462f      	mov	r7, r5
 800bdc4:	bfd4      	ite	le
 800bdc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bdca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bdce:	4620      	mov	r0, r4
 800bdd0:	ee10 2a10 	vmov	r2, s0
 800bdd4:	465b      	mov	r3, fp
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	f7f4 fd48 	bl	800086c <__aeabi_ddiv>
 800bddc:	ec41 0b10 	vmov	d0, r0, r1
 800bde0:	b003      	add	sp, #12
 800bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bde6 <__copybits>:
 800bde6:	3901      	subs	r1, #1
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	1149      	asrs	r1, r1, #5
 800bdec:	6914      	ldr	r4, [r2, #16]
 800bdee:	3101      	adds	r1, #1
 800bdf0:	f102 0314 	add.w	r3, r2, #20
 800bdf4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdfc:	1f05      	subs	r5, r0, #4
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	d30c      	bcc.n	800be1c <__copybits+0x36>
 800be02:	1aa3      	subs	r3, r4, r2
 800be04:	3b11      	subs	r3, #17
 800be06:	f023 0303 	bic.w	r3, r3, #3
 800be0a:	3211      	adds	r2, #17
 800be0c:	42a2      	cmp	r2, r4
 800be0e:	bf88      	it	hi
 800be10:	2300      	movhi	r3, #0
 800be12:	4418      	add	r0, r3
 800be14:	2300      	movs	r3, #0
 800be16:	4288      	cmp	r0, r1
 800be18:	d305      	bcc.n	800be26 <__copybits+0x40>
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	f853 6b04 	ldr.w	r6, [r3], #4
 800be20:	f845 6f04 	str.w	r6, [r5, #4]!
 800be24:	e7eb      	b.n	800bdfe <__copybits+0x18>
 800be26:	f840 3b04 	str.w	r3, [r0], #4
 800be2a:	e7f4      	b.n	800be16 <__copybits+0x30>

0800be2c <__any_on>:
 800be2c:	f100 0214 	add.w	r2, r0, #20
 800be30:	6900      	ldr	r0, [r0, #16]
 800be32:	114b      	asrs	r3, r1, #5
 800be34:	4298      	cmp	r0, r3
 800be36:	b510      	push	{r4, lr}
 800be38:	db11      	blt.n	800be5e <__any_on+0x32>
 800be3a:	dd0a      	ble.n	800be52 <__any_on+0x26>
 800be3c:	f011 011f 	ands.w	r1, r1, #31
 800be40:	d007      	beq.n	800be52 <__any_on+0x26>
 800be42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be46:	fa24 f001 	lsr.w	r0, r4, r1
 800be4a:	fa00 f101 	lsl.w	r1, r0, r1
 800be4e:	428c      	cmp	r4, r1
 800be50:	d10b      	bne.n	800be6a <__any_on+0x3e>
 800be52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be56:	4293      	cmp	r3, r2
 800be58:	d803      	bhi.n	800be62 <__any_on+0x36>
 800be5a:	2000      	movs	r0, #0
 800be5c:	bd10      	pop	{r4, pc}
 800be5e:	4603      	mov	r3, r0
 800be60:	e7f7      	b.n	800be52 <__any_on+0x26>
 800be62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be66:	2900      	cmp	r1, #0
 800be68:	d0f5      	beq.n	800be56 <__any_on+0x2a>
 800be6a:	2001      	movs	r0, #1
 800be6c:	e7f6      	b.n	800be5c <__any_on+0x30>

0800be6e <sulp>:
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	4604      	mov	r4, r0
 800be72:	460d      	mov	r5, r1
 800be74:	ec45 4b10 	vmov	d0, r4, r5
 800be78:	4616      	mov	r6, r2
 800be7a:	f7ff feb7 	bl	800bbec <__ulp>
 800be7e:	ec51 0b10 	vmov	r0, r1, d0
 800be82:	b17e      	cbz	r6, 800bea4 <sulp+0x36>
 800be84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd09      	ble.n	800bea4 <sulp+0x36>
 800be90:	051b      	lsls	r3, r3, #20
 800be92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800be96:	2400      	movs	r4, #0
 800be98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800be9c:	4622      	mov	r2, r4
 800be9e:	462b      	mov	r3, r5
 800bea0:	f7f4 fbba 	bl	8000618 <__aeabi_dmul>
 800bea4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bea8 <_strtod_l>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	ed2d 8b02 	vpush	{d8}
 800beb0:	b09b      	sub	sp, #108	; 0x6c
 800beb2:	4604      	mov	r4, r0
 800beb4:	9213      	str	r2, [sp, #76]	; 0x4c
 800beb6:	2200      	movs	r2, #0
 800beb8:	9216      	str	r2, [sp, #88]	; 0x58
 800beba:	460d      	mov	r5, r1
 800bebc:	f04f 0800 	mov.w	r8, #0
 800bec0:	f04f 0900 	mov.w	r9, #0
 800bec4:	460a      	mov	r2, r1
 800bec6:	9215      	str	r2, [sp, #84]	; 0x54
 800bec8:	7811      	ldrb	r1, [r2, #0]
 800beca:	292b      	cmp	r1, #43	; 0x2b
 800becc:	d04c      	beq.n	800bf68 <_strtod_l+0xc0>
 800bece:	d83a      	bhi.n	800bf46 <_strtod_l+0x9e>
 800bed0:	290d      	cmp	r1, #13
 800bed2:	d834      	bhi.n	800bf3e <_strtod_l+0x96>
 800bed4:	2908      	cmp	r1, #8
 800bed6:	d834      	bhi.n	800bf42 <_strtod_l+0x9a>
 800bed8:	2900      	cmp	r1, #0
 800beda:	d03d      	beq.n	800bf58 <_strtod_l+0xb0>
 800bedc:	2200      	movs	r2, #0
 800bede:	920a      	str	r2, [sp, #40]	; 0x28
 800bee0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bee2:	7832      	ldrb	r2, [r6, #0]
 800bee4:	2a30      	cmp	r2, #48	; 0x30
 800bee6:	f040 80b4 	bne.w	800c052 <_strtod_l+0x1aa>
 800beea:	7872      	ldrb	r2, [r6, #1]
 800beec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bef0:	2a58      	cmp	r2, #88	; 0x58
 800bef2:	d170      	bne.n	800bfd6 <_strtod_l+0x12e>
 800bef4:	9302      	str	r3, [sp, #8]
 800bef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	ab16      	add	r3, sp, #88	; 0x58
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	4a8e      	ldr	r2, [pc, #568]	; (800c138 <_strtod_l+0x290>)
 800bf00:	ab17      	add	r3, sp, #92	; 0x5c
 800bf02:	a915      	add	r1, sp, #84	; 0x54
 800bf04:	4620      	mov	r0, r4
 800bf06:	f001 f92f 	bl	800d168 <__gethex>
 800bf0a:	f010 070f 	ands.w	r7, r0, #15
 800bf0e:	4605      	mov	r5, r0
 800bf10:	d005      	beq.n	800bf1e <_strtod_l+0x76>
 800bf12:	2f06      	cmp	r7, #6
 800bf14:	d12a      	bne.n	800bf6c <_strtod_l+0xc4>
 800bf16:	3601      	adds	r6, #1
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9615      	str	r6, [sp, #84]	; 0x54
 800bf1c:	930a      	str	r3, [sp, #40]	; 0x28
 800bf1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f040 857f 	bne.w	800ca24 <_strtod_l+0xb7c>
 800bf26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf28:	b1db      	cbz	r3, 800bf62 <_strtod_l+0xba>
 800bf2a:	4642      	mov	r2, r8
 800bf2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf30:	ec43 2b10 	vmov	d0, r2, r3
 800bf34:	b01b      	add	sp, #108	; 0x6c
 800bf36:	ecbd 8b02 	vpop	{d8}
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	2920      	cmp	r1, #32
 800bf40:	d1cc      	bne.n	800bedc <_strtod_l+0x34>
 800bf42:	3201      	adds	r2, #1
 800bf44:	e7bf      	b.n	800bec6 <_strtod_l+0x1e>
 800bf46:	292d      	cmp	r1, #45	; 0x2d
 800bf48:	d1c8      	bne.n	800bedc <_strtod_l+0x34>
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	910a      	str	r1, [sp, #40]	; 0x28
 800bf4e:	1c51      	adds	r1, r2, #1
 800bf50:	9115      	str	r1, [sp, #84]	; 0x54
 800bf52:	7852      	ldrb	r2, [r2, #1]
 800bf54:	2a00      	cmp	r2, #0
 800bf56:	d1c3      	bne.n	800bee0 <_strtod_l+0x38>
 800bf58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf5a:	9515      	str	r5, [sp, #84]	; 0x54
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f040 855f 	bne.w	800ca20 <_strtod_l+0xb78>
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	e7e3      	b.n	800bf30 <_strtod_l+0x88>
 800bf68:	2100      	movs	r1, #0
 800bf6a:	e7ef      	b.n	800bf4c <_strtod_l+0xa4>
 800bf6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf6e:	b13a      	cbz	r2, 800bf80 <_strtod_l+0xd8>
 800bf70:	2135      	movs	r1, #53	; 0x35
 800bf72:	a818      	add	r0, sp, #96	; 0x60
 800bf74:	f7ff ff37 	bl	800bde6 <__copybits>
 800bf78:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f7ff fb0a 	bl	800b594 <_Bfree>
 800bf80:	3f01      	subs	r7, #1
 800bf82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf84:	2f04      	cmp	r7, #4
 800bf86:	d806      	bhi.n	800bf96 <_strtod_l+0xee>
 800bf88:	e8df f007 	tbb	[pc, r7]
 800bf8c:	201d0314 	.word	0x201d0314
 800bf90:	14          	.byte	0x14
 800bf91:	00          	.byte	0x00
 800bf92:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bf96:	05e9      	lsls	r1, r5, #23
 800bf98:	bf48      	it	mi
 800bf9a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bf9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bfa2:	0d1b      	lsrs	r3, r3, #20
 800bfa4:	051b      	lsls	r3, r3, #20
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1b9      	bne.n	800bf1e <_strtod_l+0x76>
 800bfaa:	f7fe fbb7 	bl	800a71c <__errno>
 800bfae:	2322      	movs	r3, #34	; 0x22
 800bfb0:	6003      	str	r3, [r0, #0]
 800bfb2:	e7b4      	b.n	800bf1e <_strtod_l+0x76>
 800bfb4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bfb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bfbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bfc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bfc4:	e7e7      	b.n	800bf96 <_strtod_l+0xee>
 800bfc6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c140 <_strtod_l+0x298>
 800bfca:	e7e4      	b.n	800bf96 <_strtod_l+0xee>
 800bfcc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bfd0:	f04f 38ff 	mov.w	r8, #4294967295
 800bfd4:	e7df      	b.n	800bf96 <_strtod_l+0xee>
 800bfd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	9215      	str	r2, [sp, #84]	; 0x54
 800bfdc:	785b      	ldrb	r3, [r3, #1]
 800bfde:	2b30      	cmp	r3, #48	; 0x30
 800bfe0:	d0f9      	beq.n	800bfd6 <_strtod_l+0x12e>
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d09b      	beq.n	800bf1e <_strtod_l+0x76>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	f04f 0a00 	mov.w	sl, #0
 800bfec:	9304      	str	r3, [sp, #16]
 800bfee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bff0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bff2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bff6:	46d3      	mov	fp, sl
 800bff8:	220a      	movs	r2, #10
 800bffa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bffc:	7806      	ldrb	r6, [r0, #0]
 800bffe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c002:	b2d9      	uxtb	r1, r3
 800c004:	2909      	cmp	r1, #9
 800c006:	d926      	bls.n	800c056 <_strtod_l+0x1ae>
 800c008:	494c      	ldr	r1, [pc, #304]	; (800c13c <_strtod_l+0x294>)
 800c00a:	2201      	movs	r2, #1
 800c00c:	f000 ffe6 	bl	800cfdc <strncmp>
 800c010:	2800      	cmp	r0, #0
 800c012:	d030      	beq.n	800c076 <_strtod_l+0x1ce>
 800c014:	2000      	movs	r0, #0
 800c016:	4632      	mov	r2, r6
 800c018:	9005      	str	r0, [sp, #20]
 800c01a:	465e      	mov	r6, fp
 800c01c:	4603      	mov	r3, r0
 800c01e:	2a65      	cmp	r2, #101	; 0x65
 800c020:	d001      	beq.n	800c026 <_strtod_l+0x17e>
 800c022:	2a45      	cmp	r2, #69	; 0x45
 800c024:	d113      	bne.n	800c04e <_strtod_l+0x1a6>
 800c026:	b91e      	cbnz	r6, 800c030 <_strtod_l+0x188>
 800c028:	9a04      	ldr	r2, [sp, #16]
 800c02a:	4302      	orrs	r2, r0
 800c02c:	d094      	beq.n	800bf58 <_strtod_l+0xb0>
 800c02e:	2600      	movs	r6, #0
 800c030:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c032:	1c6a      	adds	r2, r5, #1
 800c034:	9215      	str	r2, [sp, #84]	; 0x54
 800c036:	786a      	ldrb	r2, [r5, #1]
 800c038:	2a2b      	cmp	r2, #43	; 0x2b
 800c03a:	d074      	beq.n	800c126 <_strtod_l+0x27e>
 800c03c:	2a2d      	cmp	r2, #45	; 0x2d
 800c03e:	d078      	beq.n	800c132 <_strtod_l+0x28a>
 800c040:	f04f 0c00 	mov.w	ip, #0
 800c044:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c048:	2909      	cmp	r1, #9
 800c04a:	d97f      	bls.n	800c14c <_strtod_l+0x2a4>
 800c04c:	9515      	str	r5, [sp, #84]	; 0x54
 800c04e:	2700      	movs	r7, #0
 800c050:	e09e      	b.n	800c190 <_strtod_l+0x2e8>
 800c052:	2300      	movs	r3, #0
 800c054:	e7c8      	b.n	800bfe8 <_strtod_l+0x140>
 800c056:	f1bb 0f08 	cmp.w	fp, #8
 800c05a:	bfd8      	it	le
 800c05c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c05e:	f100 0001 	add.w	r0, r0, #1
 800c062:	bfda      	itte	le
 800c064:	fb02 3301 	mlale	r3, r2, r1, r3
 800c068:	9309      	strle	r3, [sp, #36]	; 0x24
 800c06a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c06e:	f10b 0b01 	add.w	fp, fp, #1
 800c072:	9015      	str	r0, [sp, #84]	; 0x54
 800c074:	e7c1      	b.n	800bffa <_strtod_l+0x152>
 800c076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	9215      	str	r2, [sp, #84]	; 0x54
 800c07c:	785a      	ldrb	r2, [r3, #1]
 800c07e:	f1bb 0f00 	cmp.w	fp, #0
 800c082:	d037      	beq.n	800c0f4 <_strtod_l+0x24c>
 800c084:	9005      	str	r0, [sp, #20]
 800c086:	465e      	mov	r6, fp
 800c088:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c08c:	2b09      	cmp	r3, #9
 800c08e:	d912      	bls.n	800c0b6 <_strtod_l+0x20e>
 800c090:	2301      	movs	r3, #1
 800c092:	e7c4      	b.n	800c01e <_strtod_l+0x176>
 800c094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	9215      	str	r2, [sp, #84]	; 0x54
 800c09a:	785a      	ldrb	r2, [r3, #1]
 800c09c:	3001      	adds	r0, #1
 800c09e:	2a30      	cmp	r2, #48	; 0x30
 800c0a0:	d0f8      	beq.n	800c094 <_strtod_l+0x1ec>
 800c0a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c0a6:	2b08      	cmp	r3, #8
 800c0a8:	f200 84c1 	bhi.w	800ca2e <_strtod_l+0xb86>
 800c0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ae:	9005      	str	r0, [sp, #20]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	3a30      	subs	r2, #48	; 0x30
 800c0b8:	f100 0301 	add.w	r3, r0, #1
 800c0bc:	d014      	beq.n	800c0e8 <_strtod_l+0x240>
 800c0be:	9905      	ldr	r1, [sp, #20]
 800c0c0:	4419      	add	r1, r3
 800c0c2:	9105      	str	r1, [sp, #20]
 800c0c4:	4633      	mov	r3, r6
 800c0c6:	eb00 0c06 	add.w	ip, r0, r6
 800c0ca:	210a      	movs	r1, #10
 800c0cc:	4563      	cmp	r3, ip
 800c0ce:	d113      	bne.n	800c0f8 <_strtod_l+0x250>
 800c0d0:	1833      	adds	r3, r6, r0
 800c0d2:	2b08      	cmp	r3, #8
 800c0d4:	f106 0601 	add.w	r6, r6, #1
 800c0d8:	4406      	add	r6, r0
 800c0da:	dc1a      	bgt.n	800c112 <_strtod_l+0x26a>
 800c0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0de:	230a      	movs	r3, #10
 800c0e0:	fb03 2301 	mla	r3, r3, r1, r2
 800c0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c0ea:	1c51      	adds	r1, r2, #1
 800c0ec:	9115      	str	r1, [sp, #84]	; 0x54
 800c0ee:	7852      	ldrb	r2, [r2, #1]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	e7c9      	b.n	800c088 <_strtod_l+0x1e0>
 800c0f4:	4658      	mov	r0, fp
 800c0f6:	e7d2      	b.n	800c09e <_strtod_l+0x1f6>
 800c0f8:	2b08      	cmp	r3, #8
 800c0fa:	f103 0301 	add.w	r3, r3, #1
 800c0fe:	dc03      	bgt.n	800c108 <_strtod_l+0x260>
 800c100:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c102:	434f      	muls	r7, r1
 800c104:	9709      	str	r7, [sp, #36]	; 0x24
 800c106:	e7e1      	b.n	800c0cc <_strtod_l+0x224>
 800c108:	2b10      	cmp	r3, #16
 800c10a:	bfd8      	it	le
 800c10c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c110:	e7dc      	b.n	800c0cc <_strtod_l+0x224>
 800c112:	2e10      	cmp	r6, #16
 800c114:	bfdc      	itt	le
 800c116:	230a      	movle	r3, #10
 800c118:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c11c:	e7e3      	b.n	800c0e6 <_strtod_l+0x23e>
 800c11e:	2300      	movs	r3, #0
 800c120:	9305      	str	r3, [sp, #20]
 800c122:	2301      	movs	r3, #1
 800c124:	e780      	b.n	800c028 <_strtod_l+0x180>
 800c126:	f04f 0c00 	mov.w	ip, #0
 800c12a:	1caa      	adds	r2, r5, #2
 800c12c:	9215      	str	r2, [sp, #84]	; 0x54
 800c12e:	78aa      	ldrb	r2, [r5, #2]
 800c130:	e788      	b.n	800c044 <_strtod_l+0x19c>
 800c132:	f04f 0c01 	mov.w	ip, #1
 800c136:	e7f8      	b.n	800c12a <_strtod_l+0x282>
 800c138:	0800e1c0 	.word	0x0800e1c0
 800c13c:	0800e1bc 	.word	0x0800e1bc
 800c140:	7ff00000 	.word	0x7ff00000
 800c144:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c146:	1c51      	adds	r1, r2, #1
 800c148:	9115      	str	r1, [sp, #84]	; 0x54
 800c14a:	7852      	ldrb	r2, [r2, #1]
 800c14c:	2a30      	cmp	r2, #48	; 0x30
 800c14e:	d0f9      	beq.n	800c144 <_strtod_l+0x29c>
 800c150:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c154:	2908      	cmp	r1, #8
 800c156:	f63f af7a 	bhi.w	800c04e <_strtod_l+0x1a6>
 800c15a:	3a30      	subs	r2, #48	; 0x30
 800c15c:	9208      	str	r2, [sp, #32]
 800c15e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c160:	920c      	str	r2, [sp, #48]	; 0x30
 800c162:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c164:	1c57      	adds	r7, r2, #1
 800c166:	9715      	str	r7, [sp, #84]	; 0x54
 800c168:	7852      	ldrb	r2, [r2, #1]
 800c16a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c16e:	f1be 0f09 	cmp.w	lr, #9
 800c172:	d938      	bls.n	800c1e6 <_strtod_l+0x33e>
 800c174:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c176:	1a7f      	subs	r7, r7, r1
 800c178:	2f08      	cmp	r7, #8
 800c17a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c17e:	dc03      	bgt.n	800c188 <_strtod_l+0x2e0>
 800c180:	9908      	ldr	r1, [sp, #32]
 800c182:	428f      	cmp	r7, r1
 800c184:	bfa8      	it	ge
 800c186:	460f      	movge	r7, r1
 800c188:	f1bc 0f00 	cmp.w	ip, #0
 800c18c:	d000      	beq.n	800c190 <_strtod_l+0x2e8>
 800c18e:	427f      	negs	r7, r7
 800c190:	2e00      	cmp	r6, #0
 800c192:	d14f      	bne.n	800c234 <_strtod_l+0x38c>
 800c194:	9904      	ldr	r1, [sp, #16]
 800c196:	4301      	orrs	r1, r0
 800c198:	f47f aec1 	bne.w	800bf1e <_strtod_l+0x76>
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f47f aedb 	bne.w	800bf58 <_strtod_l+0xb0>
 800c1a2:	2a69      	cmp	r2, #105	; 0x69
 800c1a4:	d029      	beq.n	800c1fa <_strtod_l+0x352>
 800c1a6:	dc26      	bgt.n	800c1f6 <_strtod_l+0x34e>
 800c1a8:	2a49      	cmp	r2, #73	; 0x49
 800c1aa:	d026      	beq.n	800c1fa <_strtod_l+0x352>
 800c1ac:	2a4e      	cmp	r2, #78	; 0x4e
 800c1ae:	f47f aed3 	bne.w	800bf58 <_strtod_l+0xb0>
 800c1b2:	499b      	ldr	r1, [pc, #620]	; (800c420 <_strtod_l+0x578>)
 800c1b4:	a815      	add	r0, sp, #84	; 0x54
 800c1b6:	f001 fa17 	bl	800d5e8 <__match>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	f43f aecc 	beq.w	800bf58 <_strtod_l+0xb0>
 800c1c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b28      	cmp	r3, #40	; 0x28
 800c1c6:	d12f      	bne.n	800c228 <_strtod_l+0x380>
 800c1c8:	4996      	ldr	r1, [pc, #600]	; (800c424 <_strtod_l+0x57c>)
 800c1ca:	aa18      	add	r2, sp, #96	; 0x60
 800c1cc:	a815      	add	r0, sp, #84	; 0x54
 800c1ce:	f001 fa1f 	bl	800d610 <__hexnan>
 800c1d2:	2805      	cmp	r0, #5
 800c1d4:	d128      	bne.n	800c228 <_strtod_l+0x380>
 800c1d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c1e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c1e4:	e69b      	b.n	800bf1e <_strtod_l+0x76>
 800c1e6:	9f08      	ldr	r7, [sp, #32]
 800c1e8:	210a      	movs	r1, #10
 800c1ea:	fb01 2107 	mla	r1, r1, r7, r2
 800c1ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c1f2:	9208      	str	r2, [sp, #32]
 800c1f4:	e7b5      	b.n	800c162 <_strtod_l+0x2ba>
 800c1f6:	2a6e      	cmp	r2, #110	; 0x6e
 800c1f8:	e7d9      	b.n	800c1ae <_strtod_l+0x306>
 800c1fa:	498b      	ldr	r1, [pc, #556]	; (800c428 <_strtod_l+0x580>)
 800c1fc:	a815      	add	r0, sp, #84	; 0x54
 800c1fe:	f001 f9f3 	bl	800d5e8 <__match>
 800c202:	2800      	cmp	r0, #0
 800c204:	f43f aea8 	beq.w	800bf58 <_strtod_l+0xb0>
 800c208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c20a:	4988      	ldr	r1, [pc, #544]	; (800c42c <_strtod_l+0x584>)
 800c20c:	3b01      	subs	r3, #1
 800c20e:	a815      	add	r0, sp, #84	; 0x54
 800c210:	9315      	str	r3, [sp, #84]	; 0x54
 800c212:	f001 f9e9 	bl	800d5e8 <__match>
 800c216:	b910      	cbnz	r0, 800c21e <_strtod_l+0x376>
 800c218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c21a:	3301      	adds	r3, #1
 800c21c:	9315      	str	r3, [sp, #84]	; 0x54
 800c21e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c43c <_strtod_l+0x594>
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	e67a      	b.n	800bf1e <_strtod_l+0x76>
 800c228:	4881      	ldr	r0, [pc, #516]	; (800c430 <_strtod_l+0x588>)
 800c22a:	f000 fef9 	bl	800d020 <nan>
 800c22e:	ec59 8b10 	vmov	r8, r9, d0
 800c232:	e674      	b.n	800bf1e <_strtod_l+0x76>
 800c234:	9b05      	ldr	r3, [sp, #20]
 800c236:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c238:	1afb      	subs	r3, r7, r3
 800c23a:	f1bb 0f00 	cmp.w	fp, #0
 800c23e:	bf08      	it	eq
 800c240:	46b3      	moveq	fp, r6
 800c242:	2e10      	cmp	r6, #16
 800c244:	9308      	str	r3, [sp, #32]
 800c246:	4635      	mov	r5, r6
 800c248:	bfa8      	it	ge
 800c24a:	2510      	movge	r5, #16
 800c24c:	f7f4 f96a 	bl	8000524 <__aeabi_ui2d>
 800c250:	2e09      	cmp	r6, #9
 800c252:	4680      	mov	r8, r0
 800c254:	4689      	mov	r9, r1
 800c256:	dd13      	ble.n	800c280 <_strtod_l+0x3d8>
 800c258:	4b76      	ldr	r3, [pc, #472]	; (800c434 <_strtod_l+0x58c>)
 800c25a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c25e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c262:	f7f4 f9d9 	bl	8000618 <__aeabi_dmul>
 800c266:	4680      	mov	r8, r0
 800c268:	4650      	mov	r0, sl
 800c26a:	4689      	mov	r9, r1
 800c26c:	f7f4 f95a 	bl	8000524 <__aeabi_ui2d>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4640      	mov	r0, r8
 800c276:	4649      	mov	r1, r9
 800c278:	f7f4 f818 	bl	80002ac <__adddf3>
 800c27c:	4680      	mov	r8, r0
 800c27e:	4689      	mov	r9, r1
 800c280:	2e0f      	cmp	r6, #15
 800c282:	dc38      	bgt.n	800c2f6 <_strtod_l+0x44e>
 800c284:	9b08      	ldr	r3, [sp, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f43f ae49 	beq.w	800bf1e <_strtod_l+0x76>
 800c28c:	dd24      	ble.n	800c2d8 <_strtod_l+0x430>
 800c28e:	2b16      	cmp	r3, #22
 800c290:	dc0b      	bgt.n	800c2aa <_strtod_l+0x402>
 800c292:	4968      	ldr	r1, [pc, #416]	; (800c434 <_strtod_l+0x58c>)
 800c294:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c29c:	4642      	mov	r2, r8
 800c29e:	464b      	mov	r3, r9
 800c2a0:	f7f4 f9ba 	bl	8000618 <__aeabi_dmul>
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	e639      	b.n	800bf1e <_strtod_l+0x76>
 800c2aa:	9a08      	ldr	r2, [sp, #32]
 800c2ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	db20      	blt.n	800c2f6 <_strtod_l+0x44e>
 800c2b4:	4c5f      	ldr	r4, [pc, #380]	; (800c434 <_strtod_l+0x58c>)
 800c2b6:	f1c6 060f 	rsb	r6, r6, #15
 800c2ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2c6:	f7f4 f9a7 	bl	8000618 <__aeabi_dmul>
 800c2ca:	9b08      	ldr	r3, [sp, #32]
 800c2cc:	1b9e      	subs	r6, r3, r6
 800c2ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c2d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2d6:	e7e3      	b.n	800c2a0 <_strtod_l+0x3f8>
 800c2d8:	9b08      	ldr	r3, [sp, #32]
 800c2da:	3316      	adds	r3, #22
 800c2dc:	db0b      	blt.n	800c2f6 <_strtod_l+0x44e>
 800c2de:	9b05      	ldr	r3, [sp, #20]
 800c2e0:	1bdf      	subs	r7, r3, r7
 800c2e2:	4b54      	ldr	r3, [pc, #336]	; (800c434 <_strtod_l+0x58c>)
 800c2e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c2e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ec:	4640      	mov	r0, r8
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	f7f4 fabc 	bl	800086c <__aeabi_ddiv>
 800c2f4:	e7d6      	b.n	800c2a4 <_strtod_l+0x3fc>
 800c2f6:	9b08      	ldr	r3, [sp, #32]
 800c2f8:	1b75      	subs	r5, r6, r5
 800c2fa:	441d      	add	r5, r3
 800c2fc:	2d00      	cmp	r5, #0
 800c2fe:	dd70      	ble.n	800c3e2 <_strtod_l+0x53a>
 800c300:	f015 030f 	ands.w	r3, r5, #15
 800c304:	d00a      	beq.n	800c31c <_strtod_l+0x474>
 800c306:	494b      	ldr	r1, [pc, #300]	; (800c434 <_strtod_l+0x58c>)
 800c308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c30c:	4642      	mov	r2, r8
 800c30e:	464b      	mov	r3, r9
 800c310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c314:	f7f4 f980 	bl	8000618 <__aeabi_dmul>
 800c318:	4680      	mov	r8, r0
 800c31a:	4689      	mov	r9, r1
 800c31c:	f035 050f 	bics.w	r5, r5, #15
 800c320:	d04d      	beq.n	800c3be <_strtod_l+0x516>
 800c322:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c326:	dd22      	ble.n	800c36e <_strtod_l+0x4c6>
 800c328:	2500      	movs	r5, #0
 800c32a:	46ab      	mov	fp, r5
 800c32c:	9509      	str	r5, [sp, #36]	; 0x24
 800c32e:	9505      	str	r5, [sp, #20]
 800c330:	2322      	movs	r3, #34	; 0x22
 800c332:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c43c <_strtod_l+0x594>
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	f04f 0800 	mov.w	r8, #0
 800c33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f43f aded 	beq.w	800bf1e <_strtod_l+0x76>
 800c344:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c346:	4620      	mov	r0, r4
 800c348:	f7ff f924 	bl	800b594 <_Bfree>
 800c34c:	9905      	ldr	r1, [sp, #20]
 800c34e:	4620      	mov	r0, r4
 800c350:	f7ff f920 	bl	800b594 <_Bfree>
 800c354:	4659      	mov	r1, fp
 800c356:	4620      	mov	r0, r4
 800c358:	f7ff f91c 	bl	800b594 <_Bfree>
 800c35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c35e:	4620      	mov	r0, r4
 800c360:	f7ff f918 	bl	800b594 <_Bfree>
 800c364:	4629      	mov	r1, r5
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff f914 	bl	800b594 <_Bfree>
 800c36c:	e5d7      	b.n	800bf1e <_strtod_l+0x76>
 800c36e:	4b32      	ldr	r3, [pc, #200]	; (800c438 <_strtod_l+0x590>)
 800c370:	9304      	str	r3, [sp, #16]
 800c372:	2300      	movs	r3, #0
 800c374:	112d      	asrs	r5, r5, #4
 800c376:	4640      	mov	r0, r8
 800c378:	4649      	mov	r1, r9
 800c37a:	469a      	mov	sl, r3
 800c37c:	2d01      	cmp	r5, #1
 800c37e:	dc21      	bgt.n	800c3c4 <_strtod_l+0x51c>
 800c380:	b10b      	cbz	r3, 800c386 <_strtod_l+0x4de>
 800c382:	4680      	mov	r8, r0
 800c384:	4689      	mov	r9, r1
 800c386:	492c      	ldr	r1, [pc, #176]	; (800c438 <_strtod_l+0x590>)
 800c388:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c38c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c390:	4642      	mov	r2, r8
 800c392:	464b      	mov	r3, r9
 800c394:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c398:	f7f4 f93e 	bl	8000618 <__aeabi_dmul>
 800c39c:	4b27      	ldr	r3, [pc, #156]	; (800c43c <_strtod_l+0x594>)
 800c39e:	460a      	mov	r2, r1
 800c3a0:	400b      	ands	r3, r1
 800c3a2:	4927      	ldr	r1, [pc, #156]	; (800c440 <_strtod_l+0x598>)
 800c3a4:	428b      	cmp	r3, r1
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	d8be      	bhi.n	800c328 <_strtod_l+0x480>
 800c3aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c3ae:	428b      	cmp	r3, r1
 800c3b0:	bf86      	itte	hi
 800c3b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c444 <_strtod_l+0x59c>
 800c3b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800c3ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	e07b      	b.n	800c4bc <_strtod_l+0x614>
 800c3c4:	07ea      	lsls	r2, r5, #31
 800c3c6:	d505      	bpl.n	800c3d4 <_strtod_l+0x52c>
 800c3c8:	9b04      	ldr	r3, [sp, #16]
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f4 f923 	bl	8000618 <__aeabi_dmul>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	9a04      	ldr	r2, [sp, #16]
 800c3d6:	3208      	adds	r2, #8
 800c3d8:	f10a 0a01 	add.w	sl, sl, #1
 800c3dc:	106d      	asrs	r5, r5, #1
 800c3de:	9204      	str	r2, [sp, #16]
 800c3e0:	e7cc      	b.n	800c37c <_strtod_l+0x4d4>
 800c3e2:	d0ec      	beq.n	800c3be <_strtod_l+0x516>
 800c3e4:	426d      	negs	r5, r5
 800c3e6:	f015 020f 	ands.w	r2, r5, #15
 800c3ea:	d00a      	beq.n	800c402 <_strtod_l+0x55a>
 800c3ec:	4b11      	ldr	r3, [pc, #68]	; (800c434 <_strtod_l+0x58c>)
 800c3ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f4 fa37 	bl	800086c <__aeabi_ddiv>
 800c3fe:	4680      	mov	r8, r0
 800c400:	4689      	mov	r9, r1
 800c402:	112d      	asrs	r5, r5, #4
 800c404:	d0db      	beq.n	800c3be <_strtod_l+0x516>
 800c406:	2d1f      	cmp	r5, #31
 800c408:	dd1e      	ble.n	800c448 <_strtod_l+0x5a0>
 800c40a:	2500      	movs	r5, #0
 800c40c:	46ab      	mov	fp, r5
 800c40e:	9509      	str	r5, [sp, #36]	; 0x24
 800c410:	9505      	str	r5, [sp, #20]
 800c412:	2322      	movs	r3, #34	; 0x22
 800c414:	f04f 0800 	mov.w	r8, #0
 800c418:	f04f 0900 	mov.w	r9, #0
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	e78d      	b.n	800c33c <_strtod_l+0x494>
 800c420:	0800dfab 	.word	0x0800dfab
 800c424:	0800e1d4 	.word	0x0800e1d4
 800c428:	0800dfa3 	.word	0x0800dfa3
 800c42c:	0800dfda 	.word	0x0800dfda
 800c430:	0800e365 	.word	0x0800e365
 800c434:	0800e0e8 	.word	0x0800e0e8
 800c438:	0800e0c0 	.word	0x0800e0c0
 800c43c:	7ff00000 	.word	0x7ff00000
 800c440:	7ca00000 	.word	0x7ca00000
 800c444:	7fefffff 	.word	0x7fefffff
 800c448:	f015 0310 	ands.w	r3, r5, #16
 800c44c:	bf18      	it	ne
 800c44e:	236a      	movne	r3, #106	; 0x6a
 800c450:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c7f4 <_strtod_l+0x94c>
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	4640      	mov	r0, r8
 800c458:	4649      	mov	r1, r9
 800c45a:	2300      	movs	r3, #0
 800c45c:	07ea      	lsls	r2, r5, #31
 800c45e:	d504      	bpl.n	800c46a <_strtod_l+0x5c2>
 800c460:	e9da 2300 	ldrd	r2, r3, [sl]
 800c464:	f7f4 f8d8 	bl	8000618 <__aeabi_dmul>
 800c468:	2301      	movs	r3, #1
 800c46a:	106d      	asrs	r5, r5, #1
 800c46c:	f10a 0a08 	add.w	sl, sl, #8
 800c470:	d1f4      	bne.n	800c45c <_strtod_l+0x5b4>
 800c472:	b10b      	cbz	r3, 800c478 <_strtod_l+0x5d0>
 800c474:	4680      	mov	r8, r0
 800c476:	4689      	mov	r9, r1
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	b1bb      	cbz	r3, 800c4ac <_strtod_l+0x604>
 800c47c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c480:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c484:	2b00      	cmp	r3, #0
 800c486:	4649      	mov	r1, r9
 800c488:	dd10      	ble.n	800c4ac <_strtod_l+0x604>
 800c48a:	2b1f      	cmp	r3, #31
 800c48c:	f340 811e 	ble.w	800c6cc <_strtod_l+0x824>
 800c490:	2b34      	cmp	r3, #52	; 0x34
 800c492:	bfde      	ittt	le
 800c494:	f04f 33ff 	movle.w	r3, #4294967295
 800c498:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c49c:	4093      	lslle	r3, r2
 800c49e:	f04f 0800 	mov.w	r8, #0
 800c4a2:	bfcc      	ite	gt
 800c4a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c4a8:	ea03 0901 	andle.w	r9, r3, r1
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	f7f4 fb18 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d1a6      	bne.n	800c40a <_strtod_l+0x562>
 800c4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4c2:	4633      	mov	r3, r6
 800c4c4:	465a      	mov	r2, fp
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f7ff f8cc 	bl	800b664 <__s2b>
 800c4cc:	9009      	str	r0, [sp, #36]	; 0x24
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f43f af2a 	beq.w	800c328 <_strtod_l+0x480>
 800c4d4:	9a08      	ldr	r2, [sp, #32]
 800c4d6:	9b05      	ldr	r3, [sp, #20]
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	eba3 0307 	sub.w	r3, r3, r7
 800c4de:	bfa8      	it	ge
 800c4e0:	2300      	movge	r3, #0
 800c4e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c4e4:	2500      	movs	r5, #0
 800c4e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c4ea:	9312      	str	r3, [sp, #72]	; 0x48
 800c4ec:	46ab      	mov	fp, r5
 800c4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	6859      	ldr	r1, [r3, #4]
 800c4f4:	f7ff f80e 	bl	800b514 <_Balloc>
 800c4f8:	9005      	str	r0, [sp, #20]
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	f43f af18 	beq.w	800c330 <_strtod_l+0x488>
 800c500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	3202      	adds	r2, #2
 800c506:	f103 010c 	add.w	r1, r3, #12
 800c50a:	0092      	lsls	r2, r2, #2
 800c50c:	300c      	adds	r0, #12
 800c50e:	f000 fd77 	bl	800d000 <memcpy>
 800c512:	ec49 8b10 	vmov	d0, r8, r9
 800c516:	aa18      	add	r2, sp, #96	; 0x60
 800c518:	a917      	add	r1, sp, #92	; 0x5c
 800c51a:	4620      	mov	r0, r4
 800c51c:	f7ff fbd6 	bl	800bccc <__d2b>
 800c520:	ec49 8b18 	vmov	d8, r8, r9
 800c524:	9016      	str	r0, [sp, #88]	; 0x58
 800c526:	2800      	cmp	r0, #0
 800c528:	f43f af02 	beq.w	800c330 <_strtod_l+0x488>
 800c52c:	2101      	movs	r1, #1
 800c52e:	4620      	mov	r0, r4
 800c530:	f7ff f930 	bl	800b794 <__i2b>
 800c534:	4683      	mov	fp, r0
 800c536:	2800      	cmp	r0, #0
 800c538:	f43f aefa 	beq.w	800c330 <_strtod_l+0x488>
 800c53c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c53e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c540:	2e00      	cmp	r6, #0
 800c542:	bfab      	itete	ge
 800c544:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c546:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c54a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c54e:	bfac      	ite	ge
 800c550:	eb06 0a03 	addge.w	sl, r6, r3
 800c554:	1b9f      	sublt	r7, r3, r6
 800c556:	9b04      	ldr	r3, [sp, #16]
 800c558:	1af6      	subs	r6, r6, r3
 800c55a:	4416      	add	r6, r2
 800c55c:	4ba0      	ldr	r3, [pc, #640]	; (800c7e0 <_strtod_l+0x938>)
 800c55e:	3e01      	subs	r6, #1
 800c560:	429e      	cmp	r6, r3
 800c562:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c566:	f280 80c4 	bge.w	800c6f2 <_strtod_l+0x84a>
 800c56a:	1b9b      	subs	r3, r3, r6
 800c56c:	2b1f      	cmp	r3, #31
 800c56e:	eba2 0203 	sub.w	r2, r2, r3
 800c572:	f04f 0101 	mov.w	r1, #1
 800c576:	f300 80b0 	bgt.w	800c6da <_strtod_l+0x832>
 800c57a:	fa01 f303 	lsl.w	r3, r1, r3
 800c57e:	930e      	str	r3, [sp, #56]	; 0x38
 800c580:	2300      	movs	r3, #0
 800c582:	930d      	str	r3, [sp, #52]	; 0x34
 800c584:	eb0a 0602 	add.w	r6, sl, r2
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	45b2      	cmp	sl, r6
 800c58c:	4417      	add	r7, r2
 800c58e:	441f      	add	r7, r3
 800c590:	4653      	mov	r3, sl
 800c592:	bfa8      	it	ge
 800c594:	4633      	movge	r3, r6
 800c596:	42bb      	cmp	r3, r7
 800c598:	bfa8      	it	ge
 800c59a:	463b      	movge	r3, r7
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfc2      	ittt	gt
 800c5a0:	1af6      	subgt	r6, r6, r3
 800c5a2:	1aff      	subgt	r7, r7, r3
 800c5a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	dd17      	ble.n	800c5de <_strtod_l+0x736>
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f7ff f9ae 	bl	800b914 <__pow5mult>
 800c5b8:	4683      	mov	fp, r0
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	f43f aeb8 	beq.w	800c330 <_strtod_l+0x488>
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f7ff f8fb 	bl	800b7c0 <__multiply>
 800c5ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f43f aeaf 	beq.w	800c330 <_strtod_l+0x488>
 800c5d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f7fe ffdd 	bl	800b594 <_Bfree>
 800c5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5dc:	9316      	str	r3, [sp, #88]	; 0x58
 800c5de:	2e00      	cmp	r6, #0
 800c5e0:	f300 808c 	bgt.w	800c6fc <_strtod_l+0x854>
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dd08      	ble.n	800c5fc <_strtod_l+0x754>
 800c5ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5ec:	9905      	ldr	r1, [sp, #20]
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f7ff f990 	bl	800b914 <__pow5mult>
 800c5f4:	9005      	str	r0, [sp, #20]
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f43f ae9a 	beq.w	800c330 <_strtod_l+0x488>
 800c5fc:	2f00      	cmp	r7, #0
 800c5fe:	dd08      	ble.n	800c612 <_strtod_l+0x76a>
 800c600:	9905      	ldr	r1, [sp, #20]
 800c602:	463a      	mov	r2, r7
 800c604:	4620      	mov	r0, r4
 800c606:	f7ff f9df 	bl	800b9c8 <__lshift>
 800c60a:	9005      	str	r0, [sp, #20]
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f43f ae8f 	beq.w	800c330 <_strtod_l+0x488>
 800c612:	f1ba 0f00 	cmp.w	sl, #0
 800c616:	dd08      	ble.n	800c62a <_strtod_l+0x782>
 800c618:	4659      	mov	r1, fp
 800c61a:	4652      	mov	r2, sl
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7ff f9d3 	bl	800b9c8 <__lshift>
 800c622:	4683      	mov	fp, r0
 800c624:	2800      	cmp	r0, #0
 800c626:	f43f ae83 	beq.w	800c330 <_strtod_l+0x488>
 800c62a:	9a05      	ldr	r2, [sp, #20]
 800c62c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c62e:	4620      	mov	r0, r4
 800c630:	f7ff fa52 	bl	800bad8 <__mdiff>
 800c634:	4605      	mov	r5, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	f43f ae7a 	beq.w	800c330 <_strtod_l+0x488>
 800c63c:	68c3      	ldr	r3, [r0, #12]
 800c63e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c640:	2300      	movs	r3, #0
 800c642:	60c3      	str	r3, [r0, #12]
 800c644:	4659      	mov	r1, fp
 800c646:	f7ff fa2b 	bl	800baa0 <__mcmp>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	da60      	bge.n	800c710 <_strtod_l+0x868>
 800c64e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c650:	ea53 0308 	orrs.w	r3, r3, r8
 800c654:	f040 8084 	bne.w	800c760 <_strtod_l+0x8b8>
 800c658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d17f      	bne.n	800c760 <_strtod_l+0x8b8>
 800c660:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c664:	0d1b      	lsrs	r3, r3, #20
 800c666:	051b      	lsls	r3, r3, #20
 800c668:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c66c:	d978      	bls.n	800c760 <_strtod_l+0x8b8>
 800c66e:	696b      	ldr	r3, [r5, #20]
 800c670:	b913      	cbnz	r3, 800c678 <_strtod_l+0x7d0>
 800c672:	692b      	ldr	r3, [r5, #16]
 800c674:	2b01      	cmp	r3, #1
 800c676:	dd73      	ble.n	800c760 <_strtod_l+0x8b8>
 800c678:	4629      	mov	r1, r5
 800c67a:	2201      	movs	r2, #1
 800c67c:	4620      	mov	r0, r4
 800c67e:	f7ff f9a3 	bl	800b9c8 <__lshift>
 800c682:	4659      	mov	r1, fp
 800c684:	4605      	mov	r5, r0
 800c686:	f7ff fa0b 	bl	800baa0 <__mcmp>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	dd68      	ble.n	800c760 <_strtod_l+0x8b8>
 800c68e:	9904      	ldr	r1, [sp, #16]
 800c690:	4a54      	ldr	r2, [pc, #336]	; (800c7e4 <_strtod_l+0x93c>)
 800c692:	464b      	mov	r3, r9
 800c694:	2900      	cmp	r1, #0
 800c696:	f000 8084 	beq.w	800c7a2 <_strtod_l+0x8fa>
 800c69a:	ea02 0109 	and.w	r1, r2, r9
 800c69e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6a2:	dc7e      	bgt.n	800c7a2 <_strtod_l+0x8fa>
 800c6a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c6a8:	f77f aeb3 	ble.w	800c412 <_strtod_l+0x56a>
 800c6ac:	4b4e      	ldr	r3, [pc, #312]	; (800c7e8 <_strtod_l+0x940>)
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f7f3 ffb0 	bl	8000618 <__aeabi_dmul>
 800c6b8:	4b4a      	ldr	r3, [pc, #296]	; (800c7e4 <_strtod_l+0x93c>)
 800c6ba:	400b      	ands	r3, r1
 800c6bc:	4680      	mov	r8, r0
 800c6be:	4689      	mov	r9, r1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f47f ae3f 	bne.w	800c344 <_strtod_l+0x49c>
 800c6c6:	2322      	movs	r3, #34	; 0x22
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	e63b      	b.n	800c344 <_strtod_l+0x49c>
 800c6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d4:	ea03 0808 	and.w	r8, r3, r8
 800c6d8:	e6e8      	b.n	800c4ac <_strtod_l+0x604>
 800c6da:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c6de:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c6e2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c6e6:	36e2      	adds	r6, #226	; 0xe2
 800c6e8:	fa01 f306 	lsl.w	r3, r1, r6
 800c6ec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c6f0:	e748      	b.n	800c584 <_strtod_l+0x6dc>
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c6fa:	e743      	b.n	800c584 <_strtod_l+0x6dc>
 800c6fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6fe:	4632      	mov	r2, r6
 800c700:	4620      	mov	r0, r4
 800c702:	f7ff f961 	bl	800b9c8 <__lshift>
 800c706:	9016      	str	r0, [sp, #88]	; 0x58
 800c708:	2800      	cmp	r0, #0
 800c70a:	f47f af6b 	bne.w	800c5e4 <_strtod_l+0x73c>
 800c70e:	e60f      	b.n	800c330 <_strtod_l+0x488>
 800c710:	46ca      	mov	sl, r9
 800c712:	d171      	bne.n	800c7f8 <_strtod_l+0x950>
 800c714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c716:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c71a:	b352      	cbz	r2, 800c772 <_strtod_l+0x8ca>
 800c71c:	4a33      	ldr	r2, [pc, #204]	; (800c7ec <_strtod_l+0x944>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d12a      	bne.n	800c778 <_strtod_l+0x8d0>
 800c722:	9b04      	ldr	r3, [sp, #16]
 800c724:	4641      	mov	r1, r8
 800c726:	b1fb      	cbz	r3, 800c768 <_strtod_l+0x8c0>
 800c728:	4b2e      	ldr	r3, [pc, #184]	; (800c7e4 <_strtod_l+0x93c>)
 800c72a:	ea09 0303 	and.w	r3, r9, r3
 800c72e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c732:	f04f 32ff 	mov.w	r2, #4294967295
 800c736:	d81a      	bhi.n	800c76e <_strtod_l+0x8c6>
 800c738:	0d1b      	lsrs	r3, r3, #20
 800c73a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c73e:	fa02 f303 	lsl.w	r3, r2, r3
 800c742:	4299      	cmp	r1, r3
 800c744:	d118      	bne.n	800c778 <_strtod_l+0x8d0>
 800c746:	4b2a      	ldr	r3, [pc, #168]	; (800c7f0 <_strtod_l+0x948>)
 800c748:	459a      	cmp	sl, r3
 800c74a:	d102      	bne.n	800c752 <_strtod_l+0x8aa>
 800c74c:	3101      	adds	r1, #1
 800c74e:	f43f adef 	beq.w	800c330 <_strtod_l+0x488>
 800c752:	4b24      	ldr	r3, [pc, #144]	; (800c7e4 <_strtod_l+0x93c>)
 800c754:	ea0a 0303 	and.w	r3, sl, r3
 800c758:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c75c:	f04f 0800 	mov.w	r8, #0
 800c760:	9b04      	ldr	r3, [sp, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1a2      	bne.n	800c6ac <_strtod_l+0x804>
 800c766:	e5ed      	b.n	800c344 <_strtod_l+0x49c>
 800c768:	f04f 33ff 	mov.w	r3, #4294967295
 800c76c:	e7e9      	b.n	800c742 <_strtod_l+0x89a>
 800c76e:	4613      	mov	r3, r2
 800c770:	e7e7      	b.n	800c742 <_strtod_l+0x89a>
 800c772:	ea53 0308 	orrs.w	r3, r3, r8
 800c776:	d08a      	beq.n	800c68e <_strtod_l+0x7e6>
 800c778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c77a:	b1e3      	cbz	r3, 800c7b6 <_strtod_l+0x90e>
 800c77c:	ea13 0f0a 	tst.w	r3, sl
 800c780:	d0ee      	beq.n	800c760 <_strtod_l+0x8b8>
 800c782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c784:	9a04      	ldr	r2, [sp, #16]
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	b1c3      	cbz	r3, 800c7be <_strtod_l+0x916>
 800c78c:	f7ff fb6f 	bl	800be6e <sulp>
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	ec51 0b18 	vmov	r0, r1, d8
 800c798:	f7f3 fd88 	bl	80002ac <__adddf3>
 800c79c:	4680      	mov	r8, r0
 800c79e:	4689      	mov	r9, r1
 800c7a0:	e7de      	b.n	800c760 <_strtod_l+0x8b8>
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c7ac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c7b0:	f04f 38ff 	mov.w	r8, #4294967295
 800c7b4:	e7d4      	b.n	800c760 <_strtod_l+0x8b8>
 800c7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7b8:	ea13 0f08 	tst.w	r3, r8
 800c7bc:	e7e0      	b.n	800c780 <_strtod_l+0x8d8>
 800c7be:	f7ff fb56 	bl	800be6e <sulp>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	ec51 0b18 	vmov	r0, r1, d8
 800c7ca:	f7f3 fd6d 	bl	80002a8 <__aeabi_dsub>
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4680      	mov	r8, r0
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	f7f4 f987 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d0c0      	beq.n	800c760 <_strtod_l+0x8b8>
 800c7de:	e618      	b.n	800c412 <_strtod_l+0x56a>
 800c7e0:	fffffc02 	.word	0xfffffc02
 800c7e4:	7ff00000 	.word	0x7ff00000
 800c7e8:	39500000 	.word	0x39500000
 800c7ec:	000fffff 	.word	0x000fffff
 800c7f0:	7fefffff 	.word	0x7fefffff
 800c7f4:	0800e1e8 	.word	0x0800e1e8
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f7ff fac0 	bl	800bd80 <__ratio>
 800c800:	ec57 6b10 	vmov	r6, r7, d0
 800c804:	ee10 0a10 	vmov	r0, s0
 800c808:	2200      	movs	r2, #0
 800c80a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c80e:	4639      	mov	r1, r7
 800c810:	f7f4 f97e 	bl	8000b10 <__aeabi_dcmple>
 800c814:	2800      	cmp	r0, #0
 800c816:	d071      	beq.n	800c8fc <_strtod_l+0xa54>
 800c818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d17c      	bne.n	800c918 <_strtod_l+0xa70>
 800c81e:	f1b8 0f00 	cmp.w	r8, #0
 800c822:	d15a      	bne.n	800c8da <_strtod_l+0xa32>
 800c824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d15d      	bne.n	800c8e8 <_strtod_l+0xa40>
 800c82c:	4b90      	ldr	r3, [pc, #576]	; (800ca70 <_strtod_l+0xbc8>)
 800c82e:	2200      	movs	r2, #0
 800c830:	4630      	mov	r0, r6
 800c832:	4639      	mov	r1, r7
 800c834:	f7f4 f962 	bl	8000afc <__aeabi_dcmplt>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d15c      	bne.n	800c8f6 <_strtod_l+0xa4e>
 800c83c:	4630      	mov	r0, r6
 800c83e:	4639      	mov	r1, r7
 800c840:	4b8c      	ldr	r3, [pc, #560]	; (800ca74 <_strtod_l+0xbcc>)
 800c842:	2200      	movs	r2, #0
 800c844:	f7f3 fee8 	bl	8000618 <__aeabi_dmul>
 800c848:	4606      	mov	r6, r0
 800c84a:	460f      	mov	r7, r1
 800c84c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c850:	9606      	str	r6, [sp, #24]
 800c852:	9307      	str	r3, [sp, #28]
 800c854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c858:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c85c:	4b86      	ldr	r3, [pc, #536]	; (800ca78 <_strtod_l+0xbd0>)
 800c85e:	ea0a 0303 	and.w	r3, sl, r3
 800c862:	930d      	str	r3, [sp, #52]	; 0x34
 800c864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c866:	4b85      	ldr	r3, [pc, #532]	; (800ca7c <_strtod_l+0xbd4>)
 800c868:	429a      	cmp	r2, r3
 800c86a:	f040 8090 	bne.w	800c98e <_strtod_l+0xae6>
 800c86e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c872:	ec49 8b10 	vmov	d0, r8, r9
 800c876:	f7ff f9b9 	bl	800bbec <__ulp>
 800c87a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c87e:	ec51 0b10 	vmov	r0, r1, d0
 800c882:	f7f3 fec9 	bl	8000618 <__aeabi_dmul>
 800c886:	4642      	mov	r2, r8
 800c888:	464b      	mov	r3, r9
 800c88a:	f7f3 fd0f 	bl	80002ac <__adddf3>
 800c88e:	460b      	mov	r3, r1
 800c890:	4979      	ldr	r1, [pc, #484]	; (800ca78 <_strtod_l+0xbd0>)
 800c892:	4a7b      	ldr	r2, [pc, #492]	; (800ca80 <_strtod_l+0xbd8>)
 800c894:	4019      	ands	r1, r3
 800c896:	4291      	cmp	r1, r2
 800c898:	4680      	mov	r8, r0
 800c89a:	d944      	bls.n	800c926 <_strtod_l+0xa7e>
 800c89c:	ee18 2a90 	vmov	r2, s17
 800c8a0:	4b78      	ldr	r3, [pc, #480]	; (800ca84 <_strtod_l+0xbdc>)
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d104      	bne.n	800c8b0 <_strtod_l+0xa08>
 800c8a6:	ee18 3a10 	vmov	r3, s16
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	f43f ad40 	beq.w	800c330 <_strtod_l+0x488>
 800c8b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ca84 <_strtod_l+0xbdc>
 800c8b4:	f04f 38ff 	mov.w	r8, #4294967295
 800c8b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f7fe fe6a 	bl	800b594 <_Bfree>
 800c8c0:	9905      	ldr	r1, [sp, #20]
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f7fe fe66 	bl	800b594 <_Bfree>
 800c8c8:	4659      	mov	r1, fp
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7fe fe62 	bl	800b594 <_Bfree>
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7fe fe5e 	bl	800b594 <_Bfree>
 800c8d8:	e609      	b.n	800c4ee <_strtod_l+0x646>
 800c8da:	f1b8 0f01 	cmp.w	r8, #1
 800c8de:	d103      	bne.n	800c8e8 <_strtod_l+0xa40>
 800c8e0:	f1b9 0f00 	cmp.w	r9, #0
 800c8e4:	f43f ad95 	beq.w	800c412 <_strtod_l+0x56a>
 800c8e8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ca40 <_strtod_l+0xb98>
 800c8ec:	4f60      	ldr	r7, [pc, #384]	; (800ca70 <_strtod_l+0xbc8>)
 800c8ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	e7ae      	b.n	800c854 <_strtod_l+0x9ac>
 800c8f6:	4f5f      	ldr	r7, [pc, #380]	; (800ca74 <_strtod_l+0xbcc>)
 800c8f8:	2600      	movs	r6, #0
 800c8fa:	e7a7      	b.n	800c84c <_strtod_l+0x9a4>
 800c8fc:	4b5d      	ldr	r3, [pc, #372]	; (800ca74 <_strtod_l+0xbcc>)
 800c8fe:	4630      	mov	r0, r6
 800c900:	4639      	mov	r1, r7
 800c902:	2200      	movs	r2, #0
 800c904:	f7f3 fe88 	bl	8000618 <__aeabi_dmul>
 800c908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c90a:	4606      	mov	r6, r0
 800c90c:	460f      	mov	r7, r1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d09c      	beq.n	800c84c <_strtod_l+0x9a4>
 800c912:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c916:	e79d      	b.n	800c854 <_strtod_l+0x9ac>
 800c918:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ca48 <_strtod_l+0xba0>
 800c91c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c920:	ec57 6b17 	vmov	r6, r7, d7
 800c924:	e796      	b.n	800c854 <_strtod_l+0x9ac>
 800c926:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	46ca      	mov	sl, r9
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1c2      	bne.n	800c8b8 <_strtod_l+0xa10>
 800c932:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c938:	0d1b      	lsrs	r3, r3, #20
 800c93a:	051b      	lsls	r3, r3, #20
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d1bb      	bne.n	800c8b8 <_strtod_l+0xa10>
 800c940:	4630      	mov	r0, r6
 800c942:	4639      	mov	r1, r7
 800c944:	f7f4 f9b0 	bl	8000ca8 <__aeabi_d2lz>
 800c948:	f7f3 fe38 	bl	80005bc <__aeabi_l2d>
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f7f3 fca8 	bl	80002a8 <__aeabi_dsub>
 800c958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c95a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c95e:	ea43 0308 	orr.w	r3, r3, r8
 800c962:	4313      	orrs	r3, r2
 800c964:	4606      	mov	r6, r0
 800c966:	460f      	mov	r7, r1
 800c968:	d054      	beq.n	800ca14 <_strtod_l+0xb6c>
 800c96a:	a339      	add	r3, pc, #228	; (adr r3, 800ca50 <_strtod_l+0xba8>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f7f4 f8c4 	bl	8000afc <__aeabi_dcmplt>
 800c974:	2800      	cmp	r0, #0
 800c976:	f47f ace5 	bne.w	800c344 <_strtod_l+0x49c>
 800c97a:	a337      	add	r3, pc, #220	; (adr r3, 800ca58 <_strtod_l+0xbb0>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	4630      	mov	r0, r6
 800c982:	4639      	mov	r1, r7
 800c984:	f7f4 f8d8 	bl	8000b38 <__aeabi_dcmpgt>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d095      	beq.n	800c8b8 <_strtod_l+0xa10>
 800c98c:	e4da      	b.n	800c344 <_strtod_l+0x49c>
 800c98e:	9b04      	ldr	r3, [sp, #16]
 800c990:	b333      	cbz	r3, 800c9e0 <_strtod_l+0xb38>
 800c992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c994:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c998:	d822      	bhi.n	800c9e0 <_strtod_l+0xb38>
 800c99a:	a331      	add	r3, pc, #196	; (adr r3, 800ca60 <_strtod_l+0xbb8>)
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f4 f8b4 	bl	8000b10 <__aeabi_dcmple>
 800c9a8:	b1a0      	cbz	r0, 800c9d4 <_strtod_l+0xb2c>
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7f4 f90b 	bl	8000bc8 <__aeabi_d2uiz>
 800c9b2:	2801      	cmp	r0, #1
 800c9b4:	bf38      	it	cc
 800c9b6:	2001      	movcc	r0, #1
 800c9b8:	f7f3 fdb4 	bl	8000524 <__aeabi_ui2d>
 800c9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	bb23      	cbnz	r3, 800ca0e <_strtod_l+0xb66>
 800c9c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9c8:	9010      	str	r0, [sp, #64]	; 0x40
 800c9ca:	9311      	str	r3, [sp, #68]	; 0x44
 800c9cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c9d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c9d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c9dc:	1a9b      	subs	r3, r3, r2
 800c9de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c9e4:	eeb0 0a48 	vmov.f32	s0, s16
 800c9e8:	eef0 0a68 	vmov.f32	s1, s17
 800c9ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c9f0:	f7ff f8fc 	bl	800bbec <__ulp>
 800c9f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c9f8:	ec53 2b10 	vmov	r2, r3, d0
 800c9fc:	f7f3 fe0c 	bl	8000618 <__aeabi_dmul>
 800ca00:	ec53 2b18 	vmov	r2, r3, d8
 800ca04:	f7f3 fc52 	bl	80002ac <__adddf3>
 800ca08:	4680      	mov	r8, r0
 800ca0a:	4689      	mov	r9, r1
 800ca0c:	e78d      	b.n	800c92a <_strtod_l+0xa82>
 800ca0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ca12:	e7db      	b.n	800c9cc <_strtod_l+0xb24>
 800ca14:	a314      	add	r3, pc, #80	; (adr r3, 800ca68 <_strtod_l+0xbc0>)
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	f7f4 f86f 	bl	8000afc <__aeabi_dcmplt>
 800ca1e:	e7b3      	b.n	800c988 <_strtod_l+0xae0>
 800ca20:	2300      	movs	r3, #0
 800ca22:	930a      	str	r3, [sp, #40]	; 0x28
 800ca24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	f7ff ba7c 	b.w	800bf26 <_strtod_l+0x7e>
 800ca2e:	2a65      	cmp	r2, #101	; 0x65
 800ca30:	f43f ab75 	beq.w	800c11e <_strtod_l+0x276>
 800ca34:	2a45      	cmp	r2, #69	; 0x45
 800ca36:	f43f ab72 	beq.w	800c11e <_strtod_l+0x276>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	f7ff bbaa 	b.w	800c194 <_strtod_l+0x2ec>
 800ca40:	00000000 	.word	0x00000000
 800ca44:	bff00000 	.word	0xbff00000
 800ca48:	00000000 	.word	0x00000000
 800ca4c:	3ff00000 	.word	0x3ff00000
 800ca50:	94a03595 	.word	0x94a03595
 800ca54:	3fdfffff 	.word	0x3fdfffff
 800ca58:	35afe535 	.word	0x35afe535
 800ca5c:	3fe00000 	.word	0x3fe00000
 800ca60:	ffc00000 	.word	0xffc00000
 800ca64:	41dfffff 	.word	0x41dfffff
 800ca68:	94a03595 	.word	0x94a03595
 800ca6c:	3fcfffff 	.word	0x3fcfffff
 800ca70:	3ff00000 	.word	0x3ff00000
 800ca74:	3fe00000 	.word	0x3fe00000
 800ca78:	7ff00000 	.word	0x7ff00000
 800ca7c:	7fe00000 	.word	0x7fe00000
 800ca80:	7c9fffff 	.word	0x7c9fffff
 800ca84:	7fefffff 	.word	0x7fefffff

0800ca88 <_strtod_r>:
 800ca88:	4b01      	ldr	r3, [pc, #4]	; (800ca90 <_strtod_r+0x8>)
 800ca8a:	f7ff ba0d 	b.w	800bea8 <_strtod_l>
 800ca8e:	bf00      	nop
 800ca90:	20000234 	.word	0x20000234

0800ca94 <_strtol_l.constprop.0>:
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca9a:	d001      	beq.n	800caa0 <_strtol_l.constprop.0+0xc>
 800ca9c:	2b24      	cmp	r3, #36	; 0x24
 800ca9e:	d906      	bls.n	800caae <_strtol_l.constprop.0+0x1a>
 800caa0:	f7fd fe3c 	bl	800a71c <__errno>
 800caa4:	2316      	movs	r3, #22
 800caa6:	6003      	str	r3, [r0, #0]
 800caa8:	2000      	movs	r0, #0
 800caaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb94 <_strtol_l.constprop.0+0x100>
 800cab2:	460d      	mov	r5, r1
 800cab4:	462e      	mov	r6, r5
 800cab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cabe:	f017 0708 	ands.w	r7, r7, #8
 800cac2:	d1f7      	bne.n	800cab4 <_strtol_l.constprop.0+0x20>
 800cac4:	2c2d      	cmp	r4, #45	; 0x2d
 800cac6:	d132      	bne.n	800cb2e <_strtol_l.constprop.0+0x9a>
 800cac8:	782c      	ldrb	r4, [r5, #0]
 800caca:	2701      	movs	r7, #1
 800cacc:	1cb5      	adds	r5, r6, #2
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d05b      	beq.n	800cb8a <_strtol_l.constprop.0+0xf6>
 800cad2:	2b10      	cmp	r3, #16
 800cad4:	d109      	bne.n	800caea <_strtol_l.constprop.0+0x56>
 800cad6:	2c30      	cmp	r4, #48	; 0x30
 800cad8:	d107      	bne.n	800caea <_strtol_l.constprop.0+0x56>
 800cada:	782c      	ldrb	r4, [r5, #0]
 800cadc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cae0:	2c58      	cmp	r4, #88	; 0x58
 800cae2:	d14d      	bne.n	800cb80 <_strtol_l.constprop.0+0xec>
 800cae4:	786c      	ldrb	r4, [r5, #1]
 800cae6:	2310      	movs	r3, #16
 800cae8:	3502      	adds	r5, #2
 800caea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800caee:	f108 38ff 	add.w	r8, r8, #4294967295
 800caf2:	f04f 0e00 	mov.w	lr, #0
 800caf6:	fbb8 f9f3 	udiv	r9, r8, r3
 800cafa:	4676      	mov	r6, lr
 800cafc:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb00:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb04:	f1bc 0f09 	cmp.w	ip, #9
 800cb08:	d816      	bhi.n	800cb38 <_strtol_l.constprop.0+0xa4>
 800cb0a:	4664      	mov	r4, ip
 800cb0c:	42a3      	cmp	r3, r4
 800cb0e:	dd24      	ble.n	800cb5a <_strtol_l.constprop.0+0xc6>
 800cb10:	f1be 3fff 	cmp.w	lr, #4294967295
 800cb14:	d008      	beq.n	800cb28 <_strtol_l.constprop.0+0x94>
 800cb16:	45b1      	cmp	r9, r6
 800cb18:	d31c      	bcc.n	800cb54 <_strtol_l.constprop.0+0xc0>
 800cb1a:	d101      	bne.n	800cb20 <_strtol_l.constprop.0+0x8c>
 800cb1c:	45a2      	cmp	sl, r4
 800cb1e:	db19      	blt.n	800cb54 <_strtol_l.constprop.0+0xc0>
 800cb20:	fb06 4603 	mla	r6, r6, r3, r4
 800cb24:	f04f 0e01 	mov.w	lr, #1
 800cb28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb2c:	e7e8      	b.n	800cb00 <_strtol_l.constprop.0+0x6c>
 800cb2e:	2c2b      	cmp	r4, #43	; 0x2b
 800cb30:	bf04      	itt	eq
 800cb32:	782c      	ldrbeq	r4, [r5, #0]
 800cb34:	1cb5      	addeq	r5, r6, #2
 800cb36:	e7ca      	b.n	800cace <_strtol_l.constprop.0+0x3a>
 800cb38:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb3c:	f1bc 0f19 	cmp.w	ip, #25
 800cb40:	d801      	bhi.n	800cb46 <_strtol_l.constprop.0+0xb2>
 800cb42:	3c37      	subs	r4, #55	; 0x37
 800cb44:	e7e2      	b.n	800cb0c <_strtol_l.constprop.0+0x78>
 800cb46:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb4a:	f1bc 0f19 	cmp.w	ip, #25
 800cb4e:	d804      	bhi.n	800cb5a <_strtol_l.constprop.0+0xc6>
 800cb50:	3c57      	subs	r4, #87	; 0x57
 800cb52:	e7db      	b.n	800cb0c <_strtol_l.constprop.0+0x78>
 800cb54:	f04f 3eff 	mov.w	lr, #4294967295
 800cb58:	e7e6      	b.n	800cb28 <_strtol_l.constprop.0+0x94>
 800cb5a:	f1be 3fff 	cmp.w	lr, #4294967295
 800cb5e:	d105      	bne.n	800cb6c <_strtol_l.constprop.0+0xd8>
 800cb60:	2322      	movs	r3, #34	; 0x22
 800cb62:	6003      	str	r3, [r0, #0]
 800cb64:	4646      	mov	r6, r8
 800cb66:	b942      	cbnz	r2, 800cb7a <_strtol_l.constprop.0+0xe6>
 800cb68:	4630      	mov	r0, r6
 800cb6a:	e79e      	b.n	800caaa <_strtol_l.constprop.0+0x16>
 800cb6c:	b107      	cbz	r7, 800cb70 <_strtol_l.constprop.0+0xdc>
 800cb6e:	4276      	negs	r6, r6
 800cb70:	2a00      	cmp	r2, #0
 800cb72:	d0f9      	beq.n	800cb68 <_strtol_l.constprop.0+0xd4>
 800cb74:	f1be 0f00 	cmp.w	lr, #0
 800cb78:	d000      	beq.n	800cb7c <_strtol_l.constprop.0+0xe8>
 800cb7a:	1e69      	subs	r1, r5, #1
 800cb7c:	6011      	str	r1, [r2, #0]
 800cb7e:	e7f3      	b.n	800cb68 <_strtol_l.constprop.0+0xd4>
 800cb80:	2430      	movs	r4, #48	; 0x30
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1b1      	bne.n	800caea <_strtol_l.constprop.0+0x56>
 800cb86:	2308      	movs	r3, #8
 800cb88:	e7af      	b.n	800caea <_strtol_l.constprop.0+0x56>
 800cb8a:	2c30      	cmp	r4, #48	; 0x30
 800cb8c:	d0a5      	beq.n	800cada <_strtol_l.constprop.0+0x46>
 800cb8e:	230a      	movs	r3, #10
 800cb90:	e7ab      	b.n	800caea <_strtol_l.constprop.0+0x56>
 800cb92:	bf00      	nop
 800cb94:	0800e211 	.word	0x0800e211

0800cb98 <_strtol_r>:
 800cb98:	f7ff bf7c 	b.w	800ca94 <_strtol_l.constprop.0>

0800cb9c <__ssputs_r>:
 800cb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba0:	688e      	ldr	r6, [r1, #8]
 800cba2:	461f      	mov	r7, r3
 800cba4:	42be      	cmp	r6, r7
 800cba6:	680b      	ldr	r3, [r1, #0]
 800cba8:	4682      	mov	sl, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	4690      	mov	r8, r2
 800cbae:	d82c      	bhi.n	800cc0a <__ssputs_r+0x6e>
 800cbb0:	898a      	ldrh	r2, [r1, #12]
 800cbb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbb6:	d026      	beq.n	800cc06 <__ssputs_r+0x6a>
 800cbb8:	6965      	ldr	r5, [r4, #20]
 800cbba:	6909      	ldr	r1, [r1, #16]
 800cbbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbc0:	eba3 0901 	sub.w	r9, r3, r1
 800cbc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbc8:	1c7b      	adds	r3, r7, #1
 800cbca:	444b      	add	r3, r9
 800cbcc:	106d      	asrs	r5, r5, #1
 800cbce:	429d      	cmp	r5, r3
 800cbd0:	bf38      	it	cc
 800cbd2:	461d      	movcc	r5, r3
 800cbd4:	0553      	lsls	r3, r2, #21
 800cbd6:	d527      	bpl.n	800cc28 <__ssputs_r+0x8c>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	f7fc fd15 	bl	8009608 <_malloc_r>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	b360      	cbz	r0, 800cc3c <__ssputs_r+0xa0>
 800cbe2:	6921      	ldr	r1, [r4, #16]
 800cbe4:	464a      	mov	r2, r9
 800cbe6:	f000 fa0b 	bl	800d000 <memcpy>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	6126      	str	r6, [r4, #16]
 800cbf8:	6165      	str	r5, [r4, #20]
 800cbfa:	444e      	add	r6, r9
 800cbfc:	eba5 0509 	sub.w	r5, r5, r9
 800cc00:	6026      	str	r6, [r4, #0]
 800cc02:	60a5      	str	r5, [r4, #8]
 800cc04:	463e      	mov	r6, r7
 800cc06:	42be      	cmp	r6, r7
 800cc08:	d900      	bls.n	800cc0c <__ssputs_r+0x70>
 800cc0a:	463e      	mov	r6, r7
 800cc0c:	6820      	ldr	r0, [r4, #0]
 800cc0e:	4632      	mov	r2, r6
 800cc10:	4641      	mov	r1, r8
 800cc12:	f000 f9c9 	bl	800cfa8 <memmove>
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	1b9b      	subs	r3, r3, r6
 800cc1a:	60a3      	str	r3, [r4, #8]
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	4433      	add	r3, r6
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	2000      	movs	r0, #0
 800cc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc28:	462a      	mov	r2, r5
 800cc2a:	f000 fd9e 	bl	800d76a <_realloc_r>
 800cc2e:	4606      	mov	r6, r0
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d1e0      	bne.n	800cbf6 <__ssputs_r+0x5a>
 800cc34:	6921      	ldr	r1, [r4, #16]
 800cc36:	4650      	mov	r0, sl
 800cc38:	f7fe fc20 	bl	800b47c <_free_r>
 800cc3c:	230c      	movs	r3, #12
 800cc3e:	f8ca 3000 	str.w	r3, [sl]
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc48:	81a3      	strh	r3, [r4, #12]
 800cc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4e:	e7e9      	b.n	800cc24 <__ssputs_r+0x88>

0800cc50 <_svfiprintf_r>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	4698      	mov	r8, r3
 800cc56:	898b      	ldrh	r3, [r1, #12]
 800cc58:	061b      	lsls	r3, r3, #24
 800cc5a:	b09d      	sub	sp, #116	; 0x74
 800cc5c:	4607      	mov	r7, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	4614      	mov	r4, r2
 800cc62:	d50e      	bpl.n	800cc82 <_svfiprintf_r+0x32>
 800cc64:	690b      	ldr	r3, [r1, #16]
 800cc66:	b963      	cbnz	r3, 800cc82 <_svfiprintf_r+0x32>
 800cc68:	2140      	movs	r1, #64	; 0x40
 800cc6a:	f7fc fccd 	bl	8009608 <_malloc_r>
 800cc6e:	6028      	str	r0, [r5, #0]
 800cc70:	6128      	str	r0, [r5, #16]
 800cc72:	b920      	cbnz	r0, 800cc7e <_svfiprintf_r+0x2e>
 800cc74:	230c      	movs	r3, #12
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	f04f 30ff 	mov.w	r0, #4294967295
 800cc7c:	e0d0      	b.n	800ce20 <_svfiprintf_r+0x1d0>
 800cc7e:	2340      	movs	r3, #64	; 0x40
 800cc80:	616b      	str	r3, [r5, #20]
 800cc82:	2300      	movs	r3, #0
 800cc84:	9309      	str	r3, [sp, #36]	; 0x24
 800cc86:	2320      	movs	r3, #32
 800cc88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc90:	2330      	movs	r3, #48	; 0x30
 800cc92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce38 <_svfiprintf_r+0x1e8>
 800cc96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc9a:	f04f 0901 	mov.w	r9, #1
 800cc9e:	4623      	mov	r3, r4
 800cca0:	469a      	mov	sl, r3
 800cca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca6:	b10a      	cbz	r2, 800ccac <_svfiprintf_r+0x5c>
 800cca8:	2a25      	cmp	r2, #37	; 0x25
 800ccaa:	d1f9      	bne.n	800cca0 <_svfiprintf_r+0x50>
 800ccac:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb0:	d00b      	beq.n	800ccca <_svfiprintf_r+0x7a>
 800ccb2:	465b      	mov	r3, fp
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7ff ff6f 	bl	800cb9c <__ssputs_r>
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	f000 80a9 	beq.w	800ce16 <_svfiprintf_r+0x1c6>
 800ccc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccc6:	445a      	add	r2, fp
 800ccc8:	9209      	str	r2, [sp, #36]	; 0x24
 800ccca:	f89a 3000 	ldrb.w	r3, [sl]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 80a1 	beq.w	800ce16 <_svfiprintf_r+0x1c6>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccde:	f10a 0a01 	add.w	sl, sl, #1
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	9307      	str	r3, [sp, #28]
 800cce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccea:	931a      	str	r3, [sp, #104]	; 0x68
 800ccec:	4654      	mov	r4, sl
 800ccee:	2205      	movs	r2, #5
 800ccf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf4:	4850      	ldr	r0, [pc, #320]	; (800ce38 <_svfiprintf_r+0x1e8>)
 800ccf6:	f7f3 fa7b 	bl	80001f0 <memchr>
 800ccfa:	9a04      	ldr	r2, [sp, #16]
 800ccfc:	b9d8      	cbnz	r0, 800cd36 <_svfiprintf_r+0xe6>
 800ccfe:	06d0      	lsls	r0, r2, #27
 800cd00:	bf44      	itt	mi
 800cd02:	2320      	movmi	r3, #32
 800cd04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd08:	0711      	lsls	r1, r2, #28
 800cd0a:	bf44      	itt	mi
 800cd0c:	232b      	movmi	r3, #43	; 0x2b
 800cd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd12:	f89a 3000 	ldrb.w	r3, [sl]
 800cd16:	2b2a      	cmp	r3, #42	; 0x2a
 800cd18:	d015      	beq.n	800cd46 <_svfiprintf_r+0xf6>
 800cd1a:	9a07      	ldr	r2, [sp, #28]
 800cd1c:	4654      	mov	r4, sl
 800cd1e:	2000      	movs	r0, #0
 800cd20:	f04f 0c0a 	mov.w	ip, #10
 800cd24:	4621      	mov	r1, r4
 800cd26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd2a:	3b30      	subs	r3, #48	; 0x30
 800cd2c:	2b09      	cmp	r3, #9
 800cd2e:	d94d      	bls.n	800cdcc <_svfiprintf_r+0x17c>
 800cd30:	b1b0      	cbz	r0, 800cd60 <_svfiprintf_r+0x110>
 800cd32:	9207      	str	r2, [sp, #28]
 800cd34:	e014      	b.n	800cd60 <_svfiprintf_r+0x110>
 800cd36:	eba0 0308 	sub.w	r3, r0, r8
 800cd3a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	9304      	str	r3, [sp, #16]
 800cd42:	46a2      	mov	sl, r4
 800cd44:	e7d2      	b.n	800ccec <_svfiprintf_r+0x9c>
 800cd46:	9b03      	ldr	r3, [sp, #12]
 800cd48:	1d19      	adds	r1, r3, #4
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	9103      	str	r1, [sp, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	bfbb      	ittet	lt
 800cd52:	425b      	neglt	r3, r3
 800cd54:	f042 0202 	orrlt.w	r2, r2, #2
 800cd58:	9307      	strge	r3, [sp, #28]
 800cd5a:	9307      	strlt	r3, [sp, #28]
 800cd5c:	bfb8      	it	lt
 800cd5e:	9204      	strlt	r2, [sp, #16]
 800cd60:	7823      	ldrb	r3, [r4, #0]
 800cd62:	2b2e      	cmp	r3, #46	; 0x2e
 800cd64:	d10c      	bne.n	800cd80 <_svfiprintf_r+0x130>
 800cd66:	7863      	ldrb	r3, [r4, #1]
 800cd68:	2b2a      	cmp	r3, #42	; 0x2a
 800cd6a:	d134      	bne.n	800cdd6 <_svfiprintf_r+0x186>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	1d1a      	adds	r2, r3, #4
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	9203      	str	r2, [sp, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	bfb8      	it	lt
 800cd78:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd7c:	3402      	adds	r4, #2
 800cd7e:	9305      	str	r3, [sp, #20]
 800cd80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce48 <_svfiprintf_r+0x1f8>
 800cd84:	7821      	ldrb	r1, [r4, #0]
 800cd86:	2203      	movs	r2, #3
 800cd88:	4650      	mov	r0, sl
 800cd8a:	f7f3 fa31 	bl	80001f0 <memchr>
 800cd8e:	b138      	cbz	r0, 800cda0 <_svfiprintf_r+0x150>
 800cd90:	9b04      	ldr	r3, [sp, #16]
 800cd92:	eba0 000a 	sub.w	r0, r0, sl
 800cd96:	2240      	movs	r2, #64	; 0x40
 800cd98:	4082      	lsls	r2, r0
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	3401      	adds	r4, #1
 800cd9e:	9304      	str	r3, [sp, #16]
 800cda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda4:	4825      	ldr	r0, [pc, #148]	; (800ce3c <_svfiprintf_r+0x1ec>)
 800cda6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdaa:	2206      	movs	r2, #6
 800cdac:	f7f3 fa20 	bl	80001f0 <memchr>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d038      	beq.n	800ce26 <_svfiprintf_r+0x1d6>
 800cdb4:	4b22      	ldr	r3, [pc, #136]	; (800ce40 <_svfiprintf_r+0x1f0>)
 800cdb6:	bb1b      	cbnz	r3, 800ce00 <_svfiprintf_r+0x1b0>
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	3307      	adds	r3, #7
 800cdbc:	f023 0307 	bic.w	r3, r3, #7
 800cdc0:	3308      	adds	r3, #8
 800cdc2:	9303      	str	r3, [sp, #12]
 800cdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc6:	4433      	add	r3, r6
 800cdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdca:	e768      	b.n	800cc9e <_svfiprintf_r+0x4e>
 800cdcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd0:	460c      	mov	r4, r1
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	e7a6      	b.n	800cd24 <_svfiprintf_r+0xd4>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	3401      	adds	r4, #1
 800cdda:	9305      	str	r3, [sp, #20]
 800cddc:	4619      	mov	r1, r3
 800cdde:	f04f 0c0a 	mov.w	ip, #10
 800cde2:	4620      	mov	r0, r4
 800cde4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cde8:	3a30      	subs	r2, #48	; 0x30
 800cdea:	2a09      	cmp	r2, #9
 800cdec:	d903      	bls.n	800cdf6 <_svfiprintf_r+0x1a6>
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d0c6      	beq.n	800cd80 <_svfiprintf_r+0x130>
 800cdf2:	9105      	str	r1, [sp, #20]
 800cdf4:	e7c4      	b.n	800cd80 <_svfiprintf_r+0x130>
 800cdf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e7f0      	b.n	800cde2 <_svfiprintf_r+0x192>
 800ce00:	ab03      	add	r3, sp, #12
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	462a      	mov	r2, r5
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <_svfiprintf_r+0x1f4>)
 800ce08:	a904      	add	r1, sp, #16
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	f7fc fd28 	bl	8009860 <_printf_float>
 800ce10:	1c42      	adds	r2, r0, #1
 800ce12:	4606      	mov	r6, r0
 800ce14:	d1d6      	bne.n	800cdc4 <_svfiprintf_r+0x174>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	065b      	lsls	r3, r3, #25
 800ce1a:	f53f af2d 	bmi.w	800cc78 <_svfiprintf_r+0x28>
 800ce1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce20:	b01d      	add	sp, #116	; 0x74
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce26:	ab03      	add	r3, sp, #12
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	462a      	mov	r2, r5
 800ce2c:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <_svfiprintf_r+0x1f4>)
 800ce2e:	a904      	add	r1, sp, #16
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7fc ffb9 	bl	8009da8 <_printf_i>
 800ce36:	e7eb      	b.n	800ce10 <_svfiprintf_r+0x1c0>
 800ce38:	0800e311 	.word	0x0800e311
 800ce3c:	0800e31b 	.word	0x0800e31b
 800ce40:	08009861 	.word	0x08009861
 800ce44:	0800cb9d 	.word	0x0800cb9d
 800ce48:	0800e317 	.word	0x0800e317

0800ce4c <__sflush_r>:
 800ce4c:	898a      	ldrh	r2, [r1, #12]
 800ce4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce52:	4605      	mov	r5, r0
 800ce54:	0710      	lsls	r0, r2, #28
 800ce56:	460c      	mov	r4, r1
 800ce58:	d458      	bmi.n	800cf0c <__sflush_r+0xc0>
 800ce5a:	684b      	ldr	r3, [r1, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dc05      	bgt.n	800ce6c <__sflush_r+0x20>
 800ce60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dc02      	bgt.n	800ce6c <__sflush_r+0x20>
 800ce66:	2000      	movs	r0, #0
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce6e:	2e00      	cmp	r6, #0
 800ce70:	d0f9      	beq.n	800ce66 <__sflush_r+0x1a>
 800ce72:	2300      	movs	r3, #0
 800ce74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce78:	682f      	ldr	r7, [r5, #0]
 800ce7a:	6a21      	ldr	r1, [r4, #32]
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	d032      	beq.n	800cee6 <__sflush_r+0x9a>
 800ce80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	075a      	lsls	r2, r3, #29
 800ce86:	d505      	bpl.n	800ce94 <__sflush_r+0x48>
 800ce88:	6863      	ldr	r3, [r4, #4]
 800ce8a:	1ac0      	subs	r0, r0, r3
 800ce8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce8e:	b10b      	cbz	r3, 800ce94 <__sflush_r+0x48>
 800ce90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce92:	1ac0      	subs	r0, r0, r3
 800ce94:	2300      	movs	r3, #0
 800ce96:	4602      	mov	r2, r0
 800ce98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce9a:	6a21      	ldr	r1, [r4, #32]
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b0      	blx	r6
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	d106      	bne.n	800ceb4 <__sflush_r+0x68>
 800cea6:	6829      	ldr	r1, [r5, #0]
 800cea8:	291d      	cmp	r1, #29
 800ceaa:	d82b      	bhi.n	800cf04 <__sflush_r+0xb8>
 800ceac:	4a29      	ldr	r2, [pc, #164]	; (800cf54 <__sflush_r+0x108>)
 800ceae:	410a      	asrs	r2, r1
 800ceb0:	07d6      	lsls	r6, r2, #31
 800ceb2:	d427      	bmi.n	800cf04 <__sflush_r+0xb8>
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	6062      	str	r2, [r4, #4]
 800ceb8:	04d9      	lsls	r1, r3, #19
 800ceba:	6922      	ldr	r2, [r4, #16]
 800cebc:	6022      	str	r2, [r4, #0]
 800cebe:	d504      	bpl.n	800ceca <__sflush_r+0x7e>
 800cec0:	1c42      	adds	r2, r0, #1
 800cec2:	d101      	bne.n	800cec8 <__sflush_r+0x7c>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	b903      	cbnz	r3, 800ceca <__sflush_r+0x7e>
 800cec8:	6560      	str	r0, [r4, #84]	; 0x54
 800ceca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cecc:	602f      	str	r7, [r5, #0]
 800cece:	2900      	cmp	r1, #0
 800ced0:	d0c9      	beq.n	800ce66 <__sflush_r+0x1a>
 800ced2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ced6:	4299      	cmp	r1, r3
 800ced8:	d002      	beq.n	800cee0 <__sflush_r+0x94>
 800ceda:	4628      	mov	r0, r5
 800cedc:	f7fe face 	bl	800b47c <_free_r>
 800cee0:	2000      	movs	r0, #0
 800cee2:	6360      	str	r0, [r4, #52]	; 0x34
 800cee4:	e7c0      	b.n	800ce68 <__sflush_r+0x1c>
 800cee6:	2301      	movs	r3, #1
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b0      	blx	r6
 800ceec:	1c41      	adds	r1, r0, #1
 800ceee:	d1c8      	bne.n	800ce82 <__sflush_r+0x36>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0c5      	beq.n	800ce82 <__sflush_r+0x36>
 800cef6:	2b1d      	cmp	r3, #29
 800cef8:	d001      	beq.n	800cefe <__sflush_r+0xb2>
 800cefa:	2b16      	cmp	r3, #22
 800cefc:	d101      	bne.n	800cf02 <__sflush_r+0xb6>
 800cefe:	602f      	str	r7, [r5, #0]
 800cf00:	e7b1      	b.n	800ce66 <__sflush_r+0x1a>
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	e7ad      	b.n	800ce68 <__sflush_r+0x1c>
 800cf0c:	690f      	ldr	r7, [r1, #16]
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	d0a9      	beq.n	800ce66 <__sflush_r+0x1a>
 800cf12:	0793      	lsls	r3, r2, #30
 800cf14:	680e      	ldr	r6, [r1, #0]
 800cf16:	bf08      	it	eq
 800cf18:	694b      	ldreq	r3, [r1, #20]
 800cf1a:	600f      	str	r7, [r1, #0]
 800cf1c:	bf18      	it	ne
 800cf1e:	2300      	movne	r3, #0
 800cf20:	eba6 0807 	sub.w	r8, r6, r7
 800cf24:	608b      	str	r3, [r1, #8]
 800cf26:	f1b8 0f00 	cmp.w	r8, #0
 800cf2a:	dd9c      	ble.n	800ce66 <__sflush_r+0x1a>
 800cf2c:	6a21      	ldr	r1, [r4, #32]
 800cf2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf30:	4643      	mov	r3, r8
 800cf32:	463a      	mov	r2, r7
 800cf34:	4628      	mov	r0, r5
 800cf36:	47b0      	blx	r6
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	dc06      	bgt.n	800cf4a <__sflush_r+0xfe>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf42:	81a3      	strh	r3, [r4, #12]
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295
 800cf48:	e78e      	b.n	800ce68 <__sflush_r+0x1c>
 800cf4a:	4407      	add	r7, r0
 800cf4c:	eba8 0800 	sub.w	r8, r8, r0
 800cf50:	e7e9      	b.n	800cf26 <__sflush_r+0xda>
 800cf52:	bf00      	nop
 800cf54:	dfbffffe 	.word	0xdfbffffe

0800cf58 <_fflush_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	690b      	ldr	r3, [r1, #16]
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	b913      	cbnz	r3, 800cf68 <_fflush_r+0x10>
 800cf62:	2500      	movs	r5, #0
 800cf64:	4628      	mov	r0, r5
 800cf66:	bd38      	pop	{r3, r4, r5, pc}
 800cf68:	b118      	cbz	r0, 800cf72 <_fflush_r+0x1a>
 800cf6a:	6a03      	ldr	r3, [r0, #32]
 800cf6c:	b90b      	cbnz	r3, 800cf72 <_fflush_r+0x1a>
 800cf6e:	f7fd fad9 	bl	800a524 <__sinit>
 800cf72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d0f3      	beq.n	800cf62 <_fflush_r+0xa>
 800cf7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf7c:	07d0      	lsls	r0, r2, #31
 800cf7e:	d404      	bmi.n	800cf8a <_fflush_r+0x32>
 800cf80:	0599      	lsls	r1, r3, #22
 800cf82:	d402      	bmi.n	800cf8a <_fflush_r+0x32>
 800cf84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf86:	f7fd fbf4 	bl	800a772 <__retarget_lock_acquire_recursive>
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	f7ff ff5d 	bl	800ce4c <__sflush_r>
 800cf92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf94:	07da      	lsls	r2, r3, #31
 800cf96:	4605      	mov	r5, r0
 800cf98:	d4e4      	bmi.n	800cf64 <_fflush_r+0xc>
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	059b      	lsls	r3, r3, #22
 800cf9e:	d4e1      	bmi.n	800cf64 <_fflush_r+0xc>
 800cfa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfa2:	f7fd fbe7 	bl	800a774 <__retarget_lock_release_recursive>
 800cfa6:	e7dd      	b.n	800cf64 <_fflush_r+0xc>

0800cfa8 <memmove>:
 800cfa8:	4288      	cmp	r0, r1
 800cfaa:	b510      	push	{r4, lr}
 800cfac:	eb01 0402 	add.w	r4, r1, r2
 800cfb0:	d902      	bls.n	800cfb8 <memmove+0x10>
 800cfb2:	4284      	cmp	r4, r0
 800cfb4:	4623      	mov	r3, r4
 800cfb6:	d807      	bhi.n	800cfc8 <memmove+0x20>
 800cfb8:	1e43      	subs	r3, r0, #1
 800cfba:	42a1      	cmp	r1, r4
 800cfbc:	d008      	beq.n	800cfd0 <memmove+0x28>
 800cfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc6:	e7f8      	b.n	800cfba <memmove+0x12>
 800cfc8:	4402      	add	r2, r0
 800cfca:	4601      	mov	r1, r0
 800cfcc:	428a      	cmp	r2, r1
 800cfce:	d100      	bne.n	800cfd2 <memmove+0x2a>
 800cfd0:	bd10      	pop	{r4, pc}
 800cfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfda:	e7f7      	b.n	800cfcc <memmove+0x24>

0800cfdc <strncmp>:
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	b16a      	cbz	r2, 800cffc <strncmp+0x20>
 800cfe0:	3901      	subs	r1, #1
 800cfe2:	1884      	adds	r4, r0, r2
 800cfe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfe8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d103      	bne.n	800cff8 <strncmp+0x1c>
 800cff0:	42a0      	cmp	r0, r4
 800cff2:	d001      	beq.n	800cff8 <strncmp+0x1c>
 800cff4:	2a00      	cmp	r2, #0
 800cff6:	d1f5      	bne.n	800cfe4 <strncmp+0x8>
 800cff8:	1ad0      	subs	r0, r2, r3
 800cffa:	bd10      	pop	{r4, pc}
 800cffc:	4610      	mov	r0, r2
 800cffe:	e7fc      	b.n	800cffa <strncmp+0x1e>

0800d000 <memcpy>:
 800d000:	440a      	add	r2, r1
 800d002:	4291      	cmp	r1, r2
 800d004:	f100 33ff 	add.w	r3, r0, #4294967295
 800d008:	d100      	bne.n	800d00c <memcpy+0xc>
 800d00a:	4770      	bx	lr
 800d00c:	b510      	push	{r4, lr}
 800d00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d016:	4291      	cmp	r1, r2
 800d018:	d1f9      	bne.n	800d00e <memcpy+0xe>
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	0000      	movs	r0, r0
	...

0800d020 <nan>:
 800d020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d028 <nan+0x8>
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	00000000 	.word	0x00000000
 800d02c:	7ff80000 	.word	0x7ff80000

0800d030 <__assert_func>:
 800d030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d032:	4614      	mov	r4, r2
 800d034:	461a      	mov	r2, r3
 800d036:	4b09      	ldr	r3, [pc, #36]	; (800d05c <__assert_func+0x2c>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4605      	mov	r5, r0
 800d03c:	68d8      	ldr	r0, [r3, #12]
 800d03e:	b14c      	cbz	r4, 800d054 <__assert_func+0x24>
 800d040:	4b07      	ldr	r3, [pc, #28]	; (800d060 <__assert_func+0x30>)
 800d042:	9100      	str	r1, [sp, #0]
 800d044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d048:	4906      	ldr	r1, [pc, #24]	; (800d064 <__assert_func+0x34>)
 800d04a:	462b      	mov	r3, r5
 800d04c:	f000 fbca 	bl	800d7e4 <fiprintf>
 800d050:	f000 fbda 	bl	800d808 <abort>
 800d054:	4b04      	ldr	r3, [pc, #16]	; (800d068 <__assert_func+0x38>)
 800d056:	461c      	mov	r4, r3
 800d058:	e7f3      	b.n	800d042 <__assert_func+0x12>
 800d05a:	bf00      	nop
 800d05c:	20000230 	.word	0x20000230
 800d060:	0800e32a 	.word	0x0800e32a
 800d064:	0800e337 	.word	0x0800e337
 800d068:	0800e365 	.word	0x0800e365

0800d06c <_calloc_r>:
 800d06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d06e:	fba1 2402 	umull	r2, r4, r1, r2
 800d072:	b94c      	cbnz	r4, 800d088 <_calloc_r+0x1c>
 800d074:	4611      	mov	r1, r2
 800d076:	9201      	str	r2, [sp, #4]
 800d078:	f7fc fac6 	bl	8009608 <_malloc_r>
 800d07c:	9a01      	ldr	r2, [sp, #4]
 800d07e:	4605      	mov	r5, r0
 800d080:	b930      	cbnz	r0, 800d090 <_calloc_r+0x24>
 800d082:	4628      	mov	r0, r5
 800d084:	b003      	add	sp, #12
 800d086:	bd30      	pop	{r4, r5, pc}
 800d088:	220c      	movs	r2, #12
 800d08a:	6002      	str	r2, [r0, #0]
 800d08c:	2500      	movs	r5, #0
 800d08e:	e7f8      	b.n	800d082 <_calloc_r+0x16>
 800d090:	4621      	mov	r1, r4
 800d092:	f7fd fae0 	bl	800a656 <memset>
 800d096:	e7f4      	b.n	800d082 <_calloc_r+0x16>

0800d098 <rshift>:
 800d098:	6903      	ldr	r3, [r0, #16]
 800d09a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d09e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d0a6:	f100 0414 	add.w	r4, r0, #20
 800d0aa:	dd45      	ble.n	800d138 <rshift+0xa0>
 800d0ac:	f011 011f 	ands.w	r1, r1, #31
 800d0b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d0b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d0b8:	d10c      	bne.n	800d0d4 <rshift+0x3c>
 800d0ba:	f100 0710 	add.w	r7, r0, #16
 800d0be:	4629      	mov	r1, r5
 800d0c0:	42b1      	cmp	r1, r6
 800d0c2:	d334      	bcc.n	800d12e <rshift+0x96>
 800d0c4:	1a9b      	subs	r3, r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	1eea      	subs	r2, r5, #3
 800d0ca:	4296      	cmp	r6, r2
 800d0cc:	bf38      	it	cc
 800d0ce:	2300      	movcc	r3, #0
 800d0d0:	4423      	add	r3, r4
 800d0d2:	e015      	b.n	800d100 <rshift+0x68>
 800d0d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0d8:	f1c1 0820 	rsb	r8, r1, #32
 800d0dc:	40cf      	lsrs	r7, r1
 800d0de:	f105 0e04 	add.w	lr, r5, #4
 800d0e2:	46a1      	mov	r9, r4
 800d0e4:	4576      	cmp	r6, lr
 800d0e6:	46f4      	mov	ip, lr
 800d0e8:	d815      	bhi.n	800d116 <rshift+0x7e>
 800d0ea:	1a9a      	subs	r2, r3, r2
 800d0ec:	0092      	lsls	r2, r2, #2
 800d0ee:	3a04      	subs	r2, #4
 800d0f0:	3501      	adds	r5, #1
 800d0f2:	42ae      	cmp	r6, r5
 800d0f4:	bf38      	it	cc
 800d0f6:	2200      	movcc	r2, #0
 800d0f8:	18a3      	adds	r3, r4, r2
 800d0fa:	50a7      	str	r7, [r4, r2]
 800d0fc:	b107      	cbz	r7, 800d100 <rshift+0x68>
 800d0fe:	3304      	adds	r3, #4
 800d100:	1b1a      	subs	r2, r3, r4
 800d102:	42a3      	cmp	r3, r4
 800d104:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d108:	bf08      	it	eq
 800d10a:	2300      	moveq	r3, #0
 800d10c:	6102      	str	r2, [r0, #16]
 800d10e:	bf08      	it	eq
 800d110:	6143      	streq	r3, [r0, #20]
 800d112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d116:	f8dc c000 	ldr.w	ip, [ip]
 800d11a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d11e:	ea4c 0707 	orr.w	r7, ip, r7
 800d122:	f849 7b04 	str.w	r7, [r9], #4
 800d126:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d12a:	40cf      	lsrs	r7, r1
 800d12c:	e7da      	b.n	800d0e4 <rshift+0x4c>
 800d12e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d132:	f847 cf04 	str.w	ip, [r7, #4]!
 800d136:	e7c3      	b.n	800d0c0 <rshift+0x28>
 800d138:	4623      	mov	r3, r4
 800d13a:	e7e1      	b.n	800d100 <rshift+0x68>

0800d13c <__hexdig_fun>:
 800d13c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d140:	2b09      	cmp	r3, #9
 800d142:	d802      	bhi.n	800d14a <__hexdig_fun+0xe>
 800d144:	3820      	subs	r0, #32
 800d146:	b2c0      	uxtb	r0, r0
 800d148:	4770      	bx	lr
 800d14a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d801      	bhi.n	800d156 <__hexdig_fun+0x1a>
 800d152:	3847      	subs	r0, #71	; 0x47
 800d154:	e7f7      	b.n	800d146 <__hexdig_fun+0xa>
 800d156:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	d801      	bhi.n	800d162 <__hexdig_fun+0x26>
 800d15e:	3827      	subs	r0, #39	; 0x27
 800d160:	e7f1      	b.n	800d146 <__hexdig_fun+0xa>
 800d162:	2000      	movs	r0, #0
 800d164:	4770      	bx	lr
	...

0800d168 <__gethex>:
 800d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	4617      	mov	r7, r2
 800d16e:	680a      	ldr	r2, [r1, #0]
 800d170:	b085      	sub	sp, #20
 800d172:	f102 0b02 	add.w	fp, r2, #2
 800d176:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d17a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d17e:	4681      	mov	r9, r0
 800d180:	468a      	mov	sl, r1
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	32fe      	adds	r2, #254	; 0xfe
 800d186:	eb02 030b 	add.w	r3, r2, fp
 800d18a:	46d8      	mov	r8, fp
 800d18c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	2830      	cmp	r0, #48	; 0x30
 800d194:	d0f7      	beq.n	800d186 <__gethex+0x1e>
 800d196:	f7ff ffd1 	bl	800d13c <__hexdig_fun>
 800d19a:	4604      	mov	r4, r0
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d138      	bne.n	800d212 <__gethex+0xaa>
 800d1a0:	49a7      	ldr	r1, [pc, #668]	; (800d440 <__gethex+0x2d8>)
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	f7ff ff19 	bl	800cfdc <strncmp>
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d169      	bne.n	800d284 <__gethex+0x11c>
 800d1b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d1b4:	465d      	mov	r5, fp
 800d1b6:	f7ff ffc1 	bl	800d13c <__hexdig_fun>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d064      	beq.n	800d288 <__gethex+0x120>
 800d1be:	465a      	mov	r2, fp
 800d1c0:	7810      	ldrb	r0, [r2, #0]
 800d1c2:	2830      	cmp	r0, #48	; 0x30
 800d1c4:	4690      	mov	r8, r2
 800d1c6:	f102 0201 	add.w	r2, r2, #1
 800d1ca:	d0f9      	beq.n	800d1c0 <__gethex+0x58>
 800d1cc:	f7ff ffb6 	bl	800d13c <__hexdig_fun>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	fab0 f480 	clz	r4, r0
 800d1d6:	0964      	lsrs	r4, r4, #5
 800d1d8:	465e      	mov	r6, fp
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	4642      	mov	r2, r8
 800d1de:	4615      	mov	r5, r2
 800d1e0:	3201      	adds	r2, #1
 800d1e2:	7828      	ldrb	r0, [r5, #0]
 800d1e4:	f7ff ffaa 	bl	800d13c <__hexdig_fun>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d1f8      	bne.n	800d1de <__gethex+0x76>
 800d1ec:	4994      	ldr	r1, [pc, #592]	; (800d440 <__gethex+0x2d8>)
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	f7ff fef3 	bl	800cfdc <strncmp>
 800d1f6:	b978      	cbnz	r0, 800d218 <__gethex+0xb0>
 800d1f8:	b946      	cbnz	r6, 800d20c <__gethex+0xa4>
 800d1fa:	1c6e      	adds	r6, r5, #1
 800d1fc:	4632      	mov	r2, r6
 800d1fe:	4615      	mov	r5, r2
 800d200:	3201      	adds	r2, #1
 800d202:	7828      	ldrb	r0, [r5, #0]
 800d204:	f7ff ff9a 	bl	800d13c <__hexdig_fun>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d1f8      	bne.n	800d1fe <__gethex+0x96>
 800d20c:	1b73      	subs	r3, r6, r5
 800d20e:	009e      	lsls	r6, r3, #2
 800d210:	e004      	b.n	800d21c <__gethex+0xb4>
 800d212:	2400      	movs	r4, #0
 800d214:	4626      	mov	r6, r4
 800d216:	e7e1      	b.n	800d1dc <__gethex+0x74>
 800d218:	2e00      	cmp	r6, #0
 800d21a:	d1f7      	bne.n	800d20c <__gethex+0xa4>
 800d21c:	782b      	ldrb	r3, [r5, #0]
 800d21e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d222:	2b50      	cmp	r3, #80	; 0x50
 800d224:	d13d      	bne.n	800d2a2 <__gethex+0x13a>
 800d226:	786b      	ldrb	r3, [r5, #1]
 800d228:	2b2b      	cmp	r3, #43	; 0x2b
 800d22a:	d02f      	beq.n	800d28c <__gethex+0x124>
 800d22c:	2b2d      	cmp	r3, #45	; 0x2d
 800d22e:	d031      	beq.n	800d294 <__gethex+0x12c>
 800d230:	1c69      	adds	r1, r5, #1
 800d232:	f04f 0b00 	mov.w	fp, #0
 800d236:	7808      	ldrb	r0, [r1, #0]
 800d238:	f7ff ff80 	bl	800d13c <__hexdig_fun>
 800d23c:	1e42      	subs	r2, r0, #1
 800d23e:	b2d2      	uxtb	r2, r2
 800d240:	2a18      	cmp	r2, #24
 800d242:	d82e      	bhi.n	800d2a2 <__gethex+0x13a>
 800d244:	f1a0 0210 	sub.w	r2, r0, #16
 800d248:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d24c:	f7ff ff76 	bl	800d13c <__hexdig_fun>
 800d250:	f100 3cff 	add.w	ip, r0, #4294967295
 800d254:	fa5f fc8c 	uxtb.w	ip, ip
 800d258:	f1bc 0f18 	cmp.w	ip, #24
 800d25c:	d91d      	bls.n	800d29a <__gethex+0x132>
 800d25e:	f1bb 0f00 	cmp.w	fp, #0
 800d262:	d000      	beq.n	800d266 <__gethex+0xfe>
 800d264:	4252      	negs	r2, r2
 800d266:	4416      	add	r6, r2
 800d268:	f8ca 1000 	str.w	r1, [sl]
 800d26c:	b1dc      	cbz	r4, 800d2a6 <__gethex+0x13e>
 800d26e:	9b01      	ldr	r3, [sp, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	bf14      	ite	ne
 800d274:	f04f 0800 	movne.w	r8, #0
 800d278:	f04f 0806 	moveq.w	r8, #6
 800d27c:	4640      	mov	r0, r8
 800d27e:	b005      	add	sp, #20
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	4645      	mov	r5, r8
 800d286:	4626      	mov	r6, r4
 800d288:	2401      	movs	r4, #1
 800d28a:	e7c7      	b.n	800d21c <__gethex+0xb4>
 800d28c:	f04f 0b00 	mov.w	fp, #0
 800d290:	1ca9      	adds	r1, r5, #2
 800d292:	e7d0      	b.n	800d236 <__gethex+0xce>
 800d294:	f04f 0b01 	mov.w	fp, #1
 800d298:	e7fa      	b.n	800d290 <__gethex+0x128>
 800d29a:	230a      	movs	r3, #10
 800d29c:	fb03 0002 	mla	r0, r3, r2, r0
 800d2a0:	e7d0      	b.n	800d244 <__gethex+0xdc>
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	e7e0      	b.n	800d268 <__gethex+0x100>
 800d2a6:	eba5 0308 	sub.w	r3, r5, r8
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	2b07      	cmp	r3, #7
 800d2b0:	dc0a      	bgt.n	800d2c8 <__gethex+0x160>
 800d2b2:	4648      	mov	r0, r9
 800d2b4:	f7fe f92e 	bl	800b514 <_Balloc>
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	b940      	cbnz	r0, 800d2ce <__gethex+0x166>
 800d2bc:	4b61      	ldr	r3, [pc, #388]	; (800d444 <__gethex+0x2dc>)
 800d2be:	4602      	mov	r2, r0
 800d2c0:	21e4      	movs	r1, #228	; 0xe4
 800d2c2:	4861      	ldr	r0, [pc, #388]	; (800d448 <__gethex+0x2e0>)
 800d2c4:	f7ff feb4 	bl	800d030 <__assert_func>
 800d2c8:	3101      	adds	r1, #1
 800d2ca:	105b      	asrs	r3, r3, #1
 800d2cc:	e7ef      	b.n	800d2ae <__gethex+0x146>
 800d2ce:	f100 0a14 	add.w	sl, r0, #20
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	495a      	ldr	r1, [pc, #360]	; (800d440 <__gethex+0x2d8>)
 800d2d6:	f8cd a004 	str.w	sl, [sp, #4]
 800d2da:	469b      	mov	fp, r3
 800d2dc:	45a8      	cmp	r8, r5
 800d2de:	d342      	bcc.n	800d366 <__gethex+0x1fe>
 800d2e0:	9801      	ldr	r0, [sp, #4]
 800d2e2:	f840 bb04 	str.w	fp, [r0], #4
 800d2e6:	eba0 000a 	sub.w	r0, r0, sl
 800d2ea:	1080      	asrs	r0, r0, #2
 800d2ec:	6120      	str	r0, [r4, #16]
 800d2ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d2f2:	4658      	mov	r0, fp
 800d2f4:	f7fe fa00 	bl	800b6f8 <__hi0bits>
 800d2f8:	683d      	ldr	r5, [r7, #0]
 800d2fa:	eba8 0000 	sub.w	r0, r8, r0
 800d2fe:	42a8      	cmp	r0, r5
 800d300:	dd59      	ble.n	800d3b6 <__gethex+0x24e>
 800d302:	eba0 0805 	sub.w	r8, r0, r5
 800d306:	4641      	mov	r1, r8
 800d308:	4620      	mov	r0, r4
 800d30a:	f7fe fd8f 	bl	800be2c <__any_on>
 800d30e:	4683      	mov	fp, r0
 800d310:	b1b8      	cbz	r0, 800d342 <__gethex+0x1da>
 800d312:	f108 33ff 	add.w	r3, r8, #4294967295
 800d316:	1159      	asrs	r1, r3, #5
 800d318:	f003 021f 	and.w	r2, r3, #31
 800d31c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d320:	f04f 0b01 	mov.w	fp, #1
 800d324:	fa0b f202 	lsl.w	r2, fp, r2
 800d328:	420a      	tst	r2, r1
 800d32a:	d00a      	beq.n	800d342 <__gethex+0x1da>
 800d32c:	455b      	cmp	r3, fp
 800d32e:	dd06      	ble.n	800d33e <__gethex+0x1d6>
 800d330:	f1a8 0102 	sub.w	r1, r8, #2
 800d334:	4620      	mov	r0, r4
 800d336:	f7fe fd79 	bl	800be2c <__any_on>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d138      	bne.n	800d3b0 <__gethex+0x248>
 800d33e:	f04f 0b02 	mov.w	fp, #2
 800d342:	4641      	mov	r1, r8
 800d344:	4620      	mov	r0, r4
 800d346:	f7ff fea7 	bl	800d098 <rshift>
 800d34a:	4446      	add	r6, r8
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	42b3      	cmp	r3, r6
 800d350:	da41      	bge.n	800d3d6 <__gethex+0x26e>
 800d352:	4621      	mov	r1, r4
 800d354:	4648      	mov	r0, r9
 800d356:	f7fe f91d 	bl	800b594 <_Bfree>
 800d35a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d35c:	2300      	movs	r3, #0
 800d35e:	6013      	str	r3, [r2, #0]
 800d360:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d364:	e78a      	b.n	800d27c <__gethex+0x114>
 800d366:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d36a:	2a2e      	cmp	r2, #46	; 0x2e
 800d36c:	d014      	beq.n	800d398 <__gethex+0x230>
 800d36e:	2b20      	cmp	r3, #32
 800d370:	d106      	bne.n	800d380 <__gethex+0x218>
 800d372:	9b01      	ldr	r3, [sp, #4]
 800d374:	f843 bb04 	str.w	fp, [r3], #4
 800d378:	f04f 0b00 	mov.w	fp, #0
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	465b      	mov	r3, fp
 800d380:	7828      	ldrb	r0, [r5, #0]
 800d382:	9303      	str	r3, [sp, #12]
 800d384:	f7ff feda 	bl	800d13c <__hexdig_fun>
 800d388:	9b03      	ldr	r3, [sp, #12]
 800d38a:	f000 000f 	and.w	r0, r0, #15
 800d38e:	4098      	lsls	r0, r3
 800d390:	ea4b 0b00 	orr.w	fp, fp, r0
 800d394:	3304      	adds	r3, #4
 800d396:	e7a1      	b.n	800d2dc <__gethex+0x174>
 800d398:	45a8      	cmp	r8, r5
 800d39a:	d8e8      	bhi.n	800d36e <__gethex+0x206>
 800d39c:	2201      	movs	r2, #1
 800d39e:	4628      	mov	r0, r5
 800d3a0:	9303      	str	r3, [sp, #12]
 800d3a2:	f7ff fe1b 	bl	800cfdc <strncmp>
 800d3a6:	4926      	ldr	r1, [pc, #152]	; (800d440 <__gethex+0x2d8>)
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d1df      	bne.n	800d36e <__gethex+0x206>
 800d3ae:	e795      	b.n	800d2dc <__gethex+0x174>
 800d3b0:	f04f 0b03 	mov.w	fp, #3
 800d3b4:	e7c5      	b.n	800d342 <__gethex+0x1da>
 800d3b6:	da0b      	bge.n	800d3d0 <__gethex+0x268>
 800d3b8:	eba5 0800 	sub.w	r8, r5, r0
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4642      	mov	r2, r8
 800d3c0:	4648      	mov	r0, r9
 800d3c2:	f7fe fb01 	bl	800b9c8 <__lshift>
 800d3c6:	eba6 0608 	sub.w	r6, r6, r8
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	f100 0a14 	add.w	sl, r0, #20
 800d3d0:	f04f 0b00 	mov.w	fp, #0
 800d3d4:	e7ba      	b.n	800d34c <__gethex+0x1e4>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	42b3      	cmp	r3, r6
 800d3da:	dd73      	ble.n	800d4c4 <__gethex+0x35c>
 800d3dc:	1b9e      	subs	r6, r3, r6
 800d3de:	42b5      	cmp	r5, r6
 800d3e0:	dc34      	bgt.n	800d44c <__gethex+0x2e4>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d023      	beq.n	800d430 <__gethex+0x2c8>
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d025      	beq.n	800d438 <__gethex+0x2d0>
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d115      	bne.n	800d41c <__gethex+0x2b4>
 800d3f0:	42b5      	cmp	r5, r6
 800d3f2:	d113      	bne.n	800d41c <__gethex+0x2b4>
 800d3f4:	2d01      	cmp	r5, #1
 800d3f6:	d10b      	bne.n	800d410 <__gethex+0x2a8>
 800d3f8:	9a02      	ldr	r2, [sp, #8]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6013      	str	r3, [r2, #0]
 800d3fe:	2301      	movs	r3, #1
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	f8ca 3000 	str.w	r3, [sl]
 800d406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d408:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d40c:	601c      	str	r4, [r3, #0]
 800d40e:	e735      	b.n	800d27c <__gethex+0x114>
 800d410:	1e69      	subs	r1, r5, #1
 800d412:	4620      	mov	r0, r4
 800d414:	f7fe fd0a 	bl	800be2c <__any_on>
 800d418:	2800      	cmp	r0, #0
 800d41a:	d1ed      	bne.n	800d3f8 <__gethex+0x290>
 800d41c:	4621      	mov	r1, r4
 800d41e:	4648      	mov	r0, r9
 800d420:	f7fe f8b8 	bl	800b594 <_Bfree>
 800d424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d426:	2300      	movs	r3, #0
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d42e:	e725      	b.n	800d27c <__gethex+0x114>
 800d430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1f2      	bne.n	800d41c <__gethex+0x2b4>
 800d436:	e7df      	b.n	800d3f8 <__gethex+0x290>
 800d438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1dc      	bne.n	800d3f8 <__gethex+0x290>
 800d43e:	e7ed      	b.n	800d41c <__gethex+0x2b4>
 800d440:	0800e1bc 	.word	0x0800e1bc
 800d444:	0800e053 	.word	0x0800e053
 800d448:	0800e366 	.word	0x0800e366
 800d44c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d450:	f1bb 0f00 	cmp.w	fp, #0
 800d454:	d133      	bne.n	800d4be <__gethex+0x356>
 800d456:	f1b8 0f00 	cmp.w	r8, #0
 800d45a:	d004      	beq.n	800d466 <__gethex+0x2fe>
 800d45c:	4641      	mov	r1, r8
 800d45e:	4620      	mov	r0, r4
 800d460:	f7fe fce4 	bl	800be2c <__any_on>
 800d464:	4683      	mov	fp, r0
 800d466:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d46a:	2301      	movs	r3, #1
 800d46c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d470:	f008 081f 	and.w	r8, r8, #31
 800d474:	fa03 f308 	lsl.w	r3, r3, r8
 800d478:	4213      	tst	r3, r2
 800d47a:	4631      	mov	r1, r6
 800d47c:	4620      	mov	r0, r4
 800d47e:	bf18      	it	ne
 800d480:	f04b 0b02 	orrne.w	fp, fp, #2
 800d484:	1bad      	subs	r5, r5, r6
 800d486:	f7ff fe07 	bl	800d098 <rshift>
 800d48a:	687e      	ldr	r6, [r7, #4]
 800d48c:	f04f 0802 	mov.w	r8, #2
 800d490:	f1bb 0f00 	cmp.w	fp, #0
 800d494:	d04a      	beq.n	800d52c <__gethex+0x3c4>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d016      	beq.n	800d4ca <__gethex+0x362>
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d018      	beq.n	800d4d2 <__gethex+0x36a>
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d109      	bne.n	800d4b8 <__gethex+0x350>
 800d4a4:	f01b 0f02 	tst.w	fp, #2
 800d4a8:	d006      	beq.n	800d4b8 <__gethex+0x350>
 800d4aa:	f8da 3000 	ldr.w	r3, [sl]
 800d4ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800d4b2:	f01b 0f01 	tst.w	fp, #1
 800d4b6:	d10f      	bne.n	800d4d8 <__gethex+0x370>
 800d4b8:	f048 0810 	orr.w	r8, r8, #16
 800d4bc:	e036      	b.n	800d52c <__gethex+0x3c4>
 800d4be:	f04f 0b01 	mov.w	fp, #1
 800d4c2:	e7d0      	b.n	800d466 <__gethex+0x2fe>
 800d4c4:	f04f 0801 	mov.w	r8, #1
 800d4c8:	e7e2      	b.n	800d490 <__gethex+0x328>
 800d4ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4cc:	f1c3 0301 	rsb	r3, r3, #1
 800d4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0ef      	beq.n	800d4b8 <__gethex+0x350>
 800d4d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d4dc:	f104 0214 	add.w	r2, r4, #20
 800d4e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	4694      	mov	ip, r2
 800d4ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d4f6:	d01e      	beq.n	800d536 <__gethex+0x3ce>
 800d4f8:	3101      	adds	r1, #1
 800d4fa:	f8cc 1000 	str.w	r1, [ip]
 800d4fe:	f1b8 0f02 	cmp.w	r8, #2
 800d502:	f104 0214 	add.w	r2, r4, #20
 800d506:	d13d      	bne.n	800d584 <__gethex+0x41c>
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	42ab      	cmp	r3, r5
 800d50e:	d10b      	bne.n	800d528 <__gethex+0x3c0>
 800d510:	1169      	asrs	r1, r5, #5
 800d512:	2301      	movs	r3, #1
 800d514:	f005 051f 	and.w	r5, r5, #31
 800d518:	fa03 f505 	lsl.w	r5, r3, r5
 800d51c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d520:	421d      	tst	r5, r3
 800d522:	bf18      	it	ne
 800d524:	f04f 0801 	movne.w	r8, #1
 800d528:	f048 0820 	orr.w	r8, r8, #32
 800d52c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d52e:	601c      	str	r4, [r3, #0]
 800d530:	9b02      	ldr	r3, [sp, #8]
 800d532:	601e      	str	r6, [r3, #0]
 800d534:	e6a2      	b.n	800d27c <__gethex+0x114>
 800d536:	4290      	cmp	r0, r2
 800d538:	f842 3c04 	str.w	r3, [r2, #-4]
 800d53c:	d8d6      	bhi.n	800d4ec <__gethex+0x384>
 800d53e:	68a2      	ldr	r2, [r4, #8]
 800d540:	4593      	cmp	fp, r2
 800d542:	db17      	blt.n	800d574 <__gethex+0x40c>
 800d544:	6861      	ldr	r1, [r4, #4]
 800d546:	4648      	mov	r0, r9
 800d548:	3101      	adds	r1, #1
 800d54a:	f7fd ffe3 	bl	800b514 <_Balloc>
 800d54e:	4682      	mov	sl, r0
 800d550:	b918      	cbnz	r0, 800d55a <__gethex+0x3f2>
 800d552:	4b1b      	ldr	r3, [pc, #108]	; (800d5c0 <__gethex+0x458>)
 800d554:	4602      	mov	r2, r0
 800d556:	2184      	movs	r1, #132	; 0x84
 800d558:	e6b3      	b.n	800d2c2 <__gethex+0x15a>
 800d55a:	6922      	ldr	r2, [r4, #16]
 800d55c:	3202      	adds	r2, #2
 800d55e:	f104 010c 	add.w	r1, r4, #12
 800d562:	0092      	lsls	r2, r2, #2
 800d564:	300c      	adds	r0, #12
 800d566:	f7ff fd4b 	bl	800d000 <memcpy>
 800d56a:	4621      	mov	r1, r4
 800d56c:	4648      	mov	r0, r9
 800d56e:	f7fe f811 	bl	800b594 <_Bfree>
 800d572:	4654      	mov	r4, sl
 800d574:	6922      	ldr	r2, [r4, #16]
 800d576:	1c51      	adds	r1, r2, #1
 800d578:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d57c:	6121      	str	r1, [r4, #16]
 800d57e:	2101      	movs	r1, #1
 800d580:	6151      	str	r1, [r2, #20]
 800d582:	e7bc      	b.n	800d4fe <__gethex+0x396>
 800d584:	6921      	ldr	r1, [r4, #16]
 800d586:	4559      	cmp	r1, fp
 800d588:	dd0b      	ble.n	800d5a2 <__gethex+0x43a>
 800d58a:	2101      	movs	r1, #1
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7ff fd83 	bl	800d098 <rshift>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	3601      	adds	r6, #1
 800d596:	42b3      	cmp	r3, r6
 800d598:	f6ff aedb 	blt.w	800d352 <__gethex+0x1ea>
 800d59c:	f04f 0801 	mov.w	r8, #1
 800d5a0:	e7c2      	b.n	800d528 <__gethex+0x3c0>
 800d5a2:	f015 051f 	ands.w	r5, r5, #31
 800d5a6:	d0f9      	beq.n	800d59c <__gethex+0x434>
 800d5a8:	9b01      	ldr	r3, [sp, #4]
 800d5aa:	441a      	add	r2, r3
 800d5ac:	f1c5 0520 	rsb	r5, r5, #32
 800d5b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d5b4:	f7fe f8a0 	bl	800b6f8 <__hi0bits>
 800d5b8:	42a8      	cmp	r0, r5
 800d5ba:	dbe6      	blt.n	800d58a <__gethex+0x422>
 800d5bc:	e7ee      	b.n	800d59c <__gethex+0x434>
 800d5be:	bf00      	nop
 800d5c0:	0800e053 	.word	0x0800e053

0800d5c4 <L_shift>:
 800d5c4:	f1c2 0208 	rsb	r2, r2, #8
 800d5c8:	0092      	lsls	r2, r2, #2
 800d5ca:	b570      	push	{r4, r5, r6, lr}
 800d5cc:	f1c2 0620 	rsb	r6, r2, #32
 800d5d0:	6843      	ldr	r3, [r0, #4]
 800d5d2:	6804      	ldr	r4, [r0, #0]
 800d5d4:	fa03 f506 	lsl.w	r5, r3, r6
 800d5d8:	432c      	orrs	r4, r5
 800d5da:	40d3      	lsrs	r3, r2
 800d5dc:	6004      	str	r4, [r0, #0]
 800d5de:	f840 3f04 	str.w	r3, [r0, #4]!
 800d5e2:	4288      	cmp	r0, r1
 800d5e4:	d3f4      	bcc.n	800d5d0 <L_shift+0xc>
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}

0800d5e8 <__match>:
 800d5e8:	b530      	push	{r4, r5, lr}
 800d5ea:	6803      	ldr	r3, [r0, #0]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5f2:	b914      	cbnz	r4, 800d5fa <__match+0x12>
 800d5f4:	6003      	str	r3, [r0, #0]
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	bd30      	pop	{r4, r5, pc}
 800d5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d602:	2d19      	cmp	r5, #25
 800d604:	bf98      	it	ls
 800d606:	3220      	addls	r2, #32
 800d608:	42a2      	cmp	r2, r4
 800d60a:	d0f0      	beq.n	800d5ee <__match+0x6>
 800d60c:	2000      	movs	r0, #0
 800d60e:	e7f3      	b.n	800d5f8 <__match+0x10>

0800d610 <__hexnan>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	680b      	ldr	r3, [r1, #0]
 800d616:	6801      	ldr	r1, [r0, #0]
 800d618:	115e      	asrs	r6, r3, #5
 800d61a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d61e:	f013 031f 	ands.w	r3, r3, #31
 800d622:	b087      	sub	sp, #28
 800d624:	bf18      	it	ne
 800d626:	3604      	addne	r6, #4
 800d628:	2500      	movs	r5, #0
 800d62a:	1f37      	subs	r7, r6, #4
 800d62c:	4682      	mov	sl, r0
 800d62e:	4690      	mov	r8, r2
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	f846 5c04 	str.w	r5, [r6, #-4]
 800d636:	46b9      	mov	r9, r7
 800d638:	463c      	mov	r4, r7
 800d63a:	9502      	str	r5, [sp, #8]
 800d63c:	46ab      	mov	fp, r5
 800d63e:	784a      	ldrb	r2, [r1, #1]
 800d640:	1c4b      	adds	r3, r1, #1
 800d642:	9303      	str	r3, [sp, #12]
 800d644:	b342      	cbz	r2, 800d698 <__hexnan+0x88>
 800d646:	4610      	mov	r0, r2
 800d648:	9105      	str	r1, [sp, #20]
 800d64a:	9204      	str	r2, [sp, #16]
 800d64c:	f7ff fd76 	bl	800d13c <__hexdig_fun>
 800d650:	2800      	cmp	r0, #0
 800d652:	d14f      	bne.n	800d6f4 <__hexnan+0xe4>
 800d654:	9a04      	ldr	r2, [sp, #16]
 800d656:	9905      	ldr	r1, [sp, #20]
 800d658:	2a20      	cmp	r2, #32
 800d65a:	d818      	bhi.n	800d68e <__hexnan+0x7e>
 800d65c:	9b02      	ldr	r3, [sp, #8]
 800d65e:	459b      	cmp	fp, r3
 800d660:	dd13      	ble.n	800d68a <__hexnan+0x7a>
 800d662:	454c      	cmp	r4, r9
 800d664:	d206      	bcs.n	800d674 <__hexnan+0x64>
 800d666:	2d07      	cmp	r5, #7
 800d668:	dc04      	bgt.n	800d674 <__hexnan+0x64>
 800d66a:	462a      	mov	r2, r5
 800d66c:	4649      	mov	r1, r9
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff ffa8 	bl	800d5c4 <L_shift>
 800d674:	4544      	cmp	r4, r8
 800d676:	d950      	bls.n	800d71a <__hexnan+0x10a>
 800d678:	2300      	movs	r3, #0
 800d67a:	f1a4 0904 	sub.w	r9, r4, #4
 800d67e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d682:	f8cd b008 	str.w	fp, [sp, #8]
 800d686:	464c      	mov	r4, r9
 800d688:	461d      	mov	r5, r3
 800d68a:	9903      	ldr	r1, [sp, #12]
 800d68c:	e7d7      	b.n	800d63e <__hexnan+0x2e>
 800d68e:	2a29      	cmp	r2, #41	; 0x29
 800d690:	d155      	bne.n	800d73e <__hexnan+0x12e>
 800d692:	3102      	adds	r1, #2
 800d694:	f8ca 1000 	str.w	r1, [sl]
 800d698:	f1bb 0f00 	cmp.w	fp, #0
 800d69c:	d04f      	beq.n	800d73e <__hexnan+0x12e>
 800d69e:	454c      	cmp	r4, r9
 800d6a0:	d206      	bcs.n	800d6b0 <__hexnan+0xa0>
 800d6a2:	2d07      	cmp	r5, #7
 800d6a4:	dc04      	bgt.n	800d6b0 <__hexnan+0xa0>
 800d6a6:	462a      	mov	r2, r5
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f7ff ff8a 	bl	800d5c4 <L_shift>
 800d6b0:	4544      	cmp	r4, r8
 800d6b2:	d934      	bls.n	800d71e <__hexnan+0x10e>
 800d6b4:	f1a8 0204 	sub.w	r2, r8, #4
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6be:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6c2:	429f      	cmp	r7, r3
 800d6c4:	d2f9      	bcs.n	800d6ba <__hexnan+0xaa>
 800d6c6:	1b3b      	subs	r3, r7, r4
 800d6c8:	f023 0303 	bic.w	r3, r3, #3
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	3e03      	subs	r6, #3
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	42a6      	cmp	r6, r4
 800d6d4:	bf38      	it	cc
 800d6d6:	2304      	movcc	r3, #4
 800d6d8:	4443      	add	r3, r8
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f843 2b04 	str.w	r2, [r3], #4
 800d6e0:	429f      	cmp	r7, r3
 800d6e2:	d2fb      	bcs.n	800d6dc <__hexnan+0xcc>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	b91b      	cbnz	r3, 800d6f0 <__hexnan+0xe0>
 800d6e8:	4547      	cmp	r7, r8
 800d6ea:	d126      	bne.n	800d73a <__hexnan+0x12a>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	603b      	str	r3, [r7, #0]
 800d6f0:	2005      	movs	r0, #5
 800d6f2:	e025      	b.n	800d740 <__hexnan+0x130>
 800d6f4:	3501      	adds	r5, #1
 800d6f6:	2d08      	cmp	r5, #8
 800d6f8:	f10b 0b01 	add.w	fp, fp, #1
 800d6fc:	dd06      	ble.n	800d70c <__hexnan+0xfc>
 800d6fe:	4544      	cmp	r4, r8
 800d700:	d9c3      	bls.n	800d68a <__hexnan+0x7a>
 800d702:	2300      	movs	r3, #0
 800d704:	f844 3c04 	str.w	r3, [r4, #-4]
 800d708:	2501      	movs	r5, #1
 800d70a:	3c04      	subs	r4, #4
 800d70c:	6822      	ldr	r2, [r4, #0]
 800d70e:	f000 000f 	and.w	r0, r0, #15
 800d712:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d716:	6020      	str	r0, [r4, #0]
 800d718:	e7b7      	b.n	800d68a <__hexnan+0x7a>
 800d71a:	2508      	movs	r5, #8
 800d71c:	e7b5      	b.n	800d68a <__hexnan+0x7a>
 800d71e:	9b01      	ldr	r3, [sp, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0df      	beq.n	800d6e4 <__hexnan+0xd4>
 800d724:	f1c3 0320 	rsb	r3, r3, #32
 800d728:	f04f 32ff 	mov.w	r2, #4294967295
 800d72c:	40da      	lsrs	r2, r3
 800d72e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d732:	4013      	ands	r3, r2
 800d734:	f846 3c04 	str.w	r3, [r6, #-4]
 800d738:	e7d4      	b.n	800d6e4 <__hexnan+0xd4>
 800d73a:	3f04      	subs	r7, #4
 800d73c:	e7d2      	b.n	800d6e4 <__hexnan+0xd4>
 800d73e:	2004      	movs	r0, #4
 800d740:	b007      	add	sp, #28
 800d742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d746 <__ascii_mbtowc>:
 800d746:	b082      	sub	sp, #8
 800d748:	b901      	cbnz	r1, 800d74c <__ascii_mbtowc+0x6>
 800d74a:	a901      	add	r1, sp, #4
 800d74c:	b142      	cbz	r2, 800d760 <__ascii_mbtowc+0x1a>
 800d74e:	b14b      	cbz	r3, 800d764 <__ascii_mbtowc+0x1e>
 800d750:	7813      	ldrb	r3, [r2, #0]
 800d752:	600b      	str	r3, [r1, #0]
 800d754:	7812      	ldrb	r2, [r2, #0]
 800d756:	1e10      	subs	r0, r2, #0
 800d758:	bf18      	it	ne
 800d75a:	2001      	movne	r0, #1
 800d75c:	b002      	add	sp, #8
 800d75e:	4770      	bx	lr
 800d760:	4610      	mov	r0, r2
 800d762:	e7fb      	b.n	800d75c <__ascii_mbtowc+0x16>
 800d764:	f06f 0001 	mvn.w	r0, #1
 800d768:	e7f8      	b.n	800d75c <__ascii_mbtowc+0x16>

0800d76a <_realloc_r>:
 800d76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76e:	4680      	mov	r8, r0
 800d770:	4614      	mov	r4, r2
 800d772:	460e      	mov	r6, r1
 800d774:	b921      	cbnz	r1, 800d780 <_realloc_r+0x16>
 800d776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d77a:	4611      	mov	r1, r2
 800d77c:	f7fb bf44 	b.w	8009608 <_malloc_r>
 800d780:	b92a      	cbnz	r2, 800d78e <_realloc_r+0x24>
 800d782:	f7fd fe7b 	bl	800b47c <_free_r>
 800d786:	4625      	mov	r5, r4
 800d788:	4628      	mov	r0, r5
 800d78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d78e:	f000 f842 	bl	800d816 <_malloc_usable_size_r>
 800d792:	4284      	cmp	r4, r0
 800d794:	4607      	mov	r7, r0
 800d796:	d802      	bhi.n	800d79e <_realloc_r+0x34>
 800d798:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d79c:	d812      	bhi.n	800d7c4 <_realloc_r+0x5a>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	f7fb ff31 	bl	8009608 <_malloc_r>
 800d7a6:	4605      	mov	r5, r0
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d0ed      	beq.n	800d788 <_realloc_r+0x1e>
 800d7ac:	42bc      	cmp	r4, r7
 800d7ae:	4622      	mov	r2, r4
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	bf28      	it	cs
 800d7b4:	463a      	movcs	r2, r7
 800d7b6:	f7ff fc23 	bl	800d000 <memcpy>
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4640      	mov	r0, r8
 800d7be:	f7fd fe5d 	bl	800b47c <_free_r>
 800d7c2:	e7e1      	b.n	800d788 <_realloc_r+0x1e>
 800d7c4:	4635      	mov	r5, r6
 800d7c6:	e7df      	b.n	800d788 <_realloc_r+0x1e>

0800d7c8 <__ascii_wctomb>:
 800d7c8:	b149      	cbz	r1, 800d7de <__ascii_wctomb+0x16>
 800d7ca:	2aff      	cmp	r2, #255	; 0xff
 800d7cc:	bf85      	ittet	hi
 800d7ce:	238a      	movhi	r3, #138	; 0x8a
 800d7d0:	6003      	strhi	r3, [r0, #0]
 800d7d2:	700a      	strbls	r2, [r1, #0]
 800d7d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d7d8:	bf98      	it	ls
 800d7da:	2001      	movls	r0, #1
 800d7dc:	4770      	bx	lr
 800d7de:	4608      	mov	r0, r1
 800d7e0:	4770      	bx	lr
	...

0800d7e4 <fiprintf>:
 800d7e4:	b40e      	push	{r1, r2, r3}
 800d7e6:	b503      	push	{r0, r1, lr}
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	ab03      	add	r3, sp, #12
 800d7ec:	4805      	ldr	r0, [pc, #20]	; (800d804 <fiprintf+0x20>)
 800d7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7f2:	6800      	ldr	r0, [r0, #0]
 800d7f4:	9301      	str	r3, [sp, #4]
 800d7f6:	f000 f83f 	bl	800d878 <_vfiprintf_r>
 800d7fa:	b002      	add	sp, #8
 800d7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d800:	b003      	add	sp, #12
 800d802:	4770      	bx	lr
 800d804:	20000230 	.word	0x20000230

0800d808 <abort>:
 800d808:	b508      	push	{r3, lr}
 800d80a:	2006      	movs	r0, #6
 800d80c:	f000 fa0c 	bl	800dc28 <raise>
 800d810:	2001      	movs	r0, #1
 800d812:	f7f4 fab9 	bl	8001d88 <_exit>

0800d816 <_malloc_usable_size_r>:
 800d816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d81a:	1f18      	subs	r0, r3, #4
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	bfbc      	itt	lt
 800d820:	580b      	ldrlt	r3, [r1, r0]
 800d822:	18c0      	addlt	r0, r0, r3
 800d824:	4770      	bx	lr

0800d826 <__sfputc_r>:
 800d826:	6893      	ldr	r3, [r2, #8]
 800d828:	3b01      	subs	r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	b410      	push	{r4}
 800d82e:	6093      	str	r3, [r2, #8]
 800d830:	da08      	bge.n	800d844 <__sfputc_r+0x1e>
 800d832:	6994      	ldr	r4, [r2, #24]
 800d834:	42a3      	cmp	r3, r4
 800d836:	db01      	blt.n	800d83c <__sfputc_r+0x16>
 800d838:	290a      	cmp	r1, #10
 800d83a:	d103      	bne.n	800d844 <__sfputc_r+0x1e>
 800d83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d840:	f000 b934 	b.w	800daac <__swbuf_r>
 800d844:	6813      	ldr	r3, [r2, #0]
 800d846:	1c58      	adds	r0, r3, #1
 800d848:	6010      	str	r0, [r2, #0]
 800d84a:	7019      	strb	r1, [r3, #0]
 800d84c:	4608      	mov	r0, r1
 800d84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <__sfputs_r>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	4606      	mov	r6, r0
 800d858:	460f      	mov	r7, r1
 800d85a:	4614      	mov	r4, r2
 800d85c:	18d5      	adds	r5, r2, r3
 800d85e:	42ac      	cmp	r4, r5
 800d860:	d101      	bne.n	800d866 <__sfputs_r+0x12>
 800d862:	2000      	movs	r0, #0
 800d864:	e007      	b.n	800d876 <__sfputs_r+0x22>
 800d866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86a:	463a      	mov	r2, r7
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7ff ffda 	bl	800d826 <__sfputc_r>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	d1f3      	bne.n	800d85e <__sfputs_r+0xa>
 800d876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d878 <_vfiprintf_r>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	460d      	mov	r5, r1
 800d87e:	b09d      	sub	sp, #116	; 0x74
 800d880:	4614      	mov	r4, r2
 800d882:	4698      	mov	r8, r3
 800d884:	4606      	mov	r6, r0
 800d886:	b118      	cbz	r0, 800d890 <_vfiprintf_r+0x18>
 800d888:	6a03      	ldr	r3, [r0, #32]
 800d88a:	b90b      	cbnz	r3, 800d890 <_vfiprintf_r+0x18>
 800d88c:	f7fc fe4a 	bl	800a524 <__sinit>
 800d890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d892:	07d9      	lsls	r1, r3, #31
 800d894:	d405      	bmi.n	800d8a2 <_vfiprintf_r+0x2a>
 800d896:	89ab      	ldrh	r3, [r5, #12]
 800d898:	059a      	lsls	r2, r3, #22
 800d89a:	d402      	bmi.n	800d8a2 <_vfiprintf_r+0x2a>
 800d89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d89e:	f7fc ff68 	bl	800a772 <__retarget_lock_acquire_recursive>
 800d8a2:	89ab      	ldrh	r3, [r5, #12]
 800d8a4:	071b      	lsls	r3, r3, #28
 800d8a6:	d501      	bpl.n	800d8ac <_vfiprintf_r+0x34>
 800d8a8:	692b      	ldr	r3, [r5, #16]
 800d8aa:	b99b      	cbnz	r3, 800d8d4 <_vfiprintf_r+0x5c>
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f000 f93a 	bl	800db28 <__swsetup_r>
 800d8b4:	b170      	cbz	r0, 800d8d4 <_vfiprintf_r+0x5c>
 800d8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8b8:	07dc      	lsls	r4, r3, #31
 800d8ba:	d504      	bpl.n	800d8c6 <_vfiprintf_r+0x4e>
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	b01d      	add	sp, #116	; 0x74
 800d8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c6:	89ab      	ldrh	r3, [r5, #12]
 800d8c8:	0598      	lsls	r0, r3, #22
 800d8ca:	d4f7      	bmi.n	800d8bc <_vfiprintf_r+0x44>
 800d8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8ce:	f7fc ff51 	bl	800a774 <__retarget_lock_release_recursive>
 800d8d2:	e7f3      	b.n	800d8bc <_vfiprintf_r+0x44>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d8:	2320      	movs	r3, #32
 800d8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8e2:	2330      	movs	r3, #48	; 0x30
 800d8e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da98 <_vfiprintf_r+0x220>
 800d8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8ec:	f04f 0901 	mov.w	r9, #1
 800d8f0:	4623      	mov	r3, r4
 800d8f2:	469a      	mov	sl, r3
 800d8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8f8:	b10a      	cbz	r2, 800d8fe <_vfiprintf_r+0x86>
 800d8fa:	2a25      	cmp	r2, #37	; 0x25
 800d8fc:	d1f9      	bne.n	800d8f2 <_vfiprintf_r+0x7a>
 800d8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d902:	d00b      	beq.n	800d91c <_vfiprintf_r+0xa4>
 800d904:	465b      	mov	r3, fp
 800d906:	4622      	mov	r2, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	4630      	mov	r0, r6
 800d90c:	f7ff ffa2 	bl	800d854 <__sfputs_r>
 800d910:	3001      	adds	r0, #1
 800d912:	f000 80a9 	beq.w	800da68 <_vfiprintf_r+0x1f0>
 800d916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d918:	445a      	add	r2, fp
 800d91a:	9209      	str	r2, [sp, #36]	; 0x24
 800d91c:	f89a 3000 	ldrb.w	r3, [sl]
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 80a1 	beq.w	800da68 <_vfiprintf_r+0x1f0>
 800d926:	2300      	movs	r3, #0
 800d928:	f04f 32ff 	mov.w	r2, #4294967295
 800d92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d930:	f10a 0a01 	add.w	sl, sl, #1
 800d934:	9304      	str	r3, [sp, #16]
 800d936:	9307      	str	r3, [sp, #28]
 800d938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d93c:	931a      	str	r3, [sp, #104]	; 0x68
 800d93e:	4654      	mov	r4, sl
 800d940:	2205      	movs	r2, #5
 800d942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d946:	4854      	ldr	r0, [pc, #336]	; (800da98 <_vfiprintf_r+0x220>)
 800d948:	f7f2 fc52 	bl	80001f0 <memchr>
 800d94c:	9a04      	ldr	r2, [sp, #16]
 800d94e:	b9d8      	cbnz	r0, 800d988 <_vfiprintf_r+0x110>
 800d950:	06d1      	lsls	r1, r2, #27
 800d952:	bf44      	itt	mi
 800d954:	2320      	movmi	r3, #32
 800d956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d95a:	0713      	lsls	r3, r2, #28
 800d95c:	bf44      	itt	mi
 800d95e:	232b      	movmi	r3, #43	; 0x2b
 800d960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d964:	f89a 3000 	ldrb.w	r3, [sl]
 800d968:	2b2a      	cmp	r3, #42	; 0x2a
 800d96a:	d015      	beq.n	800d998 <_vfiprintf_r+0x120>
 800d96c:	9a07      	ldr	r2, [sp, #28]
 800d96e:	4654      	mov	r4, sl
 800d970:	2000      	movs	r0, #0
 800d972:	f04f 0c0a 	mov.w	ip, #10
 800d976:	4621      	mov	r1, r4
 800d978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d97c:	3b30      	subs	r3, #48	; 0x30
 800d97e:	2b09      	cmp	r3, #9
 800d980:	d94d      	bls.n	800da1e <_vfiprintf_r+0x1a6>
 800d982:	b1b0      	cbz	r0, 800d9b2 <_vfiprintf_r+0x13a>
 800d984:	9207      	str	r2, [sp, #28]
 800d986:	e014      	b.n	800d9b2 <_vfiprintf_r+0x13a>
 800d988:	eba0 0308 	sub.w	r3, r0, r8
 800d98c:	fa09 f303 	lsl.w	r3, r9, r3
 800d990:	4313      	orrs	r3, r2
 800d992:	9304      	str	r3, [sp, #16]
 800d994:	46a2      	mov	sl, r4
 800d996:	e7d2      	b.n	800d93e <_vfiprintf_r+0xc6>
 800d998:	9b03      	ldr	r3, [sp, #12]
 800d99a:	1d19      	adds	r1, r3, #4
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	9103      	str	r1, [sp, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	bfbb      	ittet	lt
 800d9a4:	425b      	neglt	r3, r3
 800d9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d9aa:	9307      	strge	r3, [sp, #28]
 800d9ac:	9307      	strlt	r3, [sp, #28]
 800d9ae:	bfb8      	it	lt
 800d9b0:	9204      	strlt	r2, [sp, #16]
 800d9b2:	7823      	ldrb	r3, [r4, #0]
 800d9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d9b6:	d10c      	bne.n	800d9d2 <_vfiprintf_r+0x15a>
 800d9b8:	7863      	ldrb	r3, [r4, #1]
 800d9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d9bc:	d134      	bne.n	800da28 <_vfiprintf_r+0x1b0>
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	1d1a      	adds	r2, r3, #4
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	9203      	str	r2, [sp, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	bfb8      	it	lt
 800d9ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9ce:	3402      	adds	r4, #2
 800d9d0:	9305      	str	r3, [sp, #20]
 800d9d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800daa8 <_vfiprintf_r+0x230>
 800d9d6:	7821      	ldrb	r1, [r4, #0]
 800d9d8:	2203      	movs	r2, #3
 800d9da:	4650      	mov	r0, sl
 800d9dc:	f7f2 fc08 	bl	80001f0 <memchr>
 800d9e0:	b138      	cbz	r0, 800d9f2 <_vfiprintf_r+0x17a>
 800d9e2:	9b04      	ldr	r3, [sp, #16]
 800d9e4:	eba0 000a 	sub.w	r0, r0, sl
 800d9e8:	2240      	movs	r2, #64	; 0x40
 800d9ea:	4082      	lsls	r2, r0
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	3401      	adds	r4, #1
 800d9f0:	9304      	str	r3, [sp, #16]
 800d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f6:	4829      	ldr	r0, [pc, #164]	; (800da9c <_vfiprintf_r+0x224>)
 800d9f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9fc:	2206      	movs	r2, #6
 800d9fe:	f7f2 fbf7 	bl	80001f0 <memchr>
 800da02:	2800      	cmp	r0, #0
 800da04:	d03f      	beq.n	800da86 <_vfiprintf_r+0x20e>
 800da06:	4b26      	ldr	r3, [pc, #152]	; (800daa0 <_vfiprintf_r+0x228>)
 800da08:	bb1b      	cbnz	r3, 800da52 <_vfiprintf_r+0x1da>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	3307      	adds	r3, #7
 800da0e:	f023 0307 	bic.w	r3, r3, #7
 800da12:	3308      	adds	r3, #8
 800da14:	9303      	str	r3, [sp, #12]
 800da16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da18:	443b      	add	r3, r7
 800da1a:	9309      	str	r3, [sp, #36]	; 0x24
 800da1c:	e768      	b.n	800d8f0 <_vfiprintf_r+0x78>
 800da1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800da22:	460c      	mov	r4, r1
 800da24:	2001      	movs	r0, #1
 800da26:	e7a6      	b.n	800d976 <_vfiprintf_r+0xfe>
 800da28:	2300      	movs	r3, #0
 800da2a:	3401      	adds	r4, #1
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	4619      	mov	r1, r3
 800da30:	f04f 0c0a 	mov.w	ip, #10
 800da34:	4620      	mov	r0, r4
 800da36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da3a:	3a30      	subs	r2, #48	; 0x30
 800da3c:	2a09      	cmp	r2, #9
 800da3e:	d903      	bls.n	800da48 <_vfiprintf_r+0x1d0>
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0c6      	beq.n	800d9d2 <_vfiprintf_r+0x15a>
 800da44:	9105      	str	r1, [sp, #20]
 800da46:	e7c4      	b.n	800d9d2 <_vfiprintf_r+0x15a>
 800da48:	fb0c 2101 	mla	r1, ip, r1, r2
 800da4c:	4604      	mov	r4, r0
 800da4e:	2301      	movs	r3, #1
 800da50:	e7f0      	b.n	800da34 <_vfiprintf_r+0x1bc>
 800da52:	ab03      	add	r3, sp, #12
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	462a      	mov	r2, r5
 800da58:	4b12      	ldr	r3, [pc, #72]	; (800daa4 <_vfiprintf_r+0x22c>)
 800da5a:	a904      	add	r1, sp, #16
 800da5c:	4630      	mov	r0, r6
 800da5e:	f7fb feff 	bl	8009860 <_printf_float>
 800da62:	4607      	mov	r7, r0
 800da64:	1c78      	adds	r0, r7, #1
 800da66:	d1d6      	bne.n	800da16 <_vfiprintf_r+0x19e>
 800da68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da6a:	07d9      	lsls	r1, r3, #31
 800da6c:	d405      	bmi.n	800da7a <_vfiprintf_r+0x202>
 800da6e:	89ab      	ldrh	r3, [r5, #12]
 800da70:	059a      	lsls	r2, r3, #22
 800da72:	d402      	bmi.n	800da7a <_vfiprintf_r+0x202>
 800da74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da76:	f7fc fe7d 	bl	800a774 <__retarget_lock_release_recursive>
 800da7a:	89ab      	ldrh	r3, [r5, #12]
 800da7c:	065b      	lsls	r3, r3, #25
 800da7e:	f53f af1d 	bmi.w	800d8bc <_vfiprintf_r+0x44>
 800da82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da84:	e71c      	b.n	800d8c0 <_vfiprintf_r+0x48>
 800da86:	ab03      	add	r3, sp, #12
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	462a      	mov	r2, r5
 800da8c:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <_vfiprintf_r+0x22c>)
 800da8e:	a904      	add	r1, sp, #16
 800da90:	4630      	mov	r0, r6
 800da92:	f7fc f989 	bl	8009da8 <_printf_i>
 800da96:	e7e4      	b.n	800da62 <_vfiprintf_r+0x1ea>
 800da98:	0800e311 	.word	0x0800e311
 800da9c:	0800e31b 	.word	0x0800e31b
 800daa0:	08009861 	.word	0x08009861
 800daa4:	0800d855 	.word	0x0800d855
 800daa8:	0800e317 	.word	0x0800e317

0800daac <__swbuf_r>:
 800daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daae:	460e      	mov	r6, r1
 800dab0:	4614      	mov	r4, r2
 800dab2:	4605      	mov	r5, r0
 800dab4:	b118      	cbz	r0, 800dabe <__swbuf_r+0x12>
 800dab6:	6a03      	ldr	r3, [r0, #32]
 800dab8:	b90b      	cbnz	r3, 800dabe <__swbuf_r+0x12>
 800daba:	f7fc fd33 	bl	800a524 <__sinit>
 800dabe:	69a3      	ldr	r3, [r4, #24]
 800dac0:	60a3      	str	r3, [r4, #8]
 800dac2:	89a3      	ldrh	r3, [r4, #12]
 800dac4:	071a      	lsls	r2, r3, #28
 800dac6:	d525      	bpl.n	800db14 <__swbuf_r+0x68>
 800dac8:	6923      	ldr	r3, [r4, #16]
 800daca:	b31b      	cbz	r3, 800db14 <__swbuf_r+0x68>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	6922      	ldr	r2, [r4, #16]
 800dad0:	1a98      	subs	r0, r3, r2
 800dad2:	6963      	ldr	r3, [r4, #20]
 800dad4:	b2f6      	uxtb	r6, r6
 800dad6:	4283      	cmp	r3, r0
 800dad8:	4637      	mov	r7, r6
 800dada:	dc04      	bgt.n	800dae6 <__swbuf_r+0x3a>
 800dadc:	4621      	mov	r1, r4
 800dade:	4628      	mov	r0, r5
 800dae0:	f7ff fa3a 	bl	800cf58 <_fflush_r>
 800dae4:	b9e0      	cbnz	r0, 800db20 <__swbuf_r+0x74>
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	3b01      	subs	r3, #1
 800daea:	60a3      	str	r3, [r4, #8]
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	1c5a      	adds	r2, r3, #1
 800daf0:	6022      	str	r2, [r4, #0]
 800daf2:	701e      	strb	r6, [r3, #0]
 800daf4:	6962      	ldr	r2, [r4, #20]
 800daf6:	1c43      	adds	r3, r0, #1
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d004      	beq.n	800db06 <__swbuf_r+0x5a>
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	07db      	lsls	r3, r3, #31
 800db00:	d506      	bpl.n	800db10 <__swbuf_r+0x64>
 800db02:	2e0a      	cmp	r6, #10
 800db04:	d104      	bne.n	800db10 <__swbuf_r+0x64>
 800db06:	4621      	mov	r1, r4
 800db08:	4628      	mov	r0, r5
 800db0a:	f7ff fa25 	bl	800cf58 <_fflush_r>
 800db0e:	b938      	cbnz	r0, 800db20 <__swbuf_r+0x74>
 800db10:	4638      	mov	r0, r7
 800db12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db14:	4621      	mov	r1, r4
 800db16:	4628      	mov	r0, r5
 800db18:	f000 f806 	bl	800db28 <__swsetup_r>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d0d5      	beq.n	800dacc <__swbuf_r+0x20>
 800db20:	f04f 37ff 	mov.w	r7, #4294967295
 800db24:	e7f4      	b.n	800db10 <__swbuf_r+0x64>
	...

0800db28 <__swsetup_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4b2a      	ldr	r3, [pc, #168]	; (800dbd4 <__swsetup_r+0xac>)
 800db2c:	4605      	mov	r5, r0
 800db2e:	6818      	ldr	r0, [r3, #0]
 800db30:	460c      	mov	r4, r1
 800db32:	b118      	cbz	r0, 800db3c <__swsetup_r+0x14>
 800db34:	6a03      	ldr	r3, [r0, #32]
 800db36:	b90b      	cbnz	r3, 800db3c <__swsetup_r+0x14>
 800db38:	f7fc fcf4 	bl	800a524 <__sinit>
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db42:	0718      	lsls	r0, r3, #28
 800db44:	d422      	bmi.n	800db8c <__swsetup_r+0x64>
 800db46:	06d9      	lsls	r1, r3, #27
 800db48:	d407      	bmi.n	800db5a <__swsetup_r+0x32>
 800db4a:	2309      	movs	r3, #9
 800db4c:	602b      	str	r3, [r5, #0]
 800db4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db52:	81a3      	strh	r3, [r4, #12]
 800db54:	f04f 30ff 	mov.w	r0, #4294967295
 800db58:	e034      	b.n	800dbc4 <__swsetup_r+0x9c>
 800db5a:	0758      	lsls	r0, r3, #29
 800db5c:	d512      	bpl.n	800db84 <__swsetup_r+0x5c>
 800db5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db60:	b141      	cbz	r1, 800db74 <__swsetup_r+0x4c>
 800db62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db66:	4299      	cmp	r1, r3
 800db68:	d002      	beq.n	800db70 <__swsetup_r+0x48>
 800db6a:	4628      	mov	r0, r5
 800db6c:	f7fd fc86 	bl	800b47c <_free_r>
 800db70:	2300      	movs	r3, #0
 800db72:	6363      	str	r3, [r4, #52]	; 0x34
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db7a:	81a3      	strh	r3, [r4, #12]
 800db7c:	2300      	movs	r3, #0
 800db7e:	6063      	str	r3, [r4, #4]
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	6023      	str	r3, [r4, #0]
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f043 0308 	orr.w	r3, r3, #8
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	6923      	ldr	r3, [r4, #16]
 800db8e:	b94b      	cbnz	r3, 800dba4 <__swsetup_r+0x7c>
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db9a:	d003      	beq.n	800dba4 <__swsetup_r+0x7c>
 800db9c:	4621      	mov	r1, r4
 800db9e:	4628      	mov	r0, r5
 800dba0:	f000 f884 	bl	800dcac <__smakebuf_r>
 800dba4:	89a0      	ldrh	r0, [r4, #12]
 800dba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbaa:	f010 0301 	ands.w	r3, r0, #1
 800dbae:	d00a      	beq.n	800dbc6 <__swsetup_r+0x9e>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	60a3      	str	r3, [r4, #8]
 800dbb4:	6963      	ldr	r3, [r4, #20]
 800dbb6:	425b      	negs	r3, r3
 800dbb8:	61a3      	str	r3, [r4, #24]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	b943      	cbnz	r3, 800dbd0 <__swsetup_r+0xa8>
 800dbbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbc2:	d1c4      	bne.n	800db4e <__swsetup_r+0x26>
 800dbc4:	bd38      	pop	{r3, r4, r5, pc}
 800dbc6:	0781      	lsls	r1, r0, #30
 800dbc8:	bf58      	it	pl
 800dbca:	6963      	ldrpl	r3, [r4, #20]
 800dbcc:	60a3      	str	r3, [r4, #8]
 800dbce:	e7f4      	b.n	800dbba <__swsetup_r+0x92>
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	e7f7      	b.n	800dbc4 <__swsetup_r+0x9c>
 800dbd4:	20000230 	.word	0x20000230

0800dbd8 <_raise_r>:
 800dbd8:	291f      	cmp	r1, #31
 800dbda:	b538      	push	{r3, r4, r5, lr}
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	d904      	bls.n	800dbec <_raise_r+0x14>
 800dbe2:	2316      	movs	r3, #22
 800dbe4:	6003      	str	r3, [r0, #0]
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dbee:	b112      	cbz	r2, 800dbf6 <_raise_r+0x1e>
 800dbf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbf4:	b94b      	cbnz	r3, 800dc0a <_raise_r+0x32>
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f000 f830 	bl	800dc5c <_getpid_r>
 800dbfc:	462a      	mov	r2, r5
 800dbfe:	4601      	mov	r1, r0
 800dc00:	4620      	mov	r0, r4
 800dc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc06:	f000 b817 	b.w	800dc38 <_kill_r>
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d00a      	beq.n	800dc24 <_raise_r+0x4c>
 800dc0e:	1c59      	adds	r1, r3, #1
 800dc10:	d103      	bne.n	800dc1a <_raise_r+0x42>
 800dc12:	2316      	movs	r3, #22
 800dc14:	6003      	str	r3, [r0, #0]
 800dc16:	2001      	movs	r0, #1
 800dc18:	e7e7      	b.n	800dbea <_raise_r+0x12>
 800dc1a:	2400      	movs	r4, #0
 800dc1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc20:	4628      	mov	r0, r5
 800dc22:	4798      	blx	r3
 800dc24:	2000      	movs	r0, #0
 800dc26:	e7e0      	b.n	800dbea <_raise_r+0x12>

0800dc28 <raise>:
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <raise+0xc>)
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f7ff bfd3 	b.w	800dbd8 <_raise_r>
 800dc32:	bf00      	nop
 800dc34:	20000230 	.word	0x20000230

0800dc38 <_kill_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d07      	ldr	r5, [pc, #28]	; (800dc58 <_kill_r+0x20>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	4611      	mov	r1, r2
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	f7f4 f88f 	bl	8001d68 <_kill>
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	d102      	bne.n	800dc54 <_kill_r+0x1c>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	b103      	cbz	r3, 800dc54 <_kill_r+0x1c>
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	bf00      	nop
 800dc58:	200008f4 	.word	0x200008f4

0800dc5c <_getpid_r>:
 800dc5c:	f7f4 b87c 	b.w	8001d58 <_getpid>

0800dc60 <__swhatbuf_r>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	460c      	mov	r4, r1
 800dc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc68:	2900      	cmp	r1, #0
 800dc6a:	b096      	sub	sp, #88	; 0x58
 800dc6c:	4615      	mov	r5, r2
 800dc6e:	461e      	mov	r6, r3
 800dc70:	da0d      	bge.n	800dc8e <__swhatbuf_r+0x2e>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc78:	f04f 0100 	mov.w	r1, #0
 800dc7c:	bf0c      	ite	eq
 800dc7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc82:	2340      	movne	r3, #64	; 0x40
 800dc84:	2000      	movs	r0, #0
 800dc86:	6031      	str	r1, [r6, #0]
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	b016      	add	sp, #88	; 0x58
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
 800dc8e:	466a      	mov	r2, sp
 800dc90:	f000 f848 	bl	800dd24 <_fstat_r>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	dbec      	blt.n	800dc72 <__swhatbuf_r+0x12>
 800dc98:	9901      	ldr	r1, [sp, #4]
 800dc9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dca2:	4259      	negs	r1, r3
 800dca4:	4159      	adcs	r1, r3
 800dca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcaa:	e7eb      	b.n	800dc84 <__swhatbuf_r+0x24>

0800dcac <__smakebuf_r>:
 800dcac:	898b      	ldrh	r3, [r1, #12]
 800dcae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcb0:	079d      	lsls	r5, r3, #30
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	d507      	bpl.n	800dcc8 <__smakebuf_r+0x1c>
 800dcb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	6163      	str	r3, [r4, #20]
 800dcc4:	b002      	add	sp, #8
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}
 800dcc8:	ab01      	add	r3, sp, #4
 800dcca:	466a      	mov	r2, sp
 800dccc:	f7ff ffc8 	bl	800dc60 <__swhatbuf_r>
 800dcd0:	9900      	ldr	r1, [sp, #0]
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f7fb fc97 	bl	8009608 <_malloc_r>
 800dcda:	b948      	cbnz	r0, 800dcf0 <__smakebuf_r+0x44>
 800dcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce0:	059a      	lsls	r2, r3, #22
 800dce2:	d4ef      	bmi.n	800dcc4 <__smakebuf_r+0x18>
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	f043 0302 	orr.w	r3, r3, #2
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	e7e3      	b.n	800dcb8 <__smakebuf_r+0xc>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	6020      	str	r0, [r4, #0]
 800dcf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	9b00      	ldr	r3, [sp, #0]
 800dcfc:	6163      	str	r3, [r4, #20]
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	6120      	str	r0, [r4, #16]
 800dd02:	b15b      	cbz	r3, 800dd1c <__smakebuf_r+0x70>
 800dd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 f81d 	bl	800dd48 <_isatty_r>
 800dd0e:	b128      	cbz	r0, 800dd1c <__smakebuf_r+0x70>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f023 0303 	bic.w	r3, r3, #3
 800dd16:	f043 0301 	orr.w	r3, r3, #1
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	431d      	orrs	r5, r3
 800dd20:	81a5      	strh	r5, [r4, #12]
 800dd22:	e7cf      	b.n	800dcc4 <__smakebuf_r+0x18>

0800dd24 <_fstat_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	; (800dd44 <_fstat_r+0x20>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f7f4 f878 	bl	8001e26 <_fstat>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d102      	bne.n	800dd40 <_fstat_r+0x1c>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	b103      	cbz	r3, 800dd40 <_fstat_r+0x1c>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	200008f4 	.word	0x200008f4

0800dd48 <_isatty_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d06      	ldr	r5, [pc, #24]	; (800dd64 <_isatty_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	f7f4 f877 	bl	8001e46 <_isatty>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_isatty_r+0x1a>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_isatty_r+0x1a>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	200008f4 	.word	0x200008f4

0800dd68 <round>:
 800dd68:	ec53 2b10 	vmov	r2, r3, d0
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800dd72:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800dd76:	2813      	cmp	r0, #19
 800dd78:	ee10 5a10 	vmov	r5, s0
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	dc18      	bgt.n	800ddb2 <round+0x4a>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	da09      	bge.n	800dd98 <round+0x30>
 800dd84:	3001      	adds	r0, #1
 800dd86:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800dd8a:	d103      	bne.n	800dd94 <round+0x2c>
 800dd8c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800dd90:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800dd94:	2300      	movs	r3, #0
 800dd96:	e02a      	b.n	800ddee <round+0x86>
 800dd98:	4c16      	ldr	r4, [pc, #88]	; (800ddf4 <round+0x8c>)
 800dd9a:	4104      	asrs	r4, r0
 800dd9c:	ea03 0604 	and.w	r6, r3, r4
 800dda0:	4316      	orrs	r6, r2
 800dda2:	d011      	beq.n	800ddc8 <round+0x60>
 800dda4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dda8:	4103      	asrs	r3, r0
 800ddaa:	440b      	add	r3, r1
 800ddac:	ea23 0104 	bic.w	r1, r3, r4
 800ddb0:	e7f0      	b.n	800dd94 <round+0x2c>
 800ddb2:	2833      	cmp	r0, #51	; 0x33
 800ddb4:	dd0b      	ble.n	800ddce <round+0x66>
 800ddb6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ddba:	d105      	bne.n	800ddc8 <round+0x60>
 800ddbc:	ee10 0a10 	vmov	r0, s0
 800ddc0:	f7f2 fa74 	bl	80002ac <__adddf3>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	ec43 2b10 	vmov	d0, r2, r3
 800ddcc:	bd70      	pop	{r4, r5, r6, pc}
 800ddce:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ddd2:	f04f 34ff 	mov.w	r4, #4294967295
 800ddd6:	40f4      	lsrs	r4, r6
 800ddd8:	4214      	tst	r4, r2
 800ddda:	d0f5      	beq.n	800ddc8 <round+0x60>
 800dddc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800dde0:	2301      	movs	r3, #1
 800dde2:	4083      	lsls	r3, r0
 800dde4:	195b      	adds	r3, r3, r5
 800dde6:	bf28      	it	cs
 800dde8:	3101      	addcs	r1, #1
 800ddea:	ea23 0304 	bic.w	r3, r3, r4
 800ddee:	461a      	mov	r2, r3
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	e7e9      	b.n	800ddc8 <round+0x60>
 800ddf4:	000fffff 	.word	0x000fffff

0800ddf8 <_init>:
 800ddf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddfa:	bf00      	nop
 800ddfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfe:	bc08      	pop	{r3}
 800de00:	469e      	mov	lr, r3
 800de02:	4770      	bx	lr

0800de04 <_fini>:
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de06:	bf00      	nop
 800de08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de0a:	bc08      	pop	{r3}
 800de0c:	469e      	mov	lr, r3
 800de0e:	4770      	bx	lr
