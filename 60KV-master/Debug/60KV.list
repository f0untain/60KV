
60KV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d820  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800d9b0  0800d9b0  0000e9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df64  0800df64  0000f3a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df64  0800df64  0000ef64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df6c  0800df6c  0000f3a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df6c  0800df6c  0000ef6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df70  0800df70  0000ef70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a0  20000000  0800df74  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f3a0  2**0
                  CONTENTS
 10 .bss          0000055c  200003a0  200003a0  0000f3a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008fc  200008fc  0000f3a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f3a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127da  00000000  00000000  0000f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dab  00000000  00000000  00021baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00024958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db7  00000000  00000000  00025b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022be1  00000000  00000000  000268b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016edc  00000000  00000000  00049498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caf30  00000000  00000000  00060374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b2a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e50  00000000  00000000  0012b2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00131138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a0 	.word	0x200003a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d998 	.word	0x0800d998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003a4 	.word	0x200003a4
 80001cc:	0800d998 	.word	0x0800d998

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <VcDecOrSet>:
    low = ~(low & mask);
	high = low ^ (high & mask);
}*/

void VcDecOrSet(uint8_t* high, uint8_t* low, uint8_t mask)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71fb      	strb	r3, [r7, #7]
    *low = ~(*low & mask);
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	781a      	ldrb	r2, [r3, #0]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	701a      	strb	r2, [r3, #0]
    *high = *low ^ (*high & mask);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	400b      	ands	r3, r1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4053      	eors	r3, r2
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <Debounce>:
*
* @details This function checks the state of the buttons and updates the `buttonsButtonRelease` variable
* if a debounced button press or ButtonRelease is detected. It should be called approximately 100 times per second.
*/
void Debounce(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	static uint8_t buttonState = 0;

	/**
	* @brief XOR with `buttonState` to detect state changes.
	*/
	uint8_t stateChanged = (KEY_READ) ^ buttonState;
 8000d5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	0a9b      	lsrs	r3, r3, #10
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <Debounce+0x88>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	0adb      	lsrs	r3, r3, #11
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <Debounce+0x8c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	4053      	eors	r3, r2
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	71fb      	strb	r3, [r7, #7]

	/* Decrease counters where stateChanged = 1, set the others to 0b11. */
	//VcDecOrSet(vcountHigh, vcountLow, stateChanged);
	VcDecOrSet(&vcountHigh, &vcountLow, stateChanged);
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4915      	ldr	r1, [pc, #84]	@ (8000de8 <Debounce+0x90>)
 8000d92:	4816      	ldr	r0, [pc, #88]	@ (8000dec <Debounce+0x94>)
 8000d94:	f7ff ffbe 	bl	8000d14 <VcDecOrSet>
	/* Update stateChanged to have a 1 only if the counter overflowed. */
	stateChanged &= vcountLow & vcountHigh;
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <Debounce+0x90>)
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <Debounce+0x94>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4013      	ands	r3, r2
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4013      	ands	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

	/* Change buttonState for the buttons whose counters rolled over. */
	buttonState ^= stateChanged;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <Debounce+0x8c>)
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4053      	eors	r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <Debounce+0x8c>)
 8000db6:	701a      	strb	r2, [r3, #0]

	/* Update buttonsButtonRelease with buttons whose counters rolled over
	* and are still in state 0 (ButtonReleased).
	*/
	buttonRelease |= (buttonState ^/*&*/ KEY_RELEASE_MASK) & stateChanged; // ButtonRelease action.
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <Debounce+0x8c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f083 030f 	eor.w	r3, r3, #15
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <Debounce+0x98>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <Debounce+0x98>)
 8000dd4:	701a      	strb	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000800 	.word	0x48000800
 8000de4:	200003bd 	.word	0x200003bd
 8000de8:	20000001 	.word	0x20000001
 8000dec:	20000000 	.word	0x20000000
 8000df0:	200003bc 	.word	0x200003bc

08000df4 <ToggleBuzzer>:
 * this array must be initialized when need to buzzer toggled.
 */
volatile uint8_t buzzer[2];

static inline void ToggleBuzzer(volatile uint8_t buzzer[2])
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	static uint8_t number = 0;
	static uint8_t count10ms = 0;

	if (count10ms == 0) /* buzzer[BUZZ_DELAY]/10 = number of count10ms */
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <ToggleBuzzer+0x94>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d132      	bne.n	8000e6a <ToggleBuzzer+0x76>
	{
		if (number < buzzer[BUZZ_NUM] * 2)	/* buzzer[BUZZ_NUM]*2 = number of (buzzer_off + buzzer_on) BUT
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <ToggleBuzzer+0x98>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	429a      	cmp	r2, r3
 8000e14:	da16      	bge.n	8000e44 <ToggleBuzzer+0x50>
											   buzzer[BUZZ_NUM]	  = number of buzzer_on */
		{
			//BUZZ_TGL;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000e16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1a:	481d      	ldr	r0, [pc, #116]	@ (8000e90 <ToggleBuzzer+0x9c>)
 8000e1c:	f002 fc3c 	bl	8003698 <HAL_GPIO_TogglePin>
			number++;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <ToggleBuzzer+0x98>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <ToggleBuzzer+0x98>)
 8000e2a:	701a      	strb	r2, [r3, #0]
			count10ms = (buzzer[BUZZ_DELAY] / 10);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <ToggleBuzzer+0xa0>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <ToggleBuzzer+0x94>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e012      	b.n	8000e6a <ToggleBuzzer+0x76>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e4a:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <ToggleBuzzer+0x9c>)
 8000e4c:	f002 fc0c 	bl	8003668 <HAL_GPIO_WritePin>
			number = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <ToggleBuzzer+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
			count10ms = 0;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <ToggleBuzzer+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_NUM] = 0;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3301      	adds	r3, #1
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (buzzer[BUZZ_NUM])
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <ToggleBuzzer+0x8c>
	{
		count10ms--;
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <ToggleBuzzer+0x94>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <ToggleBuzzer+0x94>)
 8000e7e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200005b6 	.word	0x200005b6
 8000e8c:	200005b7 	.word	0x200005b7
 8000e90:	48000400 	.word	0x48000400
 8000e94:	cccccccd 	.word	0xcccccccd

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 f85f 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f923 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fbcb 	bl	8001640 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eaa:	f000 fa93 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000eae:	f000 fb91 	bl	80015d4 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000eb2:	f000 fa4f 	bl	8001354 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000eb6:	f000 f97f 	bl	80011b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000eba:	f000 fae5 	bl	8001488 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000ebe:	f000 f9eb 	bl	8001298 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /*first uncomment ValuInit_Write_EE() to write initial values,
  then comment it and upload the program again on the micro*/
  //InitValueWriteToEeprom();
  InitValueReadFromEeprom();
 8000ec2:	f008 f95f 	bl	8009184 <InitValueReadFromEeprom>

  /*start encoder timer 1 for reading rotary encoder */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ec6:	213c      	movs	r1, #60	@ 0x3c
 8000ec8:	4873      	ldr	r0, [pc, #460]	@ (8001098 <main+0x200>)
 8000eca:	f005 f88b 	bl	8005fe4 <HAL_TIM_Encoder_Start>
  TIM1->CNT = 2000;
 8000ece:	4b73      	ldr	r3, [pc, #460]	@ (800109c <main+0x204>)
 8000ed0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* create different flags base on 1ms timer 7 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000ed6:	4872      	ldr	r0, [pc, #456]	@ (80010a0 <main+0x208>)
 8000ed8:	f004 fd78 	bl	80059cc <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8000edc:	4871      	ldr	r0, [pc, #452]	@ (80010a4 <main+0x20c>)
 8000ede:	f004 fd75 	bl	80059cc <HAL_TIM_Base_Start_IT>
  uint8_t j;

  char (*pStateFunc)(char);

  /* Initial state variables */
  uint8_t state = ST_STANDBY;
 8000ee2:	2314      	movs	r3, #20
 8000ee4:	70fb      	strb	r3, [r7, #3]
  pStateFunc = StandBy;
 8000ee6:	4b70      	ldr	r3, [pc, #448]	@ (80010a8 <main+0x210>)
 8000ee8:	607b      	str	r3, [r7, #4]

  /* Lcd initial start */

  LcdInit();
 8000eea:	f006 fadd 	bl	80074a8 <LcdInit>
  LcdClear();
 8000eee:	f006 fb2f 	bl	8007550 <LcdClear>
  LcdDisplayOn();
 8000ef2:	f006 fb3b 	bl	800756c <LcdDisplayOn>
  LcdBackLightSet();
 8000ef6:	f006 fa81 	bl	80073fc <LcdBackLightSet>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Read rotary encoder and find the direction */
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/ROTARY_SPC;
 8000efa:	4b67      	ldr	r3, [pc, #412]	@ (8001098 <main+0x200>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	085b      	lsrs	r3, r3, #1
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b69      	ldr	r3, [pc, #420]	@ (80010ac <main+0x214>)
 8000f06:	601a      	str	r2, [r3, #0]
		diff = encoder_counter - last_count;  // Calculate the difference between the current count and the last count
 8000f08:	4b68      	ldr	r3, [pc, #416]	@ (80010ac <main+0x214>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b68      	ldr	r3, [pc, #416]	@ (80010b0 <main+0x218>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	4a68      	ldr	r2, [pc, #416]	@ (80010b4 <main+0x21c>)
 8000f14:	6013      	str	r3, [r2, #0]

		if (diff != 0)
 8000f16:	4b67      	ldr	r3, [pc, #412]	@ (80010b4 <main+0x21c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d018      	beq.n	8000f50 <main+0xb8>
		{
			if (diff > 0)
 8000f1e:	4b65      	ldr	r3, [pc, #404]	@ (80010b4 <main+0x21c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	dd06      	ble.n	8000f34 <main+0x9c>
			{
				flagRotaryCW = true; //Clockwise rotation
 8000f26:	4b64      	ldr	r3, [pc, #400]	@ (80010b8 <main+0x220>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = false;
 8000f2c:	4b63      	ldr	r3, [pc, #396]	@ (80010bc <main+0x224>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e009      	b.n	8000f48 <main+0xb0>
			}
			else if (diff < 0)
 8000f34:	4b5f      	ldr	r3, [pc, #380]	@ (80010b4 <main+0x21c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da05      	bge.n	8000f48 <main+0xb0>
			{
				flagRotaryCW = false;
 8000f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80010b8 <main+0x220>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = true; //Counter-clockwise rotation
 8000f42:	4b5e      	ldr	r3, [pc, #376]	@ (80010bc <main+0x224>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
			}

			last_count = encoder_counter; //Update the last count
 8000f48:	4b58      	ldr	r3, [pc, #352]	@ (80010ac <main+0x214>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	@ (80010b0 <main+0x218>)
 8000f4e:	6013      	str	r3, [r2, #0]
		}

		/* Every 10 mS check */
		if ( flag10ms == true )
 8000f50:	4b5b      	ldr	r3, [pc, #364]	@ (80010c0 <main+0x228>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d014      	beq.n	8000f84 <main+0xec>
		{
			CheckInputDebounced();
 8000f5a:	f006 f9d1 	bl	8007300 <CheckInputDebounced>
			if ( mode_state == STOP)
 8000f5e:	4b59      	ldr	r3, [pc, #356]	@ (80010c4 <main+0x22c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d101      	bne.n	8000f6a <main+0xd2>
			{
				ReadVoltageADC();
 8000f66:	f006 fc8b 	bl	8007880 <ReadVoltageADC>
			}
			Debounce();  // Update button_state.
 8000f6a:	f7ff fef5 	bl	8000d58 <Debounce>

			if (buzzer[BUZZ_NUM])
 8000f6e:	4b56      	ldr	r3, [pc, #344]	@ (80010c8 <main+0x230>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <main+0xe6>
				ToggleBuzzer(buzzer);
 8000f78:	4853      	ldr	r0, [pc, #332]	@ (80010c8 <main+0x230>)
 8000f7a:	f7ff ff3b 	bl	8000df4 <ToggleBuzzer>

			flag10ms = false;
 8000f7e:	4b50      	ldr	r3, [pc, #320]	@ (80010c0 <main+0x228>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
		}

		if ( flag500ms == true )
 8000f84:	4b51      	ldr	r3, [pc, #324]	@ (80010cc <main+0x234>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d008      	beq.n	8000fa0 <main+0x108>
		{
			if (blink_enable)
 8000f8e:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <main+0x238>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <main+0x102>
			{
				LedUpdateBlink();
 8000f96:	f006 fc25 	bl	80077e4 <LedUpdateBlink>
			}
			flag500ms = false;
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80010cc <main+0x234>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
		}

		/* Read input and change states */
		buttonMask=KEY_MASK;
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <main+0x23c>)
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	701a      	strb	r2, [r3, #0]
		buttonMask &= buttonRelease;
 8000fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80010d8 <main+0x240>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b49      	ldr	r3, [pc, #292]	@ (80010d4 <main+0x23c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <main+0x23c>)
 8000fb8:	701a      	strb	r2, [r3, #0]
		buttonRelease ^= buttonMask;
 8000fba:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <main+0x23c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b45      	ldr	r3, [pc, #276]	@ (80010d8 <main+0x240>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b43      	ldr	r3, [pc, #268]	@ (80010d8 <main+0x240>)
 8000fcc:	701a      	strb	r2, [r3, #0]
		input = buttonMask | ((flagRotaryCCW*ROTARY_CCW_DIR)) | ((flagRotaryCW*ROTARY_CW_DIR)); // Read buttons
 8000fce:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <main+0x224>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	4b3e      	ldr	r3, [pc, #248]	@ (80010d4 <main+0x23c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <main+0x220>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <main+0x244>)
 8000ffa:	701a      	strb	r2, [r3, #0]
		//input = buttonsDown(KEY_MASK) | ((flagRotaryCCW*ROTARY_CCW_DIR)) | ((flagRotaryCW*ROTARY_CW_DIR));
		flagRotaryCW = false;
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <main+0x220>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		flagRotaryCCW = false;
 8001002:	4b2e      	ldr	r3, [pc, #184]	@ (80010bc <main+0x224>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

	    /* Set buzzer to beep if one button is pressed */
		if (input)
 8001008:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <main+0x244>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <main+0x186>
		{
			buzzer[BUZZ_NUM] = 1;
 8001012:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <main+0x230>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 10;
 8001018:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <main+0x230>)
 800101a:	220a      	movs	r2, #10
 800101c:	705a      	strb	r2, [r3, #1]
		}

		//if (tapChangerState == 0 || errorVar != 0)
		//{
			/* When in this state, we must call the state function */
			nextState = pStateFunc(input);
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <main+0x244>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4610      	mov	r0, r2
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b2c      	ldr	r3, [pc, #176]	@ (80010e0 <main+0x248>)
 8001030:	701a      	strb	r2, [r3, #0]
			if(errorVar != 0)
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <main+0x24c>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <main+0x1a8>
				nextState = ST_ERRORS;
 800103a:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <main+0x248>)
 800103c:	225a      	movs	r2, #90	@ 0x5a
 800103e:	701a      	strb	r2, [r3, #0]
			if (nextState != state)
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <main+0x248>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	78fa      	ldrb	r2, [r7, #3]
 8001048:	429a      	cmp	r2, r3
 800104a:	f43f af56 	beq.w	8000efa <main+0x62>
			{
				state = nextState;
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <main+0x248>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	70fb      	strb	r3, [r7, #3]

				for (uint8_t n = 0; (j=MenuState[n].state); n++)
 8001054:	2300      	movs	r3, #0
 8001056:	70bb      	strb	r3, [r7, #2]
 8001058:	e011      	b.n	800107e <main+0x1e6>
				{
					if (j == state)
 800105a:	787a      	ldrb	r2, [r7, #1]
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	429a      	cmp	r2, r3
 8001060:	d10a      	bne.n	8001078 <main+0x1e0>
					{
						pStateFunc = MenuState[n].pFunc;
 8001062:	78ba      	ldrb	r2, [r7, #2]
 8001064:	4920      	ldr	r1, [pc, #128]	@ (80010e8 <main+0x250>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	607b      	str	r3, [r7, #4]
						break;
 8001076:	e00e      	b.n	8001096 <main+0x1fe>
				for (uint8_t n = 0; (j=MenuState[n].state); n++)
 8001078:	78bb      	ldrb	r3, [r7, #2]
 800107a:	3301      	adds	r3, #1
 800107c:	70bb      	strb	r3, [r7, #2]
 800107e:	78ba      	ldrb	r2, [r7, #2]
 8001080:	4919      	ldr	r1, [pc, #100]	@ (80010e8 <main+0x250>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	707b      	strb	r3, [r7, #1]
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1e1      	bne.n	800105a <main+0x1c2>
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/ROTARY_SPC;
 8001096:	e730      	b.n	8000efa <main+0x62>
 8001098:	200004b4 	.word	0x200004b4
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	2000054c 	.word	0x2000054c
 80010a4:	20000500 	.word	0x20000500
 80010a8:	08007e59 	.word	0x08007e59
 80010ac:	200005a8 	.word	0x200005a8
 80010b0:	20000004 	.word	0x20000004
 80010b4:	200005ac 	.word	0x200005ac
 80010b8:	200005a3 	.word	0x200005a3
 80010bc:	200005a4 	.word	0x200005a4
 80010c0:	20000599 	.word	0x20000599
 80010c4:	2000061c 	.word	0x2000061c
 80010c8:	200005b4 	.word	0x200005b4
 80010cc:	2000059b 	.word	0x2000059b
 80010d0:	200005f8 	.word	0x200005f8
 80010d4:	200005b0 	.word	0x200005b0
 80010d8:	200003bc 	.word	0x200003bc
 80010dc:	200005b1 	.word	0x200005b1
 80010e0:	200005b2 	.word	0x200005b2
 80010e4:	200005f2 	.word	0x200005f2
 80010e8:	20000008 	.word	0x20000008

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	@ 0x58
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010f6:	2228      	movs	r2, #40	@ 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f009 f8e1 	bl	800a2c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001122:	2303      	movs	r3, #3
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001126:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800112a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001140:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001142:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001146:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800114c:	4618      	mov	r0, r3
 800114e:	f003 f8e1 	bl	8004314 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001158:	f000 fbde 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f004 f8d9 	bl	8005330 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001184:	f000 fbc8 	bl	8001918 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001188:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 800118c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800118e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001192:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fa88 	bl	80056b4 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011aa:	f000 fbb5 	bl	8001918 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3758      	adds	r7, #88	@ 0x58
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011da:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <MX_ADC1_Init+0xdc>)
 80011dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <MX_ADC1_Init+0xdc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <MX_ADC1_Init+0xdc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <MX_ADC1_Init+0xdc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <MX_ADC1_Init+0xdc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <MX_ADC1_Init+0xdc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <MX_ADC1_Init+0xdc>)
 800120a:	2201      	movs	r2, #1
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001216:	2201      	movs	r2, #1
 8001218:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_ADC1_Init+0xdc>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001224:	2204      	movs	r2, #4
 8001226:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_ADC1_Init+0xdc>)
 800122a:	2200      	movs	r2, #0
 800122c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001234:	4817      	ldr	r0, [pc, #92]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001236:	f000 ff1d 	bl	8002074 <HAL_ADC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 fb6a 	bl	8001918 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4811      	ldr	r0, [pc, #68]	@ (8001294 <MX_ADC1_Init+0xdc>)
 8001250:	f001 fd28 	bl	8002ca4 <HAL_ADCEx_MultiModeConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800125a:	f000 fb5d 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800125e:	230c      	movs	r3, #12
 8001260:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001262:	2301      	movs	r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_ADC1_Init+0xdc>)
 800127c:	f001 fa54 	bl	8002728 <HAL_ADC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001286:	f000 fb47 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200003c0 	.word	0x200003c0

08001298 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012ae:	4b27      	ldr	r3, [pc, #156]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012b0:	4a27      	ldr	r2, [pc, #156]	@ (8001350 <MX_ADC2_Init+0xb8>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012ba:	4b24      	ldr	r3, [pc, #144]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012dc:	2201      	movs	r2, #1
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012f6:	2204      	movs	r2, #4
 80012f8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_ADC2_Init+0xb4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_ADC2_Init+0xb4>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <MX_ADC2_Init+0xb4>)
 8001308:	f000 feb4 	bl	8002074 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001312:	f000 fb01 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001316:	2305      	movs	r3, #5
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2301      	movs	r3, #1
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001322:	2301      	movs	r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_ADC2_Init+0xb4>)
 8001334:	f001 f9f8 	bl	8002728 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800133e:	f000 faeb 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000410 	.word	0x20000410
 8001350:	50000100 	.word	0x50000100

08001354 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_I2C1_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <MX_I2C1_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201826;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_I2C1_Init+0x74>)
 8001360:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <MX_I2C1_Init+0x7c>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_I2C1_Init+0x74>)
 800136c:	2201      	movs	r2, #1
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_I2C1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <MX_I2C1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138e:	480e      	ldr	r0, [pc, #56]	@ (80013c8 <MX_I2C1_Init+0x74>)
 8001390:	f002 f99c 	bl	80036cc <HAL_I2C_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800139a:	f000 fabd 	bl	8001918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139e:	2100      	movs	r1, #0
 80013a0:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <MX_I2C1_Init+0x74>)
 80013a2:	f002 ff1f 	bl	80041e4 <HAL_I2CEx_ConfigAnalogFilter>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f000 fab4 	bl	8001918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 80013b0:	2105      	movs	r1, #5
 80013b2:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_I2C1_Init+0x74>)
 80013b4:	f002 ff61 	bl	800427a <HAL_I2CEx_ConfigDigitalFilter>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013be:	f000 faab 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000460 	.word	0x20000460
 80013cc:	40005400 	.word	0x40005400
 80013d0:	00201826 	.word	0x00201826

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2224      	movs	r2, #36	@ 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 ff6d 	bl	800a2c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f2:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <MX_TIM1_Init+0xac>)
 80013f4:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <MX_TIM1_Init+0xb0>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_TIM1_Init+0xac>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <MX_TIM1_Init+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM1_Init+0xac>)
 8001406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_TIM1_Init+0xac>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_TIM1_Init+0xac>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_TIM1_Init+0xac>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800141e:	2303      	movs	r3, #3
 8001420:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800142e:	2305      	movs	r3, #5
 8001430:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001436:	2301      	movs	r3, #1
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 800143e:	2305      	movs	r3, #5
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_TIM1_Init+0xac>)
 800144a:	f004 fd25 	bl	8005e98 <HAL_TIM_Encoder_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001454:	f000 fa60 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_TIM1_Init+0xac>)
 800146a:	f005 fd61 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001474:	f000 fa50 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3730      	adds	r7, #48	@ 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200004b4 	.word	0x200004b4
 8001484:	40012c00 	.word	0x40012c00

08001488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	@ 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ba:	4b43      	ldr	r3, [pc, #268]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014c2:	4b41      	ldr	r3, [pc, #260]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014c4:	2247      	movs	r2, #71	@ 0x47
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b3f      	ldr	r3, [pc, #252]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014d0:	4a3e      	ldr	r2, [pc, #248]	@ (80015cc <MX_TIM2_Init+0x144>)
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4839      	ldr	r0, [pc, #228]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014e2:	f004 fa1b 	bl	800591c <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014ec:	f000 fa14 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4832      	ldr	r0, [pc, #200]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80014fe:	f005 f83c 	bl	800657a <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001508:	f000 fa06 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800150c:	482e      	ldr	r0, [pc, #184]	@ (80015c8 <MX_TIM2_Init+0x140>)
 800150e:	f004 fae8 	bl	8005ae2 <HAL_TIM_PWM_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001518:	f000 f9fe 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4827      	ldr	r0, [pc, #156]	@ (80015c8 <MX_TIM2_Init+0x140>)
 800152c:	f005 fd00 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001536:	f000 f9ef 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM2;
 800153a:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <MX_TIM2_Init+0x148>)
 800153c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60;
 800153e:	233c      	movs	r3, #60	@ 0x3c
 8001540:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <MX_TIM2_Init+0x140>)
 8001552:	f004 fed7 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800155c:	f000 f9dc 	bl	8001918 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_TIM2_Init+0x140>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <MX_TIM2_Init+0x140>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0208 	bic.w	r2, r2, #8
 800156e:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	@ 0x60
 8001572:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 45;
 8001574:	232d      	movs	r3, #45	@ 0x2d
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2204      	movs	r2, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4812      	ldr	r0, [pc, #72]	@ (80015c8 <MX_TIM2_Init+0x140>)
 8001580:	f004 fec0 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800158a:	f000 f9c5 	bl	8001918 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_TIM2_Init+0x140>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_TIM2_Init+0x140>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159c:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 40;
 800159e:	2328      	movs	r3, #40	@ 0x28
 80015a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	220c      	movs	r2, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80015aa:	f004 feab 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x130>
  {
    Error_Handler();
 80015b4:	f000 f9b0 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <MX_TIM2_Init+0x140>)
 80015ba:	f000 fb37 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	@ 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000500 	.word	0x20000500
 80015cc:	0001869f 	.word	0x0001869f
 80015d0:	00010050 	.word	0x00010050

080015d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_TIM7_Init+0x64>)
 80015e6:	4a15      	ldr	r2, [pc, #84]	@ (800163c <MX_TIM7_Init+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80015ea:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <MX_TIM7_Init+0x64>)
 80015ec:	2247      	movs	r2, #71	@ 0x47
 80015ee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_TIM7_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_TIM7_Init+0x64>)
 80015f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_TIM7_Init+0x64>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_TIM7_Init+0x64>)
 8001606:	f004 f989 	bl	800591c <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001610:	f000 f982 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_TIM7_Init+0x64>)
 8001622:	f005 fc85 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800162c:	f000 f974 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000054c 	.word	0x2000054c
 800163c:	40001400 	.word	0x40001400

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b64      	ldr	r3, [pc, #400]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a63      	ldr	r2, [pc, #396]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 800165c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b61      	ldr	r3, [pc, #388]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a5d      	ldr	r2, [pc, #372]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a57      	ldr	r2, [pc, #348]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b55      	ldr	r3, [pc, #340]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a51      	ldr	r2, [pc, #324]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a8:	6153      	str	r3, [r2, #20]
 80016aa:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	4b4c      	ldr	r3, [pc, #304]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 80016bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016c0:	6153      	str	r3, [r2, #20]
 80016c2:	4b49      	ldr	r3, [pc, #292]	@ (80017e8 <MX_GPIO_Init+0x1a8>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LcdBackLight_Pin|Lcd4_Pin|Lcd5_Pin|Lcd6_Pin
 80016ce:	2200      	movs	r2, #0
 80016d0:	f643 510f 	movw	r1, #15631	@ 0x3d0f
 80016d4:	4845      	ldr	r0, [pc, #276]	@ (80017ec <MX_GPIO_Init+0x1ac>)
 80016d6:	f001 ffc7 	bl	8003668 <HAL_GPIO_WritePin>
                          |Lcd7_Pin|Relay_Pin|Led1_Pin|Led2_Pin
                          |Led3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdEn_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2184      	movs	r1, #132	@ 0x84
 80016de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e2:	f001 ffc1 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ec:	4840      	ldr	r0, [pc, #256]	@ (80017f0 <MX_GPIO_Init+0x1b0>)
 80016ee:	f001 ffbb 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2104      	movs	r1, #4
 80016f6:	483f      	ldr	r0, [pc, #252]	@ (80017f4 <MX_GPIO_Init+0x1b4>)
 80016f8:	f001 ffb6 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LcdBackLight_Pin Lcd4_Pin Lcd5_Pin Lcd6_Pin
                           Lcd7_Pin Led1_Pin Led2_Pin Led3_Pin */
  GPIO_InitStruct.Pin = LcdBackLight_Pin|Lcd4_Pin|Lcd5_Pin|Lcd6_Pin
 80016fc:	f643 430f 	movw	r3, #15375	@ 0x3c0f
 8001700:	617b      	str	r3, [r7, #20]
                          |Lcd7_Pin|Led1_Pin|Led2_Pin|Led3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4835      	ldr	r0, [pc, #212]	@ (80017ec <MX_GPIO_Init+0x1ac>)
 8001716:	f001 fe1d 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : KeyStart_Pin */
  GPIO_InitStruct.Pin = KeyStart_Pin;
 800171a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KeyStart_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	482f      	ldr	r0, [pc, #188]	@ (80017ec <MX_GPIO_Init+0x1ac>)
 8001730:	f001 fe10 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : LcdEn_Pin LcdRs_Pin */
  GPIO_InitStruct.Pin = LcdEn_Pin|LcdRs_Pin;
 8001734:	2384      	movs	r3, #132	@ 0x84
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174e:	f001 fe01 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4821      	ldr	r0, [pc, #132]	@ (80017f0 <MX_GPIO_Init+0x1b0>)
 800176c:	f001 fdf2 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : ShortCircuitDetect_Pin */
  GPIO_InitStruct.Pin = ShortCircuitDetect_Pin;
 8001770:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ShortCircuitDetect_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	481a      	ldr	r0, [pc, #104]	@ (80017f0 <MX_GPIO_Init+0x1b0>)
 8001786:	f001 fde5 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 800178a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0x1ac>)
 80017a4:	f001 fdd6 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : KeyRotaryMiddle_Pin KeyStandby_Pin KeyBack_Pin */
  GPIO_InitStruct.Pin = KeyRotaryMiddle_Pin|KeyStandby_Pin|KeyBack_Pin;
 80017a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f001 fdc8 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led4_Pin */
  GPIO_InitStruct.Pin = Led4_Pin;
 80017c4:	2304      	movs	r3, #4
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led4_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <MX_GPIO_Init+0x1b4>)
 80017dc:	f001 fdba 	bl	8003354 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	@ 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48000c00 	.word	0x48000c00

080017f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001808:	d101      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ReadVoltageADC();
 800180a:	f006 f839 	bl	8007880 <ReadVoltageADC>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* create differents time for delay */
  if (htim->Instance == TIM7) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d15b      	bne.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0xd8>
	volatile static uint32_t count1ms = 0;
	count1ms++;
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001820:	6013      	str	r3, [r2, #0]
	flag1ms = true;
 8001822:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]

	if ( (count1ms % 10) == 0 )
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800182e:	fba3 2301 	umull	r2, r3, r3, r1
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	1aca      	subs	r2, r1, r3
 800183e:	2a00      	cmp	r2, #0
 8001840:	d146      	bne.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		//if ( (count1ms % 10) == 0 )
		//{
			flag10ms = true;
 8001842:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
			flcd10ms = true;
 8001848:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
		//}
		if ( (count1ms % 100) == 0 )
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001854:	fba3 1302 	umull	r1, r3, r3, r2
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	2164      	movs	r1, #100	@ 0x64
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			flag100ms = true;
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
			flcd100ms = true;
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
			f2lcd100ms = true;
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		/*if ( (count1ms % 300) == 0 )
		{
			flag300ms = true;
			flcd300ms = true;
		}*/
		if ( (count1ms % 500) == 0 )
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800187e:	fba3 1302 	umull	r1, r3, r3, r2
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			//flag500ms = true;
			flagRefreshValue500ms = true;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
			flcd500ms = true;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
			flag500ms = true;
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]

		}
		if ( (count1ms % 1000) == 0 )
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018aa:	fba3 1302 	umull	r1, r3, r3, r2
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0xd8>
		{
			//flagZeroDetectEr1s = true;
			flag1s = true;
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
			flcd1s = true;
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
			count1ms = 0;
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
			count1ms = 0;
		}*/
	}
  }
  /* USER CODE END Callback 1 */
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40001400 	.word	0x40001400
 80018dc:	200005b8 	.word	0x200005b8
 80018e0:	20000598 	.word	0x20000598
 80018e4:	cccccccd 	.word	0xcccccccd
 80018e8:	20000599 	.word	0x20000599
 80018ec:	2000059d 	.word	0x2000059d
 80018f0:	51eb851f 	.word	0x51eb851f
 80018f4:	2000059a 	.word	0x2000059a
 80018f8:	2000059e 	.word	0x2000059e
 80018fc:	2000059f 	.word	0x2000059f
 8001900:	10624dd3 	.word	0x10624dd3
 8001904:	200005a2 	.word	0x200005a2
 8001908:	200005a0 	.word	0x200005a0
 800190c:	2000059b 	.word	0x2000059b
 8001910:	2000059c 	.word	0x2000059c
 8001914:	200005a1 	.word	0x200005a1

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <Error_Handler+0x8>

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_MspInit+0x44>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <HAL_MspInit+0x44>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_MspInit+0x44>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_MspInit+0x44>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_MspInit+0x44>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800198c:	d146      	bne.n	8001a1c <HAL_ADC_MspInit+0xb0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800198e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <HAL_ADC_MspInit+0x11c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a3c      	ldr	r2, [pc, #240]	@ (8001a88 <HAL_ADC_MspInit+0x11c>)
 8001996:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001998:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_ADC_MspInit+0x11c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10b      	bne.n	80019b8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019a0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	4a39      	ldr	r2, [pc, #228]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	6153      	str	r3, [r2, #20]
 80019ac:	4b37      	ldr	r3, [pc, #220]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	4a33      	ldr	r2, [pc, #204]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c2:	6153      	str	r3, [r2, #20]
 80019c4:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019da:	6153      	str	r3, [r2, #20]
 80019dc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Ntc1_Pin;
 80019e8:	2308      	movs	r3, #8
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ec:	2303      	movs	r3, #3
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Ntc1_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fe:	f001 fca9 	bl	8003354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Ntc2_Pin;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Ntc2_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	481e      	ldr	r0, [pc, #120]	@ (8001a90 <HAL_ADC_MspInit+0x124>)
 8001a16:	f001 fc9d 	bl	8003354 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a1a:	e031      	b.n	8001a80 <HAL_ADC_MspInit+0x114>
  else if(hadc->Instance==ADC2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <HAL_ADC_MspInit+0x128>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d12c      	bne.n	8001a80 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_ADC_MspInit+0x11c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <HAL_ADC_MspInit+0x11c>)
 8001a2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_ADC_MspInit+0x11c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10b      	bne.n	8001a50 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	4a13      	ldr	r2, [pc, #76]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6153      	str	r3, [r2, #20]
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 8001a56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a5a:	6153      	str	r3, [r2, #20]
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_ADC_MspInit+0x120>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VoltageRead_Pin;
 8001a68:	2310      	movs	r3, #16
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VoltageRead_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <HAL_ADC_MspInit+0x12c>)
 8001a7c:	f001 fc6a 	bl	8003354 <HAL_GPIO_Init>
}
 8001a80:	bf00      	nop
 8001a82:	3730      	adds	r7, #48	@ 0x30
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200005bc 	.word	0x200005bc
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	50000100 	.word	0x50000100
 8001a98:	48000800 	.word	0x48000800

08001a9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_I2C_MspInit+0x7c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d128      	bne.n	8001b10 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <HAL_I2C_MspInit+0x80>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <HAL_I2C_MspInit+0x80>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac8:	6153      	str	r3, [r2, #20]
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_I2C_MspInit+0x80>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ad6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001adc:	2312      	movs	r3, #18
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <HAL_I2C_MspInit+0x84>)
 8001af4:	f001 fc2e 	bl	8003354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_I2C_MspInit+0x80>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <HAL_I2C_MspInit+0x80>)
 8001afe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b02:	61d3      	str	r3, [r2, #28]
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_I2C_MspInit+0x80>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400

08001b24 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d129      	bne.n	8001b9a <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RotaryA_Pin|RotaryB_Pin;
 8001b76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b96:	f001 fbdd 	bl	8003354 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	@ 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bbc:	d114      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_TIM_Base_MspInit+0x78>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	@ (8001c24 <HAL_TIM_Base_MspInit+0x78>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <HAL_TIM_Base_MspInit+0x78>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	201c      	movs	r0, #28
 8001bdc:	f001 fb83 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be0:	201c      	movs	r0, #28
 8001be2:	f001 fb9c 	bl	800331e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001be6:	e018      	b.n	8001c1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_TIM_Base_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d113      	bne.n	8001c1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_TIM_Base_MspInit+0x78>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_TIM_Base_MspInit+0x78>)
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_TIM_Base_MspInit+0x78>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2037      	movs	r0, #55	@ 0x37
 8001c10:	f001 fb69 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001c14:	2037      	movs	r0, #55	@ 0x37
 8001c16:	f001 fb82 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40001400 	.word	0x40001400

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c4c:	d13a      	bne.n	8001cc4 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	@ (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	6153      	str	r3, [r2, #20]
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PrePulse_Pin;
 8001c7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PrePulse_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <HAL_TIM_MspPostInit+0xa4>)
 8001c9c:	f001 fb5a 	bl	8003354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pulse_Pin;
 8001ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Pulse_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc0:	f001 fb48 	bl	8003354 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	@ 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <NMI_Handler+0x4>

08001cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2a:	f000 f95f 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <TIM2_IRQHandler+0x10>)
 8001d3a:	f004 f9e1 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000500 	.word	0x20000500

08001d48 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <TIM7_DAC2_IRQHandler+0x10>)
 8001d4e:	f004 f9d7 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000054c 	.word	0x2000054c

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d76:	f008 fb07 	bl	800a388 <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <_exit+0x12>

08001da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e00a      	b.n	8001dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db4:	f3af 8000 	nop.w
 8001db8:	4601      	mov	r1, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	60ba      	str	r2, [r7, #8]
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf0      	blt.n	8001db4 <_read+0x12>
  }

  return len;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e009      	b.n	8001e02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	60ba      	str	r2, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbf1      	blt.n	8001dee <_write+0x12>
  }
  return len;
 8001e0a:	687b      	ldr	r3, [r7, #4]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_close>:

int _close(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f008 fa6c 	bl	800a388 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20003000 	.word	0x20003000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	200005c0 	.word	0x200005c0
 8001ee4:	20000900 	.word	0x20000900

08001ee8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f10:	f7ff ffea 	bl	8001ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	@ (8001f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <LoopForever+0xe>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f58 <LoopForever+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f008 fa2b 	bl	800a394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3e:	f7fe ffab 	bl	8000e98 <main>

08001f42 <LoopForever>:

LoopForever:
    b LoopForever
 8001f42:	e7fe      	b.n	8001f42 <LoopForever>
ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 8001f50:	0800df74 	.word	0x0800df74
  ldr r2, =_sbss
 8001f54:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 8001f58:	200008fc 	.word	0x200008fc

08001f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_2_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_Init+0x28>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <HAL_Init+0x28>)
 8001f6a:	f043 0310 	orr.w	r3, r3, #16
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f001 f9ad 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f76:	200f      	movs	r0, #15
 8001f78:	f000 f808 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7c:	f7ff fcd2 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40022000 	.word	0x40022000

08001f8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_InitTick+0x54>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_InitTick+0x58>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f9c5 	bl	800333a <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00e      	b.n	8001fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d80a      	bhi.n	8001fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f001 f98d 	bl	80032e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fcc:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <HAL_InitTick+0x5c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000068 	.word	0x20000068
 8001fe4:	20000070 	.word	0x20000070
 8001fe8:	2000006c 	.word	0x2000006c

08001fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000070 	.word	0x20000070
 8002010:	200005c4 	.word	0x200005c4

08002014 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;  
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200005c4 	.word	0x200005c4

0800202c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffde 	bl	8002014 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000070 	.word	0x20000070

08002074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09a      	sub	sp, #104	@ 0x68
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e172      	b.n	800237a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d176      	bne.n	8002194 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d152      	bne.n	8002154 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fc4f 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d13b      	bne.n	8002154 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 ff0b 	bl	8002ef8 <ADC_Disable>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d12f      	bne.n	8002154 <HAL_ADC_Init+0xe0>
 80020f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12b      	bne.n	8002154 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002104:	f023 0302 	bic.w	r3, r3, #2
 8002108:	f043 0202 	orr.w	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800211e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800212e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002130:	4b94      	ldr	r3, [pc, #592]	@ (8002384 <HAL_ADC_Init+0x310>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a94      	ldr	r2, [pc, #592]	@ (8002388 <HAL_ADC_Init+0x314>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002146:	e002      	b.n	800214e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800216c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002170:	d110      	bne.n	8002194 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f023 0312 	bic.w	r3, r3, #18
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 80df 	bne.w	8002360 <HAL_ADC_Init+0x2ec>
 80021a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80da 	bne.w	8002360 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80d2 	bne.w	8002360 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021c4:	f043 0202 	orr.w	r2, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021cc:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <HAL_ADC_Init+0x318>)
 80021ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d8:	d102      	bne.n	80021e0 <HAL_ADC_Init+0x16c>
 80021da:	4b6d      	ldr	r3, [pc, #436]	@ (8002390 <HAL_ADC_Init+0x31c>)
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e002      	b.n	80021e6 <HAL_ADC_Init+0x172>
 80021e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_ADC_Init+0x192>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_ADC_Init+0x192>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_ADC_Init+0x194>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d11c      	bne.n	8002246 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800220c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_ADC_Init+0x1ba>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x1ba>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_ADC_Init+0x1bc>
 800222e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	431a      	orrs	r2, r3
 8002242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002244:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7e5b      	ldrb	r3, [r3, #25]
 800224a:	035b      	lsls	r3, r3, #13
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002250:	2a01      	cmp	r2, #1
 8002252:	d002      	beq.n	800225a <HAL_ADC_Init+0x1e6>
 8002254:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002258:	e000      	b.n	800225c <HAL_ADC_Init+0x1e8>
 800225a:	2200      	movs	r2, #0
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800226c:	4313      	orrs	r3, r2
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d11b      	bne.n	80022b2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7e5b      	ldrb	r3, [r3, #25]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	045a      	lsls	r2, r3, #17
 800228a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228c:	4313      	orrs	r3, r2
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	663b      	str	r3, [r7, #96]	@ 0x60
 8002294:	e00d      	b.n	80022b2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800229e:	f043 0220 	orr.w	r2, r3, #32
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d007      	beq.n	80022ca <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	4313      	orrs	r3, r2
 80022c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022c6:	4313      	orrs	r3, r2
 80022c8:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d114      	bne.n	8002302 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	039a      	lsls	r2, r3, #14
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4313      	orrs	r3, r2
 80022fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022fe:	4313      	orrs	r3, r2
 8002300:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <HAL_ADC_Init+0x320>)
 800230a:	4013      	ands	r3, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002312:	430b      	orrs	r3, r1
 8002314:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d10c      	bne.n	8002338 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	f023 010f 	bic.w	r1, r3, #15
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
 8002336:	e007      	b.n	8002348 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 020f 	bic.w	r2, r2, #15
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
 800235e:	e00a      	b.n	8002376 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f023 0312 	bic.w	r3, r3, #18
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002376:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800237a:	4618      	mov	r0, r3
 800237c:	3768      	adds	r7, #104	@ 0x68
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000068 	.word	0x20000068
 8002388:	431bde83 	.word	0x431bde83
 800238c:	50000300 	.word	0x50000300
 8002390:	50000100 	.word	0x50000100
 8002394:	fff0c007 	.word	0xfff0c007

08002398 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 809c 	bne.w	80024ec <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Start+0x2a>
 80023be:	2302      	movs	r3, #2
 80023c0:	e097      	b.n	80024f2 <HAL_ADC_Start+0x15a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fd30 	bl	8002e30 <ADC_Enable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 8083 	bne.w	80024e2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023f0:	4b42      	ldr	r3, [pc, #264]	@ (80024fc <HAL_ADC_Start+0x164>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_ADC_Start+0x6e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002404:	d115      	bne.n	8002432 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d027      	beq.n	8002470 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002428:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002430:	e01e      	b.n	8002470 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002446:	d004      	beq.n	8002452 <HAL_ADC_Start+0xba>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2c      	ldr	r2, [pc, #176]	@ (8002500 <HAL_ADC_Start+0x168>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10e      	bne.n	8002470 <HAL_ADC_Start+0xd8>
 8002452:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002468:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800247c:	d106      	bne.n	800248c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f023 0206 	bic.w	r2, r3, #6
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
 800248a:	e002      	b.n	8002492 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	221c      	movs	r2, #28
 80024a0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <HAL_ADC_Start+0x164>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_ADC_Start+0x138>
 80024ae:	4b13      	ldr	r3, [pc, #76]	@ (80024fc <HAL_ADC_Start+0x164>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d00a      	beq.n	80024d0 <HAL_ADC_Start+0x138>
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_ADC_Start+0x164>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	d004      	beq.n	80024d0 <HAL_ADC_Start+0x138>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ce:	d10f      	bne.n	80024f0 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0204 	orr.w	r2, r2, #4
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	e006      	b.n	80024f0 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024ea:	e001      	b.n	80024f0 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
 80024ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	50000300 	.word	0x50000300
 8002500:	50000100 	.word	0x50000100

08002504 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADC_Stop+0x1a>
 800251a:	2302      	movs	r3, #2
 800251c:	e023      	b.n	8002566 <HAL_ADC_Stop+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002526:	216c      	movs	r1, #108	@ 0x6c
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fd4b 	bl	8002fc4 <ADC_ConversionStop>
 800252e:	4603      	mov	r3, r0
 8002530:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fcdd 	bl	8002ef8 <ADC_Disable>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b08      	cmp	r3, #8
 8002584:	d102      	bne.n	800258c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002586:	2308      	movs	r3, #8
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e02e      	b.n	80025ea <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258c:	4b5e      	ldr	r3, [pc, #376]	@ (8002708 <HAL_ADC_PollForConversion+0x198>)
 800258e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2b00      	cmp	r3, #0
 800259a:	d112      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d11d      	bne.n	80025e6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e09d      	b.n	80026fe <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e08b      	b.n	80026fe <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025e6:	230c      	movs	r3, #12
 80025e8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <HAL_ADC_PollForConversion+0x198>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_ADC_PollForConversion+0x90>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025fe:	d104      	bne.n	800260a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e003      	b.n	8002612 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800260a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002612:	f7ff fcff 	bl	8002014 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002618:	e021      	b.n	800265e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d01d      	beq.n	800265e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_ADC_PollForConversion+0xc8>
 8002628:	f7ff fcf4 	bl	8002014 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d212      	bcs.n	800265e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f043 0204 	orr.w	r2, r3, #4
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e04f      	b.n	80026fe <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0d6      	beq.n	800261a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002682:	2b00      	cmp	r3, #0
 8002684:	d131      	bne.n	80026ea <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800268c:	2b00      	cmp	r3, #0
 800268e:	d12c      	bne.n	80026ea <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d125      	bne.n	80026ea <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d112      	bne.n	80026d2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d112      	bne.n	80026ea <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d0:	e00b      	b.n	80026ea <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	50000300 	.word	0x50000300

0800270c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002728:	b480      	push	{r7}
 800272a:	b09b      	sub	sp, #108	@ 0x6c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x22>
 8002746:	2302      	movs	r3, #2
 8002748:	e2a1      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x566>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 8285 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d81c      	bhi.n	80027a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	461a      	mov	r2, r3
 800277e:	231f      	movs	r3, #31
 8002780:	4093      	lsls	r3, r2
 8002782:	43db      	mvns	r3, r3
 8002784:	4019      	ands	r1, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa00 f203 	lsl.w	r2, r0, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a2:	e063      	b.n	800286c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d81e      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	3b1e      	subs	r3, #30
 80027c0:	221f      	movs	r2, #31
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	4019      	ands	r1, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	3b1e      	subs	r3, #30
 80027dc:	fa00 f203 	lsl.w	r2, r0, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80027e8:	e040      	b.n	800286c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b0e      	cmp	r3, #14
 80027f0:	d81e      	bhi.n	8002830 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	3b3c      	subs	r3, #60	@ 0x3c
 8002806:	221f      	movs	r2, #31
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	4019      	ands	r1, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	3b3c      	subs	r3, #60	@ 0x3c
 8002822:	fa00 f203 	lsl.w	r2, r0, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	639a      	str	r2, [r3, #56]	@ 0x38
 800282e:	e01d      	b.n	800286c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	3b5a      	subs	r3, #90	@ 0x5a
 8002844:	221f      	movs	r2, #31
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	4019      	ands	r1, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	3b5a      	subs	r3, #90	@ 0x5a
 8002860:	fa00 f203 	lsl.w	r2, r0, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 80e5 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b09      	cmp	r3, #9
 8002882:	d91c      	bls.n	80028be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6999      	ldr	r1, [r3, #24]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	3b1e      	subs	r3, #30
 8002896:	2207      	movs	r2, #7
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	4019      	ands	r1, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6898      	ldr	r0, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	3b1e      	subs	r3, #30
 80028b0:	fa00 f203 	lsl.w	r2, r0, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e019      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6959      	ldr	r1, [r3, #20]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	2207      	movs	r2, #7
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4019      	ands	r1, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6898      	ldr	r0, [r3, #8]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	3b01      	subs	r3, #1
 8002910:	2b03      	cmp	r3, #3
 8002912:	d84f      	bhi.n	80029b4 <HAL_ADC_ConfigChannel+0x28c>
 8002914:	a201      	add	r2, pc, #4	@ (adr r2, 800291c <HAL_ADC_ConfigChannel+0x1f4>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	0800292d 	.word	0x0800292d
 8002920:	0800294f 	.word	0x0800294f
 8002924:	08002971 	.word	0x08002971
 8002928:	08002993 	.word	0x08002993
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002932:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x47c>)
 8002934:	4013      	ands	r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	0691      	lsls	r1, r2, #26
 800293c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800293e:	430a      	orrs	r2, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800294a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800294c:	e07b      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002954:	4b93      	ldr	r3, [pc, #588]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x47c>)
 8002956:	4013      	ands	r3, r2
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	0691      	lsls	r1, r2, #26
 800295e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002960:	430a      	orrs	r2, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800296c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800296e:	e06a      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002976:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x47c>)
 8002978:	4013      	ands	r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	0691      	lsls	r1, r2, #26
 8002980:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002982:	430a      	orrs	r2, r1
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800298e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002990:	e059      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002998:	4b82      	ldr	r3, [pc, #520]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x47c>)
 800299a:	4013      	ands	r3, r2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	0691      	lsls	r1, r2, #26
 80029a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029a4:	430a      	orrs	r2, r1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029b0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029b2:	e048      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029d6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	069b      	lsls	r3, r3, #26
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029fa:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	069b      	lsls	r3, r3, #26
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d107      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a1e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a42:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002a44:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x33e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x33e>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x340>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 810a 	bne.w	8002c82 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d00f      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	400a      	ands	r2, r1
 8002a90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002a94:	e049      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d91c      	bls.n	8002af2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6999      	ldr	r1, [r3, #24]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b1b      	subs	r3, #27
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6898      	ldr	r0, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b1b      	subs	r3, #27
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	619a      	str	r2, [r3, #24]
 8002af0:	e01b      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6959      	ldr	r1, [r3, #20]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	2207      	movs	r2, #7
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4019      	ands	r1, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6898      	ldr	r0, [r3, #8]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x480>)
 8002b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b46:	2b11      	cmp	r3, #17
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	f040 8091 	bne.w	8002c82 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 808a 	bne.w	8002c82 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b76:	d102      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x456>
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_ADC_ConfigChannel+0x484>)
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e002      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x45c>
 8002b7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b82:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10e      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x488>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x488>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e006      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x48a>
 8002ba4:	83fff000 	.word	0x83fff000
 8002ba8:	50000300 	.word	0x50000300
 8002bac:	50000100 	.word	0x50000100
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d150      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d010      	beq.n	8002bde <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x4b0>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x4b0>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x4b2>
 8002bd8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d13c      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d11d      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4fa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bee:	d118      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bfa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfc:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <HAL_ADC_ConfigChannel+0x574>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a27      	ldr	r2, [pc, #156]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x578>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0c9a      	lsrs	r2, r3, #18
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c20:	e02e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d10b      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x51a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c32:	d106      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c40:	e01e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d11a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c54:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c56:	e013      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c6a:	e00a      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c7e:	e000      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c80:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	376c      	adds	r7, #108	@ 0x6c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000068 	.word	0x20000068
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b099      	sub	sp, #100	@ 0x64
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cbc:	d102      	bne.n	8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	e002      	b.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002cc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cc8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0a2      	b.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e09b      	b.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d17f      	bne.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d179      	bne.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d04:	4b49      	ldr	r3, [pc, #292]	@ (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002d06:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d040      	beq.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d22:	035b      	lsls	r3, r3, #13
 8002d24:	430b      	orrs	r3, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d2a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d15c      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002d6e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d14b      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d7c:	f023 030f 	bic.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	6811      	ldr	r1, [r2, #0]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d8e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d90:	e03c      	b.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d9c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d123      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002de0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d112      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dee:	f023 030f 	bic.w	r3, r3, #15
 8002df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002df4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df6:	e009      	b.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002e0a:	e000      	b.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3764      	adds	r7, #100	@ 0x64
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	50000100 	.word	0x50000100
 8002e2c:	50000300 	.word	0x50000300

08002e30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d108      	bne.n	8002e5c <ADC_Enable+0x2c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <ADC_Enable+0x2c>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <ADC_Enable+0x2e>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d143      	bne.n	8002eea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	4b22      	ldr	r3, [pc, #136]	@ (8002ef4 <ADC_Enable+0xc4>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e02f      	b.n	8002eec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e9c:	f7ff f8ba 	bl	8002014 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ea2:	e01b      	b.n	8002edc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ea4:	f7ff f8b6 	bl	8002014 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d914      	bls.n	8002edc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d00d      	beq.n	8002edc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f043 0210 	orr.w	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d1dc      	bne.n	8002ea4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	8000003f 	.word	0x8000003f

08002ef8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <ADC_Disable+0x2c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <ADC_Disable+0x2c>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <ADC_Disable+0x2e>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d047      	beq.n	8002fba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030d 	and.w	r3, r3, #13
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10f      	bne.n	8002f58 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0202 	orr.w	r2, r2, #2
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f50:	f7ff f860 	bl	8002014 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f56:	e029      	b.n	8002fac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0210 	orr.w	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e023      	b.n	8002fbc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f74:	f7ff f84e 	bl	8002014 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d914      	bls.n	8002fac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10d      	bne.n	8002fac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d0dc      	beq.n	8002f74 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 809b 	beq.w	8003120 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff8:	d12a      	bne.n	8003050 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d126      	bne.n	8003050 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003006:	2b01      	cmp	r3, #1
 8003008:	d122      	bne.n	8003050 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800300a:	230c      	movs	r3, #12
 800300c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800300e:	e014      	b.n	800303a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4a46      	ldr	r2, [pc, #280]	@ (800312c <ADC_ConversionStop+0x168>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d90d      	bls.n	8003034 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e076      	b.n	8003122 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3301      	adds	r3, #1
 8003038:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d1e3      	bne.n	8003010 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b60      	cmp	r3, #96	@ 0x60
 8003054:	d015      	beq.n	8003082 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d10e      	bne.n	8003082 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800306e:	2b00      	cmp	r3, #0
 8003070:	d107      	bne.n	8003082 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0210 	orr.w	r2, r2, #16
 8003080:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d015      	beq.n	80030b4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b08      	cmp	r3, #8
 8003094:	d10e      	bne.n	80030b4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b60      	cmp	r3, #96	@ 0x60
 80030b8:	d005      	beq.n	80030c6 <ADC_ConversionStop+0x102>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b6c      	cmp	r3, #108	@ 0x6c
 80030be:	d105      	bne.n	80030cc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80030c0:	230c      	movs	r3, #12
 80030c2:	617b      	str	r3, [r7, #20]
        break;
 80030c4:	e005      	b.n	80030d2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80030c6:	2308      	movs	r3, #8
 80030c8:	617b      	str	r3, [r7, #20]
        break;
 80030ca:	e002      	b.n	80030d2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80030cc:	2304      	movs	r3, #4
 80030ce:	617b      	str	r3, [r7, #20]
        break;
 80030d0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80030d2:	f7fe ff9f 	bl	8002014 <HAL_GetTick>
 80030d6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030d8:	e01b      	b.n	8003112 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030da:	f7fe ff9b 	bl	8002014 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b0b      	cmp	r3, #11
 80030e6:	d914      	bls.n	8003112 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1dc      	bne.n	80030da <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	000993ff 	.word	0x000993ff

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	@ (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	@ (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	@ (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	@ 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff29 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff3e 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff8e 	bl	8003224 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff31 	bl	8003194 <__NVIC_EnableIRQ>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffa2 	bl	800328c <SysTick_Config>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003362:	e14e      	b.n	8003602 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8140 	beq.w	80035fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d005      	beq.n	8003394 <HAL_GPIO_Init+0x40>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d130      	bne.n	80033f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ca:	2201      	movs	r2, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0201 	and.w	r2, r3, #1
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d017      	beq.n	8003432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d123      	bne.n	8003486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	6939      	ldr	r1, [r7, #16]
 8003482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0203 	and.w	r2, r3, #3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 809a 	beq.w	80035fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c8:	4b55      	ldr	r3, [pc, #340]	@ (8003620 <HAL_GPIO_Init+0x2cc>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4a54      	ldr	r2, [pc, #336]	@ (8003620 <HAL_GPIO_Init+0x2cc>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6193      	str	r3, [r2, #24]
 80034d4:	4b52      	ldr	r3, [pc, #328]	@ (8003620 <HAL_GPIO_Init+0x2cc>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034e0:	4a50      	ldr	r2, [pc, #320]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	220f      	movs	r2, #15
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800350a:	d013      	beq.n	8003534 <HAL_GPIO_Init+0x1e0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a46      	ldr	r2, [pc, #280]	@ (8003628 <HAL_GPIO_Init+0x2d4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00d      	beq.n	8003530 <HAL_GPIO_Init+0x1dc>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a45      	ldr	r2, [pc, #276]	@ (800362c <HAL_GPIO_Init+0x2d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_Init+0x1d8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a44      	ldr	r2, [pc, #272]	@ (8003630 <HAL_GPIO_Init+0x2dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_GPIO_Init+0x1d4>
 8003524:	2303      	movs	r3, #3
 8003526:	e006      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 8003528:	2305      	movs	r3, #5
 800352a:	e004      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 800352c:	2302      	movs	r3, #2
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 8003534:	2300      	movs	r3, #0
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003546:	4937      	ldr	r1, [pc, #220]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003554:	4b37      	ldr	r3, [pc, #220]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003578:	4a2e      	ldr	r2, [pc, #184]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357e:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035a2:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a8:	4b22      	ldr	r3, [pc, #136]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035cc:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d2:	4b18      	ldr	r3, [pc, #96]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003634 <HAL_GPIO_Init+0x2e0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f aea9 	bne.w	8003364 <HAL_GPIO_Init+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e001      	b.n	800365a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003684:	e002      	b.n	800368c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4013      	ands	r3, r2
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43d9      	mvns	r1, r3
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	400b      	ands	r3, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e08d      	b.n	80037fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe f9d2 	bl	8001a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	@ 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800371c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800372c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e006      	b.n	8003754 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d108      	bne.n	800376e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	e007      	b.n	800377e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	460b      	mov	r3, r1
 8003818:	813b      	strh	r3, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b20      	cmp	r3, #32
 8003828:	f040 80f9 	bne.w	8003a1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_I2C_Mem_Write+0x34>
 8003832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0ed      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2C_Mem_Write+0x4e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0e6      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800385a:	f7fe fbdb 	bl	8002014 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fac3 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d1      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2221      	movs	r2, #33	@ 0x21
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	@ 0x40
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800389c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a4:	88f8      	ldrh	r0, [r7, #6]
 80038a6:	893a      	ldrh	r2, [r7, #8]
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4603      	mov	r3, r0
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f9d3 	bl	8003c60 <I2C_RequestMemoryWrite>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a9      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2bff      	cmp	r3, #255	@ 0xff
 80038d4:	d90e      	bls.n	80038f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22ff      	movs	r2, #255	@ 0xff
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	8979      	ldrh	r1, [r7, #10]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fc47 	bl	8004180 <I2C_TransferConfig>
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	b2da      	uxtb	r2, r3
 8003904:	8979      	ldrh	r1, [r7, #10]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fc36 	bl	8004180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fac6 	bl	8003eaa <I2C_WaitOnTXISFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e07b      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d034      	beq.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d130      	bne.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa3f 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04d      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2bff      	cmp	r3, #255	@ 0xff
 800398c:	d90e      	bls.n	80039ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	@ 0xff
 8003992:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	b2da      	uxtb	r2, r3
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fbeb 	bl	8004180 <I2C_TransferConfig>
 80039aa:	e00f      	b.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	2300      	movs	r3, #0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fbda 	bl	8004180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d19e      	bne.n	8003914 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 faac 	bl	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e01a      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2220      	movs	r2, #32
 80039f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <HAL_I2C_Mem_Write+0x224>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	fe00e800 	.word	0xfe00e800

08003a2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	813b      	strh	r3, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	f040 80fd 	bne.w	8003c4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x34>
 8003a5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0f1      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x4e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e0ea      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a82:	f7fe fac7 	bl	8002014 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2319      	movs	r3, #25
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f9af 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0d5      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2222      	movs	r2, #34	@ 0x22
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	@ 0x40
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003acc:	88f8      	ldrh	r0, [r7, #6]
 8003ace:	893a      	ldrh	r2, [r7, #8]
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4603      	mov	r3, r0
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f913 	bl	8003d08 <I2C_RequestMemoryRead>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0ad      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2bff      	cmp	r3, #255	@ 0xff
 8003afc:	d90e      	bls.n	8003b1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	4b52      	ldr	r3, [pc, #328]	@ (8003c58 <HAL_I2C_Mem_Read+0x22c>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fb33 	bl	8004180 <I2C_TransferConfig>
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_I2C_Mem_Read+0x22c>)
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fb22 	bl	8004180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	2200      	movs	r2, #0
 8003b44:	2104      	movs	r1, #4
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f956 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07c      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d034      	beq.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d130      	bne.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	@ 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f927 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04d      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	@ 0xff
 8003bbc:	d90e      	bls.n	8003bdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fad3 	bl	8004180 <I2C_TransferConfig>
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fac2 	bl	8004180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d19a      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f994 	bl	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e01a      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_I2C_Mem_Read+0x230>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	80002400 	.word	0x80002400
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	8979      	ldrh	r1, [r7, #10]
 8003c80:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <I2C_RequestMemoryWrite+0xa4>)
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fa79 	bl	8004180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f909 	bl	8003eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e02c      	b.n	8003cfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cb2:	e015      	b.n	8003ce0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f8ef 	bl	8003eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e012      	b.n	8003cfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd6:	893b      	ldrh	r3, [r7, #8]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	@ 0x80
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f884 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	80002000 	.word	0x80002000

08003d08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	8979      	ldrh	r1, [r7, #10]
 8003d28:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <I2C_RequestMemoryRead+0xa4>)
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fa26 	bl	8004180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	69b9      	ldr	r1, [r7, #24]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f8b6 	bl	8003eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e02c      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d58:	e015      	b.n	8003d86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	69b9      	ldr	r1, [r7, #24]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f89c 	bl	8003eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e012      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2140      	movs	r1, #64	@ 0x40
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f831 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	80002000 	.word	0x80002000

08003db0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d103      	bne.n	8003dce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d007      	beq.n	8003dec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	619a      	str	r2, [r3, #24]
  }
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e08:	e03b      	b.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f8d6 	bl	8003fc0 <I2C_IsErrorOccurred>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e041      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d02d      	beq.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe f8f5 	bl	8002014 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d122      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d113      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00f      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d0b4      	beq.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb6:	e033      	b.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f87f 	bl	8003fc0 <I2C_IsErrorOccurred>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e031      	b.n	8003f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d025      	beq.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed4:	f7fe f89e 	bl	8002014 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11a      	bne.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d013      	beq.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d1c4      	bne.n	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f44:	e02f      	b.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f838 	bl	8003fc0 <I2C_IsErrorOccurred>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02d      	b.n	8003fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe f85b 	bl	8002014 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11a      	bne.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d013      	beq.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d1c8      	bne.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d068      	beq.n	80040be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ff4:	e049      	b.n	800408a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d045      	beq.n	800408a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe f809 	bl	8002014 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_IsErrorOccurred+0x54>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13a      	bne.n	800408a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004036:	d121      	bne.n	800407c <I2C_IsErrorOccurred+0xbc>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800403e:	d01d      	beq.n	800407c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b20      	cmp	r3, #32
 8004044:	d01a      	beq.n	800407c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004056:	f7fd ffdd 	bl	8002014 <HAL_GetTick>
 800405a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	e00e      	b.n	800407c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800405e:	f7fd ffd9 	bl	8002014 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b19      	cmp	r3, #25
 800406a:	d907      	bls.n	800407c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f043 0320 	orr.w	r3, r3, #32
 8004072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800407a:	e006      	b.n	800408a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d1e9      	bne.n	800405e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d003      	beq.n	80040a0 <I2C_IsErrorOccurred+0xe0>
 8004098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0aa      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2220      	movs	r2, #32
 80040ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f043 0302 	orr.w	r3, r3, #2
 800411a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800412c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fe3b 	bl	8003db0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <I2C_IsErrorOccurred+0x1bc>)
 8004146:	400b      	ands	r3, r1
 8004148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800416e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	@ 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	4613      	mov	r3, r2
 8004190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004198:	7a7b      	ldrb	r3, [r7, #9]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	0d5b      	lsrs	r3, r3, #21
 80041ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80041be:	4b08      	ldr	r3, [pc, #32]	@ (80041e0 <I2C_TransferConfig+0x60>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	43db      	mvns	r3, r3
 80041c4:	ea02 0103 	and.w	r1, r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	03ff63ff 	.word	0x03ff63ff

080041e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d138      	bne.n	800426c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004204:	2302      	movs	r3, #2
 8004206:	e032      	b.n	800426e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	@ 0x24
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b20      	cmp	r3, #32
 800428e:	d139      	bne.n	8004304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800429a:	2302      	movs	r3, #2
 800429c:	e033      	b.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2224      	movs	r2, #36	@ 0x24
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800431a:	af00      	add	r7, sp, #0
 800431c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004324:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f000 bff4 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 816d 	beq.w	800462a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004350:	4bb4      	ldr	r3, [pc, #720]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b04      	cmp	r3, #4
 800435a:	d00c      	beq.n	8004376 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800435c:	4bb1      	ldr	r3, [pc, #708]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	d157      	bne.n	8004418 <HAL_RCC_OscConfig+0x104>
 8004368:	4bae      	ldr	r3, [pc, #696]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004374:	d150      	bne.n	8004418 <HAL_RCC_OscConfig+0x104>
 8004376:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800437a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800438a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b3f      	cmp	r3, #63	@ 0x3f
 8004396:	d802      	bhi.n	800439e <HAL_RCC_OscConfig+0x8a>
 8004398:	4ba2      	ldr	r3, [pc, #648]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0xb6>
 800439e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043a2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80043b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043b6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80043ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80043c6:	4b97      	ldr	r3, [pc, #604]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043ce:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80043d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80043d6:	fa92 f2a2 	rbit	r2, r2
 80043da:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80043de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80043e2:	fab2 f282 	clz	r2, r2
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f042 0220 	orr.w	r2, r2, #32
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f002 021f 	and.w	r2, r2, #31
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f202 	lsl.w	r2, r1, r2
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8114 	beq.w	8004628 <HAL_RCC_OscConfig+0x314>
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 810b 	bne.w	8004628 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f000 bf85 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x124>
 800442a:	4b7e      	ldr	r3, [pc, #504]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7d      	ldr	r2, [pc, #500]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e036      	b.n	80044a6 <HAL_RCC_OscConfig+0x192>
 8004438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <HAL_RCC_OscConfig+0x14e>
 8004448:	4b76      	ldr	r3, [pc, #472]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a75      	ldr	r2, [pc, #468]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b73      	ldr	r3, [pc, #460]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a72      	ldr	r2, [pc, #456]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e021      	b.n	80044a6 <HAL_RCC_OscConfig+0x192>
 8004462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004466:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004472:	d10c      	bne.n	800448e <HAL_RCC_OscConfig+0x17a>
 8004474:	4b6b      	ldr	r3, [pc, #428]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6a      	ldr	r2, [pc, #424]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800447a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b68      	ldr	r3, [pc, #416]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a67      	ldr	r2, [pc, #412]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e00b      	b.n	80044a6 <HAL_RCC_OscConfig+0x192>
 800448e:	4b65      	ldr	r3, [pc, #404]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a64      	ldr	r2, [pc, #400]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b62      	ldr	r3, [pc, #392]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a61      	ldr	r2, [pc, #388]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 80044a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	495a      	ldr	r1, [pc, #360]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d054      	beq.n	800457a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fd fda0 	bl	8002014 <HAL_GetTick>
 80044d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044da:	f7fd fd9b 	bl	8002014 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	@ 0x64
 80044e8:	d902      	bls.n	80044f0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	f000 bf19 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
 80044f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004504:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004510:	d802      	bhi.n	8004518 <HAL_RCC_OscConfig+0x204>
 8004512:	4b44      	ldr	r3, [pc, #272]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	e015      	b.n	8004544 <HAL_RCC_OscConfig+0x230>
 8004518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800451c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800452c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004530:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004534:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004548:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800454c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004550:	fa92 f2a2 	rbit	r2, r2
 8004554:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004558:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800455c:	fab2 f282 	clz	r2, r2
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	f042 0220 	orr.w	r2, r2, #32
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	f002 021f 	and.w	r2, r2, #31
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f202 	lsl.w	r2, r1, r2
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0b0      	beq.n	80044da <HAL_RCC_OscConfig+0x1c6>
 8004578:	e057      	b.n	800462a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fd4b 	bl	8002014 <HAL_GetTick>
 800457e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd fd46 	bl	8002014 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	@ 0x64
 8004592:	d902      	bls.n	800459a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	f000 bec4 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
 800459a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800459e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80045ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80045ba:	d802      	bhi.n	80045c2 <HAL_RCC_OscConfig+0x2ae>
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x2da>
 80045c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045c6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80045d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80045de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80045ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004624 <HAL_RCC_OscConfig+0x310>)
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045f2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80045f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80045fa:	fa92 f2a2 	rbit	r2, r2
 80045fe:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004602:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004606:	fab2 f282 	clz	r2, r2
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f042 0220 	orr.w	r2, r2, #32
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f002 021f 	and.w	r2, r2, #31
 8004616:	2101      	movs	r1, #1
 8004618:	fa01 f202 	lsl.w	r2, r1, r2
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1b0      	bne.n	8004584 <HAL_RCC_OscConfig+0x270>
 8004622:	e002      	b.n	800462a <HAL_RCC_OscConfig+0x316>
 8004624:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800462e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 816c 	beq.w	8004918 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004640:	4bcc      	ldr	r3, [pc, #816]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800464c:	4bc9      	ldr	r3, [pc, #804]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d16d      	bne.n	8004734 <HAL_RCC_OscConfig+0x420>
 8004658:	4bc6      	ldr	r3, [pc, #792]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d167      	bne.n	8004734 <HAL_RCC_OscConfig+0x420>
 8004664:	2302      	movs	r3, #2
 8004666:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004676:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b3f      	cmp	r3, #63	@ 0x3f
 8004682:	d802      	bhi.n	800468a <HAL_RCC_OscConfig+0x376>
 8004684:	4bbb      	ldr	r3, [pc, #748]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	e013      	b.n	80046b2 <HAL_RCC_OscConfig+0x39e>
 800468a:	2302      	movs	r3, #2
 800468c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80046a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80046ae:	4bb1      	ldr	r3, [pc, #708]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	2202      	movs	r2, #2
 80046b4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80046b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80046bc:	fa92 f2a2 	rbit	r2, r2
 80046c0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80046c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046c8:	fab2 f282 	clz	r2, r2
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f002 021f 	and.w	r2, r2, #31
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f202 	lsl.w	r2, r1, r2
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCC_OscConfig+0x3e6>
 80046e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d002      	beq.n	80046fa <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f000 be14 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	4b9e      	ldr	r3, [pc, #632]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004706:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	21f8      	movs	r1, #248	@ 0xf8
 8004710:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004718:	fa91 f1a1 	rbit	r1, r1
 800471c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004720:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004724:	fab1 f181 	clz	r1, r1
 8004728:	b2c9      	uxtb	r1, r1
 800472a:	408b      	lsls	r3, r1
 800472c:	4991      	ldr	r1, [pc, #580]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e0f1      	b.n	8004918 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8083 	beq.w	800484c <HAL_RCC_OscConfig+0x538>
 8004746:	2301      	movs	r3, #1
 8004748:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004758:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004766:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	461a      	mov	r2, r3
 800476e:	2301      	movs	r3, #1
 8004770:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004772:	f7fd fc4f 	bl	8002014 <HAL_GetTick>
 8004776:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477a:	e00a      	b.n	8004792 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477c:	f7fd fc4a 	bl	8002014 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d902      	bls.n	8004792 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	f000 bdc8 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
 8004792:	2302      	movs	r3, #2
 8004794:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80047a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80047b0:	d802      	bhi.n	80047b8 <HAL_RCC_OscConfig+0x4a4>
 80047b2:	4b70      	ldr	r3, [pc, #448]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	e013      	b.n	80047e0 <HAL_RCC_OscConfig+0x4cc>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80047ca:	2302      	movs	r3, #2
 80047cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80047d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80047dc:	4b65      	ldr	r3, [pc, #404]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	2202      	movs	r2, #2
 80047e2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80047e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80047ea:	fa92 f2a2 	rbit	r2, r2
 80047ee:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80047f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80047f6:	fab2 f282 	clz	r2, r2
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	f042 0220 	orr.w	r2, r2, #32
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	f002 021f 	and.w	r2, r2, #31
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f202 	lsl.w	r2, r1, r2
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0b4      	beq.n	800477c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b58      	ldr	r3, [pc, #352]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800481a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	21f8      	movs	r1, #248	@ 0xf8
 8004828:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004830:	fa91 f1a1 	rbit	r1, r1
 8004834:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004838:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800483c:	fab1 f181 	clz	r1, r1
 8004840:	b2c9      	uxtb	r1, r1
 8004842:	408b      	lsls	r3, r1
 8004844:	494b      	ldr	r1, [pc, #300]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
 800484a:	e065      	b.n	8004918 <HAL_RCC_OscConfig+0x604>
 800484c:	2301      	movs	r3, #1
 800484e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800485e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800486c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fd fbcc 	bl	8002014 <HAL_GetTick>
 800487c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004882:	f7fd fbc7 	bl	8002014 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d902      	bls.n	8004898 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	f000 bd45 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
 8004898:	2302      	movs	r3, #2
 800489a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80048aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80048b6:	d802      	bhi.n	80048be <HAL_RCC_OscConfig+0x5aa>
 80048b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	e013      	b.n	80048e6 <HAL_RCC_OscConfig+0x5d2>
 80048be:	2302      	movs	r3, #2
 80048c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048c8:	fa93 f3a3 	rbit	r3, r3
 80048cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80048d0:	2302      	movs	r3, #2
 80048d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80048d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80048e2:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <HAL_RCC_OscConfig+0x660>)
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	2202      	movs	r2, #2
 80048e8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80048ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80048f0:	fa92 f2a2 	rbit	r2, r2
 80048f4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80048f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80048fc:	fab2 f282 	clz	r2, r2
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f042 0220 	orr.w	r2, r2, #32
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f002 021f 	and.w	r2, r2, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f202 	lsl.w	r2, r1, r2
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1b4      	bne.n	8004882 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8115 	beq.w	8004b58 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800492e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d07e      	beq.n	8004a3c <HAL_RCC_OscConfig+0x728>
 800493e:	2301      	movs	r3, #1
 8004940:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004954:	fab3 f383 	clz	r3, r3
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	4b06      	ldr	r3, [pc, #24]	@ (8004978 <HAL_RCC_OscConfig+0x664>)
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	461a      	mov	r2, r3
 8004964:	2301      	movs	r3, #1
 8004966:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004968:	f7fd fb54 	bl	8002014 <HAL_GetTick>
 800496c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004970:	e00f      	b.n	8004992 <HAL_RCC_OscConfig+0x67e>
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd fb4a 	bl	8002014 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d902      	bls.n	8004992 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	f000 bcc8 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
 8004992:	2302      	movs	r3, #2
 8004994:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049ac:	2202      	movs	r2, #2
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	fa93 f2a3 	rbit	r2, r3
 80049be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d0:	2202      	movs	r2, #2
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	fa93 f2a3 	rbit	r2, r3
 80049e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ec:	4bb0      	ldr	r3, [pc, #704]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 80049ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049f8:	2102      	movs	r1, #2
 80049fa:	6019      	str	r1, [r3, #0]
 80049fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	fa93 f1a3 	rbit	r1, r3
 8004a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a12:	6019      	str	r1, [r3, #0]
  return result;
 8004a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2101      	movs	r1, #1
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0a0      	beq.n	800497c <HAL_RCC_OscConfig+0x668>
 8004a3a:	e08d      	b.n	8004b58 <HAL_RCC_OscConfig+0x844>
 8004a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	fa93 f2a3 	rbit	r2, r3
 8004a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a5e:	601a      	str	r2, [r3, #0]
  return result;
 8004a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a64:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b90      	ldr	r3, [pc, #576]	@ (8004cb4 <HAL_RCC_OscConfig+0x9a0>)
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7e:	f7fd fac9 	bl	8002014 <HAL_GetTick>
 8004a82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a88:	f7fd fac4 	bl	8002014 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	f000 bc42 	b.w	8005322 <HAL_RCC_OscConfig+0x100e>
 8004a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004aca:	2202      	movs	r2, #2
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	fa93 f2a3 	rbit	r2, r3
 8004adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004aee:	2202      	movs	r2, #2
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	fa93 f2a3 	rbit	r2, r3
 8004b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004b08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0a:	4b69      	ldr	r3, [pc, #420]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b16:	2102      	movs	r1, #2
 8004b18:	6019      	str	r1, [r3, #0]
 8004b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	fa93 f1a3 	rbit	r1, r3
 8004b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b30:	6019      	str	r1, [r3, #0]
  return result;
 8004b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d197      	bne.n	8004a88 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 819e 	beq.w	8004eaa <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b74:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d116      	bne.n	8004bae <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b80:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4a4a      	ldr	r2, [pc, #296]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	61d3      	str	r3, [r2, #28]
 8004b8c:	4b48      	ldr	r3, [pc, #288]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b98:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ba6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b42      	ldr	r3, [pc, #264]	@ (8004cb8 <HAL_RCC_OscConfig+0x9a4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11a      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b3f      	ldr	r3, [pc, #252]	@ (8004cb8 <HAL_RCC_OscConfig+0x9a4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb8 <HAL_RCC_OscConfig+0x9a4>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fd fa25 	bl	8002014 <HAL_GetTick>
 8004bca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bce:	e009      	b.n	8004be4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd0:	f7fd fa20 	bl	8002014 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b64      	cmp	r3, #100	@ 0x64
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e39e      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4b34      	ldr	r3, [pc, #208]	@ (8004cb8 <HAL_RCC_OscConfig+0x9a4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x8fa>
 8004c00:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6213      	str	r3, [r2, #32]
 8004c0c:	e035      	b.n	8004c7a <HAL_RCC_OscConfig+0x966>
 8004c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x924>
 8004c1e:	4b24      	ldr	r3, [pc, #144]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6213      	str	r3, [r2, #32]
 8004c2a:	4b21      	ldr	r3, [pc, #132]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a20      	ldr	r2, [pc, #128]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6213      	str	r3, [r2, #32]
 8004c36:	e020      	b.n	8004c7a <HAL_RCC_OscConfig+0x966>
 8004c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d10c      	bne.n	8004c62 <HAL_RCC_OscConfig+0x94e>
 8004c48:	4b19      	ldr	r3, [pc, #100]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	6213      	str	r3, [r2, #32]
 8004c54:	4b16      	ldr	r3, [pc, #88]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4a15      	ldr	r2, [pc, #84]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6213      	str	r3, [r2, #32]
 8004c60:	e00b      	b.n	8004c7a <HAL_RCC_OscConfig+0x966>
 8004c62:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4a12      	ldr	r2, [pc, #72]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	6213      	str	r3, [r2, #32]
 8004c6e:	4b10      	ldr	r3, [pc, #64]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb0 <HAL_RCC_OscConfig+0x99c>)
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8087 	beq.w	8004d9a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8c:	f7fd f9c2 	bl	8002014 <HAL_GetTick>
 8004c90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e012      	b.n	8004cbc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd f9bd 	bl	8002014 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d908      	bls.n	8004cbc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e339      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	10908120 	.word	0x10908120
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ccc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	fa93 f2a3 	rbit	r2, r3
 8004cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ce8:	2202      	movs	r2, #2
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	fa93 f2a3 	rbit	r2, r3
 8004cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d02:	601a      	str	r2, [r3, #0]
  return result;
 8004d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCC_OscConfig+0xa10>
 8004d1e:	4b98      	ldr	r3, [pc, #608]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	e013      	b.n	8004d4c <HAL_RCC_OscConfig+0xa38>
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	fa93 f2a3 	rbit	r2, r3
 8004d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d42:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b8d      	ldr	r3, [pc, #564]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d50:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d54:	2102      	movs	r1, #2
 8004d56:	6011      	str	r1, [r2, #0]
 8004d58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d5c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	fa92 f1a2 	rbit	r1, r2
 8004d66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d6a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d6e:	6011      	str	r1, [r2, #0]
  return result;
 8004d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d74:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	fab2 f282 	clz	r2, r2
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	f002 021f 	and.w	r2, r2, #31
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f43f af7f 	beq.w	8004c96 <HAL_RCC_OscConfig+0x982>
 8004d98:	e07d      	b.n	8004e96 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9a:	f7fd f93b 	bl	8002014 <HAL_GetTick>
 8004d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fd f936 	bl	8002014 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e2b2      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
 8004dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dcc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	fa93 f2a3 	rbit	r2, r3
 8004dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dda:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004de8:	2202      	movs	r2, #2
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e02:	601a      	str	r2, [r3, #0]
  return result;
 8004e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <HAL_RCC_OscConfig+0xb10>
 8004e1e:	4b58      	ldr	r3, [pc, #352]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	e013      	b.n	8004e4c <HAL_RCC_OscConfig+0xb38>
 8004e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e28:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e34:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	fa93 f2a3 	rbit	r2, r3
 8004e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e42:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	4b4d      	ldr	r3, [pc, #308]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e50:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e54:	2102      	movs	r1, #2
 8004e56:	6011      	str	r1, [r2, #0]
 8004e58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e5c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	fa92 f1a2 	rbit	r1, r2
 8004e66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e6a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e6e:	6011      	str	r1, [r2, #0]
  return result;
 8004e70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e74:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	fab2 f282 	clz	r2, r2
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	f002 021f 	and.w	r2, r2, #31
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d186      	bne.n	8004da4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e96:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9e:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4a37      	ldr	r2, [pc, #220]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ea8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8232 	beq.w	8005320 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ebc:	4b30      	ldr	r3, [pc, #192]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	f000 8201 	beq.w	80052cc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	f040 8157 	bne.w	800518a <HAL_RCC_OscConfig+0xe76>
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004ee4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa93 f2a3 	rbit	r2, r3
 8004ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f00:	601a      	str	r2, [r3, #0]
  return result;
 8004f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f06:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f0a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	fab3 f383 	clz	r3, r3
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f16:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fd f877 	bl	8002014 <HAL_GetTick>
 8004f26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2a:	e009      	b.n	8004f40 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fd f872 	bl	8002014 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e1f0      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
 8004f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f44:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f52:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	fa93 f2a3 	rbit	r2, r3
 8004f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f60:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f64:	601a      	str	r2, [r3, #0]
  return result;
 8004f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f6a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f78:	d804      	bhi.n	8004f84 <HAL_RCC_OscConfig+0xc70>
 8004f7a:	4b01      	ldr	r3, [pc, #4]	@ (8004f80 <HAL_RCC_OscConfig+0xc6c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	e029      	b.n	8004fd4 <HAL_RCC_OscConfig+0xcc0>
 8004f80:	40021000 	.word	0x40021000
 8004f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f96:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	fa93 f2a3 	rbit	r2, r3
 8004fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	4bc3      	ldr	r3, [pc, #780]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fd8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004fdc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fe0:	6011      	str	r1, [r2, #0]
 8004fe2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fe6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	fa92 f1a2 	rbit	r1, r2
 8004ff0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ff4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004ff8:	6011      	str	r1, [r2, #0]
  return result;
 8004ffa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ffe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	fab2 f282 	clz	r2, r2
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	f042 0220 	orr.w	r2, r2, #32
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	f002 021f 	and.w	r2, r2, #31
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f202 	lsl.w	r2, r1, r2
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d185      	bne.n	8004f2c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005020:	4baf      	ldr	r3, [pc, #700]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005038:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	430b      	orrs	r3, r1
 8005042:	49a7      	ldr	r1, [pc, #668]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	604b      	str	r3, [r1, #4]
 8005048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800504c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	fa93 f2a3 	rbit	r2, r3
 8005064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005068:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800506c:	601a      	str	r2, [r3, #0]
  return result;
 800506e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005072:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005076:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005078:	fab3 f383 	clz	r3, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005082:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	461a      	mov	r2, r3
 800508a:	2301      	movs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fc ffc1 	bl	8002014 <HAL_GetTick>
 8005092:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005096:	e009      	b.n	80050ac <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005098:	f7fc ffbc 	bl	8002014 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e13a      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
 80050ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	fa93 f2a3 	rbit	r2, r3
 80050c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80050d0:	601a      	str	r2, [r3, #0]
  return result;
 80050d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80050da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80050e4:	d802      	bhi.n	80050ec <HAL_RCC_OscConfig+0xdd8>
 80050e6:	4b7e      	ldr	r3, [pc, #504]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	e027      	b.n	800513c <HAL_RCC_OscConfig+0xe28>
 80050ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80050f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	fa93 f2a3 	rbit	r2, r3
 8005108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005116:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800511a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005124:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	fa93 f2a3 	rbit	r2, r3
 800512e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005132:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	4b69      	ldr	r3, [pc, #420]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005140:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005144:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005148:	6011      	str	r1, [r2, #0]
 800514a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800514e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	fa92 f1a2 	rbit	r1, r2
 8005158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800515c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005160:	6011      	str	r1, [r2, #0]
  return result;
 8005162:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005166:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	fab2 f282 	clz	r2, r2
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	f042 0220 	orr.w	r2, r2, #32
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	f002 021f 	and.w	r2, r2, #31
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f202 	lsl.w	r2, r1, r2
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d087      	beq.n	8005098 <HAL_RCC_OscConfig+0xd84>
 8005188:	e0ca      	b.n	8005320 <HAL_RCC_OscConfig+0x100c>
 800518a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800518e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005192:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800519c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	fa93 f2a3 	rbit	r2, r3
 80051a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051ae:	601a      	str	r2, [r3, #0]
  return result;
 80051b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	fab3 f383 	clz	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80051c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d0:	f7fc ff20 	bl	8002014 <HAL_GetTick>
 80051d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d8:	e009      	b.n	80051ee <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051da:	f7fc ff1b 	bl	8002014 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e099      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
 80051ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80051f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005200:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	fa93 f2a3 	rbit	r2, r3
 800520a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800520e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005212:	601a      	str	r2, [r3, #0]
  return result;
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800521c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521e:	fab3 f383 	clz	r3, r3
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b3f      	cmp	r3, #63	@ 0x3f
 8005226:	d802      	bhi.n	800522e <HAL_RCC_OscConfig+0xf1a>
 8005228:	4b2d      	ldr	r3, [pc, #180]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	e027      	b.n	800527e <HAL_RCC_OscConfig+0xf6a>
 800522e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005232:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005236:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800523a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005240:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	fa93 f2a3 	rbit	r2, r3
 800524a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800524e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005258:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800525c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005266:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005274:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	4b19      	ldr	r3, [pc, #100]	@ (80052e0 <HAL_RCC_OscConfig+0xfcc>)
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005282:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005286:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800528a:	6011      	str	r1, [r2, #0]
 800528c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005290:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	fa92 f1a2 	rbit	r1, r2
 800529a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800529e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052a2:	6011      	str	r1, [r2, #0]
  return result;
 80052a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	fab2 f282 	clz	r2, r2
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	f042 0220 	orr.w	r2, r2, #32
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f002 021f 	and.w	r2, r2, #31
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d187      	bne.n	80051da <HAL_RCC_OscConfig+0xec6>
 80052ca:	e029      	b.n	8005320 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d103      	bne.n	80052e4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e020      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
 80052e0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052e4:	4b11      	ldr	r3, [pc, #68]	@ (800532c <HAL_RCC_OscConfig+0x1018>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80052f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	429a      	cmp	r2, r3
 8005302:	d10b      	bne.n	800531c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005304:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005308:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800530c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000

08005330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b09e      	sub	sp, #120	@ 0x78
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e154      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005348:	4b89      	ldr	r3, [pc, #548]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d910      	bls.n	8005378 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b86      	ldr	r3, [pc, #536]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	4984      	ldr	r1, [pc, #528]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b82      	ldr	r3, [pc, #520]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e13c      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005384:	4b7b      	ldr	r3, [pc, #492]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4978      	ldr	r1, [pc, #480]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80cd 	beq.w	800553e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d137      	bne.n	800541c <HAL_RCC_ClockConfig+0xec>
 80053ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80053ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80053c4:	d802      	bhi.n	80053cc <HAL_RCC_ClockConfig+0x9c>
 80053c6:	4b6b      	ldr	r3, [pc, #428]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	e00f      	b.n	80053ec <HAL_RCC_ClockConfig+0xbc>
 80053cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80053da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053de:	663b      	str	r3, [r7, #96]	@ 0x60
 80053e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053e2:	fa93 f3a3 	rbit	r3, r3
 80053e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053e8:	4b62      	ldr	r3, [pc, #392]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80053f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f4:	fa92 f2a2 	rbit	r2, r2
 80053f8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80053fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053fc:	fab2 f282 	clz	r2, r2
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	f042 0220 	orr.w	r2, r2, #32
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	f002 021f 	and.w	r2, r2, #31
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f202 	lsl.w	r2, r1, r2
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d171      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0ea      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d137      	bne.n	8005494 <HAL_RCC_ClockConfig+0x164>
 8005424:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005428:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800542c:	fa93 f3a3 	rbit	r3, r3
 8005430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	fab3 f383 	clz	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b3f      	cmp	r3, #63	@ 0x3f
 800543c:	d802      	bhi.n	8005444 <HAL_RCC_ClockConfig+0x114>
 800543e:	4b4d      	ldr	r3, [pc, #308]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	e00f      	b.n	8005464 <HAL_RCC_ClockConfig+0x134>
 8005444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	647b      	str	r3, [r7, #68]	@ 0x44
 8005452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005456:	643b      	str	r3, [r7, #64]	@ 0x40
 8005458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005460:	4b44      	ldr	r3, [pc, #272]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005468:	63ba      	str	r2, [r7, #56]	@ 0x38
 800546a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800546c:	fa92 f2a2 	rbit	r2, r2
 8005470:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005474:	fab2 f282 	clz	r2, r2
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	f042 0220 	orr.w	r2, r2, #32
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	f002 021f 	and.w	r2, r2, #31
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f202 	lsl.w	r2, r1, r2
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d135      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0ae      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
 8005494:	2302      	movs	r3, #2
 8005496:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a2:	fab3 f383 	clz	r3, r3
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80054aa:	d802      	bhi.n	80054b2 <HAL_RCC_ClockConfig+0x182>
 80054ac:	4b31      	ldr	r3, [pc, #196]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	e00d      	b.n	80054ce <HAL_RCC_ClockConfig+0x19e>
 80054b2:	2302      	movs	r3, #2
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054be:	2302      	movs	r3, #2
 80054c0:	623b      	str	r3, [r7, #32]
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	2202      	movs	r2, #2
 80054d0:	61ba      	str	r2, [r7, #24]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	fa92 f2a2 	rbit	r2, r2
 80054d8:	617a      	str	r2, [r7, #20]
  return result;
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	fab2 f282 	clz	r2, r2
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	f042 0220 	orr.w	r2, r2, #32
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	f002 021f 	and.w	r2, r2, #31
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f202 	lsl.w	r2, r1, r2
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e07a      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 0203 	bic.w	r2, r3, #3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	491a      	ldr	r1, [pc, #104]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800550e:	f7fc fd81 	bl	8002014 <HAL_GetTick>
 8005512:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005514:	e00a      	b.n	800552c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005516:	f7fc fd7d 	bl	8002014 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e062      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552c:	4b11      	ldr	r3, [pc, #68]	@ (8005574 <HAL_RCC_ClockConfig+0x244>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 020c 	and.w	r2, r3, #12
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	429a      	cmp	r2, r3
 800553c:	d1eb      	bne.n	8005516 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d215      	bcs.n	8005578 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554c:	4b08      	ldr	r3, [pc, #32]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f023 0207 	bic.w	r2, r3, #7
 8005554:	4906      	ldr	r1, [pc, #24]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555c:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <HAL_RCC_ClockConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d006      	beq.n	8005578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e041      	b.n	80055f2 <HAL_RCC_ClockConfig+0x2c2>
 800556e:	bf00      	nop
 8005570:	40022000 	.word	0x40022000
 8005574:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005584:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <HAL_RCC_ClockConfig+0x2cc>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	491a      	ldr	r1, [pc, #104]	@ (80055fc <HAL_RCC_ClockConfig+0x2cc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a2:	4b16      	ldr	r3, [pc, #88]	@ (80055fc <HAL_RCC_ClockConfig+0x2cc>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4912      	ldr	r1, [pc, #72]	@ (80055fc <HAL_RCC_ClockConfig+0x2cc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055b6:	f000 f829 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80055ba:	4601      	mov	r1, r0
 80055bc:	4b0f      	ldr	r3, [pc, #60]	@ (80055fc <HAL_RCC_ClockConfig+0x2cc>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055c4:	22f0      	movs	r2, #240	@ 0xf0
 80055c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	fa92 f2a2 	rbit	r2, r2
 80055ce:	60fa      	str	r2, [r7, #12]
  return result;
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	fab2 f282 	clz	r2, r2
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	40d3      	lsrs	r3, r2
 80055da:	4a09      	ldr	r2, [pc, #36]	@ (8005600 <HAL_RCC_ClockConfig+0x2d0>)
 80055dc:	5cd3      	ldrb	r3, [r2, r3]
 80055de:	fa21 f303 	lsr.w	r3, r1, r3
 80055e2:	4a08      	ldr	r2, [pc, #32]	@ (8005604 <HAL_RCC_ClockConfig+0x2d4>)
 80055e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80055e6:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <HAL_RCC_ClockConfig+0x2d8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fc fcce 	bl	8001f8c <HAL_InitTick>
  
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3778      	adds	r7, #120	@ 0x78
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	0800da1c 	.word	0x0800da1c
 8005604:	20000068 	.word	0x20000068
 8005608:	2000006c 	.word	0x2000006c

0800560c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005626:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b04      	cmp	r3, #4
 8005634:	d002      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x30>
 8005636:	2b08      	cmp	r3, #8
 8005638:	d003      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0x36>
 800563a:	e026      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800563c:	4b19      	ldr	r3, [pc, #100]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800563e:	613b      	str	r3, [r7, #16]
      break;
 8005640:	e026      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	0c9b      	lsrs	r3, r3, #18
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	4a17      	ldr	r2, [pc, #92]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800564c:	5cd3      	ldrb	r3, [r2, r3]
 800564e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005650:	4b13      	ldr	r3, [pc, #76]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005668:	4a0e      	ldr	r2, [pc, #56]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e004      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a0c      	ldr	r2, [pc, #48]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	613b      	str	r3, [r7, #16]
      break;
 8005688:	e002      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800568a:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800568c:	613b      	str	r3, [r7, #16]
      break;
 800568e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005690:	693b      	ldr	r3, [r7, #16]
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40021000 	.word	0x40021000
 80056a4:	007a1200 	.word	0x007a1200
 80056a8:	0800da2c 	.word	0x0800da2c
 80056ac:	0800da3c 	.word	0x0800da3c
 80056b0:	003d0900 	.word	0x003d0900

080056b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b092      	sub	sp, #72	@ 0x48
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80cb 	beq.w	800586e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d8:	4b8d      	ldr	r3, [pc, #564]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10e      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	4a89      	ldr	r2, [pc, #548]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ee:	61d3      	str	r3, [r2, #28]
 80056f0:	4b87      	ldr	r3, [pc, #540]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005702:	4b84      	ldr	r3, [pc, #528]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d118      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800570e:	4b81      	ldr	r3, [pc, #516]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a80      	ldr	r2, [pc, #512]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005718:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571a:	f7fc fc7b 	bl	8002014 <HAL_GetTick>
 800571e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005722:	f7fc fc77 	bl	8002014 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b64      	cmp	r3, #100	@ 0x64
 800572e:	d901      	bls.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0e8      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x252>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005734:	4b77      	ldr	r3, [pc, #476]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005740:	4b73      	ldr	r3, [pc, #460]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005748:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d07b      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005758:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800575a:	429a      	cmp	r2, r3
 800575c:	d074      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800575e:	4b6c      	ldr	r3, [pc, #432]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800576c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	fa93 f3a3 	rbit	r3, r3
 8005774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005778:	fab3 f383 	clz	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	4b65      	ldr	r3, [pc, #404]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	461a      	mov	r2, r3
 8005788:	2301      	movs	r3, #1
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005790:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800579c:	fab3 f383 	clz	r3, r3
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	461a      	mov	r2, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057b0:	4a57      	ldr	r2, [pc, #348]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d043      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fc fc28 	bl	8002014 <HAL_GetTick>
 80057c4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	e00a      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c8:	f7fc fc24 	bl	8002014 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e093      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80057de:	2302      	movs	r3, #2
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	fa93 f3a3 	rbit	r3, r3
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ea:	2302      	movs	r3, #2
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	61fb      	str	r3, [r7, #28]
  return result;
 80057f6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f8:	fab3 f383 	clz	r3, r3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005808:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	e007      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800580e:	2302      	movs	r3, #2
 8005810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	fa93 f3a3 	rbit	r3, r3
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	4b3d      	ldr	r3, [pc, #244]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	2202      	movs	r2, #2
 8005820:	613a      	str	r2, [r7, #16]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	fa92 f2a2 	rbit	r2, r2
 8005828:	60fa      	str	r2, [r7, #12]
  return result;
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	fab2 f282 	clz	r2, r2
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	f002 021f 	and.w	r2, r2, #31
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f202 	lsl.w	r2, r1, r2
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0bf      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005848:	4b31      	ldr	r3, [pc, #196]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	492e      	ldr	r1, [pc, #184]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800585a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b2b      	ldr	r3, [pc, #172]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4a2a      	ldr	r2, [pc, #168]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800586c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800587a:	4b25      	ldr	r3, [pc, #148]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f023 0203 	bic.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4922      	ldr	r1, [pc, #136]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005898:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	f023 0210 	bic.w	r2, r3, #16
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	491a      	ldr	r1, [pc, #104]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058b6:	4b16      	ldr	r3, [pc, #88]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	4913      	ldr	r1, [pc, #76]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	490b      	ldr	r1, [pc, #44]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058f2:	4b07      	ldr	r3, [pc, #28]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	4904      	ldr	r1, [pc, #16]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3748      	adds	r7, #72	@ 0x48
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40021000 	.word	0x40021000
 8005914:	40007000 	.word	0x40007000
 8005918:	10908100 	.word	0x10908100

0800591c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e049      	b.n	80059c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc f932 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f000 fefe 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e040      	b.n	8005a66 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <HAL_TIM_Base_Start_IT+0xa8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x58>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0e:	d009      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x58>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a18      	ldr	r2, [pc, #96]	@ (8005a78 <HAL_TIM_Base_Start_IT+0xac>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x58>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	@ (8005a7c <HAL_TIM_Base_Start_IT+0xb0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d115      	bne.n	8005a50 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d015      	beq.n	8005a62 <HAL_TIM_Base_Start_IT+0x96>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3c:	d011      	beq.n	8005a62 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	e008      	b.n	8005a62 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	00010007 	.word	0x00010007

08005a84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10f      	bne.n	8005acc <HAL_TIM_Base_Stop_IT+0x48>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_Base_Stop_IT+0x48>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e049      	b.n	8005b88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d106      	bne.n	8005b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f841 	bl	8005b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2202      	movs	r2, #2
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f000 fe1b 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x24>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e03c      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d109      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x3e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e02f      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x58>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e022      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d109      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x72>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e015      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x8c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e008      	b.n	8005c42 <HAL_TIM_PWM_Start+0x9e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e088      	b.n	8005d5c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0xb6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c58:	e023      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0xc6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c68:	e01b      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_PWM_Start+0xd6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c78:	e013      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_PWM_Start+0xe6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c88:	e00b      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_PWM_Start+0xf6>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c98:	e003      	b.n	8005ca2 <HAL_TIM_PWM_Start+0xfe>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f91a 	bl	8006ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d64 <HAL_TIM_PWM_Start+0x1c0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x134>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <HAL_TIM_PWM_Start+0x1c4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x134>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a28      	ldr	r2, [pc, #160]	@ (8005d6c <HAL_TIM_PWM_Start+0x1c8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x134>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a27      	ldr	r2, [pc, #156]	@ (8005d70 <HAL_TIM_PWM_Start+0x1cc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x138>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_TIM_PWM_Start+0x13a>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d64 <HAL_TIM_PWM_Start+0x1c0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x176>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d04:	d009      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x176>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d74 <HAL_TIM_PWM_Start+0x1d0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x176>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a14      	ldr	r2, [pc, #80]	@ (8005d68 <HAL_TIM_PWM_Start+0x1c4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d115      	bne.n	8005d46 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <HAL_TIM_PWM_Start+0x1d4>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b06      	cmp	r3, #6
 8005d2a:	d015      	beq.n	8005d58 <HAL_TIM_PWM_Start+0x1b4>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d32:	d011      	beq.n	8005d58 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	e008      	b.n	8005d58 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	40000400 	.word	0x40000400
 8005d78:	00010007 	.word	0x00010007

08005d7c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f8a8 	bl	8006ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3b      	ldr	r2, [pc, #236]	@ (8005e88 <HAL_TIM_PWM_Stop+0x10c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00e      	beq.n	8005dbc <HAL_TIM_PWM_Stop+0x40>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a3a      	ldr	r2, [pc, #232]	@ (8005e8c <HAL_TIM_PWM_Stop+0x110>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_TIM_PWM_Stop+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_TIM_PWM_Stop+0x114>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_PWM_Stop+0x40>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a37      	ldr	r2, [pc, #220]	@ (8005e94 <HAL_TIM_PWM_Stop+0x118>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIM_PWM_Stop+0x44>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <HAL_TIM_PWM_Stop+0x46>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d017      	beq.n	8005df6 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10f      	bne.n	8005df6 <HAL_TIM_PWM_Stop+0x7a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	f240 4344 	movw	r3, #1092	@ 0x444
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <HAL_TIM_PWM_Stop+0x7a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <HAL_TIM_PWM_Stop+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_PWM_Stop+0xaa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PWM_Stop+0xba>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e34:	e023      	b.n	8005e7e <HAL_TIM_PWM_Stop+0x102>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_PWM_Stop+0xca>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e44:	e01b      	b.n	8005e7e <HAL_TIM_PWM_Stop+0x102>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_PWM_Stop+0xda>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e54:	e013      	b.n	8005e7e <HAL_TIM_PWM_Stop+0x102>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b0c      	cmp	r3, #12
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_PWM_Stop+0xea>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e64:	e00b      	b.n	8005e7e <HAL_TIM_PWM_Stop+0x102>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_PWM_Stop+0xfa>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e74:	e003      	b.n	8005e7e <HAL_TIM_PWM_Stop+0x102>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e097      	b.n	8005fdc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fb fe2f 	bl	8001b24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fc35 	bl	800675c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f38:	f023 030c 	bic.w	r3, r3, #12
 8005f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	4313      	orrs	r3, r2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	011a      	lsls	r2, r3, #4
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ff4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ffc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006004:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800600c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d110      	bne.n	8006036 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d102      	bne.n	8006020 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800601a:	7b7b      	ldrb	r3, [r7, #13]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d001      	beq.n	8006024 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e069      	b.n	80060f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006034:	e031      	b.n	800609a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d110      	bne.n	800605e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d102      	bne.n	8006048 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006042:	7b3b      	ldrb	r3, [r7, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d001      	beq.n	800604c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e055      	b.n	80060f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800605c:	e01d      	b.n	800609a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d108      	bne.n	8006076 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800606a:	7b7b      	ldrb	r3, [r7, #13]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d102      	bne.n	8006076 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006070:	7b3b      	ldrb	r3, [r7, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d001      	beq.n	800607a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e03e      	b.n	80060f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2202      	movs	r2, #2
 8006086:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_TIM_Encoder_Start+0xc4>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d008      	beq.n	80060b8 <HAL_TIM_Encoder_Start+0xd4>
 80060a6:	e00f      	b.n	80060c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 ff17 	bl	8006ee4 <TIM_CCxChannelCmd>
      break;
 80060b6:	e016      	b.n	80060e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2201      	movs	r2, #1
 80060be:	2104      	movs	r1, #4
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 ff0f 	bl	8006ee4 <TIM_CCxChannelCmd>
      break;
 80060c6:	e00e      	b.n	80060e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2201      	movs	r2, #1
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 ff07 	bl	8006ee4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2201      	movs	r2, #1
 80060dc:	2104      	movs	r1, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ff00 	bl	8006ee4 <TIM_CCxChannelCmd>
      break;
 80060e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d020      	beq.n	8006164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0202 	mvn.w	r2, #2
 8006134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fae8 	bl	8006720 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fada 	bl	800670c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 faeb 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0204 	mvn.w	r2, #4
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fac2 	bl	8006720 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fab4 	bl	800670c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fac5 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa9c 	bl	8006720 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa8e 	bl	800670c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fa9f 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0210 	mvn.w	r2, #16
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2208      	movs	r2, #8
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa76 	bl	8006720 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa68 	bl	800670c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa79 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0201 	mvn.w	r2, #1
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb fac6 	bl	80017f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fec8 	bl	8007020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00c      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fec0 	bl	8007034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa38 	bl	8006748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0220 	mvn.w	r2, #32
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fe88 	bl	800700c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800631e:	2302      	movs	r3, #2
 8006320:	e0ff      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b14      	cmp	r3, #20
 800632e:	f200 80f0 	bhi.w	8006512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006332:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	0800638d 	.word	0x0800638d
 800633c:	08006513 	.word	0x08006513
 8006340:	08006513 	.word	0x08006513
 8006344:	08006513 	.word	0x08006513
 8006348:	080063cd 	.word	0x080063cd
 800634c:	08006513 	.word	0x08006513
 8006350:	08006513 	.word	0x08006513
 8006354:	08006513 	.word	0x08006513
 8006358:	0800640f 	.word	0x0800640f
 800635c:	08006513 	.word	0x08006513
 8006360:	08006513 	.word	0x08006513
 8006364:	08006513 	.word	0x08006513
 8006368:	0800644f 	.word	0x0800644f
 800636c:	08006513 	.word	0x08006513
 8006370:	08006513 	.word	0x08006513
 8006374:	08006513 	.word	0x08006513
 8006378:	08006491 	.word	0x08006491
 800637c:	08006513 	.word	0x08006513
 8006380:	08006513 	.word	0x08006513
 8006384:	08006513 	.word	0x08006513
 8006388:	080064d1 	.word	0x080064d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa66 	bl	8006864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0208 	orr.w	r2, r2, #8
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0204 	bic.w	r2, r2, #4
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	619a      	str	r2, [r3, #24]
      break;
 80063ca:	e0a5      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 facc 	bl	8006970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6999      	ldr	r1, [r3, #24]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]
      break;
 800640c:	e084      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fb2b 	bl	8006a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0208 	orr.w	r2, r2, #8
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0204 	bic.w	r2, r2, #4
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	61da      	str	r2, [r3, #28]
      break;
 800644c:	e064      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fb89 	bl	8006b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69d9      	ldr	r1, [r3, #28]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	021a      	lsls	r2, r3, #8
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	61da      	str	r2, [r3, #28]
      break;
 800648e:	e043      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fbcc 	bl	8006c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0208 	orr.w	r2, r2, #8
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0204 	bic.w	r2, r2, #4
 80064ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064ce:	e023      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc0a 	bl	8006cf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	021a      	lsls	r2, r3, #8
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006510:	e002      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
      break;
 8006516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop

0800652c <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_TIM_GenerateEvent+0x18>
 8006540:	2302      	movs	r3, #2
 8006542:	e014      	b.n	800656e <HAL_TIM_GenerateEvent+0x42>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_TIM_ConfigClockSource+0x1c>
 8006592:	2302      	movs	r3, #2
 8006594:	e0b6      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x18a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065b4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d2:	d03e      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0xd8>
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d8:	f200 8087 	bhi.w	80066ea <HAL_TIM_ConfigClockSource+0x170>
 80065dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e0:	f000 8086 	beq.w	80066f0 <HAL_TIM_ConfigClockSource+0x176>
 80065e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e8:	d87f      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 80065ea:	2b70      	cmp	r3, #112	@ 0x70
 80065ec:	d01a      	beq.n	8006624 <HAL_TIM_ConfigClockSource+0xaa>
 80065ee:	2b70      	cmp	r3, #112	@ 0x70
 80065f0:	d87b      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 80065f2:	2b60      	cmp	r3, #96	@ 0x60
 80065f4:	d050      	beq.n	8006698 <HAL_TIM_ConfigClockSource+0x11e>
 80065f6:	2b60      	cmp	r3, #96	@ 0x60
 80065f8:	d877      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 80065fa:	2b50      	cmp	r3, #80	@ 0x50
 80065fc:	d03c      	beq.n	8006678 <HAL_TIM_ConfigClockSource+0xfe>
 80065fe:	2b50      	cmp	r3, #80	@ 0x50
 8006600:	d873      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	d058      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0x13e>
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d86f      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 800660a:	2b30      	cmp	r3, #48	@ 0x30
 800660c:	d064      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0x15e>
 800660e:	2b30      	cmp	r3, #48	@ 0x30
 8006610:	d86b      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 8006612:	2b20      	cmp	r3, #32
 8006614:	d060      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d867      	bhi.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d05c      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0x15e>
 800661e:	2b10      	cmp	r3, #16
 8006620:	d05a      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006622:	e062      	b.n	80066ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	f000 fc36 	bl	8006ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006646:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	609a      	str	r2, [r3, #8]
      break;
 8006650:	e04f      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006662:	f000 fc1f 	bl	8006ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006674:	609a      	str	r2, [r3, #8]
      break;
 8006676:	e03c      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006684:	461a      	mov	r2, r3
 8006686:	f000 fb93 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2150      	movs	r1, #80	@ 0x50
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fbec 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006696:	e02c      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066a4:	461a      	mov	r2, r3
 80066a6:	f000 fbb2 	bl	8006e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2160      	movs	r1, #96	@ 0x60
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fbdc 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80066b6:	e01c      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c4:	461a      	mov	r2, r3
 80066c6:	f000 fb73 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2140      	movs	r1, #64	@ 0x40
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fbcc 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80066d6:	e00c      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4619      	mov	r1, r3
 80066e2:	4610      	mov	r0, r2
 80066e4:	f000 fbc3 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80066e8:	e003      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
      break;
 80066ee:	e000      	b.n	80066f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a38      	ldr	r2, [pc, #224]	@ (8006850 <TIM_Base_SetConfig+0xf4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d007      	beq.n	8006784 <TIM_Base_SetConfig+0x28>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677a:	d003      	beq.n	8006784 <TIM_Base_SetConfig+0x28>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a35      	ldr	r2, [pc, #212]	@ (8006854 <TIM_Base_SetConfig+0xf8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2d      	ldr	r2, [pc, #180]	@ (8006850 <TIM_Base_SetConfig+0xf4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <TIM_Base_SetConfig+0x6a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a4:	d00f      	beq.n	80067c6 <TIM_Base_SetConfig+0x6a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006854 <TIM_Base_SetConfig+0xf8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_Base_SetConfig+0x6a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a29      	ldr	r2, [pc, #164]	@ (8006858 <TIM_Base_SetConfig+0xfc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_Base_SetConfig+0x6a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a28      	ldr	r2, [pc, #160]	@ (800685c <TIM_Base_SetConfig+0x100>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0x6a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <TIM_Base_SetConfig+0x104>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a14      	ldr	r2, [pc, #80]	@ (8006850 <TIM_Base_SetConfig+0xf4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00b      	beq.n	800681c <TIM_Base_SetConfig+0xc0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a14      	ldr	r2, [pc, #80]	@ (8006858 <TIM_Base_SetConfig+0xfc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d007      	beq.n	800681c <TIM_Base_SetConfig+0xc0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a13      	ldr	r2, [pc, #76]	@ (800685c <TIM_Base_SetConfig+0x100>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_Base_SetConfig+0xc0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a12      	ldr	r2, [pc, #72]	@ (8006860 <TIM_Base_SetConfig+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d103      	bne.n	8006824 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d105      	bne.n	8006842 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]
  }
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40000400 	.word	0x40000400
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800

08006864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f023 0201 	bic.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0302 	bic.w	r3, r3, #2
 80068b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a28      	ldr	r2, [pc, #160]	@ (8006960 <TIM_OC1_SetConfig+0xfc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_OC1_SetConfig+0x78>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a27      	ldr	r2, [pc, #156]	@ (8006964 <TIM_OC1_SetConfig+0x100>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_OC1_SetConfig+0x78>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a26      	ldr	r2, [pc, #152]	@ (8006968 <TIM_OC1_SetConfig+0x104>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC1_SetConfig+0x78>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a25      	ldr	r2, [pc, #148]	@ (800696c <TIM_OC1_SetConfig+0x108>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d10c      	bne.n	80068f6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0308 	bic.w	r3, r3, #8
 80068e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f023 0304 	bic.w	r3, r3, #4
 80068f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a19      	ldr	r2, [pc, #100]	@ (8006960 <TIM_OC1_SetConfig+0xfc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00b      	beq.n	8006916 <TIM_OC1_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a18      	ldr	r2, [pc, #96]	@ (8006964 <TIM_OC1_SetConfig+0x100>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <TIM_OC1_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a17      	ldr	r2, [pc, #92]	@ (8006968 <TIM_OC1_SetConfig+0x104>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d003      	beq.n	8006916 <TIM_OC1_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a16      	ldr	r2, [pc, #88]	@ (800696c <TIM_OC1_SetConfig+0x108>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d111      	bne.n	800693a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800691c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	621a      	str	r2, [r3, #32]
}
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	40012c00 	.word	0x40012c00
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f023 0210 	bic.w	r2, r3, #16
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0320 	bic.w	r3, r3, #32
 80069be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a24      	ldr	r2, [pc, #144]	@ (8006a60 <TIM_OC2_SetConfig+0xf0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10d      	bne.n	80069f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <TIM_OC2_SetConfig+0xf0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_OC2_SetConfig+0xa0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006a64 <TIM_OC2_SetConfig+0xf4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC2_SetConfig+0xa0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <TIM_OC2_SetConfig+0xf8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC2_SetConfig+0xa0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a18      	ldr	r2, [pc, #96]	@ (8006a6c <TIM_OC2_SetConfig+0xfc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d113      	bne.n	8006a38 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800

08006a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a23      	ldr	r2, [pc, #140]	@ (8006b5c <TIM_OC3_SetConfig+0xec>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10d      	bne.n	8006aee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006aec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b5c <TIM_OC3_SetConfig+0xec>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_OC3_SetConfig+0x9e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a19      	ldr	r2, [pc, #100]	@ (8006b60 <TIM_OC3_SetConfig+0xf0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_OC3_SetConfig+0x9e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a18      	ldr	r2, [pc, #96]	@ (8006b64 <TIM_OC3_SetConfig+0xf4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_OC3_SetConfig+0x9e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a17      	ldr	r2, [pc, #92]	@ (8006b68 <TIM_OC3_SetConfig+0xf8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d113      	bne.n	8006b36 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40014400 	.word	0x40014400
 8006b68:	40014800 	.word	0x40014800

08006b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	031b      	lsls	r3, r3, #12
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a16      	ldr	r2, [pc, #88]	@ (8006c24 <TIM_OC4_SetConfig+0xb8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_OC4_SetConfig+0x7c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a15      	ldr	r2, [pc, #84]	@ (8006c28 <TIM_OC4_SetConfig+0xbc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_OC4_SetConfig+0x7c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a14      	ldr	r2, [pc, #80]	@ (8006c2c <TIM_OC4_SetConfig+0xc0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC4_SetConfig+0x7c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a13      	ldr	r2, [pc, #76]	@ (8006c30 <TIM_OC4_SetConfig+0xc4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d109      	bne.n	8006bfc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	019b      	lsls	r3, r3, #6
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40014000 	.word	0x40014000
 8006c2c:	40014400 	.word	0x40014400
 8006c30:	40014800 	.word	0x40014800

08006c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	041b      	lsls	r3, r3, #16
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a15      	ldr	r2, [pc, #84]	@ (8006ce0 <TIM_OC5_SetConfig+0xac>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00b      	beq.n	8006ca6 <TIM_OC5_SetConfig+0x72>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a14      	ldr	r2, [pc, #80]	@ (8006ce4 <TIM_OC5_SetConfig+0xb0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d007      	beq.n	8006ca6 <TIM_OC5_SetConfig+0x72>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a13      	ldr	r2, [pc, #76]	@ (8006ce8 <TIM_OC5_SetConfig+0xb4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_OC5_SetConfig+0x72>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a12      	ldr	r2, [pc, #72]	@ (8006cec <TIM_OC5_SetConfig+0xb8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d109      	bne.n	8006cba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	621a      	str	r2, [r3, #32]
}
 8006cd4:	bf00      	nop
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	051b      	lsls	r3, r3, #20
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a16      	ldr	r2, [pc, #88]	@ (8006da0 <TIM_OC6_SetConfig+0xb0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <TIM_OC6_SetConfig+0x74>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	@ (8006da4 <TIM_OC6_SetConfig+0xb4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <TIM_OC6_SetConfig+0x74>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a14      	ldr	r2, [pc, #80]	@ (8006da8 <TIM_OC6_SetConfig+0xb8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d003      	beq.n	8006d64 <TIM_OC6_SetConfig+0x74>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a13      	ldr	r2, [pc, #76]	@ (8006dac <TIM_OC6_SetConfig+0xbc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d109      	bne.n	8006d78 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	029b      	lsls	r3, r3, #10
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800

08006db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 030a 	bic.w	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f023 0210 	bic.w	r2, r3, #16
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e054      	b.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a24      	ldr	r2, [pc, #144]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a17      	ldr	r2, [pc, #92]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb0:	d009      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a13      	ldr	r2, [pc, #76]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a11      	ldr	r2, [pc, #68]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40000400 	.word	0x40000400
 8007008:	40014000 	.word	0x40014000

0800700c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <CalculateBytesToWrite>:
 * @param  size The size of the data to write in bytes.
 * @param  offset The starting byte offset within the page.
 * @return The number of bytes to write.
 */
uint16_t CalculateBytesToWrite(uint16_t size, uint16_t offset)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	460a      	mov	r2, r1
 8007052:	80fb      	strh	r3, [r7, #6]
 8007054:	4613      	mov	r3, r2
 8007056:	80bb      	strh	r3, [r7, #4]
    return ((size + offset) < EEPROM_PAGE_SIZE) ? size : (EEPROM_PAGE_SIZE - offset);
 8007058:	88fa      	ldrh	r2, [r7, #6]
 800705a:	88bb      	ldrh	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007060:	dd04      	ble.n	800706c <CalculateBytesToWrite+0x24>
 8007062:	88bb      	ldrh	r3, [r7, #4]
 8007064:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8007068:	b29b      	uxth	r3, r3
 800706a:	e000      	b.n	800706e <CalculateBytesToWrite+0x26>
 800706c:	88fb      	ldrh	r3, [r7, #6]
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <WriteToEeprom>:
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data Pointer to the data buffer to be written.
 * @param  size The size of the data in bytes.
 */
void WriteToEeprom(uint16_t page, uint16_t offset, uint8_t* data, uint16_t size)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	@ 0x38
 8007080:	af04      	add	r7, sp, #16
 8007082:	60ba      	str	r2, [r7, #8]
 8007084:	461a      	mov	r2, r3
 8007086:	4603      	mov	r3, r0
 8007088:	81fb      	strh	r3, [r7, #14]
 800708a:	460b      	mov	r3, r1
 800708c:	81bb      	strh	r3, [r7, #12]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
    // Calculate the bit position where page addressing starts
    int pageAddressShift = log(EEPROM_PAGE_SIZE) / log(2);
 8007092:	2306      	movs	r3, #6
 8007094:	61fb      	str	r3, [r7, #28]

    // Calculate the start and end page numbers
    uint16_t startPage = page;
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / EEPROM_PAGE_SIZE);
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	89bb      	ldrh	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da00      	bge.n	80070a6 <WriteToEeprom+0x2a>
 80070a4:	333f      	adds	r3, #63	@ 0x3f
 80070a6:	119b      	asrs	r3, r3, #6
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	89fb      	ldrh	r3, [r7, #14]
 80070ac:	4413      	add	r3, r2
 80070ae:	837b      	strh	r3, [r7, #26]

    // Number of pages to be written
    uint16_t numberOfPages = (endPage - startPage) + 1;
 80070b0:	8b7a      	ldrh	r2, [r7, #26]
 80070b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3301      	adds	r3, #1
 80070ba:	833b      	strh	r3, [r7, #24]
    uint16_t dataPosition = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	84bb      	strh	r3, [r7, #36]	@ 0x24

    // Write data to EEPROM
    for (int i = 0; i < numberOfPages; i++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	e034      	b.n	8007130 <WriteToEeprom+0xb4>
    {
        // Calculate memory address by combining page and byte addresses
        uint16_t memoryAddress = (startPage << pageAddressShift) | offset;
 80070c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	b21a      	sxth	r2, r3
 80070d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	82fb      	strh	r3, [r7, #22]
        uint16_t bytesRemaining = CalculateBytesToWrite(size, offset);
 80070da:	89ba      	ldrh	r2, [r7, #12]
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	4611      	mov	r1, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff ffb1 	bl	8007048 <CalculateBytesToWrite>
 80070e6:	4603      	mov	r3, r0
 80070e8:	82bb      	strh	r3, [r7, #20]

        HAL_I2C_Mem_Write(EEPROM_I2C_HANDLE, EEPROM_I2C_ADDRESS, memoryAddress, 2, &data[dataPosition], bytesRemaining, 1000);
 80070ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	4413      	add	r3, r2
 80070f0:	8af9      	ldrh	r1, [r7, #22]
 80070f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070f6:	9202      	str	r2, [sp, #8]
 80070f8:	8aba      	ldrh	r2, [r7, #20]
 80070fa:	9201      	str	r2, [sp, #4]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2302      	movs	r3, #2
 8007100:	460a      	mov	r2, r1
 8007102:	21a0      	movs	r1, #160	@ 0xa0
 8007104:	480f      	ldr	r0, [pc, #60]	@ (8007144 <WriteToEeprom+0xc8>)
 8007106:	f7fc fb7d 	bl	8003804 <HAL_I2C_Mem_Write>

        // Move to the next page
        startPage++;
 800710a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800710c:	3301      	adds	r3, #1
 800710e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;  // Reset offset for new page
 8007110:	2300      	movs	r3, #0
 8007112:	81bb      	strh	r3, [r7, #12]
        size -= bytesRemaining;  // Reduce size by bytes written
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	8abb      	ldrh	r3, [r7, #20]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	80fb      	strh	r3, [r7, #6]
        dataPosition += bytesRemaining;  // Update data buffer position
 800711c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800711e:	8abb      	ldrh	r3, [r7, #20]
 8007120:	4413      	add	r3, r2
 8007122:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);  // Write cycle delay (5 ms)
 8007124:	2005      	movs	r0, #5
 8007126:	f7fa ff81 	bl	800202c <HAL_Delay>
    for (int i = 0; i < numberOfPages; i++)
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	3301      	adds	r3, #1
 800712e:	623b      	str	r3, [r7, #32]
 8007130:	8b3b      	ldrh	r3, [r7, #24]
 8007132:	6a3a      	ldr	r2, [r7, #32]
 8007134:	429a      	cmp	r2, r3
 8007136:	dbc6      	blt.n	80070c6 <WriteToEeprom+0x4a>
    }
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3728      	adds	r7, #40	@ 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000460 	.word	0x20000460

08007148 <FloatToByteArray>:
 * @brief  Converts a floating-point number to a byte array.
 * @param  byteArray Pointer to the array where the converted bytes will be stored.
 * @param  floatValue The floating-point value to convert.
 */
void FloatToByteArray(uint8_t* byteArray, float floatValue)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	ed87 0a00 	vstr	s0, [r7]
    union {
        float floatVal;
        uint8_t bytes[4];
    } floatUnion;

    floatUnion.floatVal = floatValue;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++)
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]
 800715c:	e00b      	b.n	8007176 <FloatToByteArray+0x2e>
    {
        byteArray[i] = floatUnion.bytes[i];
 800715e:	7bfa      	ldrb	r2, [r7, #15]
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	440b      	add	r3, r1
 8007166:	3210      	adds	r2, #16
 8007168:	443a      	add	r2, r7
 800716a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800716e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	3301      	adds	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b03      	cmp	r3, #3
 800717a:	d9f0      	bls.n	800715e <FloatToByteArray+0x16>
    }
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <ByteArrayToFloat>:
 * @brief  Converts a byte array to a floating-point number.
 * @param  byteArray Pointer to the byte array containing the data.
 * @return The floating-point number obtained from the byte array.
 */
float ByteArrayToFloat(uint8_t* byteArray)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
    union {
        float floatVal;
        uint8_t bytes[4];
    } floatUnion;

    for (uint8_t i = 0; i < 4; i++)
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e00b      	b.n	80071b0 <ByteArrayToFloat+0x26>
    {
        floatUnion.bytes[i] = byteArray[i];
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	441a      	add	r2, r3
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	3310      	adds	r3, #16
 80071a4:	443b      	add	r3, r7
 80071a6:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = 0; i < 4; i++)
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	3301      	adds	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d9f0      	bls.n	8007198 <ByteArrayToFloat+0xe>
    }

    return floatUnion.floatVal;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	ee07 3a90 	vmov	s15, r3
}
 80071bc:	eeb0 0a67 	vmov.f32	s0, s15
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <WriteFloatToEeprom>:
 * @param  page The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data The floating-point number to be written.
 */
void WriteFloatToEeprom(uint16_t page, uint16_t offset, float data)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	460a      	mov	r2, r1
 80071d6:	ed87 0a00 	vstr	s0, [r7]
 80071da:	80fb      	strh	r3, [r7, #6]
 80071dc:	4613      	mov	r3, r2
 80071de:	80bb      	strh	r3, [r7, #4]
    FloatToByteArray(tempByteArray, data);
 80071e0:	ed97 0a00 	vldr	s0, [r7]
 80071e4:	4806      	ldr	r0, [pc, #24]	@ (8007200 <WriteFloatToEeprom+0x34>)
 80071e6:	f7ff ffaf 	bl	8007148 <FloatToByteArray>
    WriteToEeprom(page, offset, tempByteArray, 4);
 80071ea:	88b9      	ldrh	r1, [r7, #4]
 80071ec:	88f8      	ldrh	r0, [r7, #6]
 80071ee:	2304      	movs	r3, #4
 80071f0:	4a03      	ldr	r2, [pc, #12]	@ (8007200 <WriteFloatToEeprom+0x34>)
 80071f2:	f7ff ff43 	bl	800707c <WriteToEeprom>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200005c8 	.word	0x200005c8

08007204 <ReadFloatFromEeprom>:
 * @param  page The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @return The floating-point number read from the EEPROM.
 */
float ReadFloatFromEeprom(uint16_t page, uint16_t offset)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	460a      	mov	r2, r1
 800720e:	80fb      	strh	r3, [r7, #6]
 8007210:	4613      	mov	r3, r2
 8007212:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[4];
    ReadFromEeprom(page, offset, buffer, 4);
 8007214:	f107 020c 	add.w	r2, r7, #12
 8007218:	88b9      	ldrh	r1, [r7, #4]
 800721a:	88f8      	ldrh	r0, [r7, #6]
 800721c:	2304      	movs	r3, #4
 800721e:	f000 f80d 	bl	800723c <ReadFromEeprom>
    return ByteArrayToFloat(buffer);
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff ffaf 	bl	800718a <ByteArrayToFloat>
 800722c:	eef0 7a40 	vmov.f32	s15, s0
}
 8007230:	eeb0 0a67 	vmov.f32	s0, s15
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <ReadFromEeprom>:
 * @param  offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param  data Pointer to the buffer where the read data will be stored.
 * @param  size The number of bytes to read.
 */
void ReadFromEeprom(uint16_t page, uint16_t offset, uint8_t* data, uint16_t size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08e      	sub	sp, #56	@ 0x38
 8007240:	af04      	add	r7, sp, #16
 8007242:	60ba      	str	r2, [r7, #8]
 8007244:	461a      	mov	r2, r3
 8007246:	4603      	mov	r3, r0
 8007248:	81fb      	strh	r3, [r7, #14]
 800724a:	460b      	mov	r3, r1
 800724c:	81bb      	strh	r3, [r7, #12]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
    int pageAddressShift = log(EEPROM_PAGE_SIZE) / log(2);
 8007252:	2306      	movs	r3, #6
 8007254:	61fb      	str	r3, [r7, #28]

    uint16_t startPage = page;
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / EEPROM_PAGE_SIZE);
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	89bb      	ldrh	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	2b00      	cmp	r3, #0
 8007262:	da00      	bge.n	8007266 <ReadFromEeprom+0x2a>
 8007264:	333f      	adds	r3, #63	@ 0x3f
 8007266:	119b      	asrs	r3, r3, #6
 8007268:	b29a      	uxth	r2, r3
 800726a:	89fb      	ldrh	r3, [r7, #14]
 800726c:	4413      	add	r3, r2
 800726e:	837b      	strh	r3, [r7, #26]

    uint16_t numberOfPages = (endPage - startPage) + 1;
 8007270:	8b7a      	ldrh	r2, [r7, #26]
 8007272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	b29b      	uxth	r3, r3
 8007278:	3301      	adds	r3, #1
 800727a:	833b      	strh	r3, [r7, #24]
    uint16_t dataPosition = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numberOfPages; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	e031      	b.n	80072ea <ReadFromEeprom+0xae>
    {
        uint16_t memoryAddress = (startPage << pageAddressShift) | offset;
 8007286:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	b21a      	sxth	r2, r3
 8007290:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	b21b      	sxth	r3, r3
 8007298:	82fb      	strh	r3, [r7, #22]
        uint16_t bytesRemaining = CalculateBytesToWrite(size, offset);
 800729a:	89ba      	ldrh	r2, [r7, #12]
 800729c:	88fb      	ldrh	r3, [r7, #6]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fed1 	bl	8007048 <CalculateBytesToWrite>
 80072a6:	4603      	mov	r3, r0
 80072a8:	82bb      	strh	r3, [r7, #20]
	    HAL_I2C_Mem_Read(EEPROM_I2C_HANDLE, EEPROM_I2C_ADDRESS, memoryAddress, 2, &data[dataPosition], bytesRemaining, 1000);
 80072aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4413      	add	r3, r2
 80072b0:	8af9      	ldrh	r1, [r7, #22]
 80072b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072b6:	9202      	str	r2, [sp, #8]
 80072b8:	8aba      	ldrh	r2, [r7, #20]
 80072ba:	9201      	str	r2, [sp, #4]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	2302      	movs	r3, #2
 80072c0:	460a      	mov	r2, r1
 80072c2:	21a0      	movs	r1, #160	@ 0xa0
 80072c4:	480d      	ldr	r0, [pc, #52]	@ (80072fc <ReadFromEeprom+0xc0>)
 80072c6:	f7fc fbb1 	bl	8003a2c <HAL_I2C_Mem_Read>

        startPage++;
 80072ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072cc:	3301      	adds	r3, #1
 80072ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	81bb      	strh	r3, [r7, #12]
        size -= bytesRemaining;
 80072d4:	88fa      	ldrh	r2, [r7, #6]
 80072d6:	8abb      	ldrh	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	80fb      	strh	r3, [r7, #6]
        dataPosition += bytesRemaining;
 80072dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072de:	8abb      	ldrh	r3, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numberOfPages; i++)
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	3301      	adds	r3, #1
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	8b3b      	ldrh	r3, [r7, #24]
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	dbc9      	blt.n	8007286 <ReadFromEeprom+0x4a>
    }
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	3728      	adds	r7, #40	@ 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000460 	.word	0x20000460

08007300 <CheckInputDebounced>:

DebounceState debounceState = INPUT_IDLE;
uint32_t debounceStart = 0;

void CheckInputDebounced(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
    switch (debounceState)
 8007304:	4b1f      	ldr	r3, [pc, #124]	@ (8007384 <CheckInputDebounced+0x84>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d02f      	beq.n	800736c <CheckInputDebounced+0x6c>
 800730c:	2b02      	cmp	r3, #2
 800730e:	dc37      	bgt.n	8007380 <CheckInputDebounced+0x80>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <CheckInputDebounced+0x1a>
 8007314:	2b01      	cmp	r3, #1
 8007316:	d011      	beq.n	800733c <CheckInputDebounced+0x3c>
        	SetErrorState(SHORTCIRCUIT);
            //error_state = SHORTCIRCUIT;
            debounceState = INPUT_IDLE;
            break;
    }
}
 8007318:	e032      	b.n	8007380 <CheckInputDebounced+0x80>
            if (HAL_GPIO_ReadPin(ShortCircuitDetect_GPIO_Port, ShortCircuitDetect_Pin) == GPIO_PIN_RESET)
 800731a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800731e:	481a      	ldr	r0, [pc, #104]	@ (8007388 <CheckInputDebounced+0x88>)
 8007320:	f7fc f98a 	bl	8003638 <HAL_GPIO_ReadPin>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d127      	bne.n	800737a <CheckInputDebounced+0x7a>
                debounceState = INPUT_WAIT;
 800732a:	4b16      	ldr	r3, [pc, #88]	@ (8007384 <CheckInputDebounced+0x84>)
 800732c:	2201      	movs	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
                debounceStart = HAL_GetTick();
 8007330:	f7fa fe70 	bl	8002014 <HAL_GetTick>
 8007334:	4603      	mov	r3, r0
 8007336:	4a15      	ldr	r2, [pc, #84]	@ (800738c <CheckInputDebounced+0x8c>)
 8007338:	6013      	str	r3, [r2, #0]
            break;
 800733a:	e01e      	b.n	800737a <CheckInputDebounced+0x7a>
            if (HAL_GPIO_ReadPin(ShortCircuitDetect_GPIO_Port, ShortCircuitDetect_Pin) == GPIO_PIN_RESET)
 800733c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007340:	4811      	ldr	r0, [pc, #68]	@ (8007388 <CheckInputDebounced+0x88>)
 8007342:	f7fc f979 	bl	8003638 <HAL_GPIO_ReadPin>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <CheckInputDebounced+0x64>
                if ((HAL_GetTick() - debounceStart) >= 10)  // 10ms debounce
 800734c:	f7fa fe62 	bl	8002014 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <CheckInputDebounced+0x8c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b09      	cmp	r3, #9
 800735a:	d910      	bls.n	800737e <CheckInputDebounced+0x7e>
                    debounceState = INPUT_CONFIRMED;
 800735c:	4b09      	ldr	r3, [pc, #36]	@ (8007384 <CheckInputDebounced+0x84>)
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
            break;
 8007362:	e00c      	b.n	800737e <CheckInputDebounced+0x7e>
                debounceState = INPUT_IDLE;  //It was noise
 8007364:	4b07      	ldr	r3, [pc, #28]	@ (8007384 <CheckInputDebounced+0x84>)
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
            break;
 800736a:	e008      	b.n	800737e <CheckInputDebounced+0x7e>
        	SetErrorState(SHORTCIRCUIT);
 800736c:	2000      	movs	r0, #0
 800736e:	f000 fa29 	bl	80077c4 <SetErrorState>
            debounceState = INPUT_IDLE;
 8007372:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <CheckInputDebounced+0x84>)
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
            break;
 8007378:	e002      	b.n	8007380 <CheckInputDebounced+0x80>
            break;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <CheckInputDebounced+0x80>
            break;
 800737e:	bf00      	nop
}
 8007380:	bf00      	nop
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200005cc 	.word	0x200005cc
 8007388:	48000400 	.word	0x48000400
 800738c:	200005d0 	.word	0x200005d0

08007390 <LcdRstLow>:
LcdOption Options;

/**
 * @brief  Set the reset pin low.
 */
void LcdRstLow(void){ HAL_GPIO_WritePin(LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); }
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
 8007394:	2200      	movs	r2, #0
 8007396:	2180      	movs	r1, #128	@ 0x80
 8007398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800739c:	f7fc f964 	bl	8003668 <HAL_GPIO_WritePin>
 80073a0:	bf00      	nop
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <LcdRstHigh>:

/**
 * @brief  Set the reset pin high.
 */
void LcdRstHigh(void){ HAL_GPIO_WritePin(LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET); }
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	2201      	movs	r2, #1
 80073aa:	2180      	movs	r1, #128	@ 0x80
 80073ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80073b0:	f7fc f95a 	bl	8003668 <HAL_GPIO_WritePin>
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <LcdEnLow>:

/**
 * @brief  Set the enable pin low.
 */
void LcdEnLow(void){ HAL_GPIO_WritePin(LcdEn_GPIO_Port, LcdEn_Pin, GPIO_PIN_RESET); }
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	2200      	movs	r2, #0
 80073be:	2104      	movs	r1, #4
 80073c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80073c4:	f7fc f950 	bl	8003668 <HAL_GPIO_WritePin>
 80073c8:	bf00      	nop
 80073ca:	bd80      	pop	{r7, pc}

080073cc <LcdEnHigh>:

/**
 * @brief  Set the enable pin high.
 */
void LcdEnHigh(void){ HAL_GPIO_WritePin(LcdEn_GPIO_Port, LcdEn_Pin, GPIO_PIN_SET); }
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	2201      	movs	r2, #1
 80073d2:	2104      	movs	r1, #4
 80073d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80073d8:	f7fc f946 	bl	8003668 <HAL_GPIO_WritePin>
 80073dc:	bf00      	nop
 80073de:	bd80      	pop	{r7, pc}

080073e0 <LcdEnBlink>:

/**
 * @brief  Enable blinking.
 */
void LcdEnBlink(void){ LcdEnHigh(); LcdDelay_us(100); LcdEnLow(); LcdDelay_us(100); }
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	f7ff fff2 	bl	80073cc <LcdEnHigh>
 80073e8:	2064      	movs	r0, #100	@ 0x64
 80073ea:	f000 f813 	bl	8007414 <LcdDelay_us>
 80073ee:	f7ff ffe3 	bl	80073b8 <LcdEnLow>
 80073f2:	2064      	movs	r0, #100	@ 0x64
 80073f4:	f000 f80e 	bl	8007414 <LcdDelay_us>
 80073f8:	bf00      	nop
 80073fa:	bd80      	pop	{r7, pc}

080073fc <LcdBackLightSet>:

/**
 * @brief  Set the backlight.
 */
void LcdBackLightSet(void){ HAL_GPIO_WritePin(LcdBackLight_GPIO_Port, LcdBackLight_Pin, GPIO_PIN_SET); };
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
 8007400:	2201      	movs	r2, #1
 8007402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007406:	4802      	ldr	r0, [pc, #8]	@ (8007410 <LcdBackLightSet+0x14>)
 8007408:	f7fc f92e 	bl	8003668 <HAL_GPIO_WritePin>
 800740c:	bf00      	nop
 800740e:	bd80      	pop	{r7, pc}
 8007410:	48000800 	.word	0x48000800

08007414 <LcdDelay_us>:
/**
 * @brief  Delay for a specified number of microseconds.
 * @param  us The number of microseconds to delay.
 */
void LcdDelay_us(uint16_t us)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	80fb      	strh	r3, [r7, #6]
  uint32_t  Div = (SysTick->LOAD+1)/1000;
 800741e:	4b19      	ldr	r3, [pc, #100]	@ (8007484 <LcdDelay_us+0x70>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	3301      	adds	r3, #1
 8007424:	4a18      	ldr	r2, [pc, #96]	@ (8007488 <LcdDelay_us+0x74>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	099b      	lsrs	r3, r3, #6
 800742c:	60fb      	str	r3, [r7, #12]
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
 800742e:	f7fa fdf1 	bl	8002014 <HAL_GetTick>
 8007432:	4603      	mov	r3, r0
 8007434:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007438:	fb03 f202 	mul.w	r2, r3, r2
 800743c:	4b11      	ldr	r3, [pc, #68]	@ (8007484 <LcdDelay_us+0x70>)
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	fbb1 f3f3 	udiv	r3, r1, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800744c:	60bb      	str	r3, [r7, #8]
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));  
 800744e:	bf00      	nop
 8007450:	f7fa fde0 	bl	8002014 <HAL_GetTick>
 8007454:	4603      	mov	r3, r0
 8007456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800745a:	fb03 f202 	mul.w	r2, r3, r2
 800745e:	4b09      	ldr	r3, [pc, #36]	@ (8007484 <LcdDelay_us+0x70>)
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	fbb1 f3f3 	udiv	r3, r1, r3
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	429a      	cmp	r2, r3
 8007476:	d3eb      	bcc.n	8007450 <LcdDelay_us+0x3c>
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	e000e010 	.word	0xe000e010
 8007488:	10624dd3 	.word	0x10624dd3

0800748c <LcdDelay_ms>:
/**
 * @brief  Delay for a specified number of milliseconds.
 * @param  ms The number of milliseconds to delay.
 */
void LcdDelay_ms(uint8_t ms)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	71fb      	strb	r3, [r7, #7]
  //#if _LCD_USE_FREERTOS==1
  //osDelay(ms);
  //#else
  HAL_Delay(ms);
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	4618      	mov	r0, r3
 800749a:	f7fa fdc7 	bl	800202c <HAL_Delay>
  //#endif
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <LcdInit>:

/**
 * @brief  Initialize the LCD.
 */
void LcdInit(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
	while(HAL_GetTick()<200)
 80074ac:	e002      	b.n	80074b4 <LcdInit+0xc>
	   LcdDelay_ms(1);
 80074ae:	2001      	movs	r0, #1
 80074b0:	f7ff ffec 	bl	800748c <LcdDelay_ms>
	while(HAL_GetTick()<200)
 80074b4:	f7fa fdae 	bl	8002014 <HAL_GetTick>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80074bc:	d9f7      	bls.n	80074ae <LcdInit+0x6>
	/* Set cursor pointer to beginning for LCD */
	Options.currentX = 0;
 80074be:	4b23      	ldr	r3, [pc, #140]	@ (800754c <LcdInit+0xa4>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	70da      	strb	r2, [r3, #3]
	Options.currentY = 0;
 80074c4:	4b21      	ldr	r3, [pc, #132]	@ (800754c <LcdInit+0xa4>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	711a      	strb	r2, [r3, #4]
	Options.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 80074ca:	4b20      	ldr	r3, [pc, #128]	@ (800754c <LcdInit+0xa4>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	705a      	strb	r2, [r3, #1]
	if (_LCD_ROWS > 1)
		Options.DisplayFunction |= LCD_2LINE;
 80074d0:	4b1e      	ldr	r3, [pc, #120]	@ (800754c <LcdInit+0xa4>)
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	f043 0308 	orr.w	r3, r3, #8
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4b1c      	ldr	r3, [pc, #112]	@ (800754c <LcdInit+0xa4>)
 80074dc:	705a      	strb	r2, [r3, #1]
	/* Try to set 4bit mode */
	LcdCmd4bit(0x03);
 80074de:	2003      	movs	r0, #3
 80074e0:	f000 f8f8 	bl	80076d4 <LcdCmd4bit>
	LcdDelay_ms(5);
 80074e4:	2005      	movs	r0, #5
 80074e6:	f7ff ffd1 	bl	800748c <LcdDelay_ms>
	/* Second try */
	LcdCmd4bit(0x03);
 80074ea:	2003      	movs	r0, #3
 80074ec:	f000 f8f2 	bl	80076d4 <LcdCmd4bit>
	LcdDelay_ms(5);
 80074f0:	2005      	movs	r0, #5
 80074f2:	f7ff ffcb 	bl	800748c <LcdDelay_ms>
	/* Third goo! */
	LcdCmd4bit(0x03);
 80074f6:	2003      	movs	r0, #3
 80074f8:	f000 f8ec 	bl	80076d4 <LcdCmd4bit>
	LcdDelay_ms(5);
 80074fc:	2005      	movs	r0, #5
 80074fe:	f7ff ffc5 	bl	800748c <LcdDelay_ms>
	/* Set 4-bit interface */
	LcdCmd4bit(0x02);
 8007502:	2002      	movs	r0, #2
 8007504:	f000 f8e6 	bl	80076d4 <LcdCmd4bit>
	LcdDelay_ms(5);
 8007508:	2005      	movs	r0, #5
 800750a:	f7ff ffbf 	bl	800748c <LcdDelay_ms>
	/* Set # lines, font size, etc. */
	LcdCmd(LCD_FUNCTIONSET | Options.DisplayFunction);
 800750e:	4b0f      	ldr	r3, [pc, #60]	@ (800754c <LcdInit+0xa4>)
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	f043 0320 	orr.w	r3, r3, #32
 8007516:	b2db      	uxtb	r3, r3
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f8c3 	bl	80076a4 <LcdCmd>
	/* Turn the display on with no cursor or blinking default */
	Options.DisplayControl = LCD_DISPLAYON;
 800751e:	4b0b      	ldr	r3, [pc, #44]	@ (800754c <LcdInit+0xa4>)
 8007520:	2204      	movs	r2, #4
 8007522:	701a      	strb	r2, [r3, #0]
	LcdDisplayOn();
 8007524:	f000 f822 	bl	800756c <LcdDisplayOn>
	LcdClear();
 8007528:	f000 f812 	bl	8007550 <LcdClear>
	/* Default font directions */
	Options.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <LcdInit+0xa4>)
 800752e:	2202      	movs	r2, #2
 8007530:	709a      	strb	r2, [r3, #2]
	LcdCmd(LCD_ENTRYMODESET | Options.DisplayMode);
 8007532:	4b06      	ldr	r3, [pc, #24]	@ (800754c <LcdInit+0xa4>)
 8007534:	789b      	ldrb	r3, [r3, #2]
 8007536:	f043 0304 	orr.w	r3, r3, #4
 800753a:	b2db      	uxtb	r3, r3
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f8b1 	bl	80076a4 <LcdCmd>
	LcdDelay_ms(5);
 8007542:	2005      	movs	r0, #5
 8007544:	f7ff ffa2 	bl	800748c <LcdDelay_ms>
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200005d4 	.word	0x200005d4

08007550 <LcdClear>:

/**
 * @brief  Clear the display.
 */
void LcdClear(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
	LcdDelay_ms(5);
 8007554:	2005      	movs	r0, #5
 8007556:	f7ff ff99 	bl	800748c <LcdDelay_ms>
	LcdCmd(LCD_CLEARDISPLAY);
 800755a:	2001      	movs	r0, #1
 800755c:	f000 f8a2 	bl	80076a4 <LcdCmd>
	LcdDelay_ms(5);
 8007560:	2005      	movs	r0, #5
 8007562:	f7ff ff93 	bl	800748c <LcdDelay_ms>
}
 8007566:	bf00      	nop
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <LcdDisplayOn>:

/**
 * @brief  Turn the display on.
 */
void LcdDisplayOn(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
	Options.DisplayControl |= LCD_DISPLAYON;
 8007570:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <LcdDisplayOn+0x28>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f043 0304 	orr.w	r3, r3, #4
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <LcdDisplayOn+0x28>)
 800757c:	701a      	strb	r2, [r3, #0]
	LcdCmd(LCD_DISPLAYCONTROL | Options.DisplayControl);
 800757e:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <LcdDisplayOn+0x28>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	f043 0308 	orr.w	r3, r3, #8
 8007586:	b2db      	uxtb	r3, r3
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f88b 	bl	80076a4 <LcdCmd>
}
 800758e:	bf00      	nop
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	200005d4 	.word	0x200005d4

08007598 <LcdPuts>:
 * @param  x The X position to start printing.
 * @param  y The Y position to start printing.
 * @param  str The string to print.
 */
void LcdPuts(uint8_t x, uint8_t y, char const *str)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	603a      	str	r2, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
 80075a4:	460b      	mov	r3, r1
 80075a6:	71bb      	strb	r3, [r7, #6]
	LcdCursorSet(x, y);
 80075a8:	79ba      	ldrb	r2, [r7, #6]
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f8da 	bl	8007768 <LcdCursorSet>
	while (*str)
 80075b4:	e040      	b.n	8007638 <LcdPuts+0xa0>
    {
		if (Options.currentX >= _LCD_COLS)
 80075b6:	4b25      	ldr	r3, [pc, #148]	@ (800764c <LcdPuts+0xb4>)
 80075b8:	78db      	ldrb	r3, [r3, #3]
 80075ba:	2b13      	cmp	r3, #19
 80075bc:	d910      	bls.n	80075e0 <LcdPuts+0x48>
       {
			Options.currentX = 0;
 80075be:	4b23      	ldr	r3, [pc, #140]	@ (800764c <LcdPuts+0xb4>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	70da      	strb	r2, [r3, #3]
			Options.currentY++;
 80075c4:	4b21      	ldr	r3, [pc, #132]	@ (800764c <LcdPuts+0xb4>)
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	3301      	adds	r3, #1
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	4b1f      	ldr	r3, [pc, #124]	@ (800764c <LcdPuts+0xb4>)
 80075ce:	711a      	strb	r2, [r3, #4]
			LcdCursorSet(Options.currentX, Options.currentY);
 80075d0:	4b1e      	ldr	r3, [pc, #120]	@ (800764c <LcdPuts+0xb4>)
 80075d2:	78db      	ldrb	r3, [r3, #3]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	@ (800764c <LcdPuts+0xb4>)
 80075d6:	7912      	ldrb	r2, [r2, #4]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f8c4 	bl	8007768 <LcdCursorSet>
		}
		if (*str == '\n')
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b0a      	cmp	r3, #10
 80075e6:	d10e      	bne.n	8007606 <LcdPuts+0x6e>
        {
			Options.currentY++;
 80075e8:	4b18      	ldr	r3, [pc, #96]	@ (800764c <LcdPuts+0xb4>)
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	3301      	adds	r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	4b16      	ldr	r3, [pc, #88]	@ (800764c <LcdPuts+0xb4>)
 80075f2:	711a      	strb	r2, [r3, #4]
			LcdCursorSet(Options.currentX, Options.currentY);
 80075f4:	4b15      	ldr	r3, [pc, #84]	@ (800764c <LcdPuts+0xb4>)
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	4a14      	ldr	r2, [pc, #80]	@ (800764c <LcdPuts+0xb4>)
 80075fa:	7912      	ldrb	r2, [r2, #4]
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f8b2 	bl	8007768 <LcdCursorSet>
 8007604:	e015      	b.n	8007632 <LcdPuts+0x9a>
		}
		else if (*str == '\r')
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b0d      	cmp	r3, #13
 800760c:	d106      	bne.n	800761c <LcdPuts+0x84>
		{
			LcdCursorSet(0, Options.currentY);
 800760e:	4b0f      	ldr	r3, [pc, #60]	@ (800764c <LcdPuts+0xb4>)
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	4619      	mov	r1, r3
 8007614:	2000      	movs	r0, #0
 8007616:	f000 f8a7 	bl	8007768 <LcdCursorSet>
 800761a:	e00a      	b.n	8007632 <LcdPuts+0x9a>
		}
		else
		{
			LcdData(*str);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f889 	bl	8007738 <LcdData>
			Options.currentX++;
 8007626:	4b09      	ldr	r3, [pc, #36]	@ (800764c <LcdPuts+0xb4>)
 8007628:	78db      	ldrb	r3, [r3, #3]
 800762a:	3301      	adds	r3, #1
 800762c:	b2da      	uxtb	r2, r3
 800762e:	4b07      	ldr	r3, [pc, #28]	@ (800764c <LcdPuts+0xb4>)
 8007630:	70da      	strb	r2, [r3, #3]
		}
		str++;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	603b      	str	r3, [r7, #0]
	while (*str)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1ba      	bne.n	80075b6 <LcdPuts+0x1e>
	}
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200005d4 	.word	0x200005d4

08007650 <LcdCreateChar>:
 * @brief  Create a custom character.
 * @param  location The location of the custom character.
 * @param  data The data for the custom character.
 */
void LcdCreateChar(uint8_t location, uint8_t const *data)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* We have 8 locations available for custom characters */
	location &= 0x07;
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	71fb      	strb	r3, [r7, #7]
	LcdCmd(LCD_SETCGRAMADDR | (location << 3));
 8007664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	b25b      	sxtb	r3, r3
 800766c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007670:	b25b      	sxtb	r3, r3
 8007672:	b2db      	uxtb	r3, r3
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f815 	bl	80076a4 <LcdCmd>
	
	for (i = 0; i < 8; i++) {
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]
 800767e:	e009      	b.n	8007694 <LcdCreateChar+0x44>
		LcdData(data[i]);
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4413      	add	r3, r2
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f855 	bl	8007738 <LcdData>
	for (i = 0; i < 8; i++) {
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3301      	adds	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b07      	cmp	r3, #7
 8007698:	d9f2      	bls.n	8007680 <LcdCreateChar+0x30>
	}
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <LcdCmd>:
/**
 * @brief  Send a command to the LCD.
 * @param  cmd The command to send.
 */
void LcdCmd(uint8_t cmd)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	71fb      	strb	r3, [r7, #7]
	LcdRstLow();
 80076ae:	f7ff fe6f 	bl	8007390 <LcdRstLow>
	LcdCmd4bit(cmd >> 4);
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	091b      	lsrs	r3, r3, #4
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f80b 	bl	80076d4 <LcdCmd4bit>
	LcdCmd4bit(cmd & 0x0F);
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f804 	bl	80076d4 <LcdCmd4bit>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <LcdCmd4bit>:
/**
 * @brief  Send a 4-bit command to the LCD.
 * @param  cmd The 4-bit command to send.
 */
void LcdCmd4bit(uint8_t cmd)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Lcd7_GPIO_Port, Lcd7_Pin, (GPIO_PinState)(cmd & 0x08));
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	2108      	movs	r1, #8
 80076ea:	4812      	ldr	r0, [pc, #72]	@ (8007734 <LcdCmd4bit+0x60>)
 80076ec:	f7fb ffbc 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd6_GPIO_Port, Lcd6_Pin, (GPIO_PinState)(cmd & 0x04));
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	2104      	movs	r1, #4
 80076fc:	480d      	ldr	r0, [pc, #52]	@ (8007734 <LcdCmd4bit+0x60>)
 80076fe:	f7fb ffb3 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd5_GPIO_Port, Lcd5_Pin, (GPIO_PinState)(cmd & 0x02));
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	2102      	movs	r1, #2
 800770e:	4809      	ldr	r0, [pc, #36]	@ (8007734 <LcdCmd4bit+0x60>)
 8007710:	f7fb ffaa 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lcd4_GPIO_Port, Lcd4_Pin, (GPIO_PinState)(cmd & 0x01));
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	2101      	movs	r1, #1
 8007720:	4804      	ldr	r0, [pc, #16]	@ (8007734 <LcdCmd4bit+0x60>)
 8007722:	f7fb ffa1 	bl	8003668 <HAL_GPIO_WritePin>
	LcdEnBlink();
 8007726:	f7ff fe5b 	bl	80073e0 <LcdEnBlink>
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	48000800 	.word	0x48000800

08007738 <LcdData>:
/**
 * @brief  Send data to the LCD.
 * @param  data The data to send.
 */
void LcdData(uint8_t data)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
	LcdRstHigh();
 8007742:	f7ff fe2f 	bl	80073a4 <LcdRstHigh>
	LcdCmd4bit(data >> 4);
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	091b      	lsrs	r3, r3, #4
 800774a:	b2db      	uxtb	r3, r3
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff ffc1 	bl	80076d4 <LcdCmd4bit>
	LcdCmd4bit(data & 0x0F);
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	b2db      	uxtb	r3, r3
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff ffba 	bl	80076d4 <LcdCmd4bit>
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <LcdCursorSet>:
 * @brief  Set the cursor position.
 * @param  col The column position.
 * @param  row The row position.
 */
void LcdCursorSet(uint8_t col, uint8_t row)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	460a      	mov	r2, r1
 8007772:	71fb      	strb	r3, [r7, #7]
 8007774:	4613      	mov	r3, r2
 8007776:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8007778:	4b10      	ldr	r3, [pc, #64]	@ (80077bc <LcdCursorSet+0x54>)
 800777a:	60fb      	str	r3, [r7, #12]
	if (row >= _LCD_ROWS)
 800777c:	79bb      	ldrb	r3, [r7, #6]
 800777e:	2b03      	cmp	r3, #3
 8007780:	d901      	bls.n	8007786 <LcdCursorSet+0x1e>
		row = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	71bb      	strb	r3, [r7, #6]
	Options.currentX = col;
 8007786:	4a0e      	ldr	r2, [pc, #56]	@ (80077c0 <LcdCursorSet+0x58>)
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	70d3      	strb	r3, [r2, #3]
	Options.currentY = row;
 800778c:	4a0c      	ldr	r2, [pc, #48]	@ (80077c0 <LcdCursorSet+0x58>)
 800778e:	79bb      	ldrb	r3, [r7, #6]
 8007790:	7113      	strb	r3, [r2, #4]
	LcdCmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8007792:	79bb      	ldrb	r3, [r7, #6]
 8007794:	3310      	adds	r3, #16
 8007796:	443b      	add	r3, r7
 8007798:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	4413      	add	r3, r2
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff ff79 	bl	80076a4 <LcdCmd>
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	54144000 	.word	0x54144000
 80077c0:	200005d4 	.word	0x200005d4

080077c4 <SetErrorState>:
};

static uint8_t nextVariable = VA_FIRST_VARIABLE;

void SetErrorState(error_state_t errorstate)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	71fb      	strb	r3, [r7, #7]
	error_state = errorstate;
 80077ce:	4a04      	ldr	r2, [pc, #16]	@ (80077e0 <SetErrorState+0x1c>)
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	7013      	strb	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	20000073 	.word	0x20000073

080077e4 <LedUpdateBlink>:
{
	return error_state;
}

void LedUpdateBlink(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
	if (led_blink_timeout > 0)
 80077e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007868 <LedUpdateBlink+0x84>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d038      	beq.n	8007862 <LedUpdateBlink+0x7e>
	{
		if (error_state == SHORTCIRCUIT)
 80077f0:	4b1e      	ldr	r3, [pc, #120]	@ (800786c <LedUpdateBlink+0x88>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <LedUpdateBlink+0x20>
			HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 80077f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80077fc:	481c      	ldr	r0, [pc, #112]	@ (8007870 <LedUpdateBlink+0x8c>)
 80077fe:	f7fb ff4b 	bl	8003698 <HAL_GPIO_TogglePin>
 8007802:	e007      	b.n	8007814 <LedUpdateBlink+0x30>
		else if (error_state == HV)
 8007804:	4b19      	ldr	r3, [pc, #100]	@ (800786c <LedUpdateBlink+0x88>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d103      	bne.n	8007814 <LedUpdateBlink+0x30>
			HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 800780c:	2104      	movs	r1, #4
 800780e:	4819      	ldr	r0, [pc, #100]	@ (8007874 <LedUpdateBlink+0x90>)
 8007810:	f7fb ff42 	bl	8003698 <HAL_GPIO_TogglePin>
		led_blink_timeout--;
 8007814:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <LedUpdateBlink+0x84>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	b2da      	uxtb	r2, r3
 800781c:	4b12      	ldr	r3, [pc, #72]	@ (8007868 <LedUpdateBlink+0x84>)
 800781e:	701a      	strb	r2, [r3, #0]
		if (led_blink_timeout == 0)
 8007820:	4b11      	ldr	r3, [pc, #68]	@ (8007868 <LedUpdateBlink+0x84>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d11c      	bne.n	8007862 <LedUpdateBlink+0x7e>
		{
			if (error_state == SHORTCIRCUIT)
 8007828:	4b10      	ldr	r3, [pc, #64]	@ (800786c <LedUpdateBlink+0x88>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d106      	bne.n	800783e <LedUpdateBlink+0x5a>
				Led3(1);
 8007830:	2201      	movs	r2, #1
 8007832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007836:	480e      	ldr	r0, [pc, #56]	@ (8007870 <LedUpdateBlink+0x8c>)
 8007838:	f7fb ff16 	bl	8003668 <HAL_GPIO_WritePin>
 800783c:	e008      	b.n	8007850 <LedUpdateBlink+0x6c>
			else if (error_state == HV)
 800783e:	4b0b      	ldr	r3, [pc, #44]	@ (800786c <LedUpdateBlink+0x88>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d104      	bne.n	8007850 <LedUpdateBlink+0x6c>
				Led4(1);
 8007846:	2201      	movs	r2, #1
 8007848:	2104      	movs	r1, #4
 800784a:	480a      	ldr	r0, [pc, #40]	@ (8007874 <LedUpdateBlink+0x90>)
 800784c:	f7fb ff0c 	bl	8003668 <HAL_GPIO_WritePin>
			blink_enable = false;
 8007850:	4b09      	ldr	r3, [pc, #36]	@ (8007878 <LedUpdateBlink+0x94>)
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
			//Led3(0);
			//Led4(0);
			error_state = IDLE;
 8007856:	4b05      	ldr	r3, [pc, #20]	@ (800786c <LedUpdateBlink+0x88>)
 8007858:	2202      	movs	r2, #2
 800785a:	701a      	strb	r2, [r3, #0]
			one_time_excute = true;
 800785c:	4b07      	ldr	r3, [pc, #28]	@ (800787c <LedUpdateBlink+0x98>)
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007862:	bf00      	nop
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200005f7 	.word	0x200005f7
 800786c:	20000073 	.word	0x20000073
 8007870:	48000800 	.word	0x48000800
 8007874:	48000c00 	.word	0x48000c00
 8007878:	200005f8 	.word	0x200005f8
 800787c:	20000072 	.word	0x20000072

08007880 <ReadVoltageADC>:

void ReadVoltageADC(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8007886:	482f      	ldr	r0, [pc, #188]	@ (8007944 <ReadVoltageADC+0xc4>)
 8007888:	f7fa fd86 	bl	8002398 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 800788c:	f04f 31ff 	mov.w	r1, #4294967295
 8007890:	482c      	ldr	r0, [pc, #176]	@ (8007944 <ReadVoltageADC+0xc4>)
 8007892:	f7fa fe6d 	bl	8002570 <HAL_ADC_PollForConversion>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d14c      	bne.n	8007936 <ReadVoltageADC+0xb6>
	{
		uint32_t adc_value = HAL_ADC_GetValue(&hadc2);
 800789c:	4829      	ldr	r0, [pc, #164]	@ (8007944 <ReadVoltageADC+0xc4>)
 800789e:	f7fa ff35 	bl	800270c <HAL_ADC_GetValue>
 80078a2:	6078      	str	r0, [r7, #4]
		float voltage = (((float)adc_value - AdcOffset) * ADC_VOLTAGE_REFRENCE * AdcCalib) / ADC_STEP;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078ae:	4b26      	ldr	r3, [pc, #152]	@ (8007948 <ReadVoltageADC+0xc8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078be:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80078c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078c6:	4b21      	ldr	r3, [pc, #132]	@ (800794c <ReadVoltageADC+0xcc>)
 80078c8:	edd3 7a00 	vldr	s15, [r3]
 80078cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078d0:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007950 <ReadVoltageADC+0xd0>
 80078d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078d8:	edc7 7a00 	vstr	s15, [r7]
		//values[3].ival = voltage;
		values[3].ival = (int)(VolDivider*voltage);
 80078dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007954 <ReadVoltageADC+0xd4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078e8:	edd7 7a00 	vldr	s15, [r7]
 80078ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f4:	ee17 2a90 	vmov	r2, s15
 80078f8:	4b17      	ldr	r3, [pc, #92]	@ (8007958 <ReadVoltageADC+0xd8>)
 80078fa:	655a      	str	r2, [r3, #84]	@ 0x54
		values[4].fval = (float)((VolRatio*VolDivider*voltage)/1000.00);
 80078fc:	4b17      	ldr	r3, [pc, #92]	@ (800795c <ReadVoltageADC+0xdc>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a14      	ldr	r2, [pc, #80]	@ (8007954 <ReadVoltageADC+0xd4>)
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007910:	edd7 7a00 	vldr	s15, [r7]
 8007914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007918:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8007960 <ReadVoltageADC+0xe0>
 800791c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007920:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <ReadVoltageADC+0xd8>)
 8007922:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
		//values[4].fval = voltage;
		if(values[3].ival >= 820)
 8007926:	4b0c      	ldr	r3, [pc, #48]	@ (8007958 <ReadVoltageADC+0xd8>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	f5b3 7f4d 	cmp.w	r3, #820	@ 0x334
 800792e:	db02      	blt.n	8007936 <ReadVoltageADC+0xb6>
		{
			error_state = HV;
 8007930:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <ReadVoltageADC+0xe4>)
 8007932:	2201      	movs	r2, #1
 8007934:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_ADC_Stop(&hadc2);
 8007936:	4803      	ldr	r0, [pc, #12]	@ (8007944 <ReadVoltageADC+0xc4>)
 8007938:	f7fa fde4 	bl	8002504 <HAL_ADC_Stop>
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000410 	.word	0x20000410
 8007948:	20000604 	.word	0x20000604
 800794c:	20000608 	.word	0x20000608
 8007950:	457ff000 	.word	0x457ff000
 8007954:	2000060c 	.word	0x2000060c
 8007958:	20000630 	.word	0x20000630
 800795c:	20000610 	.word	0x20000610
 8007960:	447a0000 	.word	0x447a0000
 8007964:	20000073 	.word	0x20000073

08007968 <SetFrequency>:
/**
 * @brief This function change frequency of your PWM.
 * @param frequency Is period of the PWM.
 */
void SetFrequency(int frequency)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	 * Frequency_PWM = It is the input of function that user want to set
	 * Frequency_CLK = 72 MHz
	 * APRx = Auto-reload register
	 * PSCx = The value of prescaler */
	volatile static uint32_t PWM_APR;
	PWM_APR = (PWM_CLK/frequency) /*- 1*/ ;
 8007970:	4a08      	ldr	r2, [pc, #32]	@ (8007994 <SetFrequency+0x2c>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	fb92 f3f3 	sdiv	r3, r2, r3
 8007978:	461a      	mov	r2, r3
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <SetFrequency+0x30>)
 800797c:	601a      	str	r2, [r3, #0]
	TIM2->ARR = PWM_APR;
 800797e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007982:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <SetFrequency+0x30>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	000f4240 	.word	0x000f4240
 8007998:	2000079c 	.word	0x2000079c

0800799c <SetDutyCycle_us>:
 * @brief This function change Ton/Width of the PWM.
 * @param Ton Is width that set for PWM.
 * @param TonPre Is width that set for PrePWM.
 */
void SetDutyCycle_us(int Ton, int TonPre, int Delay)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
	//Channel 1 -> CCR1
	//Channel 2 -> CCR2
	//Channel 3 -> CCR3
	//Channel 4 -> CCR4
	TIM2->CCR4 = TonPre;
 80079a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->CCR1 = TonPre + Delay;
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	441a      	add	r2, r3
 80079b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079ba:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = TonPre + Delay+ Ton;
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	441a      	add	r2, r3
 80079c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <StartPWMs>:

void StartPWMs(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 80079dc:	4825      	ldr	r0, [pc, #148]	@ (8007a74 <StartPWMs+0x9c>)
 80079de:	f7fe f851 	bl	8005a84 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_DISABLE(&htim2);
 80079e2:	4b24      	ldr	r3, [pc, #144]	@ (8007a74 <StartPWMs+0x9c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <StartPWMs+0x3a>
 80079f2:	4b20      	ldr	r3, [pc, #128]	@ (8007a74 <StartPWMs+0x9c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6a1a      	ldr	r2, [r3, #32]
 80079f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d107      	bne.n	8007a12 <StartPWMs+0x3a>
 8007a02:	4b1c      	ldr	r3, [pc, #112]	@ (8007a74 <StartPWMs+0x9c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b1a      	ldr	r3, [pc, #104]	@ (8007a74 <StartPWMs+0x9c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8007a12:	4b18      	ldr	r3, [pc, #96]	@ (8007a74 <StartPWMs+0x9c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f06f 0201 	mvn.w	r2, #1
 8007a1a:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 8007a1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a20:	2200      	movs	r2, #0
 8007a22:	625a      	str	r2, [r3, #36]	@ 0x24
	SetFrequency(Frequency);
 8007a24:	4b14      	ldr	r3, [pc, #80]	@ (8007a78 <StartPWMs+0xa0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff ff9d 	bl	8007968 <SetFrequency>
	SetDutyCycle_us(TimeOn, TimeOnPre, PhaseDelay);
 8007a2e:	4b13      	ldr	r3, [pc, #76]	@ (8007a7c <StartPWMs+0xa4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a13      	ldr	r2, [pc, #76]	@ (8007a80 <StartPWMs+0xa8>)
 8007a34:	6811      	ldr	r1, [r2, #0]
 8007a36:	4a13      	ldr	r2, [pc, #76]	@ (8007a84 <StartPWMs+0xac>)
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff ffae 	bl	800799c <SetDutyCycle_us>
	TIM2->EGR = TIM_EGR_UG;
 8007a40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a44:	2201      	movs	r2, #1
 8007a46:	615a      	str	r2, [r3, #20]
	HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 8007a48:	2101      	movs	r1, #1
 8007a4a:	480a      	ldr	r0, [pc, #40]	@ (8007a74 <StartPWMs+0x9c>)
 8007a4c:	f7fe fd6e 	bl	800652c <HAL_TIM_GenerateEvent>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8007a50:	2100      	movs	r1, #0
 8007a52:	4808      	ldr	r0, [pc, #32]	@ (8007a74 <StartPWMs+0x9c>)
 8007a54:	f7fe f8a6 	bl	8005ba4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8007a58:	2104      	movs	r1, #4
 8007a5a:	4806      	ldr	r0, [pc, #24]	@ (8007a74 <StartPWMs+0x9c>)
 8007a5c:	f7fe f8a2 	bl	8005ba4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8007a60:	210c      	movs	r1, #12
 8007a62:	4804      	ldr	r0, [pc, #16]	@ (8007a74 <StartPWMs+0x9c>)
 8007a64:	f7fe f89e 	bl	8005ba4 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 8007a68:	4802      	ldr	r0, [pc, #8]	@ (8007a74 <StartPWMs+0x9c>)
 8007a6a:	f7fd ffaf 	bl	80059cc <HAL_TIM_Base_Start_IT>
}
 8007a6e:	bf00      	nop
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000500 	.word	0x20000500
 8007a78:	200005fc 	.word	0x200005fc
 8007a7c:	20000600 	.word	0x20000600
 8007a80:	20000614 	.word	0x20000614
 8007a84:	20000618 	.word	0x20000618

08007a88 <StopPWMs>:

void StopPWMs(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4806      	ldr	r0, [pc, #24]	@ (8007aa8 <StopPWMs+0x20>)
 8007a90:	f7fe f974 	bl	8005d7c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8007a94:	2104      	movs	r1, #4
 8007a96:	4804      	ldr	r0, [pc, #16]	@ (8007aa8 <StopPWMs+0x20>)
 8007a98:	f7fe f970 	bl	8005d7c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8007a9c:	210c      	movs	r1, #12
 8007a9e:	4802      	ldr	r0, [pc, #8]	@ (8007aa8 <StopPWMs+0x20>)
 8007aa0:	f7fe f96c 	bl	8005d7c <HAL_TIM_PWM_Stop>
}
 8007aa4:	bf00      	nop
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000500 	.word	0x20000500

08007aac <HLine>:

/**
 * @brief It draws lines in lcd.
 */
void HLine(char x, char y, uint8_t KindofLine, char mem8)
{
 8007aac:	b590      	push	{r4, r7, lr}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4623      	mov	r3, r4
 8007abc:	71fb      	strb	r3, [r7, #7]
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71bb      	strb	r3, [r7, #6]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	717b      	strb	r3, [r7, #5]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	713b      	strb	r3, [r7, #4]
	LcdCreateChar(mem8, Line[KindofLine]);
 8007aca:	797b      	ldrb	r3, [r7, #5]
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	4a0a      	ldr	r2, [pc, #40]	@ (8007af8 <HLine+0x4c>)
 8007ad0:	441a      	add	r2, r3
 8007ad2:	793b      	ldrb	r3, [r7, #4]
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fdba 	bl	8007650 <LcdCreateChar>
	LcdCursorSet(x, y);
 8007adc:	79ba      	ldrb	r2, [r7, #6]
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fe40 	bl	8007768 <LcdCursorSet>
	LcdData(mem8);
 8007ae8:	793b      	ldrb	r3, [r7, #4]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fe24 	bl	8007738 <LcdData>
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd90      	pop	{r4, r7, pc}
 8007af8:	0800da7c 	.word	0x0800da7c

08007afc <ContactUs>:
 * @brief It runs when the user select contact us menu
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char ContactUs(char input)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
	static uint8_t enterFunction = 1;
	if (enterFunction == 1)
 8007b06:	4b22      	ldr	r3, [pc, #136]	@ (8007b90 <ContactUs+0x94>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d115      	bne.n	8007b3a <ContactUs+0x3e>
	{
		LcdClear();
 8007b0e:	f7ff fd1f 	bl	8007550 <LcdClear>
		LcdPuts(1, LCD_LINE1, "Tel:021-66735875");
 8007b12:	4a20      	ldr	r2, [pc, #128]	@ (8007b94 <ContactUs+0x98>)
 8007b14:	2100      	movs	r1, #0
 8007b16:	2001      	movs	r0, #1
 8007b18:	f7ff fd3e 	bl	8007598 <LcdPuts>
		LcdPuts(1, LCD_LINE2, "Tel:09191143937");
 8007b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b98 <ContactUs+0x9c>)
 8007b1e:	2101      	movs	r1, #1
 8007b20:	2001      	movs	r0, #1
 8007b22:	f7ff fd39 	bl	8007598 <LcdPuts>
		LcdPuts(1, LCD_LINE3, "website:");
 8007b26:	4a1d      	ldr	r2, [pc, #116]	@ (8007b9c <ContactUs+0xa0>)
 8007b28:	2102      	movs	r1, #2
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f7ff fd34 	bl	8007598 <LcdPuts>
		LcdPuts(2, LCD_LINE4, "Nekoorad.com");
 8007b30:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba0 <ContactUs+0xa4>)
 8007b32:	2103      	movs	r1, #3
 8007b34:	2002      	movs	r0, #2
 8007b36:	f7ff fd2f 	bl	8007598 <LcdPuts>
	}
	enterFunction = 0;
 8007b3a:	4b15      	ldr	r3, [pc, #84]	@ (8007b90 <ContactUs+0x94>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
	if (input == KEY_STANDBY)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d10d      	bne.n	8007b62 <ContactUs+0x66>
	{
		//enterFunction = 1;
		//return ST_STANDBY;

		count1 = 19;
 8007b46:	4b17      	ldr	r3, [pc, #92]	@ (8007ba4 <ContactUs+0xa8>)
 8007b48:	2213      	movs	r2, #19
 8007b4a:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8007b4c:	4b16      	ldr	r3, [pc, #88]	@ (8007ba8 <ContactUs+0xac>)
 8007b4e:	221f      	movs	r2, #31
 8007b50:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 8007b52:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <ContactUs+0xb0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8007b58:	4b15      	ldr	r3, [pc, #84]	@ (8007bb0 <ContactUs+0xb4>)
 8007b5a:	2250      	movs	r2, #80	@ 0x50
 8007b5c:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8007b5e:	2314      	movs	r3, #20
 8007b60:	e011      	b.n	8007b86 <ContactUs+0x8a>
	}
	else if (input == KEY_ACCEPT || input == KEY_BACK)
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d002      	beq.n	8007b6e <ContactUs+0x72>
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d10a      	bne.n	8007b84 <ContactUs+0x88>
	{
		refreshLcd = true; // atention to DisplyRunMenu	function
 8007b6e:	4b11      	ldr	r3, [pc, #68]	@ (8007bb4 <ContactUs+0xb8>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	701a      	strb	r2, [r3, #0]
		variable = ST_CHANGE_MENU;
 8007b74:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <ContactUs+0xb4>)
 8007b76:	2250      	movs	r2, #80	@ 0x50
 8007b78:	701a      	strb	r2, [r3, #0]
		enterFunction = 1;
 8007b7a:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <ContactUs+0x94>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 8007b80:	231e      	movs	r3, #30
 8007b82:	e000      	b.n	8007b86 <ContactUs+0x8a>
	}

	return ST_CONTACT_US;
 8007b84:	2364      	movs	r3, #100	@ 0x64
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200001cd 	.word	0x200001cd
 8007b94:	0800d9b0 	.word	0x0800d9b0
 8007b98:	0800d9c4 	.word	0x0800d9c4
 8007b9c:	0800d9d4 	.word	0x0800d9d4
 8007ba0:	0800d9e0 	.word	0x0800d9e0
 8007ba4:	200005f6 	.word	0x200005f6
 8007ba8:	200001cc 	.word	0x200001cc
 8007bac:	200005da 	.word	0x200005da
 8007bb0:	200005d9 	.word	0x200005d9
 8007bb4:	200005f0 	.word	0x200005f0

08007bb8 <WeldDisplay>:

/**
 * @brief It shows weld animation.
 */
void WeldDisplay(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
	uint8_t ArcNumber = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	71fb      	strb	r3, [r7, #7]
	while (ArcNumber < 5)
 8007bc2:	e019      	b.n	8007bf8 <WeldDisplay+0x40>
	{
		if (flcd100ms)
 8007bc4:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <WeldDisplay+0x50>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d014      	beq.n	8007bf8 <WeldDisplay+0x40>
		{
			LcdCreateChar(LCD_Mem7, arcSymbol[ArcNumber]);
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8007c0c <WeldDisplay+0x54>)
 8007bd4:	4413      	add	r3, r2
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	2007      	movs	r0, #7
 8007bda:	f7ff fd39 	bl	8007650 <LcdCreateChar>
			LcdCursorSet(10, LCD_LINE1);
 8007bde:	2100      	movs	r1, #0
 8007be0:	200a      	movs	r0, #10
 8007be2:	f7ff fdc1 	bl	8007768 <LcdCursorSet>
			LcdData(LCD_Mem7);
 8007be6:	2007      	movs	r0, #7
 8007be8:	f7ff fda6 	bl	8007738 <LcdData>
			ArcNumber++;
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	71fb      	strb	r3, [r7, #7]
			flcd100ms = false;
 8007bf2:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <WeldDisplay+0x50>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
	while (ArcNumber < 5)
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d9e2      	bls.n	8007bc4 <WeldDisplay+0xc>
		}

	}
}
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	2000059e 	.word	0x2000059e
 8007c0c:	0800da54 	.word	0x0800da54

08007c10 <DisplayRunMenu>:
/**
 * @brief This function displays LCD texts.
 * @note This function displays LCD texts each 500 mS or if when a change in data occurs.
 */
void DisplayRunMenu(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
	char lcdBuffer[12];
	if ( flcd500ms == true )
 8007c16:	4b65      	ldr	r3, [pc, #404]	@ (8007dac <DisplayRunMenu+0x19c>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d058      	beq.n	8007cd2 <DisplayRunMenu+0xc2>
	{

		for (uint8_t n = 0; n < 4; n++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	e04f      	b.n	8007cc6 <DisplayRunMenu+0xb6>
		{
			// refresh
			LcdPuts(1, n, statetext[n]);
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	4a61      	ldr	r2, [pc, #388]	@ (8007db0 <DisplayRunMenu+0x1a0>)
 8007c2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	4619      	mov	r1, r3
 8007c32:	2001      	movs	r0, #1
 8007c34:	f7ff fcb0 	bl	8007598 <LcdPuts>

			// Display values
			switch (elementType[n])
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8007db4 <DisplayRunMenu+0x1a4>)
 8007c3c:	5cd3      	ldrb	r3, [r2, r3]
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d02c      	beq.n	8007c9c <DisplayRunMenu+0x8c>
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	dc3c      	bgt.n	8007cc0 <DisplayRunMenu+0xb0>
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d002      	beq.n	8007c50 <DisplayRunMenu+0x40>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d015      	beq.n	8007c7a <DisplayRunMenu+0x6a>
 8007c4e:	e037      	b.n	8007cc0 <DisplayRunMenu+0xb0>
			{
			case ET_FLT:	sprintf(lcdBuffer, "%0.2f", pValues[n]->fval);
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4a59      	ldr	r2, [pc, #356]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7f8 fc84 	bl	8000568 <__aeabi_f2d>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4638      	mov	r0, r7
 8007c66:	4955      	ldr	r1, [pc, #340]	@ (8007dbc <DisplayRunMenu+0x1ac>)
 8007c68:	f002 fac6 	bl	800a1f8 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	4619      	mov	r1, r3
 8007c72:	200f      	movs	r0, #15
 8007c74:	f7ff fc90 	bl	8007598 <LcdPuts>
				            break;
 8007c78:	e022      	b.n	8007cc0 <DisplayRunMenu+0xb0>

			case ET_INT:	sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	463b      	mov	r3, r7
 8007c86:	494e      	ldr	r1, [pc, #312]	@ (8007dc0 <DisplayRunMenu+0x1b0>)
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 fab5 	bl	800a1f8 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8007c8e:	463a      	mov	r2, r7
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	4619      	mov	r1, r3
 8007c94:	200f      	movs	r0, #15
 8007c96:	f7ff fc7f 	bl	8007598 <LcdPuts>
				            break;
 8007c9a:	e011      	b.n	8007cc0 <DisplayRunMenu+0xb0>

			case ET_FSTR:	LcdPuts(LCD_X, n, pValues[n]->pText[pValues[n]->strNum]);
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	4a46      	ldr	r2, [pc, #280]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	4944      	ldr	r1, [pc, #272]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007ca8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cac:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8007cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	200f      	movs	r0, #15
 8007cba:	f7ff fc6d 	bl	8007598 <LcdPuts>
				            break;
 8007cbe:	bf00      	nop
		for (uint8_t n = 0; n < 4; n++)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	73fb      	strb	r3, [r7, #15]
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d9ac      	bls.n	8007c26 <DisplayRunMenu+0x16>
			}
		}
		flcd500ms = false;
 8007ccc:	4b37      	ldr	r3, [pc, #220]	@ (8007dac <DisplayRunMenu+0x19c>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
	}
	// Plain menu text
	if (refreshLcd == true)
 8007cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8007dc4 <DisplayRunMenu+0x1b4>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d163      	bne.n	8007da2 <DisplayRunMenu+0x192>
	{
		//LcdEnHigh;
		LcdClear();
 8007cda:	f7ff fc39 	bl	8007550 <LcdClear>
		LcdCursorSet(0, cursorLine);
 8007cde:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc8 <DisplayRunMenu+0x1b8>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f7ff fd3f 	bl	8007768 <LcdCursorSet>
		LcdData(0x7E); //  "->" character
 8007cea:	207e      	movs	r0, #126	@ 0x7e
 8007cec:	f7ff fd24 	bl	8007738 <LcdData>

		for (uint8_t n = 0; n < 4; n++)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]
 8007cf4:	e04f      	b.n	8007d96 <DisplayRunMenu+0x186>
		{
			// refresh 
			LcdPuts(1, n, statetext[n]);
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8007db0 <DisplayRunMenu+0x1a0>)
 8007cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	4619      	mov	r1, r3
 8007d02:	2001      	movs	r0, #1
 8007d04:	f7ff fc48 	bl	8007598 <LcdPuts>

			/* Display values */
			switch (elementType[n])
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007db4 <DisplayRunMenu+0x1a4>)
 8007d0c:	5cd3      	ldrb	r3, [r2, r3]
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d02c      	beq.n	8007d6c <DisplayRunMenu+0x15c>
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	dc3c      	bgt.n	8007d90 <DisplayRunMenu+0x180>
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d002      	beq.n	8007d20 <DisplayRunMenu+0x110>
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d015      	beq.n	8007d4a <DisplayRunMenu+0x13a>
 8007d1e:	e037      	b.n	8007d90 <DisplayRunMenu+0x180>
			{
			case ET_FLT:	sprintf(lcdBuffer, "%0.2f", pValues[n]->fval);
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	4a25      	ldr	r2, [pc, #148]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fc1c 	bl	8000568 <__aeabi_f2d>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4638      	mov	r0, r7
 8007d36:	4921      	ldr	r1, [pc, #132]	@ (8007dbc <DisplayRunMenu+0x1ac>)
 8007d38:	f002 fa5e 	bl	800a1f8 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	4619      	mov	r1, r3
 8007d42:	200f      	movs	r0, #15
 8007d44:	f7ff fc28 	bl	8007598 <LcdPuts>
				            break;
 8007d48:	e022      	b.n	8007d90 <DisplayRunMenu+0x180>

			case ET_INT:	sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	463b      	mov	r3, r7
 8007d56:	491a      	ldr	r1, [pc, #104]	@ (8007dc0 <DisplayRunMenu+0x1b0>)
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 fa4d 	bl	800a1f8 <siprintf>
			                LcdPuts(LCD_X, n, lcdBuffer);
 8007d5e:	463a      	mov	r2, r7
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	4619      	mov	r1, r3
 8007d64:	200f      	movs	r0, #15
 8007d66:	f7ff fc17 	bl	8007598 <LcdPuts>
				            break;
 8007d6a:	e011      	b.n	8007d90 <DisplayRunMenu+0x180>

			case ET_FSTR:	LcdPuts(LCD_X, n, pValues[n]->pText[pValues[n]->strNum]);
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	4a12      	ldr	r2, [pc, #72]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d74:	7bba      	ldrb	r2, [r7, #14]
 8007d76:	4910      	ldr	r1, [pc, #64]	@ (8007db8 <DisplayRunMenu+0x1a8>)
 8007d78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d7c:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8007d80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	4619      	mov	r1, r3
 8007d88:	200f      	movs	r0, #15
 8007d8a:	f7ff fc05 	bl	8007598 <LcdPuts>
				            break;
 8007d8e:	bf00      	nop
		for (uint8_t n = 0; n < 4; n++)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	3301      	adds	r3, #1
 8007d94:	73bb      	strb	r3, [r7, #14]
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d9ac      	bls.n	8007cf6 <DisplayRunMenu+0xe6>
				/*case ET_ULNG:	sprintf(lcdBuffer, "%lu", pValues[n]->ulval);
				                LCD_Puts(LCD_X,n, lcdBuffer);
								break;*/
			}
		}
		refreshLcd = false;
 8007d9c:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <DisplayRunMenu+0x1b4>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
	}
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200005a0 	.word	0x200005a0
 8007db0:	200005dc 	.word	0x200005dc
 8007db4:	200005ec 	.word	0x200005ec
 8007db8:	20000620 	.word	0x20000620
 8007dbc:	0800d9f0 	.word	0x0800d9f0
 8007dc0:	0800d9f8 	.word	0x0800d9f8
 8007dc4:	200005f0 	.word	0x200005f0
 8007dc8:	200005da 	.word	0x200005da

08007dcc <VariableMachine>:
 * @brief This function shifts between the different variables.
 * @param stimuli is Button input.
 * @return nextState is next state according to the current state and button input.
 */
unsigned char VariableMachine(unsigned char stimuli)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	71fb      	strb	r3, [r7, #7]
	unsigned char nextVariable = variable; // Default stay in same state
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e4c <VariableMachine+0x80>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	73fb      	strb	r3, [r7, #15]
	unsigned char i, j;
	uint8_t cursorBuffer;

	for (i = 0; (j = StateNextVariable[i].variable); i++)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73bb      	strb	r3, [r7, #14]
 8007de0:	e022      	b.n	8007e28 <VariableMachine+0x5c>
	{
		if (j == variable &&
 8007de2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <VariableMachine+0x80>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	7b7a      	ldrb	r2, [r7, #13]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d11a      	bne.n	8007e22 <VariableMachine+0x56>
				StateNextVariable[i].input == stimuli)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	4a18      	ldr	r2, [pc, #96]	@ (8007e50 <VariableMachine+0x84>)
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	785b      	ldrb	r3, [r3, #1]
		if (j == variable &&
 8007df6:	79fa      	ldrb	r2, [r7, #7]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d112      	bne.n	8007e22 <VariableMachine+0x56>

		{
			nextVariable = StateNextVariable[i].nextVariable;
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	4a14      	ldr	r2, [pc, #80]	@ (8007e50 <VariableMachine+0x84>)
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	789b      	ldrb	r3, [r3, #2]
 8007e06:	73fb      	strb	r3, [r7, #15]
			cursorBuffer = StateNextVariable[i].cursorLine;
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	4a11      	ldr	r2, [pc, #68]	@ (8007e50 <VariableMachine+0x84>)
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	78db      	ldrb	r3, [r3, #3]
 8007e12:	733b      	strb	r3, [r7, #12]

			if (cursorBuffer != LCD_LINE_RECENT)
 8007e14:	7b3b      	ldrb	r3, [r7, #12]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d00f      	beq.n	8007e3a <VariableMachine+0x6e>
				cursorLine = cursorBuffer;
 8007e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007e54 <VariableMachine+0x88>)
 8007e1c:	7b3b      	ldrb	r3, [r7, #12]
 8007e1e:	7013      	strb	r3, [r2, #0]

			break;
 8007e20:	e00b      	b.n	8007e3a <VariableMachine+0x6e>
	for (i = 0; (j = StateNextVariable[i].variable); i++)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	73bb      	strb	r3, [r7, #14]
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	4a09      	ldr	r2, [pc, #36]	@ (8007e50 <VariableMachine+0x84>)
 8007e2c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8007e30:	737b      	strb	r3, [r7, #13]
 8007e32:	7b7b      	ldrb	r3, [r7, #13]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1d4      	bne.n	8007de2 <VariableMachine+0x16>
 8007e38:	e000      	b.n	8007e3c <VariableMachine+0x70>
			break;
 8007e3a:	bf00      	nop
		}
	}
	return nextVariable;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	200005d9 	.word	0x200005d9
 8007e50:	20000074 	.word	0x20000074
 8007e54:	200005da 	.word	0x200005da

08007e58 <StandBy>:
 * @brief This function run when is in standby mode.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char StandBy(char input)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
	Led1(0);
 8007e62:	2200      	movs	r2, #0
 8007e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007e68:	4881      	ldr	r0, [pc, #516]	@ (8008070 <StandBy+0x218>)
 8007e6a:	f7fb fbfd 	bl	8003668 <HAL_GPIO_WritePin>
	Led3(0);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007e74:	487e      	ldr	r0, [pc, #504]	@ (8008070 <StandBy+0x218>)
 8007e76:	f7fb fbf7 	bl	8003668 <HAL_GPIO_WritePin>
	Led4(0);
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2104      	movs	r1, #4
 8007e7e:	487d      	ldr	r0, [pc, #500]	@ (8008074 <StandBy+0x21c>)
 8007e80:	f7fb fbf2 	bl	8003668 <HAL_GPIO_WritePin>
	led_blink_timeout=0;
 8007e84:	4b7c      	ldr	r3, [pc, #496]	@ (8008078 <StandBy+0x220>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
	buzzer[BUZZ_NUM] = 0;
 8007e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800807c <StandBy+0x224>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
	buzzer[BUZZ_DELAY] = 0;
 8007e90:	4b7a      	ldr	r3, [pc, #488]	@ (800807c <StandBy+0x224>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	705a      	strb	r2, [r3, #1]
	blink_enable = false;
 8007e96:	4b7a      	ldr	r3, [pc, #488]	@ (8008080 <StandBy+0x228>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0;
 8007e9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	625a      	str	r2, [r3, #36]	@ 0x24
	SetFrequency(Frequency);
 8007ea4:	4b77      	ldr	r3, [pc, #476]	@ (8008084 <StandBy+0x22c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff fd5d 	bl	8007968 <SetFrequency>
	SetDutyCycle_us(TimeOn, TimeOnPre, PhaseDelay);
 8007eae:	4b76      	ldr	r3, [pc, #472]	@ (8008088 <StandBy+0x230>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a76      	ldr	r2, [pc, #472]	@ (800808c <StandBy+0x234>)
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	4a76      	ldr	r2, [pc, #472]	@ (8008090 <StandBy+0x238>)
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fd6e 	bl	800799c <SetDutyCycle_us>
	//HAL_TIM_Base_Stop_IT(&htim2);
	StopPWMs();
 8007ec0:	f7ff fde2 	bl	8007a88 <StopPWMs>
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007eca:	4869      	ldr	r0, [pc, #420]	@ (8008070 <StandBy+0x218>)
 8007ecc:	f7fb fbcc 	bl	8003668 <HAL_GPIO_WritePin>
	mode_state = STANDBY;
 8007ed0:	4b70      	ldr	r3, [pc, #448]	@ (8008094 <StandBy+0x23c>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
	error_state = IDLE;
 8007ed6:	4b70      	ldr	r3, [pc, #448]	@ (8008098 <StandBy+0x240>)
 8007ed8:	2202      	movs	r2, #2
 8007eda:	701a      	strb	r2, [r3, #0]
	static char x1_dot = 0/*,count1=0*/;
	static uint8_t showARMWELD = 1; // ARMWELD animation in standBy.
	static uint8_t	enterFunction = 1;

	if (enterFunction == 1)
 8007edc:	4b6f      	ldr	r3, [pc, #444]	@ (800809c <StandBy+0x244>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d108      	bne.n	8007ef6 <StandBy+0x9e>
	{
		buzzer[BUZZ_NUM] = 1;
 8007ee4:	4b65      	ldr	r3, [pc, #404]	@ (800807c <StandBy+0x224>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_DELAY] = 255;
 8007eea:	4b64      	ldr	r3, [pc, #400]	@ (800807c <StandBy+0x224>)
 8007eec:	22ff      	movs	r2, #255	@ 0xff
 8007eee:	705a      	strb	r2, [r3, #1]
		enterFunction = 0;
 8007ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800809c <StandBy+0x244>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
	}


	if (reWarning == 0 || warningVar == 0)	//need for show after some second warning occured or not any warnings.
 8007ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80080a0 <StandBy+0x248>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <StandBy+0xb0>
 8007efe:	4b69      	ldr	r3, [pc, #420]	@ (80080a4 <StandBy+0x24c>)
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 80a4 	bne.w	8008050 <StandBy+0x1f8>
	{
		if (f2lcd100ms)
 8007f08:	4b67      	ldr	r3, [pc, #412]	@ (80080a8 <StandBy+0x250>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d075      	beq.n	8007ffe <StandBy+0x1a6>
		{

			// display animation of medinalTeb first time when turn on after that show "STANDBY"
			if (x1_dot >= 6 && count1 < 19)
 8007f12:	4b66      	ldr	r3, [pc, #408]	@ (80080ac <StandBy+0x254>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d958      	bls.n	8007fcc <StandBy+0x174>
 8007f1a:	4b65      	ldr	r3, [pc, #404]	@ (80080b0 <StandBy+0x258>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b12      	cmp	r3, #18
 8007f20:	d854      	bhi.n	8007fcc <StandBy+0x174>
			{
				count1++;
 8007f22:	4b63      	ldr	r3, [pc, #396]	@ (80080b0 <StandBy+0x258>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	3301      	adds	r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	4b61      	ldr	r3, [pc, #388]	@ (80080b0 <StandBy+0x258>)
 8007f2c:	701a      	strb	r2, [r3, #0]
				if (count1 <= 5)
 8007f2e:	4b60      	ldr	r3, [pc, #384]	@ (80080b0 <StandBy+0x258>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d813      	bhi.n	8007f5e <StandBy+0x106>
				{
					HLine(9 + count1, LCD_LINE3, LCD_UpLine, LCD_Mem0);
 8007f36:	4b5e      	ldr	r3, [pc, #376]	@ (80080b0 <StandBy+0x258>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	3309      	adds	r3, #9
 8007f3c:	b2d8      	uxtb	r0, r3
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2202      	movs	r2, #2
 8007f42:	2102      	movs	r1, #2
 8007f44:	f7ff fdb2 	bl	8007aac <HLine>
					HLine(10 - count1, LCD_LINE3, LCD_UpLine, LCD_Mem0);
 8007f48:	4b59      	ldr	r3, [pc, #356]	@ (80080b0 <StandBy+0x258>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f1c3 030a 	rsb	r3, r3, #10
 8007f50:	b2d8      	uxtb	r0, r3
 8007f52:	2300      	movs	r3, #0
 8007f54:	2202      	movs	r2, #2
 8007f56:	2102      	movs	r1, #2
 8007f58:	f7ff fda8 	bl	8007aac <HLine>
				if (count1 <= 5)
 8007f5c:	e04b      	b.n	8007ff6 <StandBy+0x19e>
				}
				else if (count1 == 6)
 8007f5e:	4b54      	ldr	r3, [pc, #336]	@ (80080b0 <StandBy+0x258>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b06      	cmp	r3, #6
 8007f64:	d113      	bne.n	8007f8e <StandBy+0x136>
				{
					HLine(9 + count1, LCD_LINE2, LCD_RightLine, LCD_Mem1);
 8007f66:	4b52      	ldr	r3, [pc, #328]	@ (80080b0 <StandBy+0x258>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	3309      	adds	r3, #9
 8007f6c:	b2d8      	uxtb	r0, r3
 8007f6e:	2301      	movs	r3, #1
 8007f70:	2201      	movs	r2, #1
 8007f72:	2101      	movs	r1, #1
 8007f74:	f7ff fd9a 	bl	8007aac <HLine>
					HLine(10 - count1, LCD_LINE2, LCD_LeftLine, LCD_Mem2);
 8007f78:	4b4d      	ldr	r3, [pc, #308]	@ (80080b0 <StandBy+0x258>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	f1c3 030a 	rsb	r3, r3, #10
 8007f80:	b2d8      	uxtb	r0, r3
 8007f82:	2302      	movs	r3, #2
 8007f84:	2203      	movs	r2, #3
 8007f86:	2101      	movs	r1, #1
 8007f88:	f7ff fd90 	bl	8007aac <HLine>
				if (count1 <= 5)
 8007f8c:	e033      	b.n	8007ff6 <StandBy+0x19e>
				}
				else if (count1 <= 11)
 8007f8e:	4b48      	ldr	r3, [pc, #288]	@ (80080b0 <StandBy+0x258>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b0b      	cmp	r3, #11
 8007f94:	d813      	bhi.n	8007fbe <StandBy+0x166>
				{
					HLine(21 - count1, LCD_LINE1, LCD_DownLine, LCD_Mem3);
 8007f96:	4b46      	ldr	r3, [pc, #280]	@ (80080b0 <StandBy+0x258>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	f1c3 0315 	rsb	r3, r3, #21
 8007f9e:	b2d8      	uxtb	r0, r3
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f7ff fd81 	bl	8007aac <HLine>
					HLine(count1 - 2, LCD_LINE1, LCD_DownLine, LCD_Mem3);
 8007faa:	4b41      	ldr	r3, [pc, #260]	@ (80080b0 <StandBy+0x258>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	3b02      	subs	r3, #2
 8007fb0:	b2d8      	uxtb	r0, r3
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	f7ff fd78 	bl	8007aac <HLine>
				if (count1 <= 5)
 8007fbc:	e01b      	b.n	8007ff6 <StandBy+0x19e>
				}
				else if (count1 <= 12)
 8007fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80080b0 <StandBy+0x258>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d817      	bhi.n	8007ff6 <StandBy+0x19e>
					WeldDisplay();
 8007fc6:	f7ff fdf7 	bl	8007bb8 <WeldDisplay>
				if (count1 <= 5)
 8007fca:	e014      	b.n	8007ff6 <StandBy+0x19e>

			}
			else if (count1 == 19)
 8007fcc:	4b38      	ldr	r3, [pc, #224]	@ (80080b0 <StandBy+0x258>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b13      	cmp	r3, #19
 8007fd2:	d111      	bne.n	8007ff8 <StandBy+0x1a0>
			{
				LcdClear();
 8007fd4:	f7ff fabc 	bl	8007550 <LcdClear>
				LcdPuts(7, LCD_LINE2, "STANDBY");
 8007fd8:	4a36      	ldr	r2, [pc, #216]	@ (80080b4 <StandBy+0x25c>)
 8007fda:	2101      	movs	r1, #1
 8007fdc:	2007      	movs	r0, #7
 8007fde:	f7ff fadb 	bl	8007598 <LcdPuts>
				showARMWELD = false;
 8007fe2:	4b35      	ldr	r3, [pc, #212]	@ (80080b8 <StandBy+0x260>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
				//					WELD_FAN_OFF;   // turn off fan when ARMWELD animation finish.
				count1++; // it runs just first time this (if).
 8007fe8:	4b31      	ldr	r3, [pc, #196]	@ (80080b0 <StandBy+0x258>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	3301      	adds	r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80080b0 <StandBy+0x258>)
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e000      	b.n	8007ff8 <StandBy+0x1a0>
				if (count1 <= 5)
 8007ff6:	bf00      	nop
			}
			f2lcd100ms = false;
 8007ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80080a8 <StandBy+0x250>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
		}

		if (flcd500ms)
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80080bc <StandBy+0x264>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d023      	beq.n	8008050 <StandBy+0x1f8>
		{
			if (showARMWELD == true)
 8008008:	4b2b      	ldr	r3, [pc, #172]	@ (80080b8 <StandBy+0x260>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d11c      	bne.n	800804a <StandBy+0x1f2>
			{
				//					WELD_FAN_ON;   // turn on fan when the device  is turning on.
				if (x1_dot < 6)
 8008010:	4b26      	ldr	r3, [pc, #152]	@ (80080ac <StandBy+0x254>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b05      	cmp	r3, #5
 8008016:	d807      	bhi.n	8008028 <StandBy+0x1d0>
				{
					LcdClear();
 8008018:	f7ff fa9a 	bl	8007550 <LcdClear>
					x1_dot++;
 800801c:	4b23      	ldr	r3, [pc, #140]	@ (80080ac <StandBy+0x254>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	3301      	adds	r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	4b21      	ldr	r3, [pc, #132]	@ (80080ac <StandBy+0x254>)
 8008026:	701a      	strb	r2, [r3, #0]
				}
				LcdPuts(x1_dot, 1, "NEKOO");
 8008028:	4b20      	ldr	r3, [pc, #128]	@ (80080ac <StandBy+0x254>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4a24      	ldr	r2, [pc, #144]	@ (80080c0 <StandBy+0x268>)
 800802e:	2101      	movs	r1, #1
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fab1 	bl	8007598 <LcdPuts>
				LcdPuts((17 - x1_dot), 1, "RAD");
 8008036:	4b1d      	ldr	r3, [pc, #116]	@ (80080ac <StandBy+0x254>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f1c3 0311 	rsb	r3, r3, #17
 800803e:	b2db      	uxtb	r3, r3
 8008040:	4a20      	ldr	r2, [pc, #128]	@ (80080c4 <StandBy+0x26c>)
 8008042:	2101      	movs	r1, #1
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff faa7 	bl	8007598 <LcdPuts>
			}
			flcd500ms = false;
 800804a:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <StandBy+0x264>)
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
		}

	}
	if (input == KEY_STANDBY)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b08      	cmp	r3, #8
 8008054:	d107      	bne.n	8008066 <StandBy+0x20e>
	{
		//enterFunction = 1;
		showARMWELD = false; // because of don't show ARMWELD when come from RunMeno.
 8008056:	4b18      	ldr	r3, [pc, #96]	@ (80080b8 <StandBy+0x260>)
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
		mode_state = STOP;
 800805c:	4b0d      	ldr	r3, [pc, #52]	@ (8008094 <StandBy+0x23c>)
 800805e:	2202      	movs	r2, #2
 8008060:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 8008062:	231e      	movs	r3, #30
 8008064:	e000      	b.n	8008068 <StandBy+0x210>
	}

	return ST_STANDBY;
 8008066:	2314      	movs	r3, #20
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	48000800 	.word	0x48000800
 8008074:	48000c00 	.word	0x48000c00
 8008078:	200005f7 	.word	0x200005f7
 800807c:	200005b4 	.word	0x200005b4
 8008080:	200005f8 	.word	0x200005f8
 8008084:	200005fc 	.word	0x200005fc
 8008088:	20000600 	.word	0x20000600
 800808c:	20000614 	.word	0x20000614
 8008090:	20000618 	.word	0x20000618
 8008094:	2000061c 	.word	0x2000061c
 8008098:	20000073 	.word	0x20000073
 800809c:	200001ce 	.word	0x200001ce
 80080a0:	20000071 	.word	0x20000071
 80080a4:	200005f4 	.word	0x200005f4
 80080a8:	2000059f 	.word	0x2000059f
 80080ac:	200007a0 	.word	0x200007a0
 80080b0:	200005f6 	.word	0x200005f6
 80080b4:	0800da00 	.word	0x0800da00
 80080b8:	200001cf 	.word	0x200001cf
 80080bc:	200005a0 	.word	0x200005a0
 80080c0:	0800da08 	.word	0x0800da08
 80080c4:	0800da10 	.word	0x0800da10

080080c8 <MainMenu>:
 * @brief This function run when is in menue or submenu untill one of the values choose.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char MainMenu(char input)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	71fb      	strb	r3, [r7, #7]

	//if (HAL_GPIO_ReadPin(ShortCircuitDetect_GPIO_Port, ShortCircuitDetect_Pin) == GPIO_PIN_RESET)
	//{
		//error_state = SHORTCIRCUIT;
	//}
	if (error_state != IDLE && one_time_excute == true)
 80080d2:	4b89      	ldr	r3, [pc, #548]	@ (80082f8 <MainMenu+0x230>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d026      	beq.n	8008128 <MainMenu+0x60>
 80080da:	4b88      	ldr	r3, [pc, #544]	@ (80082fc <MainMenu+0x234>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d022      	beq.n	8008128 <MainMenu+0x60>
	{
		HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80080e2:	2200      	movs	r2, #0
 80080e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80080e8:	4885      	ldr	r0, [pc, #532]	@ (8008300 <MainMenu+0x238>)
 80080ea:	f7fb fabd 	bl	8003668 <HAL_GPIO_WritePin>
		//HAL_TIM_Base_Stop_IT(&htim2);
		StopPWMs();
 80080ee:	f7ff fccb 	bl	8007a88 <StopPWMs>
		Led1(0);
 80080f2:	2200      	movs	r2, #0
 80080f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80080f8:	4881      	ldr	r0, [pc, #516]	@ (8008300 <MainMenu+0x238>)
 80080fa:	f7fb fab5 	bl	8003668 <HAL_GPIO_WritePin>
		enterFunction = 1;
 80080fe:	4b81      	ldr	r3, [pc, #516]	@ (8008304 <MainMenu+0x23c>)
 8008100:	2201      	movs	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
		mode_state = STOP;
 8008104:	4b80      	ldr	r3, [pc, #512]	@ (8008308 <MainMenu+0x240>)
 8008106:	2202      	movs	r2, #2
 8008108:	701a      	strb	r2, [r3, #0]
		blink_enable = true;
 800810a:	4b80      	ldr	r3, [pc, #512]	@ (800830c <MainMenu+0x244>)
 800810c:	2201      	movs	r2, #1
 800810e:	701a      	strb	r2, [r3, #0]
		led_blink_timeout = 10 ;
 8008110:	4b7f      	ldr	r3, [pc, #508]	@ (8008310 <MainMenu+0x248>)
 8008112:	220a      	movs	r2, #10
 8008114:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_NUM] = 15;
 8008116:	4b7f      	ldr	r3, [pc, #508]	@ (8008314 <MainMenu+0x24c>)
 8008118:	220f      	movs	r2, #15
 800811a:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_DELAY] = 200;
 800811c:	4b7d      	ldr	r3, [pc, #500]	@ (8008314 <MainMenu+0x24c>)
 800811e:	22c8      	movs	r2, #200	@ 0xc8
 8008120:	705a      	strb	r2, [r3, #1]
		one_time_excute = false;
 8008122:	4b76      	ldr	r3, [pc, #472]	@ (80082fc <MainMenu+0x234>)
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
	}

	if (nextVariable != variable)
 8008128:	4b7b      	ldr	r3, [pc, #492]	@ (8008318 <MainMenu+0x250>)
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	4b7b      	ldr	r3, [pc, #492]	@ (800831c <MainMenu+0x254>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d067      	beq.n	8008204 <MainMenu+0x13c>
	{
		variable = nextVariable;
 8008134:	4b78      	ldr	r3, [pc, #480]	@ (8008318 <MainMenu+0x250>)
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	4b78      	ldr	r3, [pc, #480]	@ (800831c <MainMenu+0x254>)
 800813a:	701a      	strb	r2, [r3, #0]
		refreshLcd = true; // atention to DisplyRunMenu	function
 800813c:	4b78      	ldr	r3, [pc, #480]	@ (8008320 <MainMenu+0x258>)
 800813e:	2201      	movs	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
		for (uint8_t currentVariable = 0; (j = StateVariable[currentVariable].variable); currentVariable++)
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
 8008146:	e051      	b.n	80081ec <MainMenu+0x124>
		{
			/* macro to determine which variable must be displayed in first line in  */
            #define FIRST_LINE_VAR		currentVariable-cursorLine

			if (j == variable)
 8008148:	4b74      	ldr	r3, [pc, #464]	@ (800831c <MainMenu+0x254>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	7b7a      	ldrb	r2, [r7, #13]
 800814e:	429a      	cmp	r2, r3
 8008150:	d149      	bne.n	80081e6 <MainMenu+0x11e>
			{
				adjustState = StateVariable[currentVariable].adjustState;
 8008152:	7bfa      	ldrb	r2, [r7, #15]
 8008154:	4973      	ldr	r1, [pc, #460]	@ (8008324 <MainMenu+0x25c>)
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3308      	adds	r3, #8
 8008162:	781a      	ldrb	r2, [r3, #0]
 8008164:	4b70      	ldr	r3, [pc, #448]	@ (8008328 <MainMenu+0x260>)
 8008166:	701a      	strb	r2, [r3, #0]
				for (uint8_t n = 0; n < 4; n++)
 8008168:	2300      	movs	r3, #0
 800816a:	73bb      	strb	r3, [r7, #14]
 800816c:	e037      	b.n	80081de <MainMenu+0x116>
				{
					statetext[n]  = StateVariable[FIRST_LINE_VAR + n].pText;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	4a6e      	ldr	r2, [pc, #440]	@ (800832c <MainMenu+0x264>)
 8008172:	7812      	ldrb	r2, [r2, #0]
 8008174:	1a9a      	subs	r2, r3, r2
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	441a      	add	r2, r3
 800817a:	7bb9      	ldrb	r1, [r7, #14]
 800817c:	4869      	ldr	r0, [pc, #420]	@ (8008324 <MainMenu+0x25c>)
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4403      	add	r3, r0
 8008188:	3304      	adds	r3, #4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a68      	ldr	r2, [pc, #416]	@ (8008330 <MainMenu+0x268>)
 800818e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					elementType[n] = StateVariable[FIRST_LINE_VAR + n].elementType;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4a65      	ldr	r2, [pc, #404]	@ (800832c <MainMenu+0x264>)
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	1a9a      	subs	r2, r3, r2
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	441a      	add	r2, r3
 800819e:	7bb9      	ldrb	r1, [r7, #14]
 80081a0:	4860      	ldr	r0, [pc, #384]	@ (8008324 <MainMenu+0x25c>)
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4403      	add	r3, r0
 80081ac:	3310      	adds	r3, #16
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	4b60      	ldr	r3, [pc, #384]	@ (8008334 <MainMenu+0x26c>)
 80081b2:	545a      	strb	r2, [r3, r1]
					pValues[n] = (ValueStruct*)StateVariable[FIRST_LINE_VAR + n].pValueStruct;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4a5d      	ldr	r2, [pc, #372]	@ (800832c <MainMenu+0x264>)
 80081b8:	7812      	ldrb	r2, [r2, #0]
 80081ba:	1a9a      	subs	r2, r3, r2
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	441a      	add	r2, r3
 80081c0:	7bb9      	ldrb	r1, [r7, #14]
 80081c2:	4858      	ldr	r0, [pc, #352]	@ (8008324 <MainMenu+0x25c>)
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4403      	add	r3, r0
 80081ce:	330c      	adds	r3, #12
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a59      	ldr	r2, [pc, #356]	@ (8008338 <MainMenu+0x270>)
 80081d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				for (uint8_t n = 0; n < 4; n++)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	3301      	adds	r3, #1
 80081dc:	73bb      	strb	r3, [r7, #14]
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d9c4      	bls.n	800816e <MainMenu+0xa6>
				}
				break;
 80081e4:	e00e      	b.n	8008204 <MainMenu+0x13c>
		for (uint8_t currentVariable = 0; (j = StateVariable[currentVariable].variable); currentVariable++)
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	3301      	adds	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	7bfa      	ldrb	r2, [r7, #15]
 80081ee:	494d      	ldr	r1, [pc, #308]	@ (8008324 <MainMenu+0x25c>)
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	737b      	strb	r3, [r7, #13]
 80081fe:	7b7b      	ldrb	r3, [r7, #13]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1a1      	bne.n	8008148 <MainMenu+0x80>
			}
		}
	}
	if (reWarning == 0 || warningVar == 0)	//need for show after some second warning occurred or not any warnings.
 8008204:	4b4d      	ldr	r3, [pc, #308]	@ (800833c <MainMenu+0x274>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <MainMenu+0x14c>
 800820c:	4b4c      	ldr	r3, [pc, #304]	@ (8008340 <MainMenu+0x278>)
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <MainMenu+0x150>
		DisplayRunMenu();
 8008214:	f7ff fcfc 	bl	8007c10 <DisplayRunMenu>

	if (input == KEY_STANDBY && error_state == IDLE)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b08      	cmp	r3, #8
 800821c:	d111      	bne.n	8008242 <MainMenu+0x17a>
 800821e:	4b36      	ldr	r3, [pc, #216]	@ (80082f8 <MainMenu+0x230>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d10d      	bne.n	8008242 <MainMenu+0x17a>
	{
		count1 = 19;
 8008226:	4b47      	ldr	r3, [pc, #284]	@ (8008344 <MainMenu+0x27c>)
 8008228:	2213      	movs	r2, #19
 800822a:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 800822c:	4b3a      	ldr	r3, [pc, #232]	@ (8008318 <MainMenu+0x250>)
 800822e:	221f      	movs	r2, #31
 8008230:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 8008232:	4b3e      	ldr	r3, [pc, #248]	@ (800832c <MainMenu+0x264>)
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
		variable = VA_SECOND_VARIABLE;
 8008238:	4b38      	ldr	r3, [pc, #224]	@ (800831c <MainMenu+0x254>)
 800823a:	2220      	movs	r2, #32
 800823c:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 800823e:	2314      	movs	r3, #20
 8008240:	e056      	b.n	80082f0 <MainMenu+0x228>
	}
	else if (input == KEY_ACCEPT)
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d102      	bne.n	800824e <MainMenu+0x186>
	{
		return adjustState;
 8008248:	4b37      	ldr	r3, [pc, #220]	@ (8008328 <MainMenu+0x260>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	e050      	b.n	80082f0 <MainMenu+0x228>
	{
		//nextVariable = cursorLine+1;
		nextVariable = VA_FIRST_VARIABLE;
		return ST_MAIN_STATE;
	}*/
	else if (input == KEY_START && error_state == IDLE)
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d141      	bne.n	80082d8 <MainMenu+0x210>
 8008254:	4b28      	ldr	r3, [pc, #160]	@ (80082f8 <MainMenu+0x230>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d13d      	bne.n	80082d8 <MainMenu+0x210>
	{
		// Act like Start Buttom
		if (enterFunction == 1)  // If it is the first time the button is pushed and the variables of frequency and time-on(duty cycle) are set
 800825c:	4b29      	ldr	r3, [pc, #164]	@ (8008304 <MainMenu+0x23c>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d11f      	bne.n	80082a4 <MainMenu+0x1dc>
		{
			StartPWMs();
 8008264:	f7ff fbb8 	bl	80079d8 <StartPWMs>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8008268:	2201      	movs	r2, #1
 800826a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800826e:	4824      	ldr	r0, [pc, #144]	@ (8008300 <MainMenu+0x238>)
 8008270:	f7fb f9fa 	bl	8003668 <HAL_GPIO_WritePin>
			Led1(1);
 8008274:	2201      	movs	r2, #1
 8008276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800827a:	4821      	ldr	r0, [pc, #132]	@ (8008300 <MainMenu+0x238>)
 800827c:	f7fb f9f4 	bl	8003668 <HAL_GPIO_WritePin>
			enterFunction = 0;
 8008280:	4b20      	ldr	r3, [pc, #128]	@ (8008304 <MainMenu+0x23c>)
 8008282:	2200      	movs	r2, #0
 8008284:	701a      	strb	r2, [r3, #0]
			mode_state = RUN;
 8008286:	4b20      	ldr	r3, [pc, #128]	@ (8008308 <MainMenu+0x240>)
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
			Led3(0);
 800828c:	2200      	movs	r2, #0
 800828e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008292:	481b      	ldr	r0, [pc, #108]	@ (8008300 <MainMenu+0x238>)
 8008294:	f7fb f9e8 	bl	8003668 <HAL_GPIO_WritePin>
			Led4(0);
 8008298:	2200      	movs	r2, #0
 800829a:	2104      	movs	r1, #4
 800829c:	482a      	ldr	r0, [pc, #168]	@ (8008348 <MainMenu+0x280>)
 800829e:	f7fb f9e3 	bl	8003668 <HAL_GPIO_WritePin>
 80082a2:	e017      	b.n	80082d4 <MainMenu+0x20c>
		}
		/* Act like Stop Buttom */
		else if (enterFunction == 0)
 80082a4:	4b17      	ldr	r3, [pc, #92]	@ (8008304 <MainMenu+0x23c>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d113      	bne.n	80082d4 <MainMenu+0x20c>
		{
			StopPWMs();
 80082ac:	f7ff fbec 	bl	8007a88 <StopPWMs>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80082b0:	2200      	movs	r2, #0
 80082b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80082b6:	4812      	ldr	r0, [pc, #72]	@ (8008300 <MainMenu+0x238>)
 80082b8:	f7fb f9d6 	bl	8003668 <HAL_GPIO_WritePin>
			Led1(0);
 80082bc:	2200      	movs	r2, #0
 80082be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082c2:	480f      	ldr	r0, [pc, #60]	@ (8008300 <MainMenu+0x238>)
 80082c4:	f7fb f9d0 	bl	8003668 <HAL_GPIO_WritePin>
			enterFunction = 1;
 80082c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <MainMenu+0x23c>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	701a      	strb	r2, [r3, #0]
			mode_state = STOP;
 80082ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <MainMenu+0x240>)
 80082d0:	2202      	movs	r2, #2
 80082d2:	701a      	strb	r2, [r3, #0]
		}
		return ST_MAIN_STATE;
 80082d4:	231e      	movs	r3, #30
 80082d6:	e00b      	b.n	80082f0 <MainMenu+0x228>
	}
	else if (input != KEY_NULL)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <MainMenu+0x226>
	{
		// Plain menu, clock the state machine
		nextVariable = VariableMachine(input);
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fd73 	bl	8007dcc <VariableMachine>
 80082e6:	4603      	mov	r3, r0
 80082e8:	461a      	mov	r2, r3
 80082ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <MainMenu+0x250>)
 80082ec:	701a      	strb	r2, [r3, #0]
	}

	return ST_MAIN_STATE;
 80082ee:	231e      	movs	r3, #30
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000073 	.word	0x20000073
 80082fc:	20000072 	.word	0x20000072
 8008300:	48000800 	.word	0x48000800
 8008304:	200001d0 	.word	0x200001d0
 8008308:	2000061c 	.word	0x2000061c
 800830c:	200005f8 	.word	0x200005f8
 8008310:	200005f7 	.word	0x200005f7
 8008314:	200005b4 	.word	0x200005b4
 8008318:	200001cc 	.word	0x200001cc
 800831c:	200005d9 	.word	0x200005d9
 8008320:	200005f0 	.word	0x200005f0
 8008324:	200000c8 	.word	0x200000c8
 8008328:	200001d1 	.word	0x200001d1
 800832c:	200005da 	.word	0x200005da
 8008330:	200005dc 	.word	0x200005dc
 8008334:	200005ec 	.word	0x200005ec
 8008338:	20000620 	.word	0x20000620
 800833c:	20000071 	.word	0x20000071
 8008340:	200005f4 	.word	0x200005f4
 8008344:	200005f6 	.word	0x200005f6
 8008348:	48000c00 	.word	0x48000c00

0800834c <IntAdjust>:
 * @brief This function adjusts integer values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char IntAdjust(char input)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	71fb      	strb	r3, [r7, #7]
	//uint8_t j = 1;
	static char enterFunction = 1;

	char lcdBufferIA[15];

	if (enterFunction == 1)
 8008356:	4ba6      	ldr	r3, [pc, #664]	@ (80085f0 <IntAdjust+0x2a4>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10c      	bne.n	8008378 <IntAdjust+0x2c>
	{
		//pValues[cursorLine]->ival=values[cursorLine+1].ival;
		TIM1->CNT = (pValues[cursorLine]->ival)*ROTARY_SPC; //The amount of variable(that cursor point it)  return to CNT of timer or QDEC .
 800835e:	4ba5      	ldr	r3, [pc, #660]	@ (80085f4 <IntAdjust+0x2a8>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	4ba4      	ldr	r3, [pc, #656]	@ (80085f8 <IntAdjust+0x2ac>)
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	005a      	lsls	r2, r3, #1
 800836e:	4ba3      	ldr	r3, [pc, #652]	@ (80085fc <IntAdjust+0x2b0>)
 8008370:	625a      	str	r2, [r3, #36]	@ 0x24
		enterFunction = 0;
 8008372:	4b9f      	ldr	r3, [pc, #636]	@ (80085f0 <IntAdjust+0x2a4>)
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
	}
	LcdCreateChar(0, UpDownCharacter); // "<>" character
 8008378:	49a1      	ldr	r1, [pc, #644]	@ (8008600 <IntAdjust+0x2b4>)
 800837a:	2000      	movs	r0, #0
 800837c:	f7ff f968 	bl	8007650 <LcdCreateChar>
	LcdCursorSet(13, cursorLine);
 8008380:	4b9c      	ldr	r3, [pc, #624]	@ (80085f4 <IntAdjust+0x2a8>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	4619      	mov	r1, r3
 8008386:	200d      	movs	r0, #13
 8008388:	f7ff f9ee 	bl	8007768 <LcdCursorSet>
	LcdData(0); //  "<>" character
 800838c:	2000      	movs	r0, #0
 800838e:	f7ff f9d3 	bl	8007738 <LcdData>


	/* Check timer valueIA to be in range. */
	valueIA = (int16_t)TIM1->CNT / ROTARY_SPC; // int16_t to avoid of roll over timer valueIA from bottom to top.
 8008392:	4b9a      	ldr	r3, [pc, #616]	@ (80085fc <IntAdjust+0x2b0>)
 8008394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008396:	b21b      	sxth	r3, r3
 8008398:	0fda      	lsrs	r2, r3, #31
 800839a:	4413      	add	r3, r2
 800839c:	105b      	asrs	r3, r3, #1
 800839e:	83fb      	strh	r3, [r7, #30]

	if (valueIA > (int16_t)pValues[cursorLine]->upLimit)
 80083a0:	4b94      	ldr	r3, [pc, #592]	@ (80085f4 <IntAdjust+0x2a8>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b94      	ldr	r3, [pc, #592]	@ (80085f8 <IntAdjust+0x2ac>)
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80083b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b4:	ee17 3a90 	vmov	r3, s15
 80083b8:	b21b      	sxth	r3, r3
 80083ba:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80083be:	429a      	cmp	r2, r3
 80083c0:	dd10      	ble.n	80083e4 <IntAdjust+0x98>
		TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 80083c2:	4b8c      	ldr	r3, [pc, #560]	@ (80085f4 <IntAdjust+0x2a8>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	4b8b      	ldr	r3, [pc, #556]	@ (80085f8 <IntAdjust+0x2ac>)
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80083d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083d6:	ee17 3a90 	vmov	r3, s15
 80083da:	b21b      	sxth	r3, r3
 80083dc:	005a      	lsls	r2, r3, #1
 80083de:	4b87      	ldr	r3, [pc, #540]	@ (80085fc <IntAdjust+0x2b0>)
 80083e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80083e2:	e020      	b.n	8008426 <IntAdjust+0xda>

	else if (valueIA < (int16_t)pValues[cursorLine]->downLimit)
 80083e4:	4b83      	ldr	r3, [pc, #524]	@ (80085f4 <IntAdjust+0x2a8>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	4b83      	ldr	r3, [pc, #524]	@ (80085f8 <IntAdjust+0x2ac>)
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80083f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f8:	ee17 3a90 	vmov	r3, s15
 80083fc:	b21b      	sxth	r3, r3
 80083fe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008402:	429a      	cmp	r2, r3
 8008404:	da0f      	bge.n	8008426 <IntAdjust+0xda>
		TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 8008406:	4b7b      	ldr	r3, [pc, #492]	@ (80085f4 <IntAdjust+0x2a8>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	4b7a      	ldr	r3, [pc, #488]	@ (80085f8 <IntAdjust+0x2ac>)
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	edd3 7a05 	vldr	s15, [r3, #20]
 8008416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800841a:	ee17 3a90 	vmov	r3, s15
 800841e:	b21b      	sxth	r3, r3
 8008420:	005a      	lsls	r2, r3, #1
 8008422:	4b76      	ldr	r3, [pc, #472]	@ (80085fc <IntAdjust+0x2b0>)
 8008424:	625a      	str	r2, [r3, #36]	@ 0x24

	// Ensure TIM1->CNT is never negative
	if ((int16_t)TIM1->CNT < 0) {
 8008426:	4b75      	ldr	r3, [pc, #468]	@ (80085fc <IntAdjust+0x2b0>)
 8008428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842a:	b21b      	sxth	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	da02      	bge.n	8008436 <IntAdjust+0xea>
	    TIM1->CNT = 0;
 8008430:	4b72      	ldr	r3, [pc, #456]	@ (80085fc <IntAdjust+0x2b0>)
 8008432:	2200      	movs	r2, #0
 8008434:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	sprintf(lcdBufferIA, "%-3d", TIM1->CNT / ROTARY_SPC);
 8008436:	4b71      	ldr	r3, [pc, #452]	@ (80085fc <IntAdjust+0x2b0>)
 8008438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843a:	085a      	lsrs	r2, r3, #1
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	4970      	ldr	r1, [pc, #448]	@ (8008604 <IntAdjust+0x2b8>)
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fed8 	bl	800a1f8 <siprintf>
	LcdPuts(LCD_X, cursorLine, lcdBufferIA);
 8008448:	4b6a      	ldr	r3, [pc, #424]	@ (80085f4 <IntAdjust+0x2a8>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f107 020c 	add.w	r2, r7, #12
 8008450:	4619      	mov	r1, r3
 8008452:	200f      	movs	r0, #15
 8008454:	f7ff f8a0 	bl	8007598 <LcdPuts>

	switch (input)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b08      	cmp	r3, #8
 800845c:	f000 80b5 	beq.w	80085ca <IntAdjust+0x27e>
 8008460:	2b08      	cmp	r3, #8
 8008462:	f300 80c0 	bgt.w	80085e6 <IntAdjust+0x29a>
 8008466:	2b01      	cmp	r3, #1
 8008468:	d003      	beq.n	8008472 <IntAdjust+0x126>
 800846a:	2b04      	cmp	r3, #4
 800846c:	f000 809f 	beq.w	80085ae <IntAdjust+0x262>
 8008470:	e0b9      	b.n	80085e6 <IntAdjust+0x29a>
	{
	case KEY_ACCEPT:
		pValues[cursorLine]->ival = TIM1->CNT / ROTARY_SPC;
 8008472:	4b62      	ldr	r3, [pc, #392]	@ (80085fc <IntAdjust+0x2b0>)
 8008474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008476:	085a      	lsrs	r2, r3, #1
 8008478:	4b5e      	ldr	r3, [pc, #376]	@ (80085f4 <IntAdjust+0x2a8>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	4b5e      	ldr	r3, [pc, #376]	@ (80085f8 <IntAdjust+0x2ac>)
 8008480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008484:	601a      	str	r2, [r3, #0]
		if (variable == VA_FREQUENCY)
 8008486:	4b60      	ldr	r3, [pc, #384]	@ (8008608 <IntAdjust+0x2bc>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b1f      	cmp	r3, #31
 800848c:	d109      	bne.n	80084a2 <IntAdjust+0x156>
		{
			Frequency = pValues[cursorLine]->ival;
 800848e:	4b59      	ldr	r3, [pc, #356]	@ (80085f4 <IntAdjust+0x2a8>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	4b58      	ldr	r3, [pc, #352]	@ (80085f8 <IntAdjust+0x2ac>)
 8008496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a5b      	ldr	r2, [pc, #364]	@ (800860c <IntAdjust+0x2c0>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e06d      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_TIME_ON)
 80084a2:	4b59      	ldr	r3, [pc, #356]	@ (8008608 <IntAdjust+0x2bc>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	d109      	bne.n	80084be <IntAdjust+0x172>
		{
			TimeOn = pValues[cursorLine]->ival;
 80084aa:	4b52      	ldr	r3, [pc, #328]	@ (80085f4 <IntAdjust+0x2a8>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	4b51      	ldr	r3, [pc, #324]	@ (80085f8 <IntAdjust+0x2ac>)
 80084b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a55      	ldr	r2, [pc, #340]	@ (8008610 <IntAdjust+0x2c4>)
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	e05f      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_OFFSET)
 80084be:	4b52      	ldr	r3, [pc, #328]	@ (8008608 <IntAdjust+0x2bc>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b29      	cmp	r3, #41	@ 0x29
 80084c4:	d109      	bne.n	80084da <IntAdjust+0x18e>
		{
			AdcOffset = pValues[cursorLine]->ival;
 80084c6:	4b4b      	ldr	r3, [pc, #300]	@ (80085f4 <IntAdjust+0x2a8>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b4a      	ldr	r3, [pc, #296]	@ (80085f8 <IntAdjust+0x2ac>)
 80084ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a4f      	ldr	r2, [pc, #316]	@ (8008614 <IntAdjust+0x2c8>)
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	e051      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_CALIBRATION)
 80084da:	4b4b      	ldr	r3, [pc, #300]	@ (8008608 <IntAdjust+0x2bc>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e0:	d116      	bne.n	8008510 <IntAdjust+0x1c4>
		{
			AdcCalib = (float)((pValues[cursorLine]->ival * 0.001f) + 1.000f);
 80084e2:	4b44      	ldr	r3, [pc, #272]	@ (80085f4 <IntAdjust+0x2a8>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	4b43      	ldr	r3, [pc, #268]	@ (80085f8 <IntAdjust+0x2ac>)
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084f8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8008618 <IntAdjust+0x2cc>
 80084fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008508:	4b44      	ldr	r3, [pc, #272]	@ (800861c <IntAdjust+0x2d0>)
 800850a:	edc3 7a00 	vstr	s15, [r3]
 800850e:	e036      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_DIVIDER)
 8008510:	4b3d      	ldr	r3, [pc, #244]	@ (8008608 <IntAdjust+0x2bc>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b2b      	cmp	r3, #43	@ 0x2b
 8008516:	d109      	bne.n	800852c <IntAdjust+0x1e0>
		{
			VolDivider = pValues[cursorLine]->ival;
 8008518:	4b36      	ldr	r3, [pc, #216]	@ (80085f4 <IntAdjust+0x2a8>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	4b36      	ldr	r3, [pc, #216]	@ (80085f8 <IntAdjust+0x2ac>)
 8008520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a3e      	ldr	r2, [pc, #248]	@ (8008620 <IntAdjust+0x2d4>)
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	e028      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_RATIO)
 800852c:	4b36      	ldr	r3, [pc, #216]	@ (8008608 <IntAdjust+0x2bc>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b2c      	cmp	r3, #44	@ 0x2c
 8008532:	d109      	bne.n	8008548 <IntAdjust+0x1fc>
		{
			VolRatio = pValues[cursorLine]->ival;
 8008534:	4b2f      	ldr	r3, [pc, #188]	@ (80085f4 <IntAdjust+0x2a8>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	4b2f      	ldr	r3, [pc, #188]	@ (80085f8 <IntAdjust+0x2ac>)
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a38      	ldr	r2, [pc, #224]	@ (8008624 <IntAdjust+0x2d8>)
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	e01a      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_TON_PRE)
 8008548:	4b2f      	ldr	r3, [pc, #188]	@ (8008608 <IntAdjust+0x2bc>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b2d      	cmp	r3, #45	@ 0x2d
 800854e:	d109      	bne.n	8008564 <IntAdjust+0x218>
		{
			TimeOnPre = pValues[cursorLine]->ival;
 8008550:	4b28      	ldr	r3, [pc, #160]	@ (80085f4 <IntAdjust+0x2a8>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <IntAdjust+0x2ac>)
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a32      	ldr	r2, [pc, #200]	@ (8008628 <IntAdjust+0x2dc>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e00c      	b.n	800857e <IntAdjust+0x232>
		}
		else if (variable == VA_BLD_DELAY)
 8008564:	4b28      	ldr	r3, [pc, #160]	@ (8008608 <IntAdjust+0x2bc>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b2e      	cmp	r3, #46	@ 0x2e
 800856a:	d108      	bne.n	800857e <IntAdjust+0x232>
		{
			PhaseDelay = pValues[cursorLine]->ival;
 800856c:	4b21      	ldr	r3, [pc, #132]	@ (80085f4 <IntAdjust+0x2a8>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	4b21      	ldr	r3, [pc, #132]	@ (80085f8 <IntAdjust+0x2ac>)
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2c      	ldr	r2, [pc, #176]	@ (800862c <IntAdjust+0x2e0>)
 800857c:	6013      	str	r3, [r2, #0]
		}
		WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);
 800857e:	2206      	movs	r2, #6
 8008580:	492b      	ldr	r1, [pc, #172]	@ (8008630 <IntAdjust+0x2e4>)
 8008582:	2000      	movs	r0, #0
 8008584:	f000 fd96 	bl	80090b4 <WriteValueStructArrayToEeprom>
		WriteValueStructArrayToEeprom(50,bldValues, NUMBER_OF_BLD_VARIABLES+1);
 8008588:	2207      	movs	r2, #7
 800858a:	492a      	ldr	r1, [pc, #168]	@ (8008634 <IntAdjust+0x2e8>)
 800858c:	2032      	movs	r0, #50	@ 0x32
 800858e:	f000 fd91 	bl	80090b4 <WriteValueStructArrayToEeprom>

		enterFunction = 1;
 8008592:	4b17      	ldr	r3, [pc, #92]	@ (80085f0 <IntAdjust+0x2a4>)
 8008594:	2201      	movs	r2, #1
 8008596:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 8008598:	4b16      	ldr	r3, [pc, #88]	@ (80085f4 <IntAdjust+0x2a8>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	200d      	movs	r0, #13
 80085a0:	f7ff f8e2 	bl	8007768 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 80085a4:	2020      	movs	r0, #32
 80085a6:	f7ff f8c7 	bl	8007738 <LcdData>
		return ST_MAIN_STATE;
 80085aa:	231e      	movs	r3, #30
 80085ac:	e01c      	b.n	80085e8 <IntAdjust+0x29c>

	case KEY_BACK:
		enterFunction = 1;
 80085ae:	4b10      	ldr	r3, [pc, #64]	@ (80085f0 <IntAdjust+0x2a4>)
 80085b0:	2201      	movs	r2, #1
 80085b2:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13,cursorLine);
 80085b4:	4b0f      	ldr	r3, [pc, #60]	@ (80085f4 <IntAdjust+0x2a8>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	200d      	movs	r0, #13
 80085bc:	f7ff f8d4 	bl	8007768 <LcdCursorSet>
		LcdData(0x20);  //  "blank" character
 80085c0:	2020      	movs	r0, #32
 80085c2:	f7ff f8b9 	bl	8007738 <LcdData>
		return ST_MAIN_STATE;
 80085c6:	231e      	movs	r3, #30
 80085c8:	e00e      	b.n	80085e8 <IntAdjust+0x29c>
	case KEY_STANDBY:
		/*enterFunction = 1;
		LcdCursorSet(13, cursorLine);
		LcdData(0x20); //  "blank" character
		return ST_STANDBY;*/
		count1 = 19;
 80085ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008638 <IntAdjust+0x2ec>)
 80085cc:	2213      	movs	r2, #19
 80085ce:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 80085d0:	4b1a      	ldr	r3, [pc, #104]	@ (800863c <IntAdjust+0x2f0>)
 80085d2:	221f      	movs	r2, #31
 80085d4:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 80085d6:	4b07      	ldr	r3, [pc, #28]	@ (80085f4 <IntAdjust+0x2a8>)
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 80085dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <IntAdjust+0x2bc>)
 80085de:	2250      	movs	r2, #80	@ 0x50
 80085e0:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 80085e2:	2314      	movs	r3, #20
 80085e4:	e000      	b.n	80085e8 <IntAdjust+0x29c>
	}
	return ST_INT_ADJUST;
 80085e6:	2332      	movs	r3, #50	@ 0x32
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	200001d2 	.word	0x200001d2
 80085f4:	200005da 	.word	0x200005da
 80085f8:	20000620 	.word	0x20000620
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	0800da4c 	.word	0x0800da4c
 8008604:	0800d9f8 	.word	0x0800d9f8
 8008608:	200005d9 	.word	0x200005d9
 800860c:	200005fc 	.word	0x200005fc
 8008610:	20000600 	.word	0x20000600
 8008614:	20000604 	.word	0x20000604
 8008618:	3a83126f 	.word	0x3a83126f
 800861c:	20000608 	.word	0x20000608
 8008620:	2000060c 	.word	0x2000060c
 8008624:	20000610 	.word	0x20000610
 8008628:	20000614 	.word	0x20000614
 800862c:	20000618 	.word	0x20000618
 8008630:	20000630 	.word	0x20000630
 8008634:	200006d8 	.word	0x200006d8
 8008638:	200005f6 	.word	0x200005f6
 800863c:	200001cc 	.word	0x200001cc

08008640 <StringChange>:
 * @brief This function adjusts string values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char StringChange(char input)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
	static char enterFunction = 1;
	static int8_t strNumTemp;
	if (enterFunction == 1)
 800864a:	4b86      	ldr	r3, [pc, #536]	@ (8008864 <StringChange+0x224>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d10c      	bne.n	800866c <StringChange+0x2c>
	{
		strNumTemp = pValues[cursorLine]->strNum;
 8008652:	4b85      	ldr	r3, [pc, #532]	@ (8008868 <StringChange+0x228>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	4b84      	ldr	r3, [pc, #528]	@ (800886c <StringChange+0x22c>)
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8008662:	4b83      	ldr	r3, [pc, #524]	@ (8008870 <StringChange+0x230>)
 8008664:	701a      	strb	r2, [r3, #0]
		enterFunction = 0;
 8008666:	4b7f      	ldr	r3, [pc, #508]	@ (8008864 <StringChange+0x224>)
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]
	}

	switch (input)
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	3b01      	subs	r3, #1
 8008670:	2b1f      	cmp	r3, #31
 8008672:	f200 808b 	bhi.w	800878c <StringChange+0x14c>
 8008676:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <StringChange+0x3c>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	08008725 	.word	0x08008725
 8008680:	0800878d 	.word	0x0800878d
 8008684:	0800878d 	.word	0x0800878d
 8008688:	08008755 	.word	0x08008755
 800868c:	0800878d 	.word	0x0800878d
 8008690:	0800878d 	.word	0x0800878d
 8008694:	0800878d 	.word	0x0800878d
 8008698:	08008771 	.word	0x08008771
 800869c:	0800878d 	.word	0x0800878d
 80086a0:	0800878d 	.word	0x0800878d
 80086a4:	0800878d 	.word	0x0800878d
 80086a8:	0800878d 	.word	0x0800878d
 80086ac:	0800878d 	.word	0x0800878d
 80086b0:	0800878d 	.word	0x0800878d
 80086b4:	0800878d 	.word	0x0800878d
 80086b8:	080086fd 	.word	0x080086fd
 80086bc:	0800878d 	.word	0x0800878d
 80086c0:	0800878d 	.word	0x0800878d
 80086c4:	0800878d 	.word	0x0800878d
 80086c8:	0800878d 	.word	0x0800878d
 80086cc:	0800878d 	.word	0x0800878d
 80086d0:	0800878d 	.word	0x0800878d
 80086d4:	0800878d 	.word	0x0800878d
 80086d8:	0800878d 	.word	0x0800878d
 80086dc:	0800878d 	.word	0x0800878d
 80086e0:	0800878d 	.word	0x0800878d
 80086e4:	0800878d 	.word	0x0800878d
 80086e8:	0800878d 	.word	0x0800878d
 80086ec:	0800878d 	.word	0x0800878d
 80086f0:	0800878d 	.word	0x0800878d
 80086f4:	0800878d 	.word	0x0800878d
 80086f8:	08008711 	.word	0x08008711
	{
	case ROTARY_CW_DIR:		strNumTemp++; break;
 80086fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008870 <StringChange+0x230>)
 80086fe:	f993 3000 	ldrsb.w	r3, [r3]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	3301      	adds	r3, #1
 8008706:	b2db      	uxtb	r3, r3
 8008708:	b25a      	sxtb	r2, r3
 800870a:	4b59      	ldr	r3, [pc, #356]	@ (8008870 <StringChange+0x230>)
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e03d      	b.n	800878c <StringChange+0x14c>

	case ROTARY_CCW_DIR:	strNumTemp--; break;
 8008710:	4b57      	ldr	r3, [pc, #348]	@ (8008870 <StringChange+0x230>)
 8008712:	f993 3000 	ldrsb.w	r3, [r3]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b2db      	uxtb	r3, r3
 800871c:	b25a      	sxtb	r2, r3
 800871e:	4b54      	ldr	r3, [pc, #336]	@ (8008870 <StringChange+0x230>)
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e033      	b.n	800878c <StringChange+0x14c>

	case KEY_ACCEPT:

		// store the temporary adjusted value to the global variable
		pValues[cursorLine]->strNum = strNumTemp;
 8008724:	4b50      	ldr	r3, [pc, #320]	@ (8008868 <StringChange+0x228>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	4b50      	ldr	r3, [pc, #320]	@ (800886c <StringChange+0x22c>)
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	4a4f      	ldr	r2, [pc, #316]	@ (8008870 <StringChange+0x230>)
 8008732:	f992 2000 	ldrsb.w	r2, [r2]
 8008736:	741a      	strb	r2, [r3, #16]
		{
		}

		WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);*/

		enterFunction = 1;
 8008738:	4b4a      	ldr	r3, [pc, #296]	@ (8008864 <StringChange+0x224>)
 800873a:	2201      	movs	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
		LcdCursorSet(13, cursorLine);
 800873e:	4b4a      	ldr	r3, [pc, #296]	@ (8008868 <StringChange+0x228>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	200d      	movs	r0, #13
 8008746:	f7ff f80f 	bl	8007768 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 800874a:	2020      	movs	r0, #32
 800874c:	f7fe fff4 	bl	8007738 <LcdData>

		return ST_MAIN_STATE;
 8008750:	231e      	movs	r3, #30
 8008752:	e083      	b.n	800885c <StringChange+0x21c>

		case KEY_BACK:
			enterFunction = 1;
 8008754:	4b43      	ldr	r3, [pc, #268]	@ (8008864 <StringChange+0x224>)
 8008756:	2201      	movs	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 800875a:	4b43      	ldr	r3, [pc, #268]	@ (8008868 <StringChange+0x228>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	4619      	mov	r1, r3
 8008760:	200d      	movs	r0, #13
 8008762:	f7ff f801 	bl	8007768 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 8008766:	2020      	movs	r0, #32
 8008768:	f7fe ffe6 	bl	8007738 <LcdData>
			return ST_MAIN_STATE;
 800876c:	231e      	movs	r3, #30
 800876e:	e075      	b.n	800885c <StringChange+0x21c>
	case KEY_STANDBY:
		/*enterFunction = 1;
		LcdCursorSet(13, cursorLine);
		LcdData(0x20); //  "blank" character
		return ST_STANDBY;*/
		count1 = 19;
 8008770:	4b40      	ldr	r3, [pc, #256]	@ (8008874 <StringChange+0x234>)
 8008772:	2213      	movs	r2, #19
 8008774:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8008776:	4b40      	ldr	r3, [pc, #256]	@ (8008878 <StringChange+0x238>)
 8008778:	221f      	movs	r2, #31
 800877a:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 800877c:	4b3a      	ldr	r3, [pc, #232]	@ (8008868 <StringChange+0x228>)
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8008782:	4b3e      	ldr	r3, [pc, #248]	@ (800887c <StringChange+0x23c>)
 8008784:	2250      	movs	r2, #80	@ 0x50
 8008786:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8008788:	2314      	movs	r3, #20
 800878a:	e067      	b.n	800885c <StringChange+0x21c>
	}

	LcdCreateChar(0, UpDownCharacter); // "<>" character
 800878c:	493c      	ldr	r1, [pc, #240]	@ (8008880 <StringChange+0x240>)
 800878e:	2000      	movs	r0, #0
 8008790:	f7fe ff5e 	bl	8007650 <LcdCreateChar>
	LcdCursorSet(13, cursorLine);
 8008794:	4b34      	ldr	r3, [pc, #208]	@ (8008868 <StringChange+0x228>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	4619      	mov	r1, r3
 800879a:	200d      	movs	r0, #13
 800879c:	f7fe ffe4 	bl	8007768 <LcdCursorSet>
	LcdData(0); //  "<>" character
 80087a0:	2000      	movs	r0, #0
 80087a2:	f7fe ffc9 	bl	8007738 <LcdData>


	if (strNumTemp > pValues[cursorLine]->upLimit)
 80087a6:	4b32      	ldr	r3, [pc, #200]	@ (8008870 <StringChange+0x230>)
 80087a8:	f993 3000 	ldrsb.w	r3, [r3]
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008868 <StringChange+0x228>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b2c      	ldr	r3, [pc, #176]	@ (800886c <StringChange+0x22c>)
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80087c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087cc:	dd10      	ble.n	80087f0 <StringChange+0x1b0>
	{
		strNumTemp = pValues[cursorLine]->upLimit;
 80087ce:	4b26      	ldr	r3, [pc, #152]	@ (8008868 <StringChange+0x228>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	4b25      	ldr	r3, [pc, #148]	@ (800886c <StringChange+0x22c>)
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	edd3 7a06 	vldr	s15, [r3, #24]
 80087de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087e2:	edc7 7a00 	vstr	s15, [r7]
 80087e6:	783b      	ldrb	r3, [r7, #0]
 80087e8:	b25a      	sxtb	r2, r3
 80087ea:	4b21      	ldr	r3, [pc, #132]	@ (8008870 <StringChange+0x230>)
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	e023      	b.n	8008838 <StringChange+0x1f8>
	}
	else if (strNumTemp < pValues[cursorLine]->downLimit)
 80087f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008870 <StringChange+0x230>)
 80087f2:	f993 3000 	ldrsb.w	r3, [r3]
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008868 <StringChange+0x228>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	4b19      	ldr	r3, [pc, #100]	@ (800886c <StringChange+0x22c>)
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	edd3 7a05 	vldr	s15, [r3, #20]
 800880e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	d50f      	bpl.n	8008838 <StringChange+0x1f8>
	{
		strNumTemp = pValues[cursorLine]->downLimit;
 8008818:	4b13      	ldr	r3, [pc, #76]	@ (8008868 <StringChange+0x228>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	4b13      	ldr	r3, [pc, #76]	@ (800886c <StringChange+0x22c>)
 8008820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008824:	edd3 7a05 	vldr	s15, [r3, #20]
 8008828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800882c:	edc7 7a00 	vstr	s15, [r7]
 8008830:	783b      	ldrb	r3, [r7, #0]
 8008832:	b25a      	sxtb	r2, r3
 8008834:	4b0e      	ldr	r3, [pc, #56]	@ (8008870 <StringChange+0x230>)
 8008836:	701a      	strb	r2, [r3, #0]
	}
	LcdPuts(LCD_X, cursorLine, pValues[cursorLine]->pText[strNumTemp]);
 8008838:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <StringChange+0x228>)
 800883a:	7819      	ldrb	r1, [r3, #0]
 800883c:	4b0a      	ldr	r3, [pc, #40]	@ (8008868 <StringChange+0x228>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <StringChange+0x22c>)
 8008844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008848:	4a09      	ldr	r2, [pc, #36]	@ (8008870 <StringChange+0x230>)
 800884a:	f992 2000 	ldrsb.w	r2, [r2]
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	461a      	mov	r2, r3
 8008854:	200f      	movs	r0, #15
 8008856:	f7fe fe9f 	bl	8007598 <LcdPuts>

	return ST_STR_CHANGE;
 800885a:	2346      	movs	r3, #70	@ 0x46
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200001d3 	.word	0x200001d3
 8008868:	200005da 	.word	0x200005da
 800886c:	20000620 	.word	0x20000620
 8008870:	200007a1 	.word	0x200007a1
 8008874:	200005f6 	.word	0x200005f6
 8008878:	200001cc 	.word	0x200001cc
 800887c:	200005d9 	.word	0x200005d9
 8008880:	0800da4c 	.word	0x0800da4c

08008884 <FloatAdjust>:
 * @brief This function adjusts float values.
 * @param input is buttons state after debouncig.
 * @return nextState is next state according to the current state and button input.
 */
char FloatAdjust(char input)
{
 8008884:	b5b0      	push	{r4, r5, r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
	static uint8_t mode = INTEGER_PART;
	static int FloatTemp[2];
	static char enterFunction = 1;
	char lcdBufferIA[15];

	if (enterFunction == 1)
 800888e:	4b62      	ldr	r3, [pc, #392]	@ (8008a18 <FloatAdjust+0x194>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d141      	bne.n	800891a <FloatAdjust+0x96>
	{
		//FloatTemp[DECIMAL_PART] = modf(pValues[cursorLine]->fval, &FloatTemp[INTEGER_PART]);
		FloatTemp[INTEGER_PART] = (int) pValues[cursorLine]->fval;
 8008896:	4b61      	ldr	r3, [pc, #388]	@ (8008a1c <FloatAdjust+0x198>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	4b60      	ldr	r3, [pc, #384]	@ (8008a20 <FloatAdjust+0x19c>)
 800889e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a2:	edd3 7a00 	vldr	s15, [r3]
 80088a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088aa:	ee17 2a90 	vmov	r2, s15
 80088ae:	4b5d      	ldr	r3, [pc, #372]	@ (8008a24 <FloatAdjust+0x1a0>)
 80088b0:	601a      	str	r2, [r3, #0]
		FloatTemp[DECIMAL_PART] = round((pValues[cursorLine]->fval - FloatTemp[INTEGER_PART]) * 10);
 80088b2:	4b5a      	ldr	r3, [pc, #360]	@ (8008a1c <FloatAdjust+0x198>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	4b59      	ldr	r3, [pc, #356]	@ (8008a20 <FloatAdjust+0x19c>)
 80088ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088be:	ed93 7a00 	vldr	s14, [r3]
 80088c2:	4b58      	ldr	r3, [pc, #352]	@ (8008a24 <FloatAdjust+0x1a0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80088d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088da:	ee17 0a90 	vmov	r0, s15
 80088de:	f7f7 fe43 	bl	8000568 <__aeabi_f2d>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	ec43 2b10 	vmov	d0, r2, r3
 80088ea:	f005 f80f 	bl	800d90c <round>
 80088ee:	ec53 2b10 	vmov	r2, r3, d0
 80088f2:	4610      	mov	r0, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	f7f8 f93f 	bl	8000b78 <__aeabi_d2iz>
 80088fa:	4603      	mov	r3, r0
 80088fc:	4a49      	ldr	r2, [pc, #292]	@ (8008a24 <FloatAdjust+0x1a0>)
 80088fe:	6053      	str	r3, [r2, #4]

		//UpLimit_DEC = round((pValues[cursorLine]->upLimit - (int)pValues[cursorLine]->upLimit)*10);
		//DownLimit_DEC = round((pValues[cursorLine]->downLimit - (int)pValues[cursorLine]->downLimit) * 10);

		if (mode == INTEGER_PART)
 8008900:	4b49      	ldr	r3, [pc, #292]	@ (8008a28 <FloatAdjust+0x1a4>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d105      	bne.n	8008914 <FloatAdjust+0x90>
		{
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 8008908:	4b46      	ldr	r3, [pc, #280]	@ (8008a24 <FloatAdjust+0x1a0>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	b21b      	sxth	r3, r3
 800890e:	005a      	lsls	r2, r3, #1
 8008910:	4b46      	ldr	r3, [pc, #280]	@ (8008a2c <FloatAdjust+0x1a8>)
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		/*else if ( mode == DECIMAL_PART)
		{
			TIM1->CNT = ((int16_t)(FloatTemp[DECIMAL_PART])*10)*ROTARY_SPC;
		}*/
		enterFunction = 0;
 8008914:	4b40      	ldr	r3, [pc, #256]	@ (8008a18 <FloatAdjust+0x194>)
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
	}
	if (mode == INTEGER_PART)
 800891a:	4b43      	ldr	r3, [pc, #268]	@ (8008a28 <FloatAdjust+0x1a4>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d163      	bne.n	80089ea <FloatAdjust+0x166>
	{
		FloatTemp[INTEGER_PART] = (int16_t)TIM1->CNT / ROTARY_SPC;
 8008922:	4b42      	ldr	r3, [pc, #264]	@ (8008a2c <FloatAdjust+0x1a8>)
 8008924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008926:	b21b      	sxth	r3, r3
 8008928:	0fda      	lsrs	r2, r3, #31
 800892a:	4413      	add	r3, r2
 800892c:	105b      	asrs	r3, r3, #1
 800892e:	b21b      	sxth	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	4b3c      	ldr	r3, [pc, #240]	@ (8008a24 <FloatAdjust+0x1a0>)
 8008934:	601a      	str	r2, [r3, #0]
		if (FloatTemp[INTEGER_PART] > (int16_t)pValues[cursorLine]->upLimit)
 8008936:	4b3b      	ldr	r3, [pc, #236]	@ (8008a24 <FloatAdjust+0x1a0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a38      	ldr	r2, [pc, #224]	@ (8008a1c <FloatAdjust+0x198>)
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	4611      	mov	r1, r2
 8008940:	4a37      	ldr	r2, [pc, #220]	@ (8008a20 <FloatAdjust+0x19c>)
 8008942:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008946:	edd2 7a06 	vldr	s15, [r2, #24]
 800894a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800894e:	ee17 2a90 	vmov	r2, s15
 8008952:	b212      	sxth	r2, r2
 8008954:	4293      	cmp	r3, r2
 8008956:	dd10      	ble.n	800897a <FloatAdjust+0xf6>
			TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 8008958:	4b30      	ldr	r3, [pc, #192]	@ (8008a1c <FloatAdjust+0x198>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	461a      	mov	r2, r3
 800895e:	4b30      	ldr	r3, [pc, #192]	@ (8008a20 <FloatAdjust+0x19c>)
 8008960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008964:	edd3 7a06 	vldr	s15, [r3, #24]
 8008968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800896c:	ee17 3a90 	vmov	r3, s15
 8008970:	b21b      	sxth	r3, r3
 8008972:	005a      	lsls	r2, r3, #1
 8008974:	4b2d      	ldr	r3, [pc, #180]	@ (8008a2c <FloatAdjust+0x1a8>)
 8008976:	625a      	str	r2, [r3, #36]	@ 0x24
 8008978:	e020      	b.n	80089bc <FloatAdjust+0x138>

		else if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit)
 800897a:	4b2a      	ldr	r3, [pc, #168]	@ (8008a24 <FloatAdjust+0x1a0>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a27      	ldr	r2, [pc, #156]	@ (8008a1c <FloatAdjust+0x198>)
 8008980:	7812      	ldrb	r2, [r2, #0]
 8008982:	4611      	mov	r1, r2
 8008984:	4a26      	ldr	r2, [pc, #152]	@ (8008a20 <FloatAdjust+0x19c>)
 8008986:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800898a:	edd2 7a05 	vldr	s15, [r2, #20]
 800898e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008992:	ee17 2a90 	vmov	r2, s15
 8008996:	b212      	sxth	r2, r2
 8008998:	4293      	cmp	r3, r2
 800899a:	da0f      	bge.n	80089bc <FloatAdjust+0x138>
			TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 800899c:	4b1f      	ldr	r3, [pc, #124]	@ (8008a1c <FloatAdjust+0x198>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008a20 <FloatAdjust+0x19c>)
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80089ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089b0:	ee17 3a90 	vmov	r3, s15
 80089b4:	b21b      	sxth	r3, r3
 80089b6:	005a      	lsls	r2, r3, #1
 80089b8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a2c <FloatAdjust+0x1a8>)
 80089ba:	625a      	str	r2, [r3, #36]	@ 0x24

		LcdCreateChar(0, UpDownCharacter); // "<>" character
 80089bc:	491c      	ldr	r1, [pc, #112]	@ (8008a30 <FloatAdjust+0x1ac>)
 80089be:	2000      	movs	r0, #0
 80089c0:	f7fe fe46 	bl	8007650 <LcdCreateChar>
		   
		LcdCursorSet(19, cursorLine);
 80089c4:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <FloatAdjust+0x198>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	2013      	movs	r0, #19
 80089cc:	f7fe fecc 	bl	8007768 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 80089d0:	2020      	movs	r0, #32
 80089d2:	f7fe feb1 	bl	8007738 <LcdData>
		   
		LcdCursorSet(13, cursorLine);
 80089d6:	4b11      	ldr	r3, [pc, #68]	@ (8008a1c <FloatAdjust+0x198>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	200d      	movs	r0, #13
 80089de:	f7fe fec3 	bl	8007768 <LcdCursorSet>
		LcdData(0); //  "<>" character
 80089e2:	2000      	movs	r0, #0
 80089e4:	f7fe fea8 	bl	8007738 <LcdData>
 80089e8:	e0c4      	b.n	8008b74 <FloatAdjust+0x2f0>
	}
	else if (mode == DECIMAL_PART)
 80089ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008a28 <FloatAdjust+0x1a4>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	f040 80c0 	bne.w	8008b74 <FloatAdjust+0x2f0>
	{
		FloatTemp[DECIMAL_PART] = (int16_t)TIM1->CNT / ROTARY_SPC;
 80089f4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <FloatAdjust+0x1a8>)
 80089f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f8:	b21b      	sxth	r3, r3
 80089fa:	0fda      	lsrs	r2, r3, #31
 80089fc:	4413      	add	r3, r2
 80089fe:	105b      	asrs	r3, r3, #1
 8008a00:	b21b      	sxth	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <FloatAdjust+0x1a0>)
 8008a06:	605a      	str	r2, [r3, #4]
		if (FloatTemp[DECIMAL_PART] > 9)
 8008a08:	4b06      	ldr	r3, [pc, #24]	@ (8008a24 <FloatAdjust+0x1a0>)
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	dd11      	ble.n	8008a34 <FloatAdjust+0x1b0>
			TIM1->CNT = 9*ROTARY_SPC;
 8008a10:	4b06      	ldr	r3, [pc, #24]	@ (8008a2c <FloatAdjust+0x1a8>)
 8008a12:	2212      	movs	r2, #18
 8008a14:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a16:	e014      	b.n	8008a42 <FloatAdjust+0x1be>
 8008a18:	200001d4 	.word	0x200001d4
 8008a1c:	200005da 	.word	0x200005da
 8008a20:	20000620 	.word	0x20000620
 8008a24:	200007a4 	.word	0x200007a4
 8008a28:	200007ac 	.word	0x200007ac
 8008a2c:	40012c00 	.word	0x40012c00
 8008a30:	0800da4c 	.word	0x0800da4c

		else if (FloatTemp[DECIMAL_PART] < 0)
 8008a34:	4bbd      	ldr	r3, [pc, #756]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da02      	bge.n	8008a42 <FloatAdjust+0x1be>
			TIM1->CNT = 0*ROTARY_SPC;
 8008a3c:	4bbc      	ldr	r3, [pc, #752]	@ (8008d30 <FloatAdjust+0x4ac>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	625a      	str	r2, [r3, #36]	@ 0x24

        //The value of the float number should not be below downlimit of the value
		//else if (FloatTemp[DECIMAL_PART] == 0 && FloatTemp[INTEGER_PART] == 0)
			//TIM1->CNT = DownLimit_DEC*ROTARY_SPC;

		if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit ||
 8008a42:	4bba      	ldr	r3, [pc, #744]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4abb      	ldr	r2, [pc, #748]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008a48:	7812      	ldrb	r2, [r2, #0]
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4aba      	ldr	r2, [pc, #744]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008a4e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008a52:	edd2 7a05 	vldr	s15, [r2, #20]
 8008a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a5a:	ee17 2a90 	vmov	r2, s15
 8008a5e:	b212      	sxth	r2, r2
 8008a60:	4293      	cmp	r3, r2
 8008a62:	db38      	blt.n	8008ad6 <FloatAdjust+0x252>
		    (FloatTemp[INTEGER_PART] == (int16_t)pValues[cursorLine]->downLimit &&
 8008a64:	4bb1      	ldr	r3, [pc, #708]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4ab2      	ldr	r2, [pc, #712]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008a6a:	7812      	ldrb	r2, [r2, #0]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4ab2      	ldr	r2, [pc, #712]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008a70:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008a74:	edd2 7a05 	vldr	s15, [r2, #20]
 8008a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a7c:	ee17 2a90 	vmov	r2, s15
 8008a80:	b212      	sxth	r2, r2
		if (FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit ||
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d160      	bne.n	8008b48 <FloatAdjust+0x2c4>
		     FloatTemp[DECIMAL_PART] < (int16_t)((pValues[cursorLine]->downLimit - (int16_t)pValues[cursorLine]->downLimit) * 10)))
 8008a86:	4ba9      	ldr	r3, [pc, #676]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	4aaa      	ldr	r2, [pc, #680]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008a8c:	7812      	ldrb	r2, [r2, #0]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4aa9      	ldr	r2, [pc, #676]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008a92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008a96:	ed92 7a05 	vldr	s14, [r2, #20]
 8008a9a:	4aa6      	ldr	r2, [pc, #664]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4aa5      	ldr	r2, [pc, #660]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008aa2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008aa6:	edd2 7a05 	vldr	s15, [r2, #20]
 8008aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aae:	ee17 2a90 	vmov	r2, s15
 8008ab2:	b212      	sxth	r2, r2
 8008ab4:	ee07 2a90 	vmov	s15, r2
 8008ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ac0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008acc:	ee17 2a90 	vmov	r2, s15
 8008ad0:	b212      	sxth	r2, r2
		    (FloatTemp[INTEGER_PART] == (int16_t)pValues[cursorLine]->downLimit &&
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	da38      	bge.n	8008b48 <FloatAdjust+0x2c4>
		{
		    FloatTemp[INTEGER_PART] = (int16_t)pValues[cursorLine]->downLimit;
 8008ad6:	4b97      	ldr	r3, [pc, #604]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	4b96      	ldr	r3, [pc, #600]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae2:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aea:	ee17 3a90 	vmov	r3, s15
 8008aee:	b21b      	sxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	4b8e      	ldr	r3, [pc, #568]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008af4:	601a      	str	r2, [r3, #0]
		    FloatTemp[DECIMAL_PART] = (int16_t)((pValues[cursorLine]->downLimit - FloatTemp[INTEGER_PART]) * 10);
 8008af6:	4b8f      	ldr	r3, [pc, #572]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	4b8e      	ldr	r3, [pc, #568]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	ed93 7a05 	vldr	s14, [r3, #20]
 8008b06:	4b89      	ldr	r3, [pc, #548]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b16:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b22:	ee17 3a90 	vmov	r3, s15
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4b80      	ldr	r3, [pc, #512]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008b2c:	605a      	str	r2, [r3, #4]
		    TIM1->CNT = (FloatTemp[INTEGER_PART] * 10 + FloatTemp[DECIMAL_PART]) * ROTARY_SPC;
 8008b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	005a      	lsls	r2, r3, #1
 8008b44:	4b7a      	ldr	r3, [pc, #488]	@ (8008d30 <FloatAdjust+0x4ac>)
 8008b46:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		LcdCreateChar(0, UpDownCharacter); // "<>" character
 8008b48:	497c      	ldr	r1, [pc, #496]	@ (8008d3c <FloatAdjust+0x4b8>)
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f7fe fd80 	bl	8007650 <LcdCreateChar>

		LcdCursorSet(19, cursorLine);
 8008b50:	4b78      	ldr	r3, [pc, #480]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4619      	mov	r1, r3
 8008b56:	2013      	movs	r0, #19
 8008b58:	f7fe fe06 	bl	8007768 <LcdCursorSet>
		LcdData(0); //  "<>" character
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7fe fdeb 	bl	8007738 <LcdData>

		LcdCursorSet(13, cursorLine);
 8008b62:	4b74      	ldr	r3, [pc, #464]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	4619      	mov	r1, r3
 8008b68:	200d      	movs	r0, #13
 8008b6a:	f7fe fdfd 	bl	8007768 <LcdCursorSet>
		LcdData(0x20); //  "blank" character
 8008b6e:	2020      	movs	r0, #32
 8008b70:	f7fe fde2 	bl	8007738 <LcdData>
	}

	// store the temporary adjusted value to the global variable
	pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART] / 10.0f));
 8008b74:	4b6d      	ldr	r3, [pc, #436]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	ee07 3a90 	vmov	s15, r3
 8008b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b80:	4b6a      	ldr	r3, [pc, #424]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	ee07 3a90 	vmov	s15, r3
 8008b88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008b8c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8008b90:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008b94:	4b67      	ldr	r3, [pc, #412]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b67      	ldr	r3, [pc, #412]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba4:	edc3 7a00 	vstr	s15, [r3]
	sprintf(lcdBufferIA, "%-4.1f ", pValues[cursorLine]->fval);
 8008ba8:	4b62      	ldr	r3, [pc, #392]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b62      	ldr	r3, [pc, #392]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f7 fcd6 	bl	8000568 <__aeabi_f2d>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	f107 0008 	add.w	r0, r7, #8
 8008bc4:	495e      	ldr	r1, [pc, #376]	@ (8008d40 <FloatAdjust+0x4bc>)
 8008bc6:	f001 fb17 	bl	800a1f8 <siprintf>
	LcdPuts(LCD_X, cursorLine, lcdBufferIA);
 8008bca:	4b5a      	ldr	r3, [pc, #360]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	f107 0208 	add.w	r2, r7, #8
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	200f      	movs	r0, #15
 8008bd6:	f7fe fcdf 	bl	8007598 <LcdPuts>

	switch (input)
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	2b1f      	cmp	r3, #31
 8008be0:	f200 80e0 	bhi.w	8008da4 <FloatAdjust+0x520>
 8008be4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bec <FloatAdjust+0x368>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c95 	.word	0x08008c95
 8008bf0:	08008da5 	.word	0x08008da5
 8008bf4:	08008da5 	.word	0x08008da5
 8008bf8:	08008d51 	.word	0x08008d51
 8008bfc:	08008da5 	.word	0x08008da5
 8008c00:	08008da5 	.word	0x08008da5
 8008c04:	08008da5 	.word	0x08008da5
 8008c08:	08008d89 	.word	0x08008d89
 8008c0c:	08008da5 	.word	0x08008da5
 8008c10:	08008da5 	.word	0x08008da5
 8008c14:	08008da5 	.word	0x08008da5
 8008c18:	08008da5 	.word	0x08008da5
 8008c1c:	08008da5 	.word	0x08008da5
 8008c20:	08008da5 	.word	0x08008da5
 8008c24:	08008da5 	.word	0x08008da5
 8008c28:	08008c6d 	.word	0x08008c6d
 8008c2c:	08008da5 	.word	0x08008da5
 8008c30:	08008da5 	.word	0x08008da5
 8008c34:	08008da5 	.word	0x08008da5
 8008c38:	08008da5 	.word	0x08008da5
 8008c3c:	08008da5 	.word	0x08008da5
 8008c40:	08008da5 	.word	0x08008da5
 8008c44:	08008da5 	.word	0x08008da5
 8008c48:	08008da5 	.word	0x08008da5
 8008c4c:	08008da5 	.word	0x08008da5
 8008c50:	08008da5 	.word	0x08008da5
 8008c54:	08008da5 	.word	0x08008da5
 8008c58:	08008da5 	.word	0x08008da5
 8008c5c:	08008da5 	.word	0x08008da5
 8008c60:	08008da5 	.word	0x08008da5
 8008c64:	08008da5 	.word	0x08008da5
 8008c68:	08008c81 	.word	0x08008c81
	{
	case ROTARY_CW_DIR:  FloatTemp[mode]++; break;
 8008c6c:	4b35      	ldr	r3, [pc, #212]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	4a2e      	ldr	r2, [pc, #184]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c76:	3201      	adds	r2, #1
 8008c78:	492c      	ldr	r1, [pc, #176]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008c7e:	e091      	b.n	8008da4 <FloatAdjust+0x520>

	case ROTARY_CCW_DIR:  FloatTemp[mode]--; break;
 8008c80:	4b30      	ldr	r3, [pc, #192]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	4a29      	ldr	r2, [pc, #164]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c8a:	3a01      	subs	r2, #1
 8008c8c:	4927      	ldr	r1, [pc, #156]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008c92:	e087      	b.n	8008da4 <FloatAdjust+0x520>

	case KEY_ACCEPT:

		pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART] / 10.0));
 8008c94:	4b25      	ldr	r3, [pc, #148]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7f7 fc53 	bl	8000544 <__aeabi_i2d>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	4b22      	ldr	r3, [pc, #136]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7f7 fc4c 	bl	8000544 <__aeabi_i2d>
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	4b25      	ldr	r3, [pc, #148]	@ (8008d48 <FloatAdjust+0x4c4>)
 8008cb2:	f7f7 fddb 	bl	800086c <__aeabi_ddiv>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4620      	mov	r0, r4
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7f7 faf5 	bl	80002ac <__adddf3>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	491b      	ldr	r1, [pc, #108]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008cc8:	7809      	ldrb	r1, [r1, #0]
 8008cca:	4608      	mov	r0, r1
 8008ccc:	491a      	ldr	r1, [pc, #104]	@ (8008d38 <FloatAdjust+0x4b4>)
 8008cce:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f7f7 ff97 	bl	8000c08 <__aeabi_d2f>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6023      	str	r3, [r4, #0]
		if (mode == INTEGER_PART)
 8008cde:	4b19      	ldr	r3, [pc, #100]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10c      	bne.n	8008d00 <FloatAdjust+0x47c>
		{
			mode++;
 8008ce6:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	3301      	adds	r3, #1
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008cf0:	701a      	strb	r2, [r3, #0]
			TIM1->CNT = (int16_t)(FloatTemp[DECIMAL_PART])*ROTARY_SPC;
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <FloatAdjust+0x4a8>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	005a      	lsls	r2, r3, #1
 8008cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008d30 <FloatAdjust+0x4ac>)
 8008cfc:	625a      	str	r2, [r3, #36]	@ 0x24
			break;
 8008cfe:	e051      	b.n	8008da4 <FloatAdjust+0x520>
		}
		else if (mode == DECIMAL_PART)
 8008d00:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d123      	bne.n	8008d50 <FloatAdjust+0x4cc>
				TimeOn = (pValues[cursorLine]->fval / 1.000);
			}

			WriteValueStructArrayToEeprom(0,values, NUMBER_OF_VARIABLES+1);*/

			mode = INTEGER_PART;
 8008d08:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <FloatAdjust+0x4c0>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
			enterFunction = 1;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d4c <FloatAdjust+0x4c8>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(19, cursorLine);
 8008d14:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <FloatAdjust+0x4b0>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	2013      	movs	r0, #19
 8008d1c:	f7fe fd24 	bl	8007768 <LcdCursorSet>
			LcdData(0x20); //  "blank" character
 8008d20:	2020      	movs	r0, #32
 8008d22:	f7fe fd09 	bl	8007738 <LcdData>
			return ST_MAIN_STATE;
 8008d26:	231e      	movs	r3, #30
 8008d28:	e03d      	b.n	8008da6 <FloatAdjust+0x522>
 8008d2a:	bf00      	nop
 8008d2c:	200007a4 	.word	0x200007a4
 8008d30:	40012c00 	.word	0x40012c00
 8008d34:	200005da 	.word	0x200005da
 8008d38:	20000620 	.word	0x20000620
 8008d3c:	0800da4c 	.word	0x0800da4c
 8008d40:	0800da14 	.word	0x0800da14
 8008d44:	200007ac 	.word	0x200007ac
 8008d48:	40240000 	.word	0x40240000
 8008d4c:	200001d4 	.word	0x200001d4
		}

    case KEY_BACK:
		if (mode == DECIMAL_PART)
 8008d50:	4b17      	ldr	r3, [pc, #92]	@ (8008db0 <FloatAdjust+0x52c>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d109      	bne.n	8008d6c <FloatAdjust+0x4e8>
		{
			mode=INTEGER_PART;
 8008d58:	4b15      	ldr	r3, [pc, #84]	@ (8008db0 <FloatAdjust+0x52c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 8008d5e:	4b15      	ldr	r3, [pc, #84]	@ (8008db4 <FloatAdjust+0x530>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	b21b      	sxth	r3, r3
 8008d64:	005a      	lsls	r2, r3, #1
 8008d66:	4b14      	ldr	r3, [pc, #80]	@ (8008db8 <FloatAdjust+0x534>)
 8008d68:	625a      	str	r2, [r3, #36]	@ 0x24
			break;
 8008d6a:	e01b      	b.n	8008da4 <FloatAdjust+0x520>
		}

		else
		{
			enterFunction = 1;
 8008d6c:	4b13      	ldr	r3, [pc, #76]	@ (8008dbc <FloatAdjust+0x538>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
			LcdCursorSet(13,cursorLine);
 8008d72:	4b13      	ldr	r3, [pc, #76]	@ (8008dc0 <FloatAdjust+0x53c>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	4619      	mov	r1, r3
 8008d78:	200d      	movs	r0, #13
 8008d7a:	f7fe fcf5 	bl	8007768 <LcdCursorSet>
			LcdData(0x20);  //  "blank" character
 8008d7e:	2020      	movs	r0, #32
 8008d80:	f7fe fcda 	bl	8007738 <LcdData>
			return ST_MAIN_STATE;
 8008d84:	231e      	movs	r3, #30
 8008d86:	e00e      	b.n	8008da6 <FloatAdjust+0x522>
	case KEY_STANDBY:
		/*enterFunction = 1;
		LcdCursorSet(13, cursorLine);
		LcdData(0x20); //  "blank" character
		return ST_STANDBY;*/
		count1 = 19;
 8008d88:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <FloatAdjust+0x540>)
 8008d8a:	2213      	movs	r2, #19
 8008d8c:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc8 <FloatAdjust+0x544>)
 8008d90:	221f      	movs	r2, #31
 8008d92:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 8008d94:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc0 <FloatAdjust+0x53c>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
		//variable = VA_SECOND_VARIABLE;
		variable = ST_CHANGE_MENU;
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dcc <FloatAdjust+0x548>)
 8008d9c:	2250      	movs	r2, #80	@ 0x50
 8008d9e:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8008da0:	2314      	movs	r3, #20
 8008da2:	e000      	b.n	8008da6 <FloatAdjust+0x522>
	}

	return ST_FLT_ADJUST;
 8008da4:	233c      	movs	r3, #60	@ 0x3c
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bdb0      	pop	{r4, r5, r7, pc}
 8008dae:	bf00      	nop
 8008db0:	200007ac 	.word	0x200007ac
 8008db4:	200007a4 	.word	0x200007a4
 8008db8:	40012c00 	.word	0x40012c00
 8008dbc:	200001d4 	.word	0x200001d4
 8008dc0:	200005da 	.word	0x200005da
 8008dc4:	200005f6 	.word	0x200005f6
 8008dc8:	200001cc 	.word	0x200001cc
 8008dcc:	200005d9 	.word	0x200005d9

08008dd0 <WriteValueStructToEeprom>:
 * @param page The page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param data Pointer to the ValueStruct to be written.
 */
void WriteValueStructToEeprom(uint16_t page, uint16_t offset, ValueStruct* data)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	603a      	str	r2, [r7, #0]
 8008dda:	80fb      	strh	r3, [r7, #6]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	80bb      	strh	r3, [r7, #4]
	    return;

	if (page >= EEPROM_TOTAL_PAGES)
	    return;*/

    uint16_t currentOffset = offset;
 8008de0:	88bb      	ldrh	r3, [r7, #4]
 8008de2:	82fb      	strh	r3, [r7, #22]

    // Write strNum
    WriteToEeprom(page, currentOffset, (uint8_t*)&data->strNum, sizeof(int8_t));
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f103 0210 	add.w	r2, r3, #16
 8008dea:	8af9      	ldrh	r1, [r7, #22]
 8008dec:	88f8      	ldrh	r0, [r7, #6]
 8008dee:	2301      	movs	r3, #1
 8008df0:	f7fe f944 	bl	800707c <WriteToEeprom>
    currentOffset += sizeof(int8_t);
 8008df4:	8afb      	ldrh	r3, [r7, #22]
 8008df6:	3301      	adds	r3, #1
 8008df8:	82fb      	strh	r3, [r7, #22]

    // Write downLimit
    WriteFloatToEeprom(page, currentOffset, data->downLimit);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8008e00:	8afa      	ldrh	r2, [r7, #22]
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	eeb0 0a67 	vmov.f32	s0, s15
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe f9de 	bl	80071cc <WriteFloatToEeprom>
    currentOffset += sizeof(float);
 8008e10:	8afb      	ldrh	r3, [r7, #22]
 8008e12:	3304      	adds	r3, #4
 8008e14:	82fb      	strh	r3, [r7, #22]

    // Write upLimit
    WriteFloatToEeprom(page, currentOffset, data->upLimit);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	edd3 7a06 	vldr	s15, [r3, #24]
 8008e1c:	8afa      	ldrh	r2, [r7, #22]
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	eeb0 0a67 	vmov.f32	s0, s15
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe f9d0 	bl	80071cc <WriteFloatToEeprom>
    currentOffset += sizeof(float);
 8008e2c:	8afb      	ldrh	r3, [r7, #22]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	82fb      	strh	r3, [r7, #22]

    // Write union data based on strNum
    if (data->strNum >= 0 && data->strNum <= 3) {
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	db43      	blt.n	8008ec4 <WriteValueStructToEeprom+0xf4>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	dc3e      	bgt.n	8008ec4 <WriteValueStructToEeprom+0xf4>
        // Write pText array
        for (int i = 0; i < 4; i++) {
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	e037      	b.n	8008ebc <WriteValueStructToEeprom+0xec>
            if (data->pText[i] != NULL) {
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d022      	beq.n	8008e9e <WriteValueStructToEeprom+0xce>
                uint8_t len = strlen(data->pText[i]);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f7 fa15 	bl	8000290 <strlen>
 8008e66:	4603      	mov	r3, r0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	73fb      	strb	r3, [r7, #15]
                WriteToEeprom(page, currentOffset, &len, sizeof(uint8_t));
 8008e6c:	f107 020f 	add.w	r2, r7, #15
 8008e70:	8af9      	ldrh	r1, [r7, #22]
 8008e72:	88f8      	ldrh	r0, [r7, #6]
 8008e74:	2301      	movs	r3, #1
 8008e76:	f7fe f901 	bl	800707c <WriteToEeprom>
                currentOffset += sizeof(uint8_t);
 8008e7a:	8afb      	ldrh	r3, [r7, #22]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	82fb      	strh	r3, [r7, #22]
                WriteToEeprom(page, currentOffset, (uint8_t*)data->pText[i], len);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	8af9      	ldrh	r1, [r7, #22]
 8008e8c:	88f8      	ldrh	r0, [r7, #6]
 8008e8e:	f7fe f8f5 	bl	800707c <WriteToEeprom>
                currentOffset += len;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	461a      	mov	r2, r3
 8008e96:	8afb      	ldrh	r3, [r7, #22]
 8008e98:	4413      	add	r3, r2
 8008e9a:	82fb      	strh	r3, [r7, #22]
 8008e9c:	e00b      	b.n	8008eb6 <WriteValueStructToEeprom+0xe6>
            } else {
                uint8_t len = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73bb      	strb	r3, [r7, #14]
                WriteToEeprom(page, currentOffset, &len, sizeof(uint8_t));
 8008ea2:	f107 020e 	add.w	r2, r7, #14
 8008ea6:	8af9      	ldrh	r1, [r7, #22]
 8008ea8:	88f8      	ldrh	r0, [r7, #6]
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f7fe f8e6 	bl	800707c <WriteToEeprom>
                currentOffset += sizeof(uint8_t);
 8008eb0:	8afb      	ldrh	r3, [r7, #22]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 4; i++) {
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	613b      	str	r3, [r7, #16]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	ddc4      	ble.n	8008e4c <WriteValueStructToEeprom+0x7c>
 8008ec2:	e01c      	b.n	8008efe <WriteValueStructToEeprom+0x12e>
            }
        }
    } else if (data->strNum == 10) {
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008eca:	2b0a      	cmp	r3, #10
 8008ecc:	d10b      	bne.n	8008ee6 <WriteValueStructToEeprom+0x116>
        // Write fval
        WriteFloatToEeprom(page, currentOffset, data->fval);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	edd3 7a00 	vldr	s15, [r3]
 8008ed4:	8afa      	ldrh	r2, [r7, #22]
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe f974 	bl	80071cc <WriteFloatToEeprom>
    } else if (data->strNum == 20){
        // Write ival
        WriteToEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
    }
}
 8008ee4:	e00b      	b.n	8008efe <WriteValueStructToEeprom+0x12e>
    } else if (data->strNum == 20){
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008eec:	2b14      	cmp	r3, #20
 8008eee:	d106      	bne.n	8008efe <WriteValueStructToEeprom+0x12e>
        WriteToEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	8af9      	ldrh	r1, [r7, #22]
 8008ef4:	88f8      	ldrh	r0, [r7, #6]
 8008ef6:	2304      	movs	r3, #4
 8008ef8:	f7fe f8c0 	bl	800707c <WriteToEeprom>
}
 8008efc:	e7ff      	b.n	8008efe <WriteValueStructToEeprom+0x12e>
 8008efe:	bf00      	nop
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <ReadValueStructFromEeprom>:
 * @param page The page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param offset The starting byte offset within the page (0 to EEPROM_PAGE_SIZE-1).
 * @param data Pointer to the ValueStruct where the read data will be stored.
 */
void ReadValueStructFromEeprom(uint16_t page, uint16_t offset, ValueStruct* data)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	603a      	str	r2, [r7, #0]
 8008f12:	80fb      	strh	r3, [r7, #6]
 8008f14:	460b      	mov	r3, r1
 8008f16:	80bb      	strh	r3, [r7, #4]
    uint16_t currentOffset = offset;
 8008f18:	88bb      	ldrh	r3, [r7, #4]
 8008f1a:	82fb      	strh	r3, [r7, #22]

    // Read strNum
    ReadFromEeprom(page, currentOffset, (uint8_t*)&data->strNum, sizeof(int8_t));
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	f103 0210 	add.w	r2, r3, #16
 8008f22:	8af9      	ldrh	r1, [r7, #22]
 8008f24:	88f8      	ldrh	r0, [r7, #6]
 8008f26:	2301      	movs	r3, #1
 8008f28:	f7fe f988 	bl	800723c <ReadFromEeprom>
    currentOffset += sizeof(int8_t);
 8008f2c:	8afb      	ldrh	r3, [r7, #22]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	82fb      	strh	r3, [r7, #22]

    // Read downLimit
    data->downLimit = ReadFloatFromEeprom(page, currentOffset);
 8008f32:	8afa      	ldrh	r2, [r7, #22]
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	4611      	mov	r1, r2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe f963 	bl	8007204 <ReadFloatFromEeprom>
 8008f3e:	eef0 7a40 	vmov.f32	s15, s0
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	edc3 7a05 	vstr	s15, [r3, #20]
    currentOffset += sizeof(float);
 8008f48:	8afb      	ldrh	r3, [r7, #22]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	82fb      	strh	r3, [r7, #22]

    // Read upLimit
    data->upLimit = ReadFloatFromEeprom(page, currentOffset);
 8008f4e:	8afa      	ldrh	r2, [r7, #22]
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe f955 	bl	8007204 <ReadFloatFromEeprom>
 8008f5a:	eef0 7a40 	vmov.f32	s15, s0
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	edc3 7a06 	vstr	s15, [r3, #24]
    currentOffset += sizeof(float);
 8008f64:	8afb      	ldrh	r3, [r7, #22]
 8008f66:	3304      	adds	r3, #4
 8008f68:	82fb      	strh	r3, [r7, #22]

    // Read union data based on strNum
    if (data->strNum >= 0 && data->strNum <= 3) {
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	db75      	blt.n	8009060 <ReadValueStructFromEeprom+0x158>
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	dc70      	bgt.n	8009060 <ReadValueStructFromEeprom+0x158>
        // Read pText array
        for (int i = 0; i < 4; i++) {
 8008f7e:	2300      	movs	r3, #0
 8008f80:	613b      	str	r3, [r7, #16]
 8008f82:	e069      	b.n	8009058 <ReadValueStructFromEeprom+0x150>
            uint8_t len;
            ReadFromEeprom(page, currentOffset, &len, sizeof(uint8_t));
 8008f84:	f107 020b 	add.w	r2, r7, #11
 8008f88:	8af9      	ldrh	r1, [r7, #22]
 8008f8a:	88f8      	ldrh	r0, [r7, #6]
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f7fe f955 	bl	800723c <ReadFromEeprom>
            currentOffset += sizeof(uint8_t);
 8008f92:	8afb      	ldrh	r3, [r7, #22]
 8008f94:	3301      	adds	r3, #1
 8008f96:	82fb      	strh	r3, [r7, #22]

            if (len > 0) {
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d054      	beq.n	8009048 <ReadValueStructFromEeprom+0x140>
                char* temp = (char*)malloc(len + 1);
 8008f9e:	7afb      	ldrb	r3, [r7, #11]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f944 	bl	8009230 <malloc>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	60fb      	str	r3, [r7, #12]
                ReadFromEeprom(page, currentOffset, (uint8_t*)temp, len);
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	8af9      	ldrh	r1, [r7, #22]
 8008fb0:	88f8      	ldrh	r0, [r7, #6]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	f7fe f942 	bl	800723c <ReadFromEeprom>
                temp[len] = '\0';
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
                currentOffset += len;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	8afb      	ldrh	r3, [r7, #22]
 8008fca:	4413      	add	r3, r2
 8008fcc:	82fb      	strh	r3, [r7, #22]

                // Match the read string with the constants
                if (strcmp(temp, NON) == 0) data->pText[i] = NON;
 8008fce:	4935      	ldr	r1, [pc, #212]	@ (80090a4 <ReadValueStructFromEeprom+0x19c>)
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7f7 f8fd 	bl	80001d0 <strcmp>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d105      	bne.n	8008fe8 <ReadValueStructFromEeprom+0xe0>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	4930      	ldr	r1, [pc, #192]	@ (80090a4 <ReadValueStructFromEeprom+0x19c>)
 8008fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008fe6:	e02b      	b.n	8009040 <ReadValueStructFromEeprom+0x138>
                else if (strcmp(temp, LOW) == 0) data->pText[i] = LOW;
 8008fe8:	492f      	ldr	r1, [pc, #188]	@ (80090a8 <ReadValueStructFromEeprom+0x1a0>)
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f7f7 f8f0 	bl	80001d0 <strcmp>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <ReadValueStructFromEeprom+0xfa>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	492b      	ldr	r1, [pc, #172]	@ (80090a8 <ReadValueStructFromEeprom+0x1a0>)
 8008ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009000:	e01e      	b.n	8009040 <ReadValueStructFromEeprom+0x138>
                else if (strcmp(temp, MED) == 0) data->pText[i] = MED;
 8009002:	492a      	ldr	r1, [pc, #168]	@ (80090ac <ReadValueStructFromEeprom+0x1a4>)
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7f7 f8e3 	bl	80001d0 <strcmp>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d105      	bne.n	800901c <ReadValueStructFromEeprom+0x114>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4925      	ldr	r1, [pc, #148]	@ (80090ac <ReadValueStructFromEeprom+0x1a4>)
 8009016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800901a:	e011      	b.n	8009040 <ReadValueStructFromEeprom+0x138>
                else if (strcmp(temp, HIGH) == 0) data->pText[i] = HIGH;
 800901c:	4924      	ldr	r1, [pc, #144]	@ (80090b0 <ReadValueStructFromEeprom+0x1a8>)
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7f7 f8d6 	bl	80001d0 <strcmp>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <ReadValueStructFromEeprom+0x12e>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4920      	ldr	r1, [pc, #128]	@ (80090b0 <ReadValueStructFromEeprom+0x1a8>)
 8009030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009034:	e004      	b.n	8009040 <ReadValueStructFromEeprom+0x138>
                else data->pText[i] = NULL;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	2100      	movs	r1, #0
 800903c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                free(temp);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f8fd 	bl	8009240 <free>
 8009046:	e004      	b.n	8009052 <ReadValueStructFromEeprom+0x14a>
            } else {
                data->pText[i] = NULL;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	2100      	movs	r1, #0
 800904e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < 4; i++) {
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3301      	adds	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b03      	cmp	r3, #3
 800905c:	dd92      	ble.n	8008f84 <ReadValueStructFromEeprom+0x7c>
 800905e:	e01c      	b.n	800909a <ReadValueStructFromEeprom+0x192>
            }
        }
    } else if (data->strNum == 10) {
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009066:	2b0a      	cmp	r3, #10
 8009068:	d10b      	bne.n	8009082 <ReadValueStructFromEeprom+0x17a>
        // Read fval
        data->fval = ReadFloatFromEeprom(page, currentOffset);
 800906a:	8afa      	ldrh	r2, [r7, #22]
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	4611      	mov	r1, r2
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe f8c7 	bl	8007204 <ReadFloatFromEeprom>
 8009076:	eef0 7a40 	vmov.f32	s15, s0
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	edc3 7a00 	vstr	s15, [r3]
    } else if (data->strNum == 20){
        // Read ival
        ReadFromEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
    }
}
 8009080:	e00b      	b.n	800909a <ReadValueStructFromEeprom+0x192>
    } else if (data->strNum == 20){
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009088:	2b14      	cmp	r3, #20
 800908a:	d106      	bne.n	800909a <ReadValueStructFromEeprom+0x192>
        ReadFromEeprom(page, currentOffset, (uint8_t*)&data->ival, sizeof(int));
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	8af9      	ldrh	r1, [r7, #22]
 8009090:	88f8      	ldrh	r0, [r7, #6]
 8009092:	2304      	movs	r3, #4
 8009094:	f7fe f8d2 	bl	800723c <ReadFromEeprom>
}
 8009098:	e7ff      	b.n	800909a <ReadValueStructFromEeprom+0x192>
 800909a:	bf00      	nop
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	0800da9c 	.word	0x0800da9c
 80090a8:	0800daa4 	.word	0x0800daa4
 80090ac:	0800daac 	.word	0x0800daac
 80090b0:	0800dab4 	.word	0x0800dab4

080090b4 <WriteValueStructArrayToEeprom>:
 * @param startPage The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param data Pointer to the array of ValueStruct to be written.
 * @param arraySize The number of ValueStruct elements in the array.
 */
void WriteValueStructArrayToEeprom(uint16_t startPage, ValueStruct* data, uint16_t arraySize)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	80fb      	strh	r3, [r7, #6]
 80090c0:	4613      	mov	r3, r2
 80090c2:	80bb      	strh	r3, [r7, #4]
    uint16_t currentPage = startPage;
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	81fb      	strh	r3, [r7, #14]
    uint16_t currentOffset = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < arraySize; i++)
 80090cc:	2300      	movs	r3, #0
 80090ce:	817b      	strh	r3, [r7, #10]
 80090d0:	e01b      	b.n	800910a <WriteValueStructArrayToEeprom+0x56>
    {
        WriteValueStructToEeprom(currentPage, currentOffset, &data[i]);
 80090d2:	897a      	ldrh	r2, [r7, #10]
 80090d4:	4613      	mov	r3, r2
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	461a      	mov	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	441a      	add	r2, r3
 80090e2:	89b9      	ldrh	r1, [r7, #12]
 80090e4:	89fb      	ldrh	r3, [r7, #14]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fe72 	bl	8008dd0 <WriteValueStructToEeprom>

        // Move to the next page if we're close to the end of the current page
        currentOffset += sizeof(ValueStruct);
 80090ec:	89bb      	ldrh	r3, [r7, #12]
 80090ee:	331c      	adds	r3, #28
 80090f0:	81bb      	strh	r3, [r7, #12]
        if (currentOffset + sizeof(ValueStruct) > EEPROM_PAGE_SIZE)
 80090f2:	89bb      	ldrh	r3, [r7, #12]
 80090f4:	331c      	adds	r3, #28
 80090f6:	2b40      	cmp	r3, #64	@ 0x40
 80090f8:	d904      	bls.n	8009104 <WriteValueStructArrayToEeprom+0x50>
        {
            currentPage++;
 80090fa:	89fb      	ldrh	r3, [r7, #14]
 80090fc:	3301      	adds	r3, #1
 80090fe:	81fb      	strh	r3, [r7, #14]
            currentOffset = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < arraySize; i++)
 8009104:	897b      	ldrh	r3, [r7, #10]
 8009106:	3301      	adds	r3, #1
 8009108:	817b      	strh	r3, [r7, #10]
 800910a:	897a      	ldrh	r2, [r7, #10]
 800910c:	88bb      	ldrh	r3, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d3df      	bcc.n	80090d2 <WriteValueStructArrayToEeprom+0x1e>
        }
    }
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <ReadValueStructArrayFromEeprom>:
 * @param startPage The starting page number (0 to EEPROM_TOTAL_PAGES-1).
 * @param data Pointer to the array where the read ValueStruct elements will be stored.
 * @param arraySize The number of ValueStruct elements to read.
 */
void ReadValueStructArrayFromEeprom(uint16_t startPage, ValueStruct* data, uint16_t arraySize)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	80fb      	strh	r3, [r7, #6]
 8009128:	4613      	mov	r3, r2
 800912a:	80bb      	strh	r3, [r7, #4]
    uint16_t currentPage = startPage;
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	81fb      	strh	r3, [r7, #14]
    uint16_t currentOffset = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < arraySize; i++)
 8009134:	2300      	movs	r3, #0
 8009136:	817b      	strh	r3, [r7, #10]
 8009138:	e01b      	b.n	8009172 <ReadValueStructArrayFromEeprom+0x56>
    {
        ReadValueStructFromEeprom(currentPage, currentOffset, &data[i]);
 800913a:	897a      	ldrh	r2, [r7, #10]
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	461a      	mov	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	441a      	add	r2, r3
 800914a:	89b9      	ldrh	r1, [r7, #12]
 800914c:	89fb      	ldrh	r3, [r7, #14]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff feda 	bl	8008f08 <ReadValueStructFromEeprom>

        // Move to the next page if we're close to the end of the current page
        currentOffset += sizeof(ValueStruct);
 8009154:	89bb      	ldrh	r3, [r7, #12]
 8009156:	331c      	adds	r3, #28
 8009158:	81bb      	strh	r3, [r7, #12]
        if (currentOffset + sizeof(ValueStruct) > EEPROM_PAGE_SIZE)
 800915a:	89bb      	ldrh	r3, [r7, #12]
 800915c:	331c      	adds	r3, #28
 800915e:	2b40      	cmp	r3, #64	@ 0x40
 8009160:	d904      	bls.n	800916c <ReadValueStructArrayFromEeprom+0x50>
        {
            currentPage++;
 8009162:	89fb      	ldrh	r3, [r7, #14]
 8009164:	3301      	adds	r3, #1
 8009166:	81fb      	strh	r3, [r7, #14]
            currentOffset = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < arraySize; i++)
 800916c:	897b      	ldrh	r3, [r7, #10]
 800916e:	3301      	adds	r3, #1
 8009170:	817b      	strh	r3, [r7, #10]
 8009172:	897a      	ldrh	r2, [r7, #10]
 8009174:	88bb      	ldrh	r3, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d3df      	bcc.n	800913a <ReadValueStructArrayFromEeprom+0x1e>
        }
    }
}
 800917a:	bf00      	nop
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <InitValueReadFromEeprom>:

/**
 * @brief read init values from external eeprom.
 */
void InitValueReadFromEeprom(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
	ReadValueStructArrayFromEeprom(0,values, NUMBER_OF_VARIABLES+1);
 8009188:	2206      	movs	r2, #6
 800918a:	491e      	ldr	r1, [pc, #120]	@ (8009204 <InitValueReadFromEeprom+0x80>)
 800918c:	2000      	movs	r0, #0
 800918e:	f7ff ffc5 	bl	800911c <ReadValueStructArrayFromEeprom>
	Frequency = values[1].ival;
 8009192:	4b1c      	ldr	r3, [pc, #112]	@ (8009204 <InitValueReadFromEeprom+0x80>)
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4a1c      	ldr	r2, [pc, #112]	@ (8009208 <InitValueReadFromEeprom+0x84>)
 8009198:	6013      	str	r3, [r2, #0]
	TimeOn = values[2].ival;
 800919a:	4b1a      	ldr	r3, [pc, #104]	@ (8009204 <InitValueReadFromEeprom+0x80>)
 800919c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919e:	4a1b      	ldr	r2, [pc, #108]	@ (800920c <InitValueReadFromEeprom+0x88>)
 80091a0:	6013      	str	r3, [r2, #0]
	ReadVoltageADC();
 80091a2:	f7fe fb6d 	bl	8007880 <ReadVoltageADC>
	ReadValueStructArrayFromEeprom(50,bldValues, NUMBER_OF_BLD_VARIABLES+1);
 80091a6:	2207      	movs	r2, #7
 80091a8:	4919      	ldr	r1, [pc, #100]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091aa:	2032      	movs	r0, #50	@ 0x32
 80091ac:	f7ff ffb6 	bl	800911c <ReadValueStructArrayFromEeprom>
	AdcOffset = bldValues[1].ival;
 80091b0:	4b17      	ldr	r3, [pc, #92]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	4a17      	ldr	r2, [pc, #92]	@ (8009214 <InitValueReadFromEeprom+0x90>)
 80091b6:	6013      	str	r3, [r2, #0]
	AdcCalib = (float)((bldValues[2].ival * 0.001f) + 1.000f);
 80091b8:	4b15      	ldr	r3, [pc, #84]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009218 <InitValueReadFromEeprom+0x94>
 80091c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091d4:	4b11      	ldr	r3, [pc, #68]	@ (800921c <InitValueReadFromEeprom+0x98>)
 80091d6:	edc3 7a00 	vstr	s15, [r3]
	VolDivider = bldValues[3].ival;
 80091da:	4b0d      	ldr	r3, [pc, #52]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091de:	4a10      	ldr	r2, [pc, #64]	@ (8009220 <InitValueReadFromEeprom+0x9c>)
 80091e0:	6013      	str	r3, [r2, #0]
	VolRatio = bldValues[4].ival;
 80091e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009224 <InitValueReadFromEeprom+0xa0>)
 80091e8:	6013      	str	r3, [r2, #0]
	TimeOnPre = bldValues[5].ival;
 80091ea:	4b09      	ldr	r3, [pc, #36]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009228 <InitValueReadFromEeprom+0xa4>)
 80091f2:	6013      	str	r3, [r2, #0]
	PhaseDelay = bldValues[6].ival;
 80091f4:	4b06      	ldr	r3, [pc, #24]	@ (8009210 <InitValueReadFromEeprom+0x8c>)
 80091f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091fa:	4a0c      	ldr	r2, [pc, #48]	@ (800922c <InitValueReadFromEeprom+0xa8>)
 80091fc:	6013      	str	r3, [r2, #0]

}
 80091fe:	bf00      	nop
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000630 	.word	0x20000630
 8009208:	200005fc 	.word	0x200005fc
 800920c:	20000600 	.word	0x20000600
 8009210:	200006d8 	.word	0x200006d8
 8009214:	20000604 	.word	0x20000604
 8009218:	3a83126f 	.word	0x3a83126f
 800921c:	20000608 	.word	0x20000608
 8009220:	2000060c 	.word	0x2000060c
 8009224:	20000610 	.word	0x20000610
 8009228:	20000614 	.word	0x20000614
 800922c:	20000618 	.word	0x20000618

08009230 <malloc>:
 8009230:	4b02      	ldr	r3, [pc, #8]	@ (800923c <malloc+0xc>)
 8009232:	4601      	mov	r1, r0
 8009234:	6818      	ldr	r0, [r3, #0]
 8009236:	f000 b82d 	b.w	8009294 <_malloc_r>
 800923a:	bf00      	nop
 800923c:	200001e4 	.word	0x200001e4

08009240 <free>:
 8009240:	4b02      	ldr	r3, [pc, #8]	@ (800924c <free+0xc>)
 8009242:	4601      	mov	r1, r0
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	f001 bf2b 	b.w	800b0a0 <_free_r>
 800924a:	bf00      	nop
 800924c:	200001e4 	.word	0x200001e4

08009250 <sbrk_aligned>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	4e0f      	ldr	r6, [pc, #60]	@ (8009290 <sbrk_aligned+0x40>)
 8009254:	460c      	mov	r4, r1
 8009256:	6831      	ldr	r1, [r6, #0]
 8009258:	4605      	mov	r5, r0
 800925a:	b911      	cbnz	r1, 8009262 <sbrk_aligned+0x12>
 800925c:	f001 f872 	bl	800a344 <_sbrk_r>
 8009260:	6030      	str	r0, [r6, #0]
 8009262:	4621      	mov	r1, r4
 8009264:	4628      	mov	r0, r5
 8009266:	f001 f86d 	bl	800a344 <_sbrk_r>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d103      	bne.n	8009276 <sbrk_aligned+0x26>
 800926e:	f04f 34ff 	mov.w	r4, #4294967295
 8009272:	4620      	mov	r0, r4
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	1cc4      	adds	r4, r0, #3
 8009278:	f024 0403 	bic.w	r4, r4, #3
 800927c:	42a0      	cmp	r0, r4
 800927e:	d0f8      	beq.n	8009272 <sbrk_aligned+0x22>
 8009280:	1a21      	subs	r1, r4, r0
 8009282:	4628      	mov	r0, r5
 8009284:	f001 f85e 	bl	800a344 <_sbrk_r>
 8009288:	3001      	adds	r0, #1
 800928a:	d1f2      	bne.n	8009272 <sbrk_aligned+0x22>
 800928c:	e7ef      	b.n	800926e <sbrk_aligned+0x1e>
 800928e:	bf00      	nop
 8009290:	200007b0 	.word	0x200007b0

08009294 <_malloc_r>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	1ccd      	adds	r5, r1, #3
 800929a:	f025 0503 	bic.w	r5, r5, #3
 800929e:	3508      	adds	r5, #8
 80092a0:	2d0c      	cmp	r5, #12
 80092a2:	bf38      	it	cc
 80092a4:	250c      	movcc	r5, #12
 80092a6:	2d00      	cmp	r5, #0
 80092a8:	4606      	mov	r6, r0
 80092aa:	db01      	blt.n	80092b0 <_malloc_r+0x1c>
 80092ac:	42a9      	cmp	r1, r5
 80092ae:	d904      	bls.n	80092ba <_malloc_r+0x26>
 80092b0:	230c      	movs	r3, #12
 80092b2:	6033      	str	r3, [r6, #0]
 80092b4:	2000      	movs	r0, #0
 80092b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009390 <_malloc_r+0xfc>
 80092be:	f000 f869 	bl	8009394 <__malloc_lock>
 80092c2:	f8d8 3000 	ldr.w	r3, [r8]
 80092c6:	461c      	mov	r4, r3
 80092c8:	bb44      	cbnz	r4, 800931c <_malloc_r+0x88>
 80092ca:	4629      	mov	r1, r5
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff ffbf 	bl	8009250 <sbrk_aligned>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	4604      	mov	r4, r0
 80092d6:	d158      	bne.n	800938a <_malloc_r+0xf6>
 80092d8:	f8d8 4000 	ldr.w	r4, [r8]
 80092dc:	4627      	mov	r7, r4
 80092de:	2f00      	cmp	r7, #0
 80092e0:	d143      	bne.n	800936a <_malloc_r+0xd6>
 80092e2:	2c00      	cmp	r4, #0
 80092e4:	d04b      	beq.n	800937e <_malloc_r+0xea>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	4639      	mov	r1, r7
 80092ea:	4630      	mov	r0, r6
 80092ec:	eb04 0903 	add.w	r9, r4, r3
 80092f0:	f001 f828 	bl	800a344 <_sbrk_r>
 80092f4:	4581      	cmp	r9, r0
 80092f6:	d142      	bne.n	800937e <_malloc_r+0xea>
 80092f8:	6821      	ldr	r1, [r4, #0]
 80092fa:	1a6d      	subs	r5, r5, r1
 80092fc:	4629      	mov	r1, r5
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ffa6 	bl	8009250 <sbrk_aligned>
 8009304:	3001      	adds	r0, #1
 8009306:	d03a      	beq.n	800937e <_malloc_r+0xea>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	442b      	add	r3, r5
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	f8d8 3000 	ldr.w	r3, [r8]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	bb62      	cbnz	r2, 8009370 <_malloc_r+0xdc>
 8009316:	f8c8 7000 	str.w	r7, [r8]
 800931a:	e00f      	b.n	800933c <_malloc_r+0xa8>
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	1b52      	subs	r2, r2, r5
 8009320:	d420      	bmi.n	8009364 <_malloc_r+0xd0>
 8009322:	2a0b      	cmp	r2, #11
 8009324:	d917      	bls.n	8009356 <_malloc_r+0xc2>
 8009326:	1961      	adds	r1, r4, r5
 8009328:	42a3      	cmp	r3, r4
 800932a:	6025      	str	r5, [r4, #0]
 800932c:	bf18      	it	ne
 800932e:	6059      	strne	r1, [r3, #4]
 8009330:	6863      	ldr	r3, [r4, #4]
 8009332:	bf08      	it	eq
 8009334:	f8c8 1000 	streq.w	r1, [r8]
 8009338:	5162      	str	r2, [r4, r5]
 800933a:	604b      	str	r3, [r1, #4]
 800933c:	4630      	mov	r0, r6
 800933e:	f000 f82f 	bl	80093a0 <__malloc_unlock>
 8009342:	f104 000b 	add.w	r0, r4, #11
 8009346:	1d23      	adds	r3, r4, #4
 8009348:	f020 0007 	bic.w	r0, r0, #7
 800934c:	1ac2      	subs	r2, r0, r3
 800934e:	bf1c      	itt	ne
 8009350:	1a1b      	subne	r3, r3, r0
 8009352:	50a3      	strne	r3, [r4, r2]
 8009354:	e7af      	b.n	80092b6 <_malloc_r+0x22>
 8009356:	6862      	ldr	r2, [r4, #4]
 8009358:	42a3      	cmp	r3, r4
 800935a:	bf0c      	ite	eq
 800935c:	f8c8 2000 	streq.w	r2, [r8]
 8009360:	605a      	strne	r2, [r3, #4]
 8009362:	e7eb      	b.n	800933c <_malloc_r+0xa8>
 8009364:	4623      	mov	r3, r4
 8009366:	6864      	ldr	r4, [r4, #4]
 8009368:	e7ae      	b.n	80092c8 <_malloc_r+0x34>
 800936a:	463c      	mov	r4, r7
 800936c:	687f      	ldr	r7, [r7, #4]
 800936e:	e7b6      	b.n	80092de <_malloc_r+0x4a>
 8009370:	461a      	mov	r2, r3
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	42a3      	cmp	r3, r4
 8009376:	d1fb      	bne.n	8009370 <_malloc_r+0xdc>
 8009378:	2300      	movs	r3, #0
 800937a:	6053      	str	r3, [r2, #4]
 800937c:	e7de      	b.n	800933c <_malloc_r+0xa8>
 800937e:	230c      	movs	r3, #12
 8009380:	6033      	str	r3, [r6, #0]
 8009382:	4630      	mov	r0, r6
 8009384:	f000 f80c 	bl	80093a0 <__malloc_unlock>
 8009388:	e794      	b.n	80092b4 <_malloc_r+0x20>
 800938a:	6005      	str	r5, [r0, #0]
 800938c:	e7d6      	b.n	800933c <_malloc_r+0xa8>
 800938e:	bf00      	nop
 8009390:	200007b4 	.word	0x200007b4

08009394 <__malloc_lock>:
 8009394:	4801      	ldr	r0, [pc, #4]	@ (800939c <__malloc_lock+0x8>)
 8009396:	f001 b822 	b.w	800a3de <__retarget_lock_acquire_recursive>
 800939a:	bf00      	nop
 800939c:	200008f8 	.word	0x200008f8

080093a0 <__malloc_unlock>:
 80093a0:	4801      	ldr	r0, [pc, #4]	@ (80093a8 <__malloc_unlock+0x8>)
 80093a2:	f001 b81d 	b.w	800a3e0 <__retarget_lock_release_recursive>
 80093a6:	bf00      	nop
 80093a8:	200008f8 	.word	0x200008f8

080093ac <__cvt>:
 80093ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	ec57 6b10 	vmov	r6, r7, d0
 80093b4:	2f00      	cmp	r7, #0
 80093b6:	460c      	mov	r4, r1
 80093b8:	4619      	mov	r1, r3
 80093ba:	463b      	mov	r3, r7
 80093bc:	bfbb      	ittet	lt
 80093be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80093c2:	461f      	movlt	r7, r3
 80093c4:	2300      	movge	r3, #0
 80093c6:	232d      	movlt	r3, #45	@ 0x2d
 80093c8:	700b      	strb	r3, [r1, #0]
 80093ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80093d0:	4691      	mov	r9, r2
 80093d2:	f023 0820 	bic.w	r8, r3, #32
 80093d6:	bfbc      	itt	lt
 80093d8:	4632      	movlt	r2, r6
 80093da:	4616      	movlt	r6, r2
 80093dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093e0:	d005      	beq.n	80093ee <__cvt+0x42>
 80093e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093e6:	d100      	bne.n	80093ea <__cvt+0x3e>
 80093e8:	3401      	adds	r4, #1
 80093ea:	2102      	movs	r1, #2
 80093ec:	e000      	b.n	80093f0 <__cvt+0x44>
 80093ee:	2103      	movs	r1, #3
 80093f0:	ab03      	add	r3, sp, #12
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	ab02      	add	r3, sp, #8
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	ec47 6b10 	vmov	d0, r6, r7
 80093fc:	4653      	mov	r3, sl
 80093fe:	4622      	mov	r2, r4
 8009400:	f001 f87e 	bl	800a500 <_dtoa_r>
 8009404:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009408:	4605      	mov	r5, r0
 800940a:	d119      	bne.n	8009440 <__cvt+0x94>
 800940c:	f019 0f01 	tst.w	r9, #1
 8009410:	d00e      	beq.n	8009430 <__cvt+0x84>
 8009412:	eb00 0904 	add.w	r9, r0, r4
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 fb63 	bl	8000ae8 <__aeabi_dcmpeq>
 8009422:	b108      	cbz	r0, 8009428 <__cvt+0x7c>
 8009424:	f8cd 900c 	str.w	r9, [sp, #12]
 8009428:	2230      	movs	r2, #48	@ 0x30
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	454b      	cmp	r3, r9
 800942e:	d31e      	bcc.n	800946e <__cvt+0xc2>
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009434:	1b5b      	subs	r3, r3, r5
 8009436:	4628      	mov	r0, r5
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	b004      	add	sp, #16
 800943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009440:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009444:	eb00 0904 	add.w	r9, r0, r4
 8009448:	d1e5      	bne.n	8009416 <__cvt+0x6a>
 800944a:	7803      	ldrb	r3, [r0, #0]
 800944c:	2b30      	cmp	r3, #48	@ 0x30
 800944e:	d10a      	bne.n	8009466 <__cvt+0xba>
 8009450:	2200      	movs	r2, #0
 8009452:	2300      	movs	r3, #0
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f7 fb46 	bl	8000ae8 <__aeabi_dcmpeq>
 800945c:	b918      	cbnz	r0, 8009466 <__cvt+0xba>
 800945e:	f1c4 0401 	rsb	r4, r4, #1
 8009462:	f8ca 4000 	str.w	r4, [sl]
 8009466:	f8da 3000 	ldr.w	r3, [sl]
 800946a:	4499      	add	r9, r3
 800946c:	e7d3      	b.n	8009416 <__cvt+0x6a>
 800946e:	1c59      	adds	r1, r3, #1
 8009470:	9103      	str	r1, [sp, #12]
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	e7d9      	b.n	800942a <__cvt+0x7e>

08009476 <__exponent>:
 8009476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009478:	2900      	cmp	r1, #0
 800947a:	bfba      	itte	lt
 800947c:	4249      	neglt	r1, r1
 800947e:	232d      	movlt	r3, #45	@ 0x2d
 8009480:	232b      	movge	r3, #43	@ 0x2b
 8009482:	2909      	cmp	r1, #9
 8009484:	7002      	strb	r2, [r0, #0]
 8009486:	7043      	strb	r3, [r0, #1]
 8009488:	dd29      	ble.n	80094de <__exponent+0x68>
 800948a:	f10d 0307 	add.w	r3, sp, #7
 800948e:	461d      	mov	r5, r3
 8009490:	270a      	movs	r7, #10
 8009492:	461a      	mov	r2, r3
 8009494:	fbb1 f6f7 	udiv	r6, r1, r7
 8009498:	fb07 1416 	mls	r4, r7, r6, r1
 800949c:	3430      	adds	r4, #48	@ 0x30
 800949e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80094a2:	460c      	mov	r4, r1
 80094a4:	2c63      	cmp	r4, #99	@ 0x63
 80094a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80094aa:	4631      	mov	r1, r6
 80094ac:	dcf1      	bgt.n	8009492 <__exponent+0x1c>
 80094ae:	3130      	adds	r1, #48	@ 0x30
 80094b0:	1e94      	subs	r4, r2, #2
 80094b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80094b6:	1c41      	adds	r1, r0, #1
 80094b8:	4623      	mov	r3, r4
 80094ba:	42ab      	cmp	r3, r5
 80094bc:	d30a      	bcc.n	80094d4 <__exponent+0x5e>
 80094be:	f10d 0309 	add.w	r3, sp, #9
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	42ac      	cmp	r4, r5
 80094c6:	bf88      	it	hi
 80094c8:	2300      	movhi	r3, #0
 80094ca:	3302      	adds	r3, #2
 80094cc:	4403      	add	r3, r0
 80094ce:	1a18      	subs	r0, r3, r0
 80094d0:	b003      	add	sp, #12
 80094d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80094d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094dc:	e7ed      	b.n	80094ba <__exponent+0x44>
 80094de:	2330      	movs	r3, #48	@ 0x30
 80094e0:	3130      	adds	r1, #48	@ 0x30
 80094e2:	7083      	strb	r3, [r0, #2]
 80094e4:	70c1      	strb	r1, [r0, #3]
 80094e6:	1d03      	adds	r3, r0, #4
 80094e8:	e7f1      	b.n	80094ce <__exponent+0x58>
	...

080094ec <_printf_float>:
 80094ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	b08d      	sub	sp, #52	@ 0x34
 80094f2:	460c      	mov	r4, r1
 80094f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80094f8:	4616      	mov	r6, r2
 80094fa:	461f      	mov	r7, r3
 80094fc:	4605      	mov	r5, r0
 80094fe:	f000 fee9 	bl	800a2d4 <_localeconv_r>
 8009502:	6803      	ldr	r3, [r0, #0]
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	4618      	mov	r0, r3
 8009508:	f7f6 fec2 	bl	8000290 <strlen>
 800950c:	2300      	movs	r3, #0
 800950e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009510:	f8d8 3000 	ldr.w	r3, [r8]
 8009514:	9005      	str	r0, [sp, #20]
 8009516:	3307      	adds	r3, #7
 8009518:	f023 0307 	bic.w	r3, r3, #7
 800951c:	f103 0208 	add.w	r2, r3, #8
 8009520:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009524:	f8d4 b000 	ldr.w	fp, [r4]
 8009528:	f8c8 2000 	str.w	r2, [r8]
 800952c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009530:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009534:	9307      	str	r3, [sp, #28]
 8009536:	f8cd 8018 	str.w	r8, [sp, #24]
 800953a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800953e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009542:	4b9c      	ldr	r3, [pc, #624]	@ (80097b4 <_printf_float+0x2c8>)
 8009544:	f04f 32ff 	mov.w	r2, #4294967295
 8009548:	f7f7 fb00 	bl	8000b4c <__aeabi_dcmpun>
 800954c:	bb70      	cbnz	r0, 80095ac <_printf_float+0xc0>
 800954e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009552:	4b98      	ldr	r3, [pc, #608]	@ (80097b4 <_printf_float+0x2c8>)
 8009554:	f04f 32ff 	mov.w	r2, #4294967295
 8009558:	f7f7 fada 	bl	8000b10 <__aeabi_dcmple>
 800955c:	bb30      	cbnz	r0, 80095ac <_printf_float+0xc0>
 800955e:	2200      	movs	r2, #0
 8009560:	2300      	movs	r3, #0
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f7 fac9 	bl	8000afc <__aeabi_dcmplt>
 800956a:	b110      	cbz	r0, 8009572 <_printf_float+0x86>
 800956c:	232d      	movs	r3, #45	@ 0x2d
 800956e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009572:	4a91      	ldr	r2, [pc, #580]	@ (80097b8 <_printf_float+0x2cc>)
 8009574:	4b91      	ldr	r3, [pc, #580]	@ (80097bc <_printf_float+0x2d0>)
 8009576:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800957a:	bf8c      	ite	hi
 800957c:	4690      	movhi	r8, r2
 800957e:	4698      	movls	r8, r3
 8009580:	2303      	movs	r3, #3
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	f02b 0304 	bic.w	r3, fp, #4
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	f04f 0900 	mov.w	r9, #0
 800958e:	9700      	str	r7, [sp, #0]
 8009590:	4633      	mov	r3, r6
 8009592:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f9d2 	bl	8009940 <_printf_common>
 800959c:	3001      	adds	r0, #1
 800959e:	f040 808d 	bne.w	80096bc <_printf_float+0x1d0>
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295
 80095a6:	b00d      	add	sp, #52	@ 0x34
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 faca 	bl	8000b4c <__aeabi_dcmpun>
 80095b8:	b140      	cbz	r0, 80095cc <_printf_float+0xe0>
 80095ba:	464b      	mov	r3, r9
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfbc      	itt	lt
 80095c0:	232d      	movlt	r3, #45	@ 0x2d
 80095c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80095c6:	4a7e      	ldr	r2, [pc, #504]	@ (80097c0 <_printf_float+0x2d4>)
 80095c8:	4b7e      	ldr	r3, [pc, #504]	@ (80097c4 <_printf_float+0x2d8>)
 80095ca:	e7d4      	b.n	8009576 <_printf_float+0x8a>
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80095d2:	9206      	str	r2, [sp, #24]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	d13b      	bne.n	8009650 <_printf_float+0x164>
 80095d8:	2306      	movs	r3, #6
 80095da:	6063      	str	r3, [r4, #4]
 80095dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80095e0:	2300      	movs	r3, #0
 80095e2:	6022      	str	r2, [r4, #0]
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80095e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80095ec:	ab09      	add	r3, sp, #36	@ 0x24
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	6861      	ldr	r1, [r4, #4]
 80095f2:	ec49 8b10 	vmov	d0, r8, r9
 80095f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80095fa:	4628      	mov	r0, r5
 80095fc:	f7ff fed6 	bl	80093ac <__cvt>
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009604:	2b47      	cmp	r3, #71	@ 0x47
 8009606:	4680      	mov	r8, r0
 8009608:	d129      	bne.n	800965e <_printf_float+0x172>
 800960a:	1cc8      	adds	r0, r1, #3
 800960c:	db02      	blt.n	8009614 <_printf_float+0x128>
 800960e:	6863      	ldr	r3, [r4, #4]
 8009610:	4299      	cmp	r1, r3
 8009612:	dd41      	ble.n	8009698 <_printf_float+0x1ac>
 8009614:	f1aa 0a02 	sub.w	sl, sl, #2
 8009618:	fa5f fa8a 	uxtb.w	sl, sl
 800961c:	3901      	subs	r1, #1
 800961e:	4652      	mov	r2, sl
 8009620:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009624:	9109      	str	r1, [sp, #36]	@ 0x24
 8009626:	f7ff ff26 	bl	8009476 <__exponent>
 800962a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800962c:	1813      	adds	r3, r2, r0
 800962e:	2a01      	cmp	r2, #1
 8009630:	4681      	mov	r9, r0
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	dc02      	bgt.n	800963c <_printf_float+0x150>
 8009636:	6822      	ldr	r2, [r4, #0]
 8009638:	07d2      	lsls	r2, r2, #31
 800963a:	d501      	bpl.n	8009640 <_printf_float+0x154>
 800963c:	3301      	adds	r3, #1
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0a2      	beq.n	800958e <_printf_float+0xa2>
 8009648:	232d      	movs	r3, #45	@ 0x2d
 800964a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800964e:	e79e      	b.n	800958e <_printf_float+0xa2>
 8009650:	9a06      	ldr	r2, [sp, #24]
 8009652:	2a47      	cmp	r2, #71	@ 0x47
 8009654:	d1c2      	bne.n	80095dc <_printf_float+0xf0>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1c0      	bne.n	80095dc <_printf_float+0xf0>
 800965a:	2301      	movs	r3, #1
 800965c:	e7bd      	b.n	80095da <_printf_float+0xee>
 800965e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009662:	d9db      	bls.n	800961c <_printf_float+0x130>
 8009664:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009668:	d118      	bne.n	800969c <_printf_float+0x1b0>
 800966a:	2900      	cmp	r1, #0
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	dd0b      	ble.n	8009688 <_printf_float+0x19c>
 8009670:	6121      	str	r1, [r4, #16]
 8009672:	b913      	cbnz	r3, 800967a <_printf_float+0x18e>
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	07d0      	lsls	r0, r2, #31
 8009678:	d502      	bpl.n	8009680 <_printf_float+0x194>
 800967a:	3301      	adds	r3, #1
 800967c:	440b      	add	r3, r1
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009682:	f04f 0900 	mov.w	r9, #0
 8009686:	e7db      	b.n	8009640 <_printf_float+0x154>
 8009688:	b913      	cbnz	r3, 8009690 <_printf_float+0x1a4>
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	07d2      	lsls	r2, r2, #31
 800968e:	d501      	bpl.n	8009694 <_printf_float+0x1a8>
 8009690:	3302      	adds	r3, #2
 8009692:	e7f4      	b.n	800967e <_printf_float+0x192>
 8009694:	2301      	movs	r3, #1
 8009696:	e7f2      	b.n	800967e <_printf_float+0x192>
 8009698:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800969c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800969e:	4299      	cmp	r1, r3
 80096a0:	db05      	blt.n	80096ae <_printf_float+0x1c2>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	6121      	str	r1, [r4, #16]
 80096a6:	07d8      	lsls	r0, r3, #31
 80096a8:	d5ea      	bpl.n	8009680 <_printf_float+0x194>
 80096aa:	1c4b      	adds	r3, r1, #1
 80096ac:	e7e7      	b.n	800967e <_printf_float+0x192>
 80096ae:	2900      	cmp	r1, #0
 80096b0:	bfd4      	ite	le
 80096b2:	f1c1 0202 	rsble	r2, r1, #2
 80096b6:	2201      	movgt	r2, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	e7e0      	b.n	800967e <_printf_float+0x192>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	055a      	lsls	r2, r3, #21
 80096c0:	d407      	bmi.n	80096d2 <_printf_float+0x1e6>
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	4642      	mov	r2, r8
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	d12b      	bne.n	8009728 <_printf_float+0x23c>
 80096d0:	e767      	b.n	80095a2 <_printf_float+0xb6>
 80096d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096d6:	f240 80dd 	bls.w	8009894 <_printf_float+0x3a8>
 80096da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096de:	2200      	movs	r2, #0
 80096e0:	2300      	movs	r3, #0
 80096e2:	f7f7 fa01 	bl	8000ae8 <__aeabi_dcmpeq>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d033      	beq.n	8009752 <_printf_float+0x266>
 80096ea:	4a37      	ldr	r2, [pc, #220]	@ (80097c8 <_printf_float+0x2dc>)
 80096ec:	2301      	movs	r3, #1
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f af54 	beq.w	80095a2 <_printf_float+0xb6>
 80096fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80096fe:	4543      	cmp	r3, r8
 8009700:	db02      	blt.n	8009708 <_printf_float+0x21c>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	07d8      	lsls	r0, r3, #31
 8009706:	d50f      	bpl.n	8009728 <_printf_float+0x23c>
 8009708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	f43f af45 	beq.w	80095a2 <_printf_float+0xb6>
 8009718:	f04f 0900 	mov.w	r9, #0
 800971c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009720:	f104 0a1a 	add.w	sl, r4, #26
 8009724:	45c8      	cmp	r8, r9
 8009726:	dc09      	bgt.n	800973c <_printf_float+0x250>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	079b      	lsls	r3, r3, #30
 800972c:	f100 8103 	bmi.w	8009936 <_printf_float+0x44a>
 8009730:	68e0      	ldr	r0, [r4, #12]
 8009732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009734:	4298      	cmp	r0, r3
 8009736:	bfb8      	it	lt
 8009738:	4618      	movlt	r0, r3
 800973a:	e734      	b.n	80095a6 <_printf_float+0xba>
 800973c:	2301      	movs	r3, #1
 800973e:	4652      	mov	r2, sl
 8009740:	4631      	mov	r1, r6
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	f43f af2b 	beq.w	80095a2 <_printf_float+0xb6>
 800974c:	f109 0901 	add.w	r9, r9, #1
 8009750:	e7e8      	b.n	8009724 <_printf_float+0x238>
 8009752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc39      	bgt.n	80097cc <_printf_float+0x2e0>
 8009758:	4a1b      	ldr	r2, [pc, #108]	@ (80097c8 <_printf_float+0x2dc>)
 800975a:	2301      	movs	r3, #1
 800975c:	4631      	mov	r1, r6
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	f43f af1d 	beq.w	80095a2 <_printf_float+0xb6>
 8009768:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800976c:	ea59 0303 	orrs.w	r3, r9, r3
 8009770:	d102      	bne.n	8009778 <_printf_float+0x28c>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	07d9      	lsls	r1, r3, #31
 8009776:	d5d7      	bpl.n	8009728 <_printf_float+0x23c>
 8009778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af0d 	beq.w	80095a2 <_printf_float+0xb6>
 8009788:	f04f 0a00 	mov.w	sl, #0
 800978c:	f104 0b1a 	add.w	fp, r4, #26
 8009790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009792:	425b      	negs	r3, r3
 8009794:	4553      	cmp	r3, sl
 8009796:	dc01      	bgt.n	800979c <_printf_float+0x2b0>
 8009798:	464b      	mov	r3, r9
 800979a:	e793      	b.n	80096c4 <_printf_float+0x1d8>
 800979c:	2301      	movs	r3, #1
 800979e:	465a      	mov	r2, fp
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f aefb 	beq.w	80095a2 <_printf_float+0xb6>
 80097ac:	f10a 0a01 	add.w	sl, sl, #1
 80097b0:	e7ee      	b.n	8009790 <_printf_float+0x2a4>
 80097b2:	bf00      	nop
 80097b4:	7fefffff 	.word	0x7fefffff
 80097b8:	0800db42 	.word	0x0800db42
 80097bc:	0800db3e 	.word	0x0800db3e
 80097c0:	0800db4a 	.word	0x0800db4a
 80097c4:	0800db46 	.word	0x0800db46
 80097c8:	0800db4e 	.word	0x0800db4e
 80097cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097d2:	4553      	cmp	r3, sl
 80097d4:	bfa8      	it	ge
 80097d6:	4653      	movge	r3, sl
 80097d8:	2b00      	cmp	r3, #0
 80097da:	4699      	mov	r9, r3
 80097dc:	dc36      	bgt.n	800984c <_printf_float+0x360>
 80097de:	f04f 0b00 	mov.w	fp, #0
 80097e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097e6:	f104 021a 	add.w	r2, r4, #26
 80097ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097ec:	9306      	str	r3, [sp, #24]
 80097ee:	eba3 0309 	sub.w	r3, r3, r9
 80097f2:	455b      	cmp	r3, fp
 80097f4:	dc31      	bgt.n	800985a <_printf_float+0x36e>
 80097f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f8:	459a      	cmp	sl, r3
 80097fa:	dc3a      	bgt.n	8009872 <_printf_float+0x386>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	07da      	lsls	r2, r3, #31
 8009800:	d437      	bmi.n	8009872 <_printf_float+0x386>
 8009802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009804:	ebaa 0903 	sub.w	r9, sl, r3
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	ebaa 0303 	sub.w	r3, sl, r3
 800980e:	4599      	cmp	r9, r3
 8009810:	bfa8      	it	ge
 8009812:	4699      	movge	r9, r3
 8009814:	f1b9 0f00 	cmp.w	r9, #0
 8009818:	dc33      	bgt.n	8009882 <_printf_float+0x396>
 800981a:	f04f 0800 	mov.w	r8, #0
 800981e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009822:	f104 0b1a 	add.w	fp, r4, #26
 8009826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009828:	ebaa 0303 	sub.w	r3, sl, r3
 800982c:	eba3 0309 	sub.w	r3, r3, r9
 8009830:	4543      	cmp	r3, r8
 8009832:	f77f af79 	ble.w	8009728 <_printf_float+0x23c>
 8009836:	2301      	movs	r3, #1
 8009838:	465a      	mov	r2, fp
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f aeae 	beq.w	80095a2 <_printf_float+0xb6>
 8009846:	f108 0801 	add.w	r8, r8, #1
 800984a:	e7ec      	b.n	8009826 <_printf_float+0x33a>
 800984c:	4642      	mov	r2, r8
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	d1c2      	bne.n	80097de <_printf_float+0x2f2>
 8009858:	e6a3      	b.n	80095a2 <_printf_float+0xb6>
 800985a:	2301      	movs	r3, #1
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	9206      	str	r2, [sp, #24]
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	f43f ae9c 	beq.w	80095a2 <_printf_float+0xb6>
 800986a:	9a06      	ldr	r2, [sp, #24]
 800986c:	f10b 0b01 	add.w	fp, fp, #1
 8009870:	e7bb      	b.n	80097ea <_printf_float+0x2fe>
 8009872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	47b8      	blx	r7
 800987c:	3001      	adds	r0, #1
 800987e:	d1c0      	bne.n	8009802 <_printf_float+0x316>
 8009880:	e68f      	b.n	80095a2 <_printf_float+0xb6>
 8009882:	9a06      	ldr	r2, [sp, #24]
 8009884:	464b      	mov	r3, r9
 8009886:	4442      	add	r2, r8
 8009888:	4631      	mov	r1, r6
 800988a:	4628      	mov	r0, r5
 800988c:	47b8      	blx	r7
 800988e:	3001      	adds	r0, #1
 8009890:	d1c3      	bne.n	800981a <_printf_float+0x32e>
 8009892:	e686      	b.n	80095a2 <_printf_float+0xb6>
 8009894:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009898:	f1ba 0f01 	cmp.w	sl, #1
 800989c:	dc01      	bgt.n	80098a2 <_printf_float+0x3b6>
 800989e:	07db      	lsls	r3, r3, #31
 80098a0:	d536      	bpl.n	8009910 <_printf_float+0x424>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4642      	mov	r2, r8
 80098a6:	4631      	mov	r1, r6
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b8      	blx	r7
 80098ac:	3001      	adds	r0, #1
 80098ae:	f43f ae78 	beq.w	80095a2 <_printf_float+0xb6>
 80098b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098b6:	4631      	mov	r1, r6
 80098b8:	4628      	mov	r0, r5
 80098ba:	47b8      	blx	r7
 80098bc:	3001      	adds	r0, #1
 80098be:	f43f ae70 	beq.w	80095a2 <_printf_float+0xb6>
 80098c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098ce:	f7f7 f90b 	bl	8000ae8 <__aeabi_dcmpeq>
 80098d2:	b9c0      	cbnz	r0, 8009906 <_printf_float+0x41a>
 80098d4:	4653      	mov	r3, sl
 80098d6:	f108 0201 	add.w	r2, r8, #1
 80098da:	4631      	mov	r1, r6
 80098dc:	4628      	mov	r0, r5
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	d10c      	bne.n	80098fe <_printf_float+0x412>
 80098e4:	e65d      	b.n	80095a2 <_printf_float+0xb6>
 80098e6:	2301      	movs	r3, #1
 80098e8:	465a      	mov	r2, fp
 80098ea:	4631      	mov	r1, r6
 80098ec:	4628      	mov	r0, r5
 80098ee:	47b8      	blx	r7
 80098f0:	3001      	adds	r0, #1
 80098f2:	f43f ae56 	beq.w	80095a2 <_printf_float+0xb6>
 80098f6:	f108 0801 	add.w	r8, r8, #1
 80098fa:	45d0      	cmp	r8, sl
 80098fc:	dbf3      	blt.n	80098e6 <_printf_float+0x3fa>
 80098fe:	464b      	mov	r3, r9
 8009900:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009904:	e6df      	b.n	80096c6 <_printf_float+0x1da>
 8009906:	f04f 0800 	mov.w	r8, #0
 800990a:	f104 0b1a 	add.w	fp, r4, #26
 800990e:	e7f4      	b.n	80098fa <_printf_float+0x40e>
 8009910:	2301      	movs	r3, #1
 8009912:	4642      	mov	r2, r8
 8009914:	e7e1      	b.n	80098da <_printf_float+0x3ee>
 8009916:	2301      	movs	r3, #1
 8009918:	464a      	mov	r2, r9
 800991a:	4631      	mov	r1, r6
 800991c:	4628      	mov	r0, r5
 800991e:	47b8      	blx	r7
 8009920:	3001      	adds	r0, #1
 8009922:	f43f ae3e 	beq.w	80095a2 <_printf_float+0xb6>
 8009926:	f108 0801 	add.w	r8, r8, #1
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800992e:	1a5b      	subs	r3, r3, r1
 8009930:	4543      	cmp	r3, r8
 8009932:	dcf0      	bgt.n	8009916 <_printf_float+0x42a>
 8009934:	e6fc      	b.n	8009730 <_printf_float+0x244>
 8009936:	f04f 0800 	mov.w	r8, #0
 800993a:	f104 0919 	add.w	r9, r4, #25
 800993e:	e7f4      	b.n	800992a <_printf_float+0x43e>

08009940 <_printf_common>:
 8009940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	4616      	mov	r6, r2
 8009946:	4698      	mov	r8, r3
 8009948:	688a      	ldr	r2, [r1, #8]
 800994a:	690b      	ldr	r3, [r1, #16]
 800994c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009950:	4293      	cmp	r3, r2
 8009952:	bfb8      	it	lt
 8009954:	4613      	movlt	r3, r2
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800995c:	4607      	mov	r7, r0
 800995e:	460c      	mov	r4, r1
 8009960:	b10a      	cbz	r2, 8009966 <_printf_common+0x26>
 8009962:	3301      	adds	r3, #1
 8009964:	6033      	str	r3, [r6, #0]
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	0699      	lsls	r1, r3, #26
 800996a:	bf42      	ittt	mi
 800996c:	6833      	ldrmi	r3, [r6, #0]
 800996e:	3302      	addmi	r3, #2
 8009970:	6033      	strmi	r3, [r6, #0]
 8009972:	6825      	ldr	r5, [r4, #0]
 8009974:	f015 0506 	ands.w	r5, r5, #6
 8009978:	d106      	bne.n	8009988 <_printf_common+0x48>
 800997a:	f104 0a19 	add.w	sl, r4, #25
 800997e:	68e3      	ldr	r3, [r4, #12]
 8009980:	6832      	ldr	r2, [r6, #0]
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	42ab      	cmp	r3, r5
 8009986:	dc26      	bgt.n	80099d6 <_printf_common+0x96>
 8009988:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	3b00      	subs	r3, #0
 8009990:	bf18      	it	ne
 8009992:	2301      	movne	r3, #1
 8009994:	0692      	lsls	r2, r2, #26
 8009996:	d42b      	bmi.n	80099f0 <_printf_common+0xb0>
 8009998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800999c:	4641      	mov	r1, r8
 800999e:	4638      	mov	r0, r7
 80099a0:	47c8      	blx	r9
 80099a2:	3001      	adds	r0, #1
 80099a4:	d01e      	beq.n	80099e4 <_printf_common+0xa4>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	6922      	ldr	r2, [r4, #16]
 80099aa:	f003 0306 	and.w	r3, r3, #6
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	bf02      	ittt	eq
 80099b2:	68e5      	ldreq	r5, [r4, #12]
 80099b4:	6833      	ldreq	r3, [r6, #0]
 80099b6:	1aed      	subeq	r5, r5, r3
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	bf0c      	ite	eq
 80099bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099c0:	2500      	movne	r5, #0
 80099c2:	4293      	cmp	r3, r2
 80099c4:	bfc4      	itt	gt
 80099c6:	1a9b      	subgt	r3, r3, r2
 80099c8:	18ed      	addgt	r5, r5, r3
 80099ca:	2600      	movs	r6, #0
 80099cc:	341a      	adds	r4, #26
 80099ce:	42b5      	cmp	r5, r6
 80099d0:	d11a      	bne.n	8009a08 <_printf_common+0xc8>
 80099d2:	2000      	movs	r0, #0
 80099d4:	e008      	b.n	80099e8 <_printf_common+0xa8>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4652      	mov	r2, sl
 80099da:	4641      	mov	r1, r8
 80099dc:	4638      	mov	r0, r7
 80099de:	47c8      	blx	r9
 80099e0:	3001      	adds	r0, #1
 80099e2:	d103      	bne.n	80099ec <_printf_common+0xac>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	3501      	adds	r5, #1
 80099ee:	e7c6      	b.n	800997e <_printf_common+0x3e>
 80099f0:	18e1      	adds	r1, r4, r3
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	2030      	movs	r0, #48	@ 0x30
 80099f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099fa:	4422      	add	r2, r4
 80099fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a04:	3302      	adds	r3, #2
 8009a06:	e7c7      	b.n	8009998 <_printf_common+0x58>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	4638      	mov	r0, r7
 8009a10:	47c8      	blx	r9
 8009a12:	3001      	adds	r0, #1
 8009a14:	d0e6      	beq.n	80099e4 <_printf_common+0xa4>
 8009a16:	3601      	adds	r6, #1
 8009a18:	e7d9      	b.n	80099ce <_printf_common+0x8e>
	...

08009a1c <_printf_i>:
 8009a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a20:	7e0f      	ldrb	r7, [r1, #24]
 8009a22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a24:	2f78      	cmp	r7, #120	@ 0x78
 8009a26:	4691      	mov	r9, r2
 8009a28:	4680      	mov	r8, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	469a      	mov	sl, r3
 8009a2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a32:	d807      	bhi.n	8009a44 <_printf_i+0x28>
 8009a34:	2f62      	cmp	r7, #98	@ 0x62
 8009a36:	d80a      	bhi.n	8009a4e <_printf_i+0x32>
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	f000 80d1 	beq.w	8009be0 <_printf_i+0x1c4>
 8009a3e:	2f58      	cmp	r7, #88	@ 0x58
 8009a40:	f000 80b8 	beq.w	8009bb4 <_printf_i+0x198>
 8009a44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a4c:	e03a      	b.n	8009ac4 <_printf_i+0xa8>
 8009a4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a52:	2b15      	cmp	r3, #21
 8009a54:	d8f6      	bhi.n	8009a44 <_printf_i+0x28>
 8009a56:	a101      	add	r1, pc, #4	@ (adr r1, 8009a5c <_printf_i+0x40>)
 8009a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a5c:	08009ab5 	.word	0x08009ab5
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009a45 	.word	0x08009a45
 8009a68:	08009a45 	.word	0x08009a45
 8009a6c:	08009a45 	.word	0x08009a45
 8009a70:	08009a45 	.word	0x08009a45
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009a45 	.word	0x08009a45
 8009a7c:	08009a45 	.word	0x08009a45
 8009a80:	08009a45 	.word	0x08009a45
 8009a84:	08009a45 	.word	0x08009a45
 8009a88:	08009bc7 	.word	0x08009bc7
 8009a8c:	08009af3 	.word	0x08009af3
 8009a90:	08009b81 	.word	0x08009b81
 8009a94:	08009a45 	.word	0x08009a45
 8009a98:	08009a45 	.word	0x08009a45
 8009a9c:	08009be9 	.word	0x08009be9
 8009aa0:	08009a45 	.word	0x08009a45
 8009aa4:	08009af3 	.word	0x08009af3
 8009aa8:	08009a45 	.word	0x08009a45
 8009aac:	08009a45 	.word	0x08009a45
 8009ab0:	08009b89 	.word	0x08009b89
 8009ab4:	6833      	ldr	r3, [r6, #0]
 8009ab6:	1d1a      	adds	r2, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6032      	str	r2, [r6, #0]
 8009abc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ac0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e09c      	b.n	8009c02 <_printf_i+0x1e6>
 8009ac8:	6833      	ldr	r3, [r6, #0]
 8009aca:	6820      	ldr	r0, [r4, #0]
 8009acc:	1d19      	adds	r1, r3, #4
 8009ace:	6031      	str	r1, [r6, #0]
 8009ad0:	0606      	lsls	r6, r0, #24
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_i+0xbc>
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	e003      	b.n	8009ae0 <_printf_i+0xc4>
 8009ad8:	0645      	lsls	r5, r0, #25
 8009ada:	d5fb      	bpl.n	8009ad4 <_printf_i+0xb8>
 8009adc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ae0:	2d00      	cmp	r5, #0
 8009ae2:	da03      	bge.n	8009aec <_printf_i+0xd0>
 8009ae4:	232d      	movs	r3, #45	@ 0x2d
 8009ae6:	426d      	negs	r5, r5
 8009ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aec:	4858      	ldr	r0, [pc, #352]	@ (8009c50 <_printf_i+0x234>)
 8009aee:	230a      	movs	r3, #10
 8009af0:	e011      	b.n	8009b16 <_printf_i+0xfa>
 8009af2:	6821      	ldr	r1, [r4, #0]
 8009af4:	6833      	ldr	r3, [r6, #0]
 8009af6:	0608      	lsls	r0, r1, #24
 8009af8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009afc:	d402      	bmi.n	8009b04 <_printf_i+0xe8>
 8009afe:	0649      	lsls	r1, r1, #25
 8009b00:	bf48      	it	mi
 8009b02:	b2ad      	uxthmi	r5, r5
 8009b04:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b06:	4852      	ldr	r0, [pc, #328]	@ (8009c50 <_printf_i+0x234>)
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	bf14      	ite	ne
 8009b0c:	230a      	movne	r3, #10
 8009b0e:	2308      	moveq	r3, #8
 8009b10:	2100      	movs	r1, #0
 8009b12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b16:	6866      	ldr	r6, [r4, #4]
 8009b18:	60a6      	str	r6, [r4, #8]
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	db05      	blt.n	8009b2a <_printf_i+0x10e>
 8009b1e:	6821      	ldr	r1, [r4, #0]
 8009b20:	432e      	orrs	r6, r5
 8009b22:	f021 0104 	bic.w	r1, r1, #4
 8009b26:	6021      	str	r1, [r4, #0]
 8009b28:	d04b      	beq.n	8009bc2 <_printf_i+0x1a6>
 8009b2a:	4616      	mov	r6, r2
 8009b2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b30:	fb03 5711 	mls	r7, r3, r1, r5
 8009b34:	5dc7      	ldrb	r7, [r0, r7]
 8009b36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b3a:	462f      	mov	r7, r5
 8009b3c:	42bb      	cmp	r3, r7
 8009b3e:	460d      	mov	r5, r1
 8009b40:	d9f4      	bls.n	8009b2c <_printf_i+0x110>
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	d10b      	bne.n	8009b5e <_printf_i+0x142>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	07df      	lsls	r7, r3, #31
 8009b4a:	d508      	bpl.n	8009b5e <_printf_i+0x142>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	6861      	ldr	r1, [r4, #4]
 8009b50:	4299      	cmp	r1, r3
 8009b52:	bfde      	ittt	le
 8009b54:	2330      	movle	r3, #48	@ 0x30
 8009b56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b5e:	1b92      	subs	r2, r2, r6
 8009b60:	6122      	str	r2, [r4, #16]
 8009b62:	f8cd a000 	str.w	sl, [sp]
 8009b66:	464b      	mov	r3, r9
 8009b68:	aa03      	add	r2, sp, #12
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	f7ff fee7 	bl	8009940 <_printf_common>
 8009b72:	3001      	adds	r0, #1
 8009b74:	d14a      	bne.n	8009c0c <_printf_i+0x1f0>
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	b004      	add	sp, #16
 8009b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	f043 0320 	orr.w	r3, r3, #32
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	4832      	ldr	r0, [pc, #200]	@ (8009c54 <_printf_i+0x238>)
 8009b8a:	2778      	movs	r7, #120	@ 0x78
 8009b8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	6831      	ldr	r1, [r6, #0]
 8009b94:	061f      	lsls	r7, r3, #24
 8009b96:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b9a:	d402      	bmi.n	8009ba2 <_printf_i+0x186>
 8009b9c:	065f      	lsls	r7, r3, #25
 8009b9e:	bf48      	it	mi
 8009ba0:	b2ad      	uxthmi	r5, r5
 8009ba2:	6031      	str	r1, [r6, #0]
 8009ba4:	07d9      	lsls	r1, r3, #31
 8009ba6:	bf44      	itt	mi
 8009ba8:	f043 0320 	orrmi.w	r3, r3, #32
 8009bac:	6023      	strmi	r3, [r4, #0]
 8009bae:	b11d      	cbz	r5, 8009bb8 <_printf_i+0x19c>
 8009bb0:	2310      	movs	r3, #16
 8009bb2:	e7ad      	b.n	8009b10 <_printf_i+0xf4>
 8009bb4:	4826      	ldr	r0, [pc, #152]	@ (8009c50 <_printf_i+0x234>)
 8009bb6:	e7e9      	b.n	8009b8c <_printf_i+0x170>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	f023 0320 	bic.w	r3, r3, #32
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	e7f6      	b.n	8009bb0 <_printf_i+0x194>
 8009bc2:	4616      	mov	r6, r2
 8009bc4:	e7bd      	b.n	8009b42 <_printf_i+0x126>
 8009bc6:	6833      	ldr	r3, [r6, #0]
 8009bc8:	6825      	ldr	r5, [r4, #0]
 8009bca:	6961      	ldr	r1, [r4, #20]
 8009bcc:	1d18      	adds	r0, r3, #4
 8009bce:	6030      	str	r0, [r6, #0]
 8009bd0:	062e      	lsls	r6, r5, #24
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	d501      	bpl.n	8009bda <_printf_i+0x1be>
 8009bd6:	6019      	str	r1, [r3, #0]
 8009bd8:	e002      	b.n	8009be0 <_printf_i+0x1c4>
 8009bda:	0668      	lsls	r0, r5, #25
 8009bdc:	d5fb      	bpl.n	8009bd6 <_printf_i+0x1ba>
 8009bde:	8019      	strh	r1, [r3, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	4616      	mov	r6, r2
 8009be6:	e7bc      	b.n	8009b62 <_printf_i+0x146>
 8009be8:	6833      	ldr	r3, [r6, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	6032      	str	r2, [r6, #0]
 8009bee:	681e      	ldr	r6, [r3, #0]
 8009bf0:	6862      	ldr	r2, [r4, #4]
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7f6 fafb 	bl	80001f0 <memchr>
 8009bfa:	b108      	cbz	r0, 8009c00 <_printf_i+0x1e4>
 8009bfc:	1b80      	subs	r0, r0, r6
 8009bfe:	6060      	str	r0, [r4, #4]
 8009c00:	6863      	ldr	r3, [r4, #4]
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	2300      	movs	r3, #0
 8009c06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c0a:	e7aa      	b.n	8009b62 <_printf_i+0x146>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4649      	mov	r1, r9
 8009c12:	4640      	mov	r0, r8
 8009c14:	47d0      	blx	sl
 8009c16:	3001      	adds	r0, #1
 8009c18:	d0ad      	beq.n	8009b76 <_printf_i+0x15a>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	079b      	lsls	r3, r3, #30
 8009c1e:	d413      	bmi.n	8009c48 <_printf_i+0x22c>
 8009c20:	68e0      	ldr	r0, [r4, #12]
 8009c22:	9b03      	ldr	r3, [sp, #12]
 8009c24:	4298      	cmp	r0, r3
 8009c26:	bfb8      	it	lt
 8009c28:	4618      	movlt	r0, r3
 8009c2a:	e7a6      	b.n	8009b7a <_printf_i+0x15e>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4632      	mov	r2, r6
 8009c30:	4649      	mov	r1, r9
 8009c32:	4640      	mov	r0, r8
 8009c34:	47d0      	blx	sl
 8009c36:	3001      	adds	r0, #1
 8009c38:	d09d      	beq.n	8009b76 <_printf_i+0x15a>
 8009c3a:	3501      	adds	r5, #1
 8009c3c:	68e3      	ldr	r3, [r4, #12]
 8009c3e:	9903      	ldr	r1, [sp, #12]
 8009c40:	1a5b      	subs	r3, r3, r1
 8009c42:	42ab      	cmp	r3, r5
 8009c44:	dcf2      	bgt.n	8009c2c <_printf_i+0x210>
 8009c46:	e7eb      	b.n	8009c20 <_printf_i+0x204>
 8009c48:	2500      	movs	r5, #0
 8009c4a:	f104 0619 	add.w	r6, r4, #25
 8009c4e:	e7f5      	b.n	8009c3c <_printf_i+0x220>
 8009c50:	0800db50 	.word	0x0800db50
 8009c54:	0800db61 	.word	0x0800db61

08009c58 <_scanf_float>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	b087      	sub	sp, #28
 8009c5e:	4691      	mov	r9, r2
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	688b      	ldr	r3, [r1, #8]
 8009c64:	1e5a      	subs	r2, r3, #1
 8009c66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009c6a:	bf81      	itttt	hi
 8009c6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009c70:	eb03 0b05 	addhi.w	fp, r3, r5
 8009c74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009c78:	608b      	strhi	r3, [r1, #8]
 8009c7a:	680b      	ldr	r3, [r1, #0]
 8009c7c:	460a      	mov	r2, r1
 8009c7e:	f04f 0500 	mov.w	r5, #0
 8009c82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009c86:	f842 3b1c 	str.w	r3, [r2], #28
 8009c8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c8e:	4680      	mov	r8, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	bf98      	it	ls
 8009c94:	f04f 0b00 	movls.w	fp, #0
 8009c98:	9201      	str	r2, [sp, #4]
 8009c9a:	4616      	mov	r6, r2
 8009c9c:	46aa      	mov	sl, r5
 8009c9e:	462f      	mov	r7, r5
 8009ca0:	9502      	str	r5, [sp, #8]
 8009ca2:	68a2      	ldr	r2, [r4, #8]
 8009ca4:	b15a      	cbz	r2, 8009cbe <_scanf_float+0x66>
 8009ca6:	f8d9 3000 	ldr.w	r3, [r9]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b4e      	cmp	r3, #78	@ 0x4e
 8009cae:	d863      	bhi.n	8009d78 <_scanf_float+0x120>
 8009cb0:	2b40      	cmp	r3, #64	@ 0x40
 8009cb2:	d83b      	bhi.n	8009d2c <_scanf_float+0xd4>
 8009cb4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009cb8:	b2c8      	uxtb	r0, r1
 8009cba:	280e      	cmp	r0, #14
 8009cbc:	d939      	bls.n	8009d32 <_scanf_float+0xda>
 8009cbe:	b11f      	cbz	r7, 8009cc8 <_scanf_float+0x70>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ccc:	f1ba 0f01 	cmp.w	sl, #1
 8009cd0:	f200 8114 	bhi.w	8009efc <_scanf_float+0x2a4>
 8009cd4:	9b01      	ldr	r3, [sp, #4]
 8009cd6:	429e      	cmp	r6, r3
 8009cd8:	f200 8105 	bhi.w	8009ee6 <_scanf_float+0x28e>
 8009cdc:	2001      	movs	r0, #1
 8009cde:	b007      	add	sp, #28
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009ce8:	2a0d      	cmp	r2, #13
 8009cea:	d8e8      	bhi.n	8009cbe <_scanf_float+0x66>
 8009cec:	a101      	add	r1, pc, #4	@ (adr r1, 8009cf4 <_scanf_float+0x9c>)
 8009cee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009e3d 	.word	0x08009e3d
 8009cf8:	08009cbf 	.word	0x08009cbf
 8009cfc:	08009cbf 	.word	0x08009cbf
 8009d00:	08009cbf 	.word	0x08009cbf
 8009d04:	08009e99 	.word	0x08009e99
 8009d08:	08009e73 	.word	0x08009e73
 8009d0c:	08009cbf 	.word	0x08009cbf
 8009d10:	08009cbf 	.word	0x08009cbf
 8009d14:	08009e4b 	.word	0x08009e4b
 8009d18:	08009cbf 	.word	0x08009cbf
 8009d1c:	08009cbf 	.word	0x08009cbf
 8009d20:	08009cbf 	.word	0x08009cbf
 8009d24:	08009cbf 	.word	0x08009cbf
 8009d28:	08009e07 	.word	0x08009e07
 8009d2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009d30:	e7da      	b.n	8009ce8 <_scanf_float+0x90>
 8009d32:	290e      	cmp	r1, #14
 8009d34:	d8c3      	bhi.n	8009cbe <_scanf_float+0x66>
 8009d36:	a001      	add	r0, pc, #4	@ (adr r0, 8009d3c <_scanf_float+0xe4>)
 8009d38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d3c:	08009df7 	.word	0x08009df7
 8009d40:	08009cbf 	.word	0x08009cbf
 8009d44:	08009df7 	.word	0x08009df7
 8009d48:	08009e87 	.word	0x08009e87
 8009d4c:	08009cbf 	.word	0x08009cbf
 8009d50:	08009d99 	.word	0x08009d99
 8009d54:	08009ddd 	.word	0x08009ddd
 8009d58:	08009ddd 	.word	0x08009ddd
 8009d5c:	08009ddd 	.word	0x08009ddd
 8009d60:	08009ddd 	.word	0x08009ddd
 8009d64:	08009ddd 	.word	0x08009ddd
 8009d68:	08009ddd 	.word	0x08009ddd
 8009d6c:	08009ddd 	.word	0x08009ddd
 8009d70:	08009ddd 	.word	0x08009ddd
 8009d74:	08009ddd 	.word	0x08009ddd
 8009d78:	2b6e      	cmp	r3, #110	@ 0x6e
 8009d7a:	d809      	bhi.n	8009d90 <_scanf_float+0x138>
 8009d7c:	2b60      	cmp	r3, #96	@ 0x60
 8009d7e:	d8b1      	bhi.n	8009ce4 <_scanf_float+0x8c>
 8009d80:	2b54      	cmp	r3, #84	@ 0x54
 8009d82:	d07b      	beq.n	8009e7c <_scanf_float+0x224>
 8009d84:	2b59      	cmp	r3, #89	@ 0x59
 8009d86:	d19a      	bne.n	8009cbe <_scanf_float+0x66>
 8009d88:	2d07      	cmp	r5, #7
 8009d8a:	d198      	bne.n	8009cbe <_scanf_float+0x66>
 8009d8c:	2508      	movs	r5, #8
 8009d8e:	e02f      	b.n	8009df0 <_scanf_float+0x198>
 8009d90:	2b74      	cmp	r3, #116	@ 0x74
 8009d92:	d073      	beq.n	8009e7c <_scanf_float+0x224>
 8009d94:	2b79      	cmp	r3, #121	@ 0x79
 8009d96:	e7f6      	b.n	8009d86 <_scanf_float+0x12e>
 8009d98:	6821      	ldr	r1, [r4, #0]
 8009d9a:	05c8      	lsls	r0, r1, #23
 8009d9c:	d51e      	bpl.n	8009ddc <_scanf_float+0x184>
 8009d9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009da2:	6021      	str	r1, [r4, #0]
 8009da4:	3701      	adds	r7, #1
 8009da6:	f1bb 0f00 	cmp.w	fp, #0
 8009daa:	d003      	beq.n	8009db4 <_scanf_float+0x15c>
 8009dac:	3201      	adds	r2, #1
 8009dae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009db2:	60a2      	str	r2, [r4, #8]
 8009db4:	68a3      	ldr	r3, [r4, #8]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	60a3      	str	r3, [r4, #8]
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f8c9 3004 	str.w	r3, [r9, #4]
 8009dcc:	f340 8082 	ble.w	8009ed4 <_scanf_float+0x27c>
 8009dd0:	f8d9 3000 	ldr.w	r3, [r9]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	f8c9 3000 	str.w	r3, [r9]
 8009dda:	e762      	b.n	8009ca2 <_scanf_float+0x4a>
 8009ddc:	eb1a 0105 	adds.w	r1, sl, r5
 8009de0:	f47f af6d 	bne.w	8009cbe <_scanf_float+0x66>
 8009de4:	6822      	ldr	r2, [r4, #0]
 8009de6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	460d      	mov	r5, r1
 8009dee:	468a      	mov	sl, r1
 8009df0:	f806 3b01 	strb.w	r3, [r6], #1
 8009df4:	e7de      	b.n	8009db4 <_scanf_float+0x15c>
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	0610      	lsls	r0, r2, #24
 8009dfa:	f57f af60 	bpl.w	8009cbe <_scanf_float+0x66>
 8009dfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e02:	6022      	str	r2, [r4, #0]
 8009e04:	e7f4      	b.n	8009df0 <_scanf_float+0x198>
 8009e06:	f1ba 0f00 	cmp.w	sl, #0
 8009e0a:	d10c      	bne.n	8009e26 <_scanf_float+0x1ce>
 8009e0c:	b977      	cbnz	r7, 8009e2c <_scanf_float+0x1d4>
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e18:	d108      	bne.n	8009e2c <_scanf_float+0x1d4>
 8009e1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e1e:	6022      	str	r2, [r4, #0]
 8009e20:	f04f 0a01 	mov.w	sl, #1
 8009e24:	e7e4      	b.n	8009df0 <_scanf_float+0x198>
 8009e26:	f1ba 0f02 	cmp.w	sl, #2
 8009e2a:	d050      	beq.n	8009ece <_scanf_float+0x276>
 8009e2c:	2d01      	cmp	r5, #1
 8009e2e:	d002      	beq.n	8009e36 <_scanf_float+0x1de>
 8009e30:	2d04      	cmp	r5, #4
 8009e32:	f47f af44 	bne.w	8009cbe <_scanf_float+0x66>
 8009e36:	3501      	adds	r5, #1
 8009e38:	b2ed      	uxtb	r5, r5
 8009e3a:	e7d9      	b.n	8009df0 <_scanf_float+0x198>
 8009e3c:	f1ba 0f01 	cmp.w	sl, #1
 8009e40:	f47f af3d 	bne.w	8009cbe <_scanf_float+0x66>
 8009e44:	f04f 0a02 	mov.w	sl, #2
 8009e48:	e7d2      	b.n	8009df0 <_scanf_float+0x198>
 8009e4a:	b975      	cbnz	r5, 8009e6a <_scanf_float+0x212>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	f47f af37 	bne.w	8009cc0 <_scanf_float+0x68>
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e5c:	f040 8103 	bne.w	800a066 <_scanf_float+0x40e>
 8009e60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e64:	6022      	str	r2, [r4, #0]
 8009e66:	2501      	movs	r5, #1
 8009e68:	e7c2      	b.n	8009df0 <_scanf_float+0x198>
 8009e6a:	2d03      	cmp	r5, #3
 8009e6c:	d0e3      	beq.n	8009e36 <_scanf_float+0x1de>
 8009e6e:	2d05      	cmp	r5, #5
 8009e70:	e7df      	b.n	8009e32 <_scanf_float+0x1da>
 8009e72:	2d02      	cmp	r5, #2
 8009e74:	f47f af23 	bne.w	8009cbe <_scanf_float+0x66>
 8009e78:	2503      	movs	r5, #3
 8009e7a:	e7b9      	b.n	8009df0 <_scanf_float+0x198>
 8009e7c:	2d06      	cmp	r5, #6
 8009e7e:	f47f af1e 	bne.w	8009cbe <_scanf_float+0x66>
 8009e82:	2507      	movs	r5, #7
 8009e84:	e7b4      	b.n	8009df0 <_scanf_float+0x198>
 8009e86:	6822      	ldr	r2, [r4, #0]
 8009e88:	0591      	lsls	r1, r2, #22
 8009e8a:	f57f af18 	bpl.w	8009cbe <_scanf_float+0x66>
 8009e8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009e92:	6022      	str	r2, [r4, #0]
 8009e94:	9702      	str	r7, [sp, #8]
 8009e96:	e7ab      	b.n	8009df0 <_scanf_float+0x198>
 8009e98:	6822      	ldr	r2, [r4, #0]
 8009e9a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009e9e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009ea2:	d005      	beq.n	8009eb0 <_scanf_float+0x258>
 8009ea4:	0550      	lsls	r0, r2, #21
 8009ea6:	f57f af0a 	bpl.w	8009cbe <_scanf_float+0x66>
 8009eaa:	2f00      	cmp	r7, #0
 8009eac:	f000 80db 	beq.w	800a066 <_scanf_float+0x40e>
 8009eb0:	0591      	lsls	r1, r2, #22
 8009eb2:	bf58      	it	pl
 8009eb4:	9902      	ldrpl	r1, [sp, #8]
 8009eb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009eba:	bf58      	it	pl
 8009ebc:	1a79      	subpl	r1, r7, r1
 8009ebe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009ec2:	bf58      	it	pl
 8009ec4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ec8:	6022      	str	r2, [r4, #0]
 8009eca:	2700      	movs	r7, #0
 8009ecc:	e790      	b.n	8009df0 <_scanf_float+0x198>
 8009ece:	f04f 0a03 	mov.w	sl, #3
 8009ed2:	e78d      	b.n	8009df0 <_scanf_float+0x198>
 8009ed4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4640      	mov	r0, r8
 8009edc:	4798      	blx	r3
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f43f aedf 	beq.w	8009ca2 <_scanf_float+0x4a>
 8009ee4:	e6eb      	b.n	8009cbe <_scanf_float+0x66>
 8009ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009eea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009eee:	464a      	mov	r2, r9
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4798      	blx	r3
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	e6eb      	b.n	8009cd4 <_scanf_float+0x7c>
 8009efc:	1e6b      	subs	r3, r5, #1
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d824      	bhi.n	8009f4c <_scanf_float+0x2f4>
 8009f02:	2d02      	cmp	r5, #2
 8009f04:	d836      	bhi.n	8009f74 <_scanf_float+0x31c>
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	429e      	cmp	r6, r3
 8009f0a:	f67f aee7 	bls.w	8009cdc <_scanf_float+0x84>
 8009f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f16:	464a      	mov	r2, r9
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4798      	blx	r3
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	6123      	str	r3, [r4, #16]
 8009f22:	e7f0      	b.n	8009f06 <_scanf_float+0x2ae>
 8009f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009f2c:	464a      	mov	r2, r9
 8009f2e:	4640      	mov	r0, r8
 8009f30:	4798      	blx	r3
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8009f40:	f1ba 0f02 	cmp.w	sl, #2
 8009f44:	d1ee      	bne.n	8009f24 <_scanf_float+0x2cc>
 8009f46:	3d03      	subs	r5, #3
 8009f48:	b2ed      	uxtb	r5, r5
 8009f4a:	1b76      	subs	r6, r6, r5
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	05da      	lsls	r2, r3, #23
 8009f50:	d530      	bpl.n	8009fb4 <_scanf_float+0x35c>
 8009f52:	055b      	lsls	r3, r3, #21
 8009f54:	d511      	bpl.n	8009f7a <_scanf_float+0x322>
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	429e      	cmp	r6, r3
 8009f5a:	f67f aebf 	bls.w	8009cdc <_scanf_float+0x84>
 8009f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f66:	464a      	mov	r2, r9
 8009f68:	4640      	mov	r0, r8
 8009f6a:	4798      	blx	r3
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	6123      	str	r3, [r4, #16]
 8009f72:	e7f0      	b.n	8009f56 <_scanf_float+0x2fe>
 8009f74:	46aa      	mov	sl, r5
 8009f76:	46b3      	mov	fp, r6
 8009f78:	e7de      	b.n	8009f38 <_scanf_float+0x2e0>
 8009f7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	2965      	cmp	r1, #101	@ 0x65
 8009f82:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f86:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	d00c      	beq.n	8009fa8 <_scanf_float+0x350>
 8009f8e:	2945      	cmp	r1, #69	@ 0x45
 8009f90:	d00a      	beq.n	8009fa8 <_scanf_float+0x350>
 8009f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f96:	464a      	mov	r2, r9
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4798      	blx	r3
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	1eb5      	subs	r5, r6, #2
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fac:	464a      	mov	r2, r9
 8009fae:	4640      	mov	r0, r8
 8009fb0:	4798      	blx	r3
 8009fb2:	462e      	mov	r6, r5
 8009fb4:	6822      	ldr	r2, [r4, #0]
 8009fb6:	f012 0210 	ands.w	r2, r2, #16
 8009fba:	d001      	beq.n	8009fc0 <_scanf_float+0x368>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e68e      	b.n	8009cde <_scanf_float+0x86>
 8009fc0:	7032      	strb	r2, [r6, #0]
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fcc:	d125      	bne.n	800a01a <_scanf_float+0x3c2>
 8009fce:	9b02      	ldr	r3, [sp, #8]
 8009fd0:	429f      	cmp	r7, r3
 8009fd2:	d00a      	beq.n	8009fea <_scanf_float+0x392>
 8009fd4:	1bda      	subs	r2, r3, r7
 8009fd6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009fda:	429e      	cmp	r6, r3
 8009fdc:	bf28      	it	cs
 8009fde:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009fe2:	4922      	ldr	r1, [pc, #136]	@ (800a06c <_scanf_float+0x414>)
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 f907 	bl	800a1f8 <siprintf>
 8009fea:	9901      	ldr	r1, [sp, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	4640      	mov	r0, r8
 8009ff0:	f002 fb4e 	bl	800c690 <_strtod_r>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	6821      	ldr	r1, [r4, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f011 0f02 	tst.w	r1, #2
 8009ffe:	ec57 6b10 	vmov	r6, r7, d0
 800a002:	f103 0204 	add.w	r2, r3, #4
 800a006:	d015      	beq.n	800a034 <_scanf_float+0x3dc>
 800a008:	9903      	ldr	r1, [sp, #12]
 800a00a:	600a      	str	r2, [r1, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	e9c3 6700 	strd	r6, r7, [r3]
 800a012:	68e3      	ldr	r3, [r4, #12]
 800a014:	3301      	adds	r3, #1
 800a016:	60e3      	str	r3, [r4, #12]
 800a018:	e7d0      	b.n	8009fbc <_scanf_float+0x364>
 800a01a:	9b04      	ldr	r3, [sp, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0e4      	beq.n	8009fea <_scanf_float+0x392>
 800a020:	9905      	ldr	r1, [sp, #20]
 800a022:	230a      	movs	r3, #10
 800a024:	3101      	adds	r1, #1
 800a026:	4640      	mov	r0, r8
 800a028:	f002 fbb2 	bl	800c790 <_strtol_r>
 800a02c:	9b04      	ldr	r3, [sp, #16]
 800a02e:	9e05      	ldr	r6, [sp, #20]
 800a030:	1ac2      	subs	r2, r0, r3
 800a032:	e7d0      	b.n	8009fd6 <_scanf_float+0x37e>
 800a034:	f011 0f04 	tst.w	r1, #4
 800a038:	9903      	ldr	r1, [sp, #12]
 800a03a:	600a      	str	r2, [r1, #0]
 800a03c:	d1e6      	bne.n	800a00c <_scanf_float+0x3b4>
 800a03e:	681d      	ldr	r5, [r3, #0]
 800a040:	4632      	mov	r2, r6
 800a042:	463b      	mov	r3, r7
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 fd80 	bl	8000b4c <__aeabi_dcmpun>
 800a04c:	b128      	cbz	r0, 800a05a <_scanf_float+0x402>
 800a04e:	4808      	ldr	r0, [pc, #32]	@ (800a070 <_scanf_float+0x418>)
 800a050:	f000 f9c8 	bl	800a3e4 <nanf>
 800a054:	ed85 0a00 	vstr	s0, [r5]
 800a058:	e7db      	b.n	800a012 <_scanf_float+0x3ba>
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 fdd3 	bl	8000c08 <__aeabi_d2f>
 800a062:	6028      	str	r0, [r5, #0]
 800a064:	e7d5      	b.n	800a012 <_scanf_float+0x3ba>
 800a066:	2700      	movs	r7, #0
 800a068:	e62e      	b.n	8009cc8 <_scanf_float+0x70>
 800a06a:	bf00      	nop
 800a06c:	0800db72 	.word	0x0800db72
 800a070:	0800dcb3 	.word	0x0800dcb3

0800a074 <std>:
 800a074:	2300      	movs	r3, #0
 800a076:	b510      	push	{r4, lr}
 800a078:	4604      	mov	r4, r0
 800a07a:	e9c0 3300 	strd	r3, r3, [r0]
 800a07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a082:	6083      	str	r3, [r0, #8]
 800a084:	8181      	strh	r1, [r0, #12]
 800a086:	6643      	str	r3, [r0, #100]	@ 0x64
 800a088:	81c2      	strh	r2, [r0, #14]
 800a08a:	6183      	str	r3, [r0, #24]
 800a08c:	4619      	mov	r1, r3
 800a08e:	2208      	movs	r2, #8
 800a090:	305c      	adds	r0, #92	@ 0x5c
 800a092:	f000 f916 	bl	800a2c2 <memset>
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <std+0x58>)
 800a098:	6263      	str	r3, [r4, #36]	@ 0x24
 800a09a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d0 <std+0x5c>)
 800a09c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a09e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <std+0x60>)
 800a0a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <std+0x64>)
 800a0a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0dc <std+0x68>)
 800a0a8:	6224      	str	r4, [r4, #32]
 800a0aa:	429c      	cmp	r4, r3
 800a0ac:	d006      	beq.n	800a0bc <std+0x48>
 800a0ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0b2:	4294      	cmp	r4, r2
 800a0b4:	d002      	beq.n	800a0bc <std+0x48>
 800a0b6:	33d0      	adds	r3, #208	@ 0xd0
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	d105      	bne.n	800a0c8 <std+0x54>
 800a0bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c4:	f000 b98a 	b.w	800a3dc <__retarget_lock_init_recursive>
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	bf00      	nop
 800a0cc:	0800a23d 	.word	0x0800a23d
 800a0d0:	0800a25f 	.word	0x0800a25f
 800a0d4:	0800a297 	.word	0x0800a297
 800a0d8:	0800a2bb 	.word	0x0800a2bb
 800a0dc:	200007b8 	.word	0x200007b8

0800a0e0 <stdio_exit_handler>:
 800a0e0:	4a02      	ldr	r2, [pc, #8]	@ (800a0ec <stdio_exit_handler+0xc>)
 800a0e2:	4903      	ldr	r1, [pc, #12]	@ (800a0f0 <stdio_exit_handler+0x10>)
 800a0e4:	4803      	ldr	r0, [pc, #12]	@ (800a0f4 <stdio_exit_handler+0x14>)
 800a0e6:	f000 b869 	b.w	800a1bc <_fwalk_sglue>
 800a0ea:	bf00      	nop
 800a0ec:	200001d8 	.word	0x200001d8
 800a0f0:	0800cb4d 	.word	0x0800cb4d
 800a0f4:	200001e8 	.word	0x200001e8

0800a0f8 <cleanup_stdio>:
 800a0f8:	6841      	ldr	r1, [r0, #4]
 800a0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a12c <cleanup_stdio+0x34>)
 800a0fc:	4299      	cmp	r1, r3
 800a0fe:	b510      	push	{r4, lr}
 800a100:	4604      	mov	r4, r0
 800a102:	d001      	beq.n	800a108 <cleanup_stdio+0x10>
 800a104:	f002 fd22 	bl	800cb4c <_fflush_r>
 800a108:	68a1      	ldr	r1, [r4, #8]
 800a10a:	4b09      	ldr	r3, [pc, #36]	@ (800a130 <cleanup_stdio+0x38>)
 800a10c:	4299      	cmp	r1, r3
 800a10e:	d002      	beq.n	800a116 <cleanup_stdio+0x1e>
 800a110:	4620      	mov	r0, r4
 800a112:	f002 fd1b 	bl	800cb4c <_fflush_r>
 800a116:	68e1      	ldr	r1, [r4, #12]
 800a118:	4b06      	ldr	r3, [pc, #24]	@ (800a134 <cleanup_stdio+0x3c>)
 800a11a:	4299      	cmp	r1, r3
 800a11c:	d004      	beq.n	800a128 <cleanup_stdio+0x30>
 800a11e:	4620      	mov	r0, r4
 800a120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a124:	f002 bd12 	b.w	800cb4c <_fflush_r>
 800a128:	bd10      	pop	{r4, pc}
 800a12a:	bf00      	nop
 800a12c:	200007b8 	.word	0x200007b8
 800a130:	20000820 	.word	0x20000820
 800a134:	20000888 	.word	0x20000888

0800a138 <global_stdio_init.part.0>:
 800a138:	b510      	push	{r4, lr}
 800a13a:	4b0b      	ldr	r3, [pc, #44]	@ (800a168 <global_stdio_init.part.0+0x30>)
 800a13c:	4c0b      	ldr	r4, [pc, #44]	@ (800a16c <global_stdio_init.part.0+0x34>)
 800a13e:	4a0c      	ldr	r2, [pc, #48]	@ (800a170 <global_stdio_init.part.0+0x38>)
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	4620      	mov	r0, r4
 800a144:	2200      	movs	r2, #0
 800a146:	2104      	movs	r1, #4
 800a148:	f7ff ff94 	bl	800a074 <std>
 800a14c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a150:	2201      	movs	r2, #1
 800a152:	2109      	movs	r1, #9
 800a154:	f7ff ff8e 	bl	800a074 <std>
 800a158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a15c:	2202      	movs	r2, #2
 800a15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a162:	2112      	movs	r1, #18
 800a164:	f7ff bf86 	b.w	800a074 <std>
 800a168:	200008f0 	.word	0x200008f0
 800a16c:	200007b8 	.word	0x200007b8
 800a170:	0800a0e1 	.word	0x0800a0e1

0800a174 <__sfp_lock_acquire>:
 800a174:	4801      	ldr	r0, [pc, #4]	@ (800a17c <__sfp_lock_acquire+0x8>)
 800a176:	f000 b932 	b.w	800a3de <__retarget_lock_acquire_recursive>
 800a17a:	bf00      	nop
 800a17c:	200008f9 	.word	0x200008f9

0800a180 <__sfp_lock_release>:
 800a180:	4801      	ldr	r0, [pc, #4]	@ (800a188 <__sfp_lock_release+0x8>)
 800a182:	f000 b92d 	b.w	800a3e0 <__retarget_lock_release_recursive>
 800a186:	bf00      	nop
 800a188:	200008f9 	.word	0x200008f9

0800a18c <__sinit>:
 800a18c:	b510      	push	{r4, lr}
 800a18e:	4604      	mov	r4, r0
 800a190:	f7ff fff0 	bl	800a174 <__sfp_lock_acquire>
 800a194:	6a23      	ldr	r3, [r4, #32]
 800a196:	b11b      	cbz	r3, 800a1a0 <__sinit+0x14>
 800a198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a19c:	f7ff bff0 	b.w	800a180 <__sfp_lock_release>
 800a1a0:	4b04      	ldr	r3, [pc, #16]	@ (800a1b4 <__sinit+0x28>)
 800a1a2:	6223      	str	r3, [r4, #32]
 800a1a4:	4b04      	ldr	r3, [pc, #16]	@ (800a1b8 <__sinit+0x2c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1f5      	bne.n	800a198 <__sinit+0xc>
 800a1ac:	f7ff ffc4 	bl	800a138 <global_stdio_init.part.0>
 800a1b0:	e7f2      	b.n	800a198 <__sinit+0xc>
 800a1b2:	bf00      	nop
 800a1b4:	0800a0f9 	.word	0x0800a0f9
 800a1b8:	200008f0 	.word	0x200008f0

0800a1bc <_fwalk_sglue>:
 800a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	4688      	mov	r8, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	2600      	movs	r6, #0
 800a1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a1d0:	d505      	bpl.n	800a1de <_fwalk_sglue+0x22>
 800a1d2:	6824      	ldr	r4, [r4, #0]
 800a1d4:	2c00      	cmp	r4, #0
 800a1d6:	d1f7      	bne.n	800a1c8 <_fwalk_sglue+0xc>
 800a1d8:	4630      	mov	r0, r6
 800a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d907      	bls.n	800a1f4 <_fwalk_sglue+0x38>
 800a1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	d003      	beq.n	800a1f4 <_fwalk_sglue+0x38>
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	47c0      	blx	r8
 800a1f2:	4306      	orrs	r6, r0
 800a1f4:	3568      	adds	r5, #104	@ 0x68
 800a1f6:	e7e9      	b.n	800a1cc <_fwalk_sglue+0x10>

0800a1f8 <siprintf>:
 800a1f8:	b40e      	push	{r1, r2, r3}
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	b09d      	sub	sp, #116	@ 0x74
 800a1fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a200:	9002      	str	r0, [sp, #8]
 800a202:	9006      	str	r0, [sp, #24]
 800a204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a208:	480a      	ldr	r0, [pc, #40]	@ (800a234 <siprintf+0x3c>)
 800a20a:	9107      	str	r1, [sp, #28]
 800a20c:	9104      	str	r1, [sp, #16]
 800a20e:	490a      	ldr	r1, [pc, #40]	@ (800a238 <siprintf+0x40>)
 800a210:	f853 2b04 	ldr.w	r2, [r3], #4
 800a214:	9105      	str	r1, [sp, #20]
 800a216:	2400      	movs	r4, #0
 800a218:	a902      	add	r1, sp, #8
 800a21a:	6800      	ldr	r0, [r0, #0]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a220:	f002 fb14 	bl	800c84c <_svfiprintf_r>
 800a224:	9b02      	ldr	r3, [sp, #8]
 800a226:	701c      	strb	r4, [r3, #0]
 800a228:	b01d      	add	sp, #116	@ 0x74
 800a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22e:	b003      	add	sp, #12
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	200001e4 	.word	0x200001e4
 800a238:	ffff0208 	.word	0xffff0208

0800a23c <__sread>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	460c      	mov	r4, r1
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	f000 f86c 	bl	800a320 <_read_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	bfab      	itete	ge
 800a24c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a24e:	89a3      	ldrhlt	r3, [r4, #12]
 800a250:	181b      	addge	r3, r3, r0
 800a252:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a256:	bfac      	ite	ge
 800a258:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a25a:	81a3      	strhlt	r3, [r4, #12]
 800a25c:	bd10      	pop	{r4, pc}

0800a25e <__swrite>:
 800a25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a262:	461f      	mov	r7, r3
 800a264:	898b      	ldrh	r3, [r1, #12]
 800a266:	05db      	lsls	r3, r3, #23
 800a268:	4605      	mov	r5, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	4616      	mov	r6, r2
 800a26e:	d505      	bpl.n	800a27c <__swrite+0x1e>
 800a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a274:	2302      	movs	r3, #2
 800a276:	2200      	movs	r2, #0
 800a278:	f000 f840 	bl	800a2fc <_lseek_r>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	4632      	mov	r2, r6
 800a28a:	463b      	mov	r3, r7
 800a28c:	4628      	mov	r0, r5
 800a28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a292:	f000 b867 	b.w	800a364 <_write_r>

0800a296 <__sseek>:
 800a296:	b510      	push	{r4, lr}
 800a298:	460c      	mov	r4, r1
 800a29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29e:	f000 f82d 	bl	800a2fc <_lseek_r>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	bf15      	itete	ne
 800a2a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2b2:	81a3      	strheq	r3, [r4, #12]
 800a2b4:	bf18      	it	ne
 800a2b6:	81a3      	strhne	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__sclose>:
 800a2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2be:	f000 b80d 	b.w	800a2dc <_close_r>

0800a2c2 <memset>:
 800a2c2:	4402      	add	r2, r0
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d100      	bne.n	800a2cc <memset+0xa>
 800a2ca:	4770      	bx	lr
 800a2cc:	f803 1b01 	strb.w	r1, [r3], #1
 800a2d0:	e7f9      	b.n	800a2c6 <memset+0x4>
	...

0800a2d4 <_localeconv_r>:
 800a2d4:	4800      	ldr	r0, [pc, #0]	@ (800a2d8 <_localeconv_r+0x4>)
 800a2d6:	4770      	bx	lr
 800a2d8:	20000324 	.word	0x20000324

0800a2dc <_close_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4d06      	ldr	r5, [pc, #24]	@ (800a2f8 <_close_r+0x1c>)
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	f7f7 fd94 	bl	8001e14 <_close>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_close_r+0x1a>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_close_r+0x1a>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	200008f4 	.word	0x200008f4

0800a2fc <_lseek_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	@ (800a31c <_lseek_r+0x20>)
 800a300:	4604      	mov	r4, r0
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	2200      	movs	r2, #0
 800a308:	602a      	str	r2, [r5, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f7f7 fda9 	bl	8001e62 <_lseek>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_lseek_r+0x1e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_lseek_r+0x1e>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	200008f4 	.word	0x200008f4

0800a320 <_read_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d07      	ldr	r5, [pc, #28]	@ (800a340 <_read_r+0x20>)
 800a324:	4604      	mov	r4, r0
 800a326:	4608      	mov	r0, r1
 800a328:	4611      	mov	r1, r2
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7f7 fd37 	bl	8001da2 <_read>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_read_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_read_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	200008f4 	.word	0x200008f4

0800a344 <_sbrk_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d06      	ldr	r5, [pc, #24]	@ (800a360 <_sbrk_r+0x1c>)
 800a348:	2300      	movs	r3, #0
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f7 fd94 	bl	8001e7c <_sbrk>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_sbrk_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_sbrk_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	200008f4 	.word	0x200008f4

0800a364 <_write_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d07      	ldr	r5, [pc, #28]	@ (800a384 <_write_r+0x20>)
 800a368:	4604      	mov	r4, r0
 800a36a:	4608      	mov	r0, r1
 800a36c:	4611      	mov	r1, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f7 fd32 	bl	8001ddc <_write>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_write_r+0x1e>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_write_r+0x1e>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200008f4 	.word	0x200008f4

0800a388 <__errno>:
 800a388:	4b01      	ldr	r3, [pc, #4]	@ (800a390 <__errno+0x8>)
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	200001e4 	.word	0x200001e4

0800a394 <__libc_init_array>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	4d0d      	ldr	r5, [pc, #52]	@ (800a3cc <__libc_init_array+0x38>)
 800a398:	4c0d      	ldr	r4, [pc, #52]	@ (800a3d0 <__libc_init_array+0x3c>)
 800a39a:	1b64      	subs	r4, r4, r5
 800a39c:	10a4      	asrs	r4, r4, #2
 800a39e:	2600      	movs	r6, #0
 800a3a0:	42a6      	cmp	r6, r4
 800a3a2:	d109      	bne.n	800a3b8 <__libc_init_array+0x24>
 800a3a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a3d4 <__libc_init_array+0x40>)
 800a3a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a3d8 <__libc_init_array+0x44>)
 800a3a8:	f003 faf6 	bl	800d998 <_init>
 800a3ac:	1b64      	subs	r4, r4, r5
 800a3ae:	10a4      	asrs	r4, r4, #2
 800a3b0:	2600      	movs	r6, #0
 800a3b2:	42a6      	cmp	r6, r4
 800a3b4:	d105      	bne.n	800a3c2 <__libc_init_array+0x2e>
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3bc:	4798      	blx	r3
 800a3be:	3601      	adds	r6, #1
 800a3c0:	e7ee      	b.n	800a3a0 <__libc_init_array+0xc>
 800a3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c6:	4798      	blx	r3
 800a3c8:	3601      	adds	r6, #1
 800a3ca:	e7f2      	b.n	800a3b2 <__libc_init_array+0x1e>
 800a3cc:	0800df6c 	.word	0x0800df6c
 800a3d0:	0800df6c 	.word	0x0800df6c
 800a3d4:	0800df6c 	.word	0x0800df6c
 800a3d8:	0800df70 	.word	0x0800df70

0800a3dc <__retarget_lock_init_recursive>:
 800a3dc:	4770      	bx	lr

0800a3de <__retarget_lock_acquire_recursive>:
 800a3de:	4770      	bx	lr

0800a3e0 <__retarget_lock_release_recursive>:
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <nanf>:
 800a3e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a3ec <nanf+0x8>
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	7fc00000 	.word	0x7fc00000

0800a3f0 <quorem>:
 800a3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	6903      	ldr	r3, [r0, #16]
 800a3f6:	690c      	ldr	r4, [r1, #16]
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	4607      	mov	r7, r0
 800a3fc:	db7e      	blt.n	800a4fc <quorem+0x10c>
 800a3fe:	3c01      	subs	r4, #1
 800a400:	f101 0814 	add.w	r8, r1, #20
 800a404:	00a3      	lsls	r3, r4, #2
 800a406:	f100 0514 	add.w	r5, r0, #20
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a41a:	3301      	adds	r3, #1
 800a41c:	429a      	cmp	r2, r3
 800a41e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a422:	fbb2 f6f3 	udiv	r6, r2, r3
 800a426:	d32e      	bcc.n	800a486 <quorem+0x96>
 800a428:	f04f 0a00 	mov.w	sl, #0
 800a42c:	46c4      	mov	ip, r8
 800a42e:	46ae      	mov	lr, r5
 800a430:	46d3      	mov	fp, sl
 800a432:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a436:	b298      	uxth	r0, r3
 800a438:	fb06 a000 	mla	r0, r6, r0, sl
 800a43c:	0c02      	lsrs	r2, r0, #16
 800a43e:	0c1b      	lsrs	r3, r3, #16
 800a440:	fb06 2303 	mla	r3, r6, r3, r2
 800a444:	f8de 2000 	ldr.w	r2, [lr]
 800a448:	b280      	uxth	r0, r0
 800a44a:	b292      	uxth	r2, r2
 800a44c:	1a12      	subs	r2, r2, r0
 800a44e:	445a      	add	r2, fp
 800a450:	f8de 0000 	ldr.w	r0, [lr]
 800a454:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a458:	b29b      	uxth	r3, r3
 800a45a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a45e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a462:	b292      	uxth	r2, r2
 800a464:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a468:	45e1      	cmp	r9, ip
 800a46a:	f84e 2b04 	str.w	r2, [lr], #4
 800a46e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a472:	d2de      	bcs.n	800a432 <quorem+0x42>
 800a474:	9b00      	ldr	r3, [sp, #0]
 800a476:	58eb      	ldr	r3, [r5, r3]
 800a478:	b92b      	cbnz	r3, 800a486 <quorem+0x96>
 800a47a:	9b01      	ldr	r3, [sp, #4]
 800a47c:	3b04      	subs	r3, #4
 800a47e:	429d      	cmp	r5, r3
 800a480:	461a      	mov	r2, r3
 800a482:	d32f      	bcc.n	800a4e4 <quorem+0xf4>
 800a484:	613c      	str	r4, [r7, #16]
 800a486:	4638      	mov	r0, r7
 800a488:	f001 f910 	bl	800b6ac <__mcmp>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	db25      	blt.n	800a4dc <quorem+0xec>
 800a490:	4629      	mov	r1, r5
 800a492:	2000      	movs	r0, #0
 800a494:	f858 2b04 	ldr.w	r2, [r8], #4
 800a498:	f8d1 c000 	ldr.w	ip, [r1]
 800a49c:	fa1f fe82 	uxth.w	lr, r2
 800a4a0:	fa1f f38c 	uxth.w	r3, ip
 800a4a4:	eba3 030e 	sub.w	r3, r3, lr
 800a4a8:	4403      	add	r3, r0
 800a4aa:	0c12      	lsrs	r2, r2, #16
 800a4ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a4b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ba:	45c1      	cmp	r9, r8
 800a4bc:	f841 3b04 	str.w	r3, [r1], #4
 800a4c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4c4:	d2e6      	bcs.n	800a494 <quorem+0xa4>
 800a4c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ce:	b922      	cbnz	r2, 800a4da <quorem+0xea>
 800a4d0:	3b04      	subs	r3, #4
 800a4d2:	429d      	cmp	r5, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	d30b      	bcc.n	800a4f0 <quorem+0x100>
 800a4d8:	613c      	str	r4, [r7, #16]
 800a4da:	3601      	adds	r6, #1
 800a4dc:	4630      	mov	r0, r6
 800a4de:	b003      	add	sp, #12
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e4:	6812      	ldr	r2, [r2, #0]
 800a4e6:	3b04      	subs	r3, #4
 800a4e8:	2a00      	cmp	r2, #0
 800a4ea:	d1cb      	bne.n	800a484 <quorem+0x94>
 800a4ec:	3c01      	subs	r4, #1
 800a4ee:	e7c6      	b.n	800a47e <quorem+0x8e>
 800a4f0:	6812      	ldr	r2, [r2, #0]
 800a4f2:	3b04      	subs	r3, #4
 800a4f4:	2a00      	cmp	r2, #0
 800a4f6:	d1ef      	bne.n	800a4d8 <quorem+0xe8>
 800a4f8:	3c01      	subs	r4, #1
 800a4fa:	e7ea      	b.n	800a4d2 <quorem+0xe2>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e7ee      	b.n	800a4de <quorem+0xee>

0800a500 <_dtoa_r>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	69c7      	ldr	r7, [r0, #28]
 800a506:	b097      	sub	sp, #92	@ 0x5c
 800a508:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a50c:	ec55 4b10 	vmov	r4, r5, d0
 800a510:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a512:	9107      	str	r1, [sp, #28]
 800a514:	4681      	mov	r9, r0
 800a516:	920c      	str	r2, [sp, #48]	@ 0x30
 800a518:	9311      	str	r3, [sp, #68]	@ 0x44
 800a51a:	b97f      	cbnz	r7, 800a53c <_dtoa_r+0x3c>
 800a51c:	2010      	movs	r0, #16
 800a51e:	f7fe fe87 	bl	8009230 <malloc>
 800a522:	4602      	mov	r2, r0
 800a524:	f8c9 001c 	str.w	r0, [r9, #28]
 800a528:	b920      	cbnz	r0, 800a534 <_dtoa_r+0x34>
 800a52a:	4ba9      	ldr	r3, [pc, #676]	@ (800a7d0 <_dtoa_r+0x2d0>)
 800a52c:	21ef      	movs	r1, #239	@ 0xef
 800a52e:	48a9      	ldr	r0, [pc, #676]	@ (800a7d4 <_dtoa_r+0x2d4>)
 800a530:	f002 fb76 	bl	800cc20 <__assert_func>
 800a534:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a538:	6007      	str	r7, [r0, #0]
 800a53a:	60c7      	str	r7, [r0, #12]
 800a53c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a540:	6819      	ldr	r1, [r3, #0]
 800a542:	b159      	cbz	r1, 800a55c <_dtoa_r+0x5c>
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	604a      	str	r2, [r1, #4]
 800a548:	2301      	movs	r3, #1
 800a54a:	4093      	lsls	r3, r2
 800a54c:	608b      	str	r3, [r1, #8]
 800a54e:	4648      	mov	r0, r9
 800a550:	f000 fe30 	bl	800b1b4 <_Bfree>
 800a554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	1e2b      	subs	r3, r5, #0
 800a55e:	bfb9      	ittee	lt
 800a560:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a564:	9305      	strlt	r3, [sp, #20]
 800a566:	2300      	movge	r3, #0
 800a568:	6033      	strge	r3, [r6, #0]
 800a56a:	9f05      	ldr	r7, [sp, #20]
 800a56c:	4b9a      	ldr	r3, [pc, #616]	@ (800a7d8 <_dtoa_r+0x2d8>)
 800a56e:	bfbc      	itt	lt
 800a570:	2201      	movlt	r2, #1
 800a572:	6032      	strlt	r2, [r6, #0]
 800a574:	43bb      	bics	r3, r7
 800a576:	d112      	bne.n	800a59e <_dtoa_r+0x9e>
 800a578:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a57a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a584:	4323      	orrs	r3, r4
 800a586:	f000 855a 	beq.w	800b03e <_dtoa_r+0xb3e>
 800a58a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a58c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a7ec <_dtoa_r+0x2ec>
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 855c 	beq.w	800b04e <_dtoa_r+0xb4e>
 800a596:	f10a 0303 	add.w	r3, sl, #3
 800a59a:	f000 bd56 	b.w	800b04a <_dtoa_r+0xb4a>
 800a59e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	ec51 0b17 	vmov	r0, r1, d7
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a5ae:	f7f6 fa9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	b158      	cbz	r0, 800a5ce <_dtoa_r+0xce>
 800a5b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5be:	b113      	cbz	r3, 800a5c6 <_dtoa_r+0xc6>
 800a5c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a5c2:	4b86      	ldr	r3, [pc, #536]	@ (800a7dc <_dtoa_r+0x2dc>)
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a7f0 <_dtoa_r+0x2f0>
 800a5ca:	f000 bd40 	b.w	800b04e <_dtoa_r+0xb4e>
 800a5ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a5d2:	aa14      	add	r2, sp, #80	@ 0x50
 800a5d4:	a915      	add	r1, sp, #84	@ 0x54
 800a5d6:	4648      	mov	r0, r9
 800a5d8:	f001 f988 	bl	800b8ec <__d2b>
 800a5dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a5e0:	9002      	str	r0, [sp, #8]
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	d078      	beq.n	800a6d8 <_dtoa_r+0x1d8>
 800a5e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a5ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a600:	4619      	mov	r1, r3
 800a602:	2200      	movs	r2, #0
 800a604:	4b76      	ldr	r3, [pc, #472]	@ (800a7e0 <_dtoa_r+0x2e0>)
 800a606:	f7f5 fe4f 	bl	80002a8 <__aeabi_dsub>
 800a60a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a7b8 <_dtoa_r+0x2b8>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f7f6 f802 	bl	8000618 <__aeabi_dmul>
 800a614:	a36a      	add	r3, pc, #424	@ (adr r3, 800a7c0 <_dtoa_r+0x2c0>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	f7f5 fe47 	bl	80002ac <__adddf3>
 800a61e:	4604      	mov	r4, r0
 800a620:	4630      	mov	r0, r6
 800a622:	460d      	mov	r5, r1
 800a624:	f7f5 ff8e 	bl	8000544 <__aeabi_i2d>
 800a628:	a367      	add	r3, pc, #412	@ (adr r3, 800a7c8 <_dtoa_r+0x2c8>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f5 fff3 	bl	8000618 <__aeabi_dmul>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f5 fe37 	bl	80002ac <__adddf3>
 800a63e:	4604      	mov	r4, r0
 800a640:	460d      	mov	r5, r1
 800a642:	f7f6 fa99 	bl	8000b78 <__aeabi_d2iz>
 800a646:	2200      	movs	r2, #0
 800a648:	4607      	mov	r7, r0
 800a64a:	2300      	movs	r3, #0
 800a64c:	4620      	mov	r0, r4
 800a64e:	4629      	mov	r1, r5
 800a650:	f7f6 fa54 	bl	8000afc <__aeabi_dcmplt>
 800a654:	b140      	cbz	r0, 800a668 <_dtoa_r+0x168>
 800a656:	4638      	mov	r0, r7
 800a658:	f7f5 ff74 	bl	8000544 <__aeabi_i2d>
 800a65c:	4622      	mov	r2, r4
 800a65e:	462b      	mov	r3, r5
 800a660:	f7f6 fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 800a664:	b900      	cbnz	r0, 800a668 <_dtoa_r+0x168>
 800a666:	3f01      	subs	r7, #1
 800a668:	2f16      	cmp	r7, #22
 800a66a:	d852      	bhi.n	800a712 <_dtoa_r+0x212>
 800a66c:	4b5d      	ldr	r3, [pc, #372]	@ (800a7e4 <_dtoa_r+0x2e4>)
 800a66e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a67a:	f7f6 fa3f 	bl	8000afc <__aeabi_dcmplt>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d049      	beq.n	800a716 <_dtoa_r+0x216>
 800a682:	3f01      	subs	r7, #1
 800a684:	2300      	movs	r3, #0
 800a686:	9310      	str	r3, [sp, #64]	@ 0x40
 800a688:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a68a:	1b9b      	subs	r3, r3, r6
 800a68c:	1e5a      	subs	r2, r3, #1
 800a68e:	bf45      	ittet	mi
 800a690:	f1c3 0301 	rsbmi	r3, r3, #1
 800a694:	9300      	strmi	r3, [sp, #0]
 800a696:	2300      	movpl	r3, #0
 800a698:	2300      	movmi	r3, #0
 800a69a:	9206      	str	r2, [sp, #24]
 800a69c:	bf54      	ite	pl
 800a69e:	9300      	strpl	r3, [sp, #0]
 800a6a0:	9306      	strmi	r3, [sp, #24]
 800a6a2:	2f00      	cmp	r7, #0
 800a6a4:	db39      	blt.n	800a71a <_dtoa_r+0x21a>
 800a6a6:	9b06      	ldr	r3, [sp, #24]
 800a6a8:	970d      	str	r7, [sp, #52]	@ 0x34
 800a6aa:	443b      	add	r3, r7
 800a6ac:	9306      	str	r3, [sp, #24]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9308      	str	r3, [sp, #32]
 800a6b2:	9b07      	ldr	r3, [sp, #28]
 800a6b4:	2b09      	cmp	r3, #9
 800a6b6:	d863      	bhi.n	800a780 <_dtoa_r+0x280>
 800a6b8:	2b05      	cmp	r3, #5
 800a6ba:	bfc4      	itt	gt
 800a6bc:	3b04      	subgt	r3, #4
 800a6be:	9307      	strgt	r3, [sp, #28]
 800a6c0:	9b07      	ldr	r3, [sp, #28]
 800a6c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a6c6:	bfcc      	ite	gt
 800a6c8:	2400      	movgt	r4, #0
 800a6ca:	2401      	movle	r4, #1
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d863      	bhi.n	800a798 <_dtoa_r+0x298>
 800a6d0:	e8df f003 	tbb	[pc, r3]
 800a6d4:	2b375452 	.word	0x2b375452
 800a6d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a6dc:	441e      	add	r6, r3
 800a6de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	bfc1      	itttt	gt
 800a6e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6ea:	409f      	lslgt	r7, r3
 800a6ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6f4:	bfd6      	itet	le
 800a6f6:	f1c3 0320 	rsble	r3, r3, #32
 800a6fa:	ea47 0003 	orrgt.w	r0, r7, r3
 800a6fe:	fa04 f003 	lslle.w	r0, r4, r3
 800a702:	f7f5 ff0f 	bl	8000524 <__aeabi_ui2d>
 800a706:	2201      	movs	r2, #1
 800a708:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a70c:	3e01      	subs	r6, #1
 800a70e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a710:	e776      	b.n	800a600 <_dtoa_r+0x100>
 800a712:	2301      	movs	r3, #1
 800a714:	e7b7      	b.n	800a686 <_dtoa_r+0x186>
 800a716:	9010      	str	r0, [sp, #64]	@ 0x40
 800a718:	e7b6      	b.n	800a688 <_dtoa_r+0x188>
 800a71a:	9b00      	ldr	r3, [sp, #0]
 800a71c:	1bdb      	subs	r3, r3, r7
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	427b      	negs	r3, r7
 800a722:	9308      	str	r3, [sp, #32]
 800a724:	2300      	movs	r3, #0
 800a726:	930d      	str	r3, [sp, #52]	@ 0x34
 800a728:	e7c3      	b.n	800a6b2 <_dtoa_r+0x1b2>
 800a72a:	2301      	movs	r3, #1
 800a72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a72e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a730:	eb07 0b03 	add.w	fp, r7, r3
 800a734:	f10b 0301 	add.w	r3, fp, #1
 800a738:	2b01      	cmp	r3, #1
 800a73a:	9303      	str	r3, [sp, #12]
 800a73c:	bfb8      	it	lt
 800a73e:	2301      	movlt	r3, #1
 800a740:	e006      	b.n	800a750 <_dtoa_r+0x250>
 800a742:	2301      	movs	r3, #1
 800a744:	9309      	str	r3, [sp, #36]	@ 0x24
 800a746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a748:	2b00      	cmp	r3, #0
 800a74a:	dd28      	ble.n	800a79e <_dtoa_r+0x29e>
 800a74c:	469b      	mov	fp, r3
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a754:	2100      	movs	r1, #0
 800a756:	2204      	movs	r2, #4
 800a758:	f102 0514 	add.w	r5, r2, #20
 800a75c:	429d      	cmp	r5, r3
 800a75e:	d926      	bls.n	800a7ae <_dtoa_r+0x2ae>
 800a760:	6041      	str	r1, [r0, #4]
 800a762:	4648      	mov	r0, r9
 800a764:	f000 fce6 	bl	800b134 <_Balloc>
 800a768:	4682      	mov	sl, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d142      	bne.n	800a7f4 <_dtoa_r+0x2f4>
 800a76e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e8 <_dtoa_r+0x2e8>)
 800a770:	4602      	mov	r2, r0
 800a772:	f240 11af 	movw	r1, #431	@ 0x1af
 800a776:	e6da      	b.n	800a52e <_dtoa_r+0x2e>
 800a778:	2300      	movs	r3, #0
 800a77a:	e7e3      	b.n	800a744 <_dtoa_r+0x244>
 800a77c:	2300      	movs	r3, #0
 800a77e:	e7d5      	b.n	800a72c <_dtoa_r+0x22c>
 800a780:	2401      	movs	r4, #1
 800a782:	2300      	movs	r3, #0
 800a784:	9307      	str	r3, [sp, #28]
 800a786:	9409      	str	r4, [sp, #36]	@ 0x24
 800a788:	f04f 3bff 	mov.w	fp, #4294967295
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a792:	2312      	movs	r3, #18
 800a794:	920c      	str	r2, [sp, #48]	@ 0x30
 800a796:	e7db      	b.n	800a750 <_dtoa_r+0x250>
 800a798:	2301      	movs	r3, #1
 800a79a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79c:	e7f4      	b.n	800a788 <_dtoa_r+0x288>
 800a79e:	f04f 0b01 	mov.w	fp, #1
 800a7a2:	f8cd b00c 	str.w	fp, [sp, #12]
 800a7a6:	465b      	mov	r3, fp
 800a7a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a7ac:	e7d0      	b.n	800a750 <_dtoa_r+0x250>
 800a7ae:	3101      	adds	r1, #1
 800a7b0:	0052      	lsls	r2, r2, #1
 800a7b2:	e7d1      	b.n	800a758 <_dtoa_r+0x258>
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	636f4361 	.word	0x636f4361
 800a7bc:	3fd287a7 	.word	0x3fd287a7
 800a7c0:	8b60c8b3 	.word	0x8b60c8b3
 800a7c4:	3fc68a28 	.word	0x3fc68a28
 800a7c8:	509f79fb 	.word	0x509f79fb
 800a7cc:	3fd34413 	.word	0x3fd34413
 800a7d0:	0800db84 	.word	0x0800db84
 800a7d4:	0800db9b 	.word	0x0800db9b
 800a7d8:	7ff00000 	.word	0x7ff00000
 800a7dc:	0800db4f 	.word	0x0800db4f
 800a7e0:	3ff80000 	.word	0x3ff80000
 800a7e4:	0800dd48 	.word	0x0800dd48
 800a7e8:	0800dbf3 	.word	0x0800dbf3
 800a7ec:	0800db80 	.word	0x0800db80
 800a7f0:	0800db4e 	.word	0x0800db4e
 800a7f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7f8:	6018      	str	r0, [r3, #0]
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	2b0e      	cmp	r3, #14
 800a7fe:	f200 80a1 	bhi.w	800a944 <_dtoa_r+0x444>
 800a802:	2c00      	cmp	r4, #0
 800a804:	f000 809e 	beq.w	800a944 <_dtoa_r+0x444>
 800a808:	2f00      	cmp	r7, #0
 800a80a:	dd33      	ble.n	800a874 <_dtoa_r+0x374>
 800a80c:	4b9c      	ldr	r3, [pc, #624]	@ (800aa80 <_dtoa_r+0x580>)
 800a80e:	f007 020f 	and.w	r2, r7, #15
 800a812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a816:	ed93 7b00 	vldr	d7, [r3]
 800a81a:	05f8      	lsls	r0, r7, #23
 800a81c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a820:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a824:	d516      	bpl.n	800a854 <_dtoa_r+0x354>
 800a826:	4b97      	ldr	r3, [pc, #604]	@ (800aa84 <_dtoa_r+0x584>)
 800a828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a82c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a830:	f7f6 f81c 	bl	800086c <__aeabi_ddiv>
 800a834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a838:	f004 040f 	and.w	r4, r4, #15
 800a83c:	2603      	movs	r6, #3
 800a83e:	4d91      	ldr	r5, [pc, #580]	@ (800aa84 <_dtoa_r+0x584>)
 800a840:	b954      	cbnz	r4, 800a858 <_dtoa_r+0x358>
 800a842:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a84a:	f7f6 f80f 	bl	800086c <__aeabi_ddiv>
 800a84e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a852:	e028      	b.n	800a8a6 <_dtoa_r+0x3a6>
 800a854:	2602      	movs	r6, #2
 800a856:	e7f2      	b.n	800a83e <_dtoa_r+0x33e>
 800a858:	07e1      	lsls	r1, r4, #31
 800a85a:	d508      	bpl.n	800a86e <_dtoa_r+0x36e>
 800a85c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a860:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a864:	f7f5 fed8 	bl	8000618 <__aeabi_dmul>
 800a868:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a86c:	3601      	adds	r6, #1
 800a86e:	1064      	asrs	r4, r4, #1
 800a870:	3508      	adds	r5, #8
 800a872:	e7e5      	b.n	800a840 <_dtoa_r+0x340>
 800a874:	f000 80af 	beq.w	800a9d6 <_dtoa_r+0x4d6>
 800a878:	427c      	negs	r4, r7
 800a87a:	4b81      	ldr	r3, [pc, #516]	@ (800aa80 <_dtoa_r+0x580>)
 800a87c:	4d81      	ldr	r5, [pc, #516]	@ (800aa84 <_dtoa_r+0x584>)
 800a87e:	f004 020f 	and.w	r2, r4, #15
 800a882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a88e:	f7f5 fec3 	bl	8000618 <__aeabi_dmul>
 800a892:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a896:	1124      	asrs	r4, r4, #4
 800a898:	2300      	movs	r3, #0
 800a89a:	2602      	movs	r6, #2
 800a89c:	2c00      	cmp	r4, #0
 800a89e:	f040 808f 	bne.w	800a9c0 <_dtoa_r+0x4c0>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1d3      	bne.n	800a84e <_dtoa_r+0x34e>
 800a8a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8094 	beq.w	800a9da <_dtoa_r+0x4da>
 800a8b2:	4b75      	ldr	r3, [pc, #468]	@ (800aa88 <_dtoa_r+0x588>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f6 f91f 	bl	8000afc <__aeabi_dcmplt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f000 808b 	beq.w	800a9da <_dtoa_r+0x4da>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 8087 	beq.w	800a9da <_dtoa_r+0x4da>
 800a8cc:	f1bb 0f00 	cmp.w	fp, #0
 800a8d0:	dd34      	ble.n	800a93c <_dtoa_r+0x43c>
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4b6d      	ldr	r3, [pc, #436]	@ (800aa8c <_dtoa_r+0x58c>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7f5 fe9d 	bl	8000618 <__aeabi_dmul>
 800a8de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8e2:	f107 38ff 	add.w	r8, r7, #4294967295
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	465c      	mov	r4, fp
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7f5 fe2a 	bl	8000544 <__aeabi_i2d>
 800a8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f4:	f7f5 fe90 	bl	8000618 <__aeabi_dmul>
 800a8f8:	4b65      	ldr	r3, [pc, #404]	@ (800aa90 <_dtoa_r+0x590>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f7f5 fcd6 	bl	80002ac <__adddf3>
 800a900:	4605      	mov	r5, r0
 800a902:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a906:	2c00      	cmp	r4, #0
 800a908:	d16a      	bne.n	800a9e0 <_dtoa_r+0x4e0>
 800a90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a90e:	4b61      	ldr	r3, [pc, #388]	@ (800aa94 <_dtoa_r+0x594>)
 800a910:	2200      	movs	r2, #0
 800a912:	f7f5 fcc9 	bl	80002a8 <__aeabi_dsub>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a91e:	462a      	mov	r2, r5
 800a920:	4633      	mov	r3, r6
 800a922:	f7f6 f909 	bl	8000b38 <__aeabi_dcmpgt>
 800a926:	2800      	cmp	r0, #0
 800a928:	f040 8298 	bne.w	800ae5c <_dtoa_r+0x95c>
 800a92c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a930:	462a      	mov	r2, r5
 800a932:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a936:	f7f6 f8e1 	bl	8000afc <__aeabi_dcmplt>
 800a93a:	bb38      	cbnz	r0, 800a98c <_dtoa_r+0x48c>
 800a93c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a940:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a944:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a946:	2b00      	cmp	r3, #0
 800a948:	f2c0 8157 	blt.w	800abfa <_dtoa_r+0x6fa>
 800a94c:	2f0e      	cmp	r7, #14
 800a94e:	f300 8154 	bgt.w	800abfa <_dtoa_r+0x6fa>
 800a952:	4b4b      	ldr	r3, [pc, #300]	@ (800aa80 <_dtoa_r+0x580>)
 800a954:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a958:	ed93 7b00 	vldr	d7, [r3]
 800a95c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a95e:	2b00      	cmp	r3, #0
 800a960:	ed8d 7b00 	vstr	d7, [sp]
 800a964:	f280 80e5 	bge.w	800ab32 <_dtoa_r+0x632>
 800a968:	9b03      	ldr	r3, [sp, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f300 80e1 	bgt.w	800ab32 <_dtoa_r+0x632>
 800a970:	d10c      	bne.n	800a98c <_dtoa_r+0x48c>
 800a972:	4b48      	ldr	r3, [pc, #288]	@ (800aa94 <_dtoa_r+0x594>)
 800a974:	2200      	movs	r2, #0
 800a976:	ec51 0b17 	vmov	r0, r1, d7
 800a97a:	f7f5 fe4d 	bl	8000618 <__aeabi_dmul>
 800a97e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a982:	f7f6 f8cf 	bl	8000b24 <__aeabi_dcmpge>
 800a986:	2800      	cmp	r0, #0
 800a988:	f000 8266 	beq.w	800ae58 <_dtoa_r+0x958>
 800a98c:	2400      	movs	r4, #0
 800a98e:	4625      	mov	r5, r4
 800a990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a992:	4656      	mov	r6, sl
 800a994:	ea6f 0803 	mvn.w	r8, r3
 800a998:	2700      	movs	r7, #0
 800a99a:	4621      	mov	r1, r4
 800a99c:	4648      	mov	r0, r9
 800a99e:	f000 fc09 	bl	800b1b4 <_Bfree>
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	f000 80bd 	beq.w	800ab22 <_dtoa_r+0x622>
 800a9a8:	b12f      	cbz	r7, 800a9b6 <_dtoa_r+0x4b6>
 800a9aa:	42af      	cmp	r7, r5
 800a9ac:	d003      	beq.n	800a9b6 <_dtoa_r+0x4b6>
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	f000 fbff 	bl	800b1b4 <_Bfree>
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4648      	mov	r0, r9
 800a9ba:	f000 fbfb 	bl	800b1b4 <_Bfree>
 800a9be:	e0b0      	b.n	800ab22 <_dtoa_r+0x622>
 800a9c0:	07e2      	lsls	r2, r4, #31
 800a9c2:	d505      	bpl.n	800a9d0 <_dtoa_r+0x4d0>
 800a9c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9c8:	f7f5 fe26 	bl	8000618 <__aeabi_dmul>
 800a9cc:	3601      	adds	r6, #1
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	1064      	asrs	r4, r4, #1
 800a9d2:	3508      	adds	r5, #8
 800a9d4:	e762      	b.n	800a89c <_dtoa_r+0x39c>
 800a9d6:	2602      	movs	r6, #2
 800a9d8:	e765      	b.n	800a8a6 <_dtoa_r+0x3a6>
 800a9da:	9c03      	ldr	r4, [sp, #12]
 800a9dc:	46b8      	mov	r8, r7
 800a9de:	e784      	b.n	800a8ea <_dtoa_r+0x3ea>
 800a9e0:	4b27      	ldr	r3, [pc, #156]	@ (800aa80 <_dtoa_r+0x580>)
 800a9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9ec:	4454      	add	r4, sl
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	d054      	beq.n	800aa9c <_dtoa_r+0x59c>
 800a9f2:	4929      	ldr	r1, [pc, #164]	@ (800aa98 <_dtoa_r+0x598>)
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f7f5 ff39 	bl	800086c <__aeabi_ddiv>
 800a9fa:	4633      	mov	r3, r6
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	f7f5 fc53 	bl	80002a8 <__aeabi_dsub>
 800aa02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa06:	4656      	mov	r6, sl
 800aa08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa0c:	f7f6 f8b4 	bl	8000b78 <__aeabi_d2iz>
 800aa10:	4605      	mov	r5, r0
 800aa12:	f7f5 fd97 	bl	8000544 <__aeabi_i2d>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa1e:	f7f5 fc43 	bl	80002a8 <__aeabi_dsub>
 800aa22:	3530      	adds	r5, #48	@ 0x30
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa2c:	f806 5b01 	strb.w	r5, [r6], #1
 800aa30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa34:	f7f6 f862 	bl	8000afc <__aeabi_dcmplt>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d172      	bne.n	800ab22 <_dtoa_r+0x622>
 800aa3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa40:	4911      	ldr	r1, [pc, #68]	@ (800aa88 <_dtoa_r+0x588>)
 800aa42:	2000      	movs	r0, #0
 800aa44:	f7f5 fc30 	bl	80002a8 <__aeabi_dsub>
 800aa48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa4c:	f7f6 f856 	bl	8000afc <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f040 80b4 	bne.w	800abbe <_dtoa_r+0x6be>
 800aa56:	42a6      	cmp	r6, r4
 800aa58:	f43f af70 	beq.w	800a93c <_dtoa_r+0x43c>
 800aa5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa60:	4b0a      	ldr	r3, [pc, #40]	@ (800aa8c <_dtoa_r+0x58c>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	f7f5 fdd8 	bl	8000618 <__aeabi_dmul>
 800aa68:	4b08      	ldr	r3, [pc, #32]	@ (800aa8c <_dtoa_r+0x58c>)
 800aa6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa6e:	2200      	movs	r2, #0
 800aa70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa74:	f7f5 fdd0 	bl	8000618 <__aeabi_dmul>
 800aa78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa7c:	e7c4      	b.n	800aa08 <_dtoa_r+0x508>
 800aa7e:	bf00      	nop
 800aa80:	0800dd48 	.word	0x0800dd48
 800aa84:	0800dd20 	.word	0x0800dd20
 800aa88:	3ff00000 	.word	0x3ff00000
 800aa8c:	40240000 	.word	0x40240000
 800aa90:	401c0000 	.word	0x401c0000
 800aa94:	40140000 	.word	0x40140000
 800aa98:	3fe00000 	.word	0x3fe00000
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f7f5 fdba 	bl	8000618 <__aeabi_dmul>
 800aaa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aaa8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aaaa:	4656      	mov	r6, sl
 800aaac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aab0:	f7f6 f862 	bl	8000b78 <__aeabi_d2iz>
 800aab4:	4605      	mov	r5, r0
 800aab6:	f7f5 fd45 	bl	8000544 <__aeabi_i2d>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac2:	f7f5 fbf1 	bl	80002a8 <__aeabi_dsub>
 800aac6:	3530      	adds	r5, #48	@ 0x30
 800aac8:	f806 5b01 	strb.w	r5, [r6], #1
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	42a6      	cmp	r6, r4
 800aad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	d124      	bne.n	800ab26 <_dtoa_r+0x626>
 800aadc:	4baf      	ldr	r3, [pc, #700]	@ (800ad9c <_dtoa_r+0x89c>)
 800aade:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aae2:	f7f5 fbe3 	bl	80002ac <__adddf3>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaee:	f7f6 f823 	bl	8000b38 <__aeabi_dcmpgt>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d163      	bne.n	800abbe <_dtoa_r+0x6be>
 800aaf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aafa:	49a8      	ldr	r1, [pc, #672]	@ (800ad9c <_dtoa_r+0x89c>)
 800aafc:	2000      	movs	r0, #0
 800aafe:	f7f5 fbd3 	bl	80002a8 <__aeabi_dsub>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab0a:	f7f5 fff7 	bl	8000afc <__aeabi_dcmplt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f43f af14 	beq.w	800a93c <_dtoa_r+0x43c>
 800ab14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ab16:	1e73      	subs	r3, r6, #1
 800ab18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab1e:	2b30      	cmp	r3, #48	@ 0x30
 800ab20:	d0f8      	beq.n	800ab14 <_dtoa_r+0x614>
 800ab22:	4647      	mov	r7, r8
 800ab24:	e03b      	b.n	800ab9e <_dtoa_r+0x69e>
 800ab26:	4b9e      	ldr	r3, [pc, #632]	@ (800ada0 <_dtoa_r+0x8a0>)
 800ab28:	f7f5 fd76 	bl	8000618 <__aeabi_dmul>
 800ab2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab30:	e7bc      	b.n	800aaac <_dtoa_r+0x5ac>
 800ab32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ab36:	4656      	mov	r6, sl
 800ab38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f5 fe94 	bl	800086c <__aeabi_ddiv>
 800ab44:	f7f6 f818 	bl	8000b78 <__aeabi_d2iz>
 800ab48:	4680      	mov	r8, r0
 800ab4a:	f7f5 fcfb 	bl	8000544 <__aeabi_i2d>
 800ab4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab52:	f7f5 fd61 	bl	8000618 <__aeabi_dmul>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab62:	f7f5 fba1 	bl	80002a8 <__aeabi_dsub>
 800ab66:	f806 4b01 	strb.w	r4, [r6], #1
 800ab6a:	9d03      	ldr	r5, [sp, #12]
 800ab6c:	eba6 040a 	sub.w	r4, r6, sl
 800ab70:	42a5      	cmp	r5, r4
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	d133      	bne.n	800abe0 <_dtoa_r+0x6e0>
 800ab78:	f7f5 fb98 	bl	80002ac <__adddf3>
 800ab7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	f7f5 ffd8 	bl	8000b38 <__aeabi_dcmpgt>
 800ab88:	b9c0      	cbnz	r0, 800abbc <_dtoa_r+0x6bc>
 800ab8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 ffa9 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab96:	b110      	cbz	r0, 800ab9e <_dtoa_r+0x69e>
 800ab98:	f018 0f01 	tst.w	r8, #1
 800ab9c:	d10e      	bne.n	800abbc <_dtoa_r+0x6bc>
 800ab9e:	9902      	ldr	r1, [sp, #8]
 800aba0:	4648      	mov	r0, r9
 800aba2:	f000 fb07 	bl	800b1b4 <_Bfree>
 800aba6:	2300      	movs	r3, #0
 800aba8:	7033      	strb	r3, [r6, #0]
 800abaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abac:	3701      	adds	r7, #1
 800abae:	601f      	str	r7, [r3, #0]
 800abb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 824b 	beq.w	800b04e <_dtoa_r+0xb4e>
 800abb8:	601e      	str	r6, [r3, #0]
 800abba:	e248      	b.n	800b04e <_dtoa_r+0xb4e>
 800abbc:	46b8      	mov	r8, r7
 800abbe:	4633      	mov	r3, r6
 800abc0:	461e      	mov	r6, r3
 800abc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abc6:	2a39      	cmp	r2, #57	@ 0x39
 800abc8:	d106      	bne.n	800abd8 <_dtoa_r+0x6d8>
 800abca:	459a      	cmp	sl, r3
 800abcc:	d1f8      	bne.n	800abc0 <_dtoa_r+0x6c0>
 800abce:	2230      	movs	r2, #48	@ 0x30
 800abd0:	f108 0801 	add.w	r8, r8, #1
 800abd4:	f88a 2000 	strb.w	r2, [sl]
 800abd8:	781a      	ldrb	r2, [r3, #0]
 800abda:	3201      	adds	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]
 800abde:	e7a0      	b.n	800ab22 <_dtoa_r+0x622>
 800abe0:	4b6f      	ldr	r3, [pc, #444]	@ (800ada0 <_dtoa_r+0x8a0>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fd18 	bl	8000618 <__aeabi_dmul>
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	f7f5 ff7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d09f      	beq.n	800ab38 <_dtoa_r+0x638>
 800abf8:	e7d1      	b.n	800ab9e <_dtoa_r+0x69e>
 800abfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	f000 80ea 	beq.w	800add6 <_dtoa_r+0x8d6>
 800ac02:	9a07      	ldr	r2, [sp, #28]
 800ac04:	2a01      	cmp	r2, #1
 800ac06:	f300 80cd 	bgt.w	800ada4 <_dtoa_r+0x8a4>
 800ac0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	f000 80c1 	beq.w	800ad94 <_dtoa_r+0x894>
 800ac12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac16:	9c08      	ldr	r4, [sp, #32]
 800ac18:	9e00      	ldr	r6, [sp, #0]
 800ac1a:	9a00      	ldr	r2, [sp, #0]
 800ac1c:	441a      	add	r2, r3
 800ac1e:	9200      	str	r2, [sp, #0]
 800ac20:	9a06      	ldr	r2, [sp, #24]
 800ac22:	2101      	movs	r1, #1
 800ac24:	441a      	add	r2, r3
 800ac26:	4648      	mov	r0, r9
 800ac28:	9206      	str	r2, [sp, #24]
 800ac2a:	f000 fbc1 	bl	800b3b0 <__i2b>
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b166      	cbz	r6, 800ac4c <_dtoa_r+0x74c>
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dd09      	ble.n	800ac4c <_dtoa_r+0x74c>
 800ac38:	42b3      	cmp	r3, r6
 800ac3a:	9a00      	ldr	r2, [sp, #0]
 800ac3c:	bfa8      	it	ge
 800ac3e:	4633      	movge	r3, r6
 800ac40:	1ad2      	subs	r2, r2, r3
 800ac42:	9200      	str	r2, [sp, #0]
 800ac44:	9a06      	ldr	r2, [sp, #24]
 800ac46:	1af6      	subs	r6, r6, r3
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	9b08      	ldr	r3, [sp, #32]
 800ac4e:	b30b      	cbz	r3, 800ac94 <_dtoa_r+0x794>
 800ac50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 80c6 	beq.w	800ade4 <_dtoa_r+0x8e4>
 800ac58:	2c00      	cmp	r4, #0
 800ac5a:	f000 80c0 	beq.w	800adde <_dtoa_r+0x8de>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4622      	mov	r2, r4
 800ac62:	4648      	mov	r0, r9
 800ac64:	f000 fc5c 	bl	800b520 <__pow5mult>
 800ac68:	9a02      	ldr	r2, [sp, #8]
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	4648      	mov	r0, r9
 800ac70:	f000 fbb4 	bl	800b3dc <__multiply>
 800ac74:	9902      	ldr	r1, [sp, #8]
 800ac76:	4680      	mov	r8, r0
 800ac78:	4648      	mov	r0, r9
 800ac7a:	f000 fa9b 	bl	800b1b4 <_Bfree>
 800ac7e:	9b08      	ldr	r3, [sp, #32]
 800ac80:	1b1b      	subs	r3, r3, r4
 800ac82:	9308      	str	r3, [sp, #32]
 800ac84:	f000 80b1 	beq.w	800adea <_dtoa_r+0x8ea>
 800ac88:	9a08      	ldr	r2, [sp, #32]
 800ac8a:	4641      	mov	r1, r8
 800ac8c:	4648      	mov	r0, r9
 800ac8e:	f000 fc47 	bl	800b520 <__pow5mult>
 800ac92:	9002      	str	r0, [sp, #8]
 800ac94:	2101      	movs	r1, #1
 800ac96:	4648      	mov	r0, r9
 800ac98:	f000 fb8a 	bl	800b3b0 <__i2b>
 800ac9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac9e:	4604      	mov	r4, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 81d8 	beq.w	800b056 <_dtoa_r+0xb56>
 800aca6:	461a      	mov	r2, r3
 800aca8:	4601      	mov	r1, r0
 800acaa:	4648      	mov	r0, r9
 800acac:	f000 fc38 	bl	800b520 <__pow5mult>
 800acb0:	9b07      	ldr	r3, [sp, #28]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	4604      	mov	r4, r0
 800acb6:	f300 809f 	bgt.w	800adf8 <_dtoa_r+0x8f8>
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8097 	bne.w	800adf0 <_dtoa_r+0x8f0>
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f040 8093 	bne.w	800adf4 <_dtoa_r+0x8f4>
 800acce:	9b05      	ldr	r3, [sp, #20]
 800acd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800acd4:	0d1b      	lsrs	r3, r3, #20
 800acd6:	051b      	lsls	r3, r3, #20
 800acd8:	b133      	cbz	r3, 800ace8 <_dtoa_r+0x7e8>
 800acda:	9b00      	ldr	r3, [sp, #0]
 800acdc:	3301      	adds	r3, #1
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	9b06      	ldr	r3, [sp, #24]
 800ace2:	3301      	adds	r3, #1
 800ace4:	9306      	str	r3, [sp, #24]
 800ace6:	2301      	movs	r3, #1
 800ace8:	9308      	str	r3, [sp, #32]
 800acea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 81b8 	beq.w	800b062 <_dtoa_r+0xb62>
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acf8:	6918      	ldr	r0, [r3, #16]
 800acfa:	f000 fb0d 	bl	800b318 <__hi0bits>
 800acfe:	f1c0 0020 	rsb	r0, r0, #32
 800ad02:	9b06      	ldr	r3, [sp, #24]
 800ad04:	4418      	add	r0, r3
 800ad06:	f010 001f 	ands.w	r0, r0, #31
 800ad0a:	f000 8082 	beq.w	800ae12 <_dtoa_r+0x912>
 800ad0e:	f1c0 0320 	rsb	r3, r0, #32
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	dd73      	ble.n	800adfe <_dtoa_r+0x8fe>
 800ad16:	9b00      	ldr	r3, [sp, #0]
 800ad18:	f1c0 001c 	rsb	r0, r0, #28
 800ad1c:	4403      	add	r3, r0
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	4403      	add	r3, r0
 800ad24:	4406      	add	r6, r0
 800ad26:	9306      	str	r3, [sp, #24]
 800ad28:	9b00      	ldr	r3, [sp, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	dd05      	ble.n	800ad3a <_dtoa_r+0x83a>
 800ad2e:	9902      	ldr	r1, [sp, #8]
 800ad30:	461a      	mov	r2, r3
 800ad32:	4648      	mov	r0, r9
 800ad34:	f000 fc4e 	bl	800b5d4 <__lshift>
 800ad38:	9002      	str	r0, [sp, #8]
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dd05      	ble.n	800ad4c <_dtoa_r+0x84c>
 800ad40:	4621      	mov	r1, r4
 800ad42:	461a      	mov	r2, r3
 800ad44:	4648      	mov	r0, r9
 800ad46:	f000 fc45 	bl	800b5d4 <__lshift>
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d061      	beq.n	800ae16 <_dtoa_r+0x916>
 800ad52:	9802      	ldr	r0, [sp, #8]
 800ad54:	4621      	mov	r1, r4
 800ad56:	f000 fca9 	bl	800b6ac <__mcmp>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	da5b      	bge.n	800ae16 <_dtoa_r+0x916>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9902      	ldr	r1, [sp, #8]
 800ad62:	220a      	movs	r2, #10
 800ad64:	4648      	mov	r0, r9
 800ad66:	f000 fa47 	bl	800b1f8 <__multadd>
 800ad6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6c:	9002      	str	r0, [sp, #8]
 800ad6e:	f107 38ff 	add.w	r8, r7, #4294967295
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 8177 	beq.w	800b066 <_dtoa_r+0xb66>
 800ad78:	4629      	mov	r1, r5
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	220a      	movs	r2, #10
 800ad7e:	4648      	mov	r0, r9
 800ad80:	f000 fa3a 	bl	800b1f8 <__multadd>
 800ad84:	f1bb 0f00 	cmp.w	fp, #0
 800ad88:	4605      	mov	r5, r0
 800ad8a:	dc6f      	bgt.n	800ae6c <_dtoa_r+0x96c>
 800ad8c:	9b07      	ldr	r3, [sp, #28]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	dc49      	bgt.n	800ae26 <_dtoa_r+0x926>
 800ad92:	e06b      	b.n	800ae6c <_dtoa_r+0x96c>
 800ad94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad9a:	e73c      	b.n	800ac16 <_dtoa_r+0x716>
 800ad9c:	3fe00000 	.word	0x3fe00000
 800ada0:	40240000 	.word	0x40240000
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	1e5c      	subs	r4, r3, #1
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	42a3      	cmp	r3, r4
 800adac:	db09      	blt.n	800adc2 <_dtoa_r+0x8c2>
 800adae:	1b1c      	subs	r4, r3, r4
 800adb0:	9b03      	ldr	r3, [sp, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f6bf af30 	bge.w	800ac18 <_dtoa_r+0x718>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	9a03      	ldr	r2, [sp, #12]
 800adbc:	1a9e      	subs	r6, r3, r2
 800adbe:	2300      	movs	r3, #0
 800adc0:	e72b      	b.n	800ac1a <_dtoa_r+0x71a>
 800adc2:	9b08      	ldr	r3, [sp, #32]
 800adc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adc6:	9408      	str	r4, [sp, #32]
 800adc8:	1ae3      	subs	r3, r4, r3
 800adca:	441a      	add	r2, r3
 800adcc:	9e00      	ldr	r6, [sp, #0]
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	920d      	str	r2, [sp, #52]	@ 0x34
 800add2:	2400      	movs	r4, #0
 800add4:	e721      	b.n	800ac1a <_dtoa_r+0x71a>
 800add6:	9c08      	ldr	r4, [sp, #32]
 800add8:	9e00      	ldr	r6, [sp, #0]
 800adda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800addc:	e728      	b.n	800ac30 <_dtoa_r+0x730>
 800adde:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ade2:	e751      	b.n	800ac88 <_dtoa_r+0x788>
 800ade4:	9a08      	ldr	r2, [sp, #32]
 800ade6:	9902      	ldr	r1, [sp, #8]
 800ade8:	e750      	b.n	800ac8c <_dtoa_r+0x78c>
 800adea:	f8cd 8008 	str.w	r8, [sp, #8]
 800adee:	e751      	b.n	800ac94 <_dtoa_r+0x794>
 800adf0:	2300      	movs	r3, #0
 800adf2:	e779      	b.n	800ace8 <_dtoa_r+0x7e8>
 800adf4:	9b04      	ldr	r3, [sp, #16]
 800adf6:	e777      	b.n	800ace8 <_dtoa_r+0x7e8>
 800adf8:	2300      	movs	r3, #0
 800adfa:	9308      	str	r3, [sp, #32]
 800adfc:	e779      	b.n	800acf2 <_dtoa_r+0x7f2>
 800adfe:	d093      	beq.n	800ad28 <_dtoa_r+0x828>
 800ae00:	9a00      	ldr	r2, [sp, #0]
 800ae02:	331c      	adds	r3, #28
 800ae04:	441a      	add	r2, r3
 800ae06:	9200      	str	r2, [sp, #0]
 800ae08:	9a06      	ldr	r2, [sp, #24]
 800ae0a:	441a      	add	r2, r3
 800ae0c:	441e      	add	r6, r3
 800ae0e:	9206      	str	r2, [sp, #24]
 800ae10:	e78a      	b.n	800ad28 <_dtoa_r+0x828>
 800ae12:	4603      	mov	r3, r0
 800ae14:	e7f4      	b.n	800ae00 <_dtoa_r+0x900>
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	46b8      	mov	r8, r7
 800ae1c:	dc20      	bgt.n	800ae60 <_dtoa_r+0x960>
 800ae1e:	469b      	mov	fp, r3
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	dd1e      	ble.n	800ae64 <_dtoa_r+0x964>
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	f47f adb1 	bne.w	800a990 <_dtoa_r+0x490>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	465b      	mov	r3, fp
 800ae32:	2205      	movs	r2, #5
 800ae34:	4648      	mov	r0, r9
 800ae36:	f000 f9df 	bl	800b1f8 <__multadd>
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	9802      	ldr	r0, [sp, #8]
 800ae40:	f000 fc34 	bl	800b6ac <__mcmp>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f77f ada3 	ble.w	800a990 <_dtoa_r+0x490>
 800ae4a:	4656      	mov	r6, sl
 800ae4c:	2331      	movs	r3, #49	@ 0x31
 800ae4e:	f806 3b01 	strb.w	r3, [r6], #1
 800ae52:	f108 0801 	add.w	r8, r8, #1
 800ae56:	e59f      	b.n	800a998 <_dtoa_r+0x498>
 800ae58:	9c03      	ldr	r4, [sp, #12]
 800ae5a:	46b8      	mov	r8, r7
 800ae5c:	4625      	mov	r5, r4
 800ae5e:	e7f4      	b.n	800ae4a <_dtoa_r+0x94a>
 800ae60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ae64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f000 8101 	beq.w	800b06e <_dtoa_r+0xb6e>
 800ae6c:	2e00      	cmp	r6, #0
 800ae6e:	dd05      	ble.n	800ae7c <_dtoa_r+0x97c>
 800ae70:	4629      	mov	r1, r5
 800ae72:	4632      	mov	r2, r6
 800ae74:	4648      	mov	r0, r9
 800ae76:	f000 fbad 	bl	800b5d4 <__lshift>
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	9b08      	ldr	r3, [sp, #32]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d05c      	beq.n	800af3c <_dtoa_r+0xa3c>
 800ae82:	6869      	ldr	r1, [r5, #4]
 800ae84:	4648      	mov	r0, r9
 800ae86:	f000 f955 	bl	800b134 <_Balloc>
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	b928      	cbnz	r0, 800ae9a <_dtoa_r+0x99a>
 800ae8e:	4b82      	ldr	r3, [pc, #520]	@ (800b098 <_dtoa_r+0xb98>)
 800ae90:	4602      	mov	r2, r0
 800ae92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae96:	f7ff bb4a 	b.w	800a52e <_dtoa_r+0x2e>
 800ae9a:	692a      	ldr	r2, [r5, #16]
 800ae9c:	3202      	adds	r2, #2
 800ae9e:	0092      	lsls	r2, r2, #2
 800aea0:	f105 010c 	add.w	r1, r5, #12
 800aea4:	300c      	adds	r0, #12
 800aea6:	f001 fea5 	bl	800cbf4 <memcpy>
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4631      	mov	r1, r6
 800aeae:	4648      	mov	r0, r9
 800aeb0:	f000 fb90 	bl	800b5d4 <__lshift>
 800aeb4:	f10a 0301 	add.w	r3, sl, #1
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	eb0a 030b 	add.w	r3, sl, fp
 800aebe:	9308      	str	r3, [sp, #32]
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	462f      	mov	r7, r5
 800aec8:	9306      	str	r3, [sp, #24]
 800aeca:	4605      	mov	r5, r0
 800aecc:	9b00      	ldr	r3, [sp, #0]
 800aece:	9802      	ldr	r0, [sp, #8]
 800aed0:	4621      	mov	r1, r4
 800aed2:	f103 3bff 	add.w	fp, r3, #4294967295
 800aed6:	f7ff fa8b 	bl	800a3f0 <quorem>
 800aeda:	4603      	mov	r3, r0
 800aedc:	3330      	adds	r3, #48	@ 0x30
 800aede:	9003      	str	r0, [sp, #12]
 800aee0:	4639      	mov	r1, r7
 800aee2:	9802      	ldr	r0, [sp, #8]
 800aee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee6:	f000 fbe1 	bl	800b6ac <__mcmp>
 800aeea:	462a      	mov	r2, r5
 800aeec:	9004      	str	r0, [sp, #16]
 800aeee:	4621      	mov	r1, r4
 800aef0:	4648      	mov	r0, r9
 800aef2:	f000 fbf7 	bl	800b6e4 <__mdiff>
 800aef6:	68c2      	ldr	r2, [r0, #12]
 800aef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aefa:	4606      	mov	r6, r0
 800aefc:	bb02      	cbnz	r2, 800af40 <_dtoa_r+0xa40>
 800aefe:	4601      	mov	r1, r0
 800af00:	9802      	ldr	r0, [sp, #8]
 800af02:	f000 fbd3 	bl	800b6ac <__mcmp>
 800af06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af08:	4602      	mov	r2, r0
 800af0a:	4631      	mov	r1, r6
 800af0c:	4648      	mov	r0, r9
 800af0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800af10:	9309      	str	r3, [sp, #36]	@ 0x24
 800af12:	f000 f94f 	bl	800b1b4 <_Bfree>
 800af16:	9b07      	ldr	r3, [sp, #28]
 800af18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af1a:	9e00      	ldr	r6, [sp, #0]
 800af1c:	ea42 0103 	orr.w	r1, r2, r3
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	4319      	orrs	r1, r3
 800af24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af26:	d10d      	bne.n	800af44 <_dtoa_r+0xa44>
 800af28:	2b39      	cmp	r3, #57	@ 0x39
 800af2a:	d027      	beq.n	800af7c <_dtoa_r+0xa7c>
 800af2c:	9a04      	ldr	r2, [sp, #16]
 800af2e:	2a00      	cmp	r2, #0
 800af30:	dd01      	ble.n	800af36 <_dtoa_r+0xa36>
 800af32:	9b03      	ldr	r3, [sp, #12]
 800af34:	3331      	adds	r3, #49	@ 0x31
 800af36:	f88b 3000 	strb.w	r3, [fp]
 800af3a:	e52e      	b.n	800a99a <_dtoa_r+0x49a>
 800af3c:	4628      	mov	r0, r5
 800af3e:	e7b9      	b.n	800aeb4 <_dtoa_r+0x9b4>
 800af40:	2201      	movs	r2, #1
 800af42:	e7e2      	b.n	800af0a <_dtoa_r+0xa0a>
 800af44:	9904      	ldr	r1, [sp, #16]
 800af46:	2900      	cmp	r1, #0
 800af48:	db04      	blt.n	800af54 <_dtoa_r+0xa54>
 800af4a:	9807      	ldr	r0, [sp, #28]
 800af4c:	4301      	orrs	r1, r0
 800af4e:	9806      	ldr	r0, [sp, #24]
 800af50:	4301      	orrs	r1, r0
 800af52:	d120      	bne.n	800af96 <_dtoa_r+0xa96>
 800af54:	2a00      	cmp	r2, #0
 800af56:	ddee      	ble.n	800af36 <_dtoa_r+0xa36>
 800af58:	9902      	ldr	r1, [sp, #8]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2201      	movs	r2, #1
 800af5e:	4648      	mov	r0, r9
 800af60:	f000 fb38 	bl	800b5d4 <__lshift>
 800af64:	4621      	mov	r1, r4
 800af66:	9002      	str	r0, [sp, #8]
 800af68:	f000 fba0 	bl	800b6ac <__mcmp>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	9b00      	ldr	r3, [sp, #0]
 800af70:	dc02      	bgt.n	800af78 <_dtoa_r+0xa78>
 800af72:	d1e0      	bne.n	800af36 <_dtoa_r+0xa36>
 800af74:	07da      	lsls	r2, r3, #31
 800af76:	d5de      	bpl.n	800af36 <_dtoa_r+0xa36>
 800af78:	2b39      	cmp	r3, #57	@ 0x39
 800af7a:	d1da      	bne.n	800af32 <_dtoa_r+0xa32>
 800af7c:	2339      	movs	r3, #57	@ 0x39
 800af7e:	f88b 3000 	strb.w	r3, [fp]
 800af82:	4633      	mov	r3, r6
 800af84:	461e      	mov	r6, r3
 800af86:	3b01      	subs	r3, #1
 800af88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af8c:	2a39      	cmp	r2, #57	@ 0x39
 800af8e:	d04e      	beq.n	800b02e <_dtoa_r+0xb2e>
 800af90:	3201      	adds	r2, #1
 800af92:	701a      	strb	r2, [r3, #0]
 800af94:	e501      	b.n	800a99a <_dtoa_r+0x49a>
 800af96:	2a00      	cmp	r2, #0
 800af98:	dd03      	ble.n	800afa2 <_dtoa_r+0xaa2>
 800af9a:	2b39      	cmp	r3, #57	@ 0x39
 800af9c:	d0ee      	beq.n	800af7c <_dtoa_r+0xa7c>
 800af9e:	3301      	adds	r3, #1
 800afa0:	e7c9      	b.n	800af36 <_dtoa_r+0xa36>
 800afa2:	9a00      	ldr	r2, [sp, #0]
 800afa4:	9908      	ldr	r1, [sp, #32]
 800afa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800afaa:	428a      	cmp	r2, r1
 800afac:	d028      	beq.n	800b000 <_dtoa_r+0xb00>
 800afae:	9902      	ldr	r1, [sp, #8]
 800afb0:	2300      	movs	r3, #0
 800afb2:	220a      	movs	r2, #10
 800afb4:	4648      	mov	r0, r9
 800afb6:	f000 f91f 	bl	800b1f8 <__multadd>
 800afba:	42af      	cmp	r7, r5
 800afbc:	9002      	str	r0, [sp, #8]
 800afbe:	f04f 0300 	mov.w	r3, #0
 800afc2:	f04f 020a 	mov.w	r2, #10
 800afc6:	4639      	mov	r1, r7
 800afc8:	4648      	mov	r0, r9
 800afca:	d107      	bne.n	800afdc <_dtoa_r+0xadc>
 800afcc:	f000 f914 	bl	800b1f8 <__multadd>
 800afd0:	4607      	mov	r7, r0
 800afd2:	4605      	mov	r5, r0
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	3301      	adds	r3, #1
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	e777      	b.n	800aecc <_dtoa_r+0x9cc>
 800afdc:	f000 f90c 	bl	800b1f8 <__multadd>
 800afe0:	4629      	mov	r1, r5
 800afe2:	4607      	mov	r7, r0
 800afe4:	2300      	movs	r3, #0
 800afe6:	220a      	movs	r2, #10
 800afe8:	4648      	mov	r0, r9
 800afea:	f000 f905 	bl	800b1f8 <__multadd>
 800afee:	4605      	mov	r5, r0
 800aff0:	e7f0      	b.n	800afd4 <_dtoa_r+0xad4>
 800aff2:	f1bb 0f00 	cmp.w	fp, #0
 800aff6:	bfcc      	ite	gt
 800aff8:	465e      	movgt	r6, fp
 800affa:	2601      	movle	r6, #1
 800affc:	4456      	add	r6, sl
 800affe:	2700      	movs	r7, #0
 800b000:	9902      	ldr	r1, [sp, #8]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	2201      	movs	r2, #1
 800b006:	4648      	mov	r0, r9
 800b008:	f000 fae4 	bl	800b5d4 <__lshift>
 800b00c:	4621      	mov	r1, r4
 800b00e:	9002      	str	r0, [sp, #8]
 800b010:	f000 fb4c 	bl	800b6ac <__mcmp>
 800b014:	2800      	cmp	r0, #0
 800b016:	dcb4      	bgt.n	800af82 <_dtoa_r+0xa82>
 800b018:	d102      	bne.n	800b020 <_dtoa_r+0xb20>
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	07db      	lsls	r3, r3, #31
 800b01e:	d4b0      	bmi.n	800af82 <_dtoa_r+0xa82>
 800b020:	4633      	mov	r3, r6
 800b022:	461e      	mov	r6, r3
 800b024:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b028:	2a30      	cmp	r2, #48	@ 0x30
 800b02a:	d0fa      	beq.n	800b022 <_dtoa_r+0xb22>
 800b02c:	e4b5      	b.n	800a99a <_dtoa_r+0x49a>
 800b02e:	459a      	cmp	sl, r3
 800b030:	d1a8      	bne.n	800af84 <_dtoa_r+0xa84>
 800b032:	2331      	movs	r3, #49	@ 0x31
 800b034:	f108 0801 	add.w	r8, r8, #1
 800b038:	f88a 3000 	strb.w	r3, [sl]
 800b03c:	e4ad      	b.n	800a99a <_dtoa_r+0x49a>
 800b03e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b040:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b09c <_dtoa_r+0xb9c>
 800b044:	b11b      	cbz	r3, 800b04e <_dtoa_r+0xb4e>
 800b046:	f10a 0308 	add.w	r3, sl, #8
 800b04a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b04c:	6013      	str	r3, [r2, #0]
 800b04e:	4650      	mov	r0, sl
 800b050:	b017      	add	sp, #92	@ 0x5c
 800b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b056:	9b07      	ldr	r3, [sp, #28]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	f77f ae2e 	ble.w	800acba <_dtoa_r+0x7ba>
 800b05e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b060:	9308      	str	r3, [sp, #32]
 800b062:	2001      	movs	r0, #1
 800b064:	e64d      	b.n	800ad02 <_dtoa_r+0x802>
 800b066:	f1bb 0f00 	cmp.w	fp, #0
 800b06a:	f77f aed9 	ble.w	800ae20 <_dtoa_r+0x920>
 800b06e:	4656      	mov	r6, sl
 800b070:	9802      	ldr	r0, [sp, #8]
 800b072:	4621      	mov	r1, r4
 800b074:	f7ff f9bc 	bl	800a3f0 <quorem>
 800b078:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b07c:	f806 3b01 	strb.w	r3, [r6], #1
 800b080:	eba6 020a 	sub.w	r2, r6, sl
 800b084:	4593      	cmp	fp, r2
 800b086:	ddb4      	ble.n	800aff2 <_dtoa_r+0xaf2>
 800b088:	9902      	ldr	r1, [sp, #8]
 800b08a:	2300      	movs	r3, #0
 800b08c:	220a      	movs	r2, #10
 800b08e:	4648      	mov	r0, r9
 800b090:	f000 f8b2 	bl	800b1f8 <__multadd>
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	e7eb      	b.n	800b070 <_dtoa_r+0xb70>
 800b098:	0800dbf3 	.word	0x0800dbf3
 800b09c:	0800db77 	.word	0x0800db77

0800b0a0 <_free_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d041      	beq.n	800b12c <_free_r+0x8c>
 800b0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ac:	1f0c      	subs	r4, r1, #4
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfb8      	it	lt
 800b0b2:	18e4      	addlt	r4, r4, r3
 800b0b4:	f7fe f96e 	bl	8009394 <__malloc_lock>
 800b0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b130 <_free_r+0x90>)
 800b0ba:	6813      	ldr	r3, [r2, #0]
 800b0bc:	b933      	cbnz	r3, 800b0cc <_free_r+0x2c>
 800b0be:	6063      	str	r3, [r4, #4]
 800b0c0:	6014      	str	r4, [r2, #0]
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c8:	f7fe b96a 	b.w	80093a0 <__malloc_unlock>
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	d908      	bls.n	800b0e2 <_free_r+0x42>
 800b0d0:	6820      	ldr	r0, [r4, #0]
 800b0d2:	1821      	adds	r1, r4, r0
 800b0d4:	428b      	cmp	r3, r1
 800b0d6:	bf01      	itttt	eq
 800b0d8:	6819      	ldreq	r1, [r3, #0]
 800b0da:	685b      	ldreq	r3, [r3, #4]
 800b0dc:	1809      	addeq	r1, r1, r0
 800b0de:	6021      	streq	r1, [r4, #0]
 800b0e0:	e7ed      	b.n	800b0be <_free_r+0x1e>
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	b10b      	cbz	r3, 800b0ec <_free_r+0x4c>
 800b0e8:	42a3      	cmp	r3, r4
 800b0ea:	d9fa      	bls.n	800b0e2 <_free_r+0x42>
 800b0ec:	6811      	ldr	r1, [r2, #0]
 800b0ee:	1850      	adds	r0, r2, r1
 800b0f0:	42a0      	cmp	r0, r4
 800b0f2:	d10b      	bne.n	800b10c <_free_r+0x6c>
 800b0f4:	6820      	ldr	r0, [r4, #0]
 800b0f6:	4401      	add	r1, r0
 800b0f8:	1850      	adds	r0, r2, r1
 800b0fa:	4283      	cmp	r3, r0
 800b0fc:	6011      	str	r1, [r2, #0]
 800b0fe:	d1e0      	bne.n	800b0c2 <_free_r+0x22>
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	6053      	str	r3, [r2, #4]
 800b106:	4408      	add	r0, r1
 800b108:	6010      	str	r0, [r2, #0]
 800b10a:	e7da      	b.n	800b0c2 <_free_r+0x22>
 800b10c:	d902      	bls.n	800b114 <_free_r+0x74>
 800b10e:	230c      	movs	r3, #12
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	e7d6      	b.n	800b0c2 <_free_r+0x22>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	1821      	adds	r1, r4, r0
 800b118:	428b      	cmp	r3, r1
 800b11a:	bf04      	itt	eq
 800b11c:	6819      	ldreq	r1, [r3, #0]
 800b11e:	685b      	ldreq	r3, [r3, #4]
 800b120:	6063      	str	r3, [r4, #4]
 800b122:	bf04      	itt	eq
 800b124:	1809      	addeq	r1, r1, r0
 800b126:	6021      	streq	r1, [r4, #0]
 800b128:	6054      	str	r4, [r2, #4]
 800b12a:	e7ca      	b.n	800b0c2 <_free_r+0x22>
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	bf00      	nop
 800b130:	200007b4 	.word	0x200007b4

0800b134 <_Balloc>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	69c6      	ldr	r6, [r0, #28]
 800b138:	4604      	mov	r4, r0
 800b13a:	460d      	mov	r5, r1
 800b13c:	b976      	cbnz	r6, 800b15c <_Balloc+0x28>
 800b13e:	2010      	movs	r0, #16
 800b140:	f7fe f876 	bl	8009230 <malloc>
 800b144:	4602      	mov	r2, r0
 800b146:	61e0      	str	r0, [r4, #28]
 800b148:	b920      	cbnz	r0, 800b154 <_Balloc+0x20>
 800b14a:	4b18      	ldr	r3, [pc, #96]	@ (800b1ac <_Balloc+0x78>)
 800b14c:	4818      	ldr	r0, [pc, #96]	@ (800b1b0 <_Balloc+0x7c>)
 800b14e:	216b      	movs	r1, #107	@ 0x6b
 800b150:	f001 fd66 	bl	800cc20 <__assert_func>
 800b154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b158:	6006      	str	r6, [r0, #0]
 800b15a:	60c6      	str	r6, [r0, #12]
 800b15c:	69e6      	ldr	r6, [r4, #28]
 800b15e:	68f3      	ldr	r3, [r6, #12]
 800b160:	b183      	cbz	r3, 800b184 <_Balloc+0x50>
 800b162:	69e3      	ldr	r3, [r4, #28]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b16a:	b9b8      	cbnz	r0, 800b19c <_Balloc+0x68>
 800b16c:	2101      	movs	r1, #1
 800b16e:	fa01 f605 	lsl.w	r6, r1, r5
 800b172:	1d72      	adds	r2, r6, #5
 800b174:	0092      	lsls	r2, r2, #2
 800b176:	4620      	mov	r0, r4
 800b178:	f001 fd70 	bl	800cc5c <_calloc_r>
 800b17c:	b160      	cbz	r0, 800b198 <_Balloc+0x64>
 800b17e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b182:	e00e      	b.n	800b1a2 <_Balloc+0x6e>
 800b184:	2221      	movs	r2, #33	@ 0x21
 800b186:	2104      	movs	r1, #4
 800b188:	4620      	mov	r0, r4
 800b18a:	f001 fd67 	bl	800cc5c <_calloc_r>
 800b18e:	69e3      	ldr	r3, [r4, #28]
 800b190:	60f0      	str	r0, [r6, #12]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e4      	bne.n	800b162 <_Balloc+0x2e>
 800b198:	2000      	movs	r0, #0
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	6802      	ldr	r2, [r0, #0]
 800b19e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1a8:	e7f7      	b.n	800b19a <_Balloc+0x66>
 800b1aa:	bf00      	nop
 800b1ac:	0800db84 	.word	0x0800db84
 800b1b0:	0800dc04 	.word	0x0800dc04

0800b1b4 <_Bfree>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	69c6      	ldr	r6, [r0, #28]
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	b976      	cbnz	r6, 800b1dc <_Bfree+0x28>
 800b1be:	2010      	movs	r0, #16
 800b1c0:	f7fe f836 	bl	8009230 <malloc>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	61e8      	str	r0, [r5, #28]
 800b1c8:	b920      	cbnz	r0, 800b1d4 <_Bfree+0x20>
 800b1ca:	4b09      	ldr	r3, [pc, #36]	@ (800b1f0 <_Bfree+0x3c>)
 800b1cc:	4809      	ldr	r0, [pc, #36]	@ (800b1f4 <_Bfree+0x40>)
 800b1ce:	218f      	movs	r1, #143	@ 0x8f
 800b1d0:	f001 fd26 	bl	800cc20 <__assert_func>
 800b1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1d8:	6006      	str	r6, [r0, #0]
 800b1da:	60c6      	str	r6, [r0, #12]
 800b1dc:	b13c      	cbz	r4, 800b1ee <_Bfree+0x3a>
 800b1de:	69eb      	ldr	r3, [r5, #28]
 800b1e0:	6862      	ldr	r2, [r4, #4]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1e8:	6021      	str	r1, [r4, #0]
 800b1ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}
 800b1f0:	0800db84 	.word	0x0800db84
 800b1f4:	0800dc04 	.word	0x0800dc04

0800b1f8 <__multadd>:
 800b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fc:	690d      	ldr	r5, [r1, #16]
 800b1fe:	4607      	mov	r7, r0
 800b200:	460c      	mov	r4, r1
 800b202:	461e      	mov	r6, r3
 800b204:	f101 0c14 	add.w	ip, r1, #20
 800b208:	2000      	movs	r0, #0
 800b20a:	f8dc 3000 	ldr.w	r3, [ip]
 800b20e:	b299      	uxth	r1, r3
 800b210:	fb02 6101 	mla	r1, r2, r1, r6
 800b214:	0c1e      	lsrs	r6, r3, #16
 800b216:	0c0b      	lsrs	r3, r1, #16
 800b218:	fb02 3306 	mla	r3, r2, r6, r3
 800b21c:	b289      	uxth	r1, r1
 800b21e:	3001      	adds	r0, #1
 800b220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b224:	4285      	cmp	r5, r0
 800b226:	f84c 1b04 	str.w	r1, [ip], #4
 800b22a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b22e:	dcec      	bgt.n	800b20a <__multadd+0x12>
 800b230:	b30e      	cbz	r6, 800b276 <__multadd+0x7e>
 800b232:	68a3      	ldr	r3, [r4, #8]
 800b234:	42ab      	cmp	r3, r5
 800b236:	dc19      	bgt.n	800b26c <__multadd+0x74>
 800b238:	6861      	ldr	r1, [r4, #4]
 800b23a:	4638      	mov	r0, r7
 800b23c:	3101      	adds	r1, #1
 800b23e:	f7ff ff79 	bl	800b134 <_Balloc>
 800b242:	4680      	mov	r8, r0
 800b244:	b928      	cbnz	r0, 800b252 <__multadd+0x5a>
 800b246:	4602      	mov	r2, r0
 800b248:	4b0c      	ldr	r3, [pc, #48]	@ (800b27c <__multadd+0x84>)
 800b24a:	480d      	ldr	r0, [pc, #52]	@ (800b280 <__multadd+0x88>)
 800b24c:	21ba      	movs	r1, #186	@ 0xba
 800b24e:	f001 fce7 	bl	800cc20 <__assert_func>
 800b252:	6922      	ldr	r2, [r4, #16]
 800b254:	3202      	adds	r2, #2
 800b256:	f104 010c 	add.w	r1, r4, #12
 800b25a:	0092      	lsls	r2, r2, #2
 800b25c:	300c      	adds	r0, #12
 800b25e:	f001 fcc9 	bl	800cbf4 <memcpy>
 800b262:	4621      	mov	r1, r4
 800b264:	4638      	mov	r0, r7
 800b266:	f7ff ffa5 	bl	800b1b4 <_Bfree>
 800b26a:	4644      	mov	r4, r8
 800b26c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b270:	3501      	adds	r5, #1
 800b272:	615e      	str	r6, [r3, #20]
 800b274:	6125      	str	r5, [r4, #16]
 800b276:	4620      	mov	r0, r4
 800b278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27c:	0800dbf3 	.word	0x0800dbf3
 800b280:	0800dc04 	.word	0x0800dc04

0800b284 <__s2b>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	460c      	mov	r4, r1
 800b28a:	4615      	mov	r5, r2
 800b28c:	461f      	mov	r7, r3
 800b28e:	2209      	movs	r2, #9
 800b290:	3308      	adds	r3, #8
 800b292:	4606      	mov	r6, r0
 800b294:	fb93 f3f2 	sdiv	r3, r3, r2
 800b298:	2100      	movs	r1, #0
 800b29a:	2201      	movs	r2, #1
 800b29c:	429a      	cmp	r2, r3
 800b29e:	db09      	blt.n	800b2b4 <__s2b+0x30>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ff47 	bl	800b134 <_Balloc>
 800b2a6:	b940      	cbnz	r0, 800b2ba <__s2b+0x36>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4b19      	ldr	r3, [pc, #100]	@ (800b310 <__s2b+0x8c>)
 800b2ac:	4819      	ldr	r0, [pc, #100]	@ (800b314 <__s2b+0x90>)
 800b2ae:	21d3      	movs	r1, #211	@ 0xd3
 800b2b0:	f001 fcb6 	bl	800cc20 <__assert_func>
 800b2b4:	0052      	lsls	r2, r2, #1
 800b2b6:	3101      	adds	r1, #1
 800b2b8:	e7f0      	b.n	800b29c <__s2b+0x18>
 800b2ba:	9b08      	ldr	r3, [sp, #32]
 800b2bc:	6143      	str	r3, [r0, #20]
 800b2be:	2d09      	cmp	r5, #9
 800b2c0:	f04f 0301 	mov.w	r3, #1
 800b2c4:	6103      	str	r3, [r0, #16]
 800b2c6:	dd16      	ble.n	800b2f6 <__s2b+0x72>
 800b2c8:	f104 0909 	add.w	r9, r4, #9
 800b2cc:	46c8      	mov	r8, r9
 800b2ce:	442c      	add	r4, r5
 800b2d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2d4:	4601      	mov	r1, r0
 800b2d6:	3b30      	subs	r3, #48	@ 0x30
 800b2d8:	220a      	movs	r2, #10
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f7ff ff8c 	bl	800b1f8 <__multadd>
 800b2e0:	45a0      	cmp	r8, r4
 800b2e2:	d1f5      	bne.n	800b2d0 <__s2b+0x4c>
 800b2e4:	f1a5 0408 	sub.w	r4, r5, #8
 800b2e8:	444c      	add	r4, r9
 800b2ea:	1b2d      	subs	r5, r5, r4
 800b2ec:	1963      	adds	r3, r4, r5
 800b2ee:	42bb      	cmp	r3, r7
 800b2f0:	db04      	blt.n	800b2fc <__s2b+0x78>
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	340a      	adds	r4, #10
 800b2f8:	2509      	movs	r5, #9
 800b2fa:	e7f6      	b.n	800b2ea <__s2b+0x66>
 800b2fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b300:	4601      	mov	r1, r0
 800b302:	3b30      	subs	r3, #48	@ 0x30
 800b304:	220a      	movs	r2, #10
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ff76 	bl	800b1f8 <__multadd>
 800b30c:	e7ee      	b.n	800b2ec <__s2b+0x68>
 800b30e:	bf00      	nop
 800b310:	0800dbf3 	.word	0x0800dbf3
 800b314:	0800dc04 	.word	0x0800dc04

0800b318 <__hi0bits>:
 800b318:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b31c:	4603      	mov	r3, r0
 800b31e:	bf36      	itet	cc
 800b320:	0403      	lslcc	r3, r0, #16
 800b322:	2000      	movcs	r0, #0
 800b324:	2010      	movcc	r0, #16
 800b326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b32a:	bf3c      	itt	cc
 800b32c:	021b      	lslcc	r3, r3, #8
 800b32e:	3008      	addcc	r0, #8
 800b330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b334:	bf3c      	itt	cc
 800b336:	011b      	lslcc	r3, r3, #4
 800b338:	3004      	addcc	r0, #4
 800b33a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b33e:	bf3c      	itt	cc
 800b340:	009b      	lslcc	r3, r3, #2
 800b342:	3002      	addcc	r0, #2
 800b344:	2b00      	cmp	r3, #0
 800b346:	db05      	blt.n	800b354 <__hi0bits+0x3c>
 800b348:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b34c:	f100 0001 	add.w	r0, r0, #1
 800b350:	bf08      	it	eq
 800b352:	2020      	moveq	r0, #32
 800b354:	4770      	bx	lr

0800b356 <__lo0bits>:
 800b356:	6803      	ldr	r3, [r0, #0]
 800b358:	4602      	mov	r2, r0
 800b35a:	f013 0007 	ands.w	r0, r3, #7
 800b35e:	d00b      	beq.n	800b378 <__lo0bits+0x22>
 800b360:	07d9      	lsls	r1, r3, #31
 800b362:	d421      	bmi.n	800b3a8 <__lo0bits+0x52>
 800b364:	0798      	lsls	r0, r3, #30
 800b366:	bf49      	itett	mi
 800b368:	085b      	lsrmi	r3, r3, #1
 800b36a:	089b      	lsrpl	r3, r3, #2
 800b36c:	2001      	movmi	r0, #1
 800b36e:	6013      	strmi	r3, [r2, #0]
 800b370:	bf5c      	itt	pl
 800b372:	6013      	strpl	r3, [r2, #0]
 800b374:	2002      	movpl	r0, #2
 800b376:	4770      	bx	lr
 800b378:	b299      	uxth	r1, r3
 800b37a:	b909      	cbnz	r1, 800b380 <__lo0bits+0x2a>
 800b37c:	0c1b      	lsrs	r3, r3, #16
 800b37e:	2010      	movs	r0, #16
 800b380:	b2d9      	uxtb	r1, r3
 800b382:	b909      	cbnz	r1, 800b388 <__lo0bits+0x32>
 800b384:	3008      	adds	r0, #8
 800b386:	0a1b      	lsrs	r3, r3, #8
 800b388:	0719      	lsls	r1, r3, #28
 800b38a:	bf04      	itt	eq
 800b38c:	091b      	lsreq	r3, r3, #4
 800b38e:	3004      	addeq	r0, #4
 800b390:	0799      	lsls	r1, r3, #30
 800b392:	bf04      	itt	eq
 800b394:	089b      	lsreq	r3, r3, #2
 800b396:	3002      	addeq	r0, #2
 800b398:	07d9      	lsls	r1, r3, #31
 800b39a:	d403      	bmi.n	800b3a4 <__lo0bits+0x4e>
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	f100 0001 	add.w	r0, r0, #1
 800b3a2:	d003      	beq.n	800b3ac <__lo0bits+0x56>
 800b3a4:	6013      	str	r3, [r2, #0]
 800b3a6:	4770      	bx	lr
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	4770      	bx	lr
 800b3ac:	2020      	movs	r0, #32
 800b3ae:	4770      	bx	lr

0800b3b0 <__i2b>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	f7ff febd 	bl	800b134 <_Balloc>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	b928      	cbnz	r0, 800b3ca <__i2b+0x1a>
 800b3be:	4b05      	ldr	r3, [pc, #20]	@ (800b3d4 <__i2b+0x24>)
 800b3c0:	4805      	ldr	r0, [pc, #20]	@ (800b3d8 <__i2b+0x28>)
 800b3c2:	f240 1145 	movw	r1, #325	@ 0x145
 800b3c6:	f001 fc2b 	bl	800cc20 <__assert_func>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	6144      	str	r4, [r0, #20]
 800b3ce:	6103      	str	r3, [r0, #16]
 800b3d0:	bd10      	pop	{r4, pc}
 800b3d2:	bf00      	nop
 800b3d4:	0800dbf3 	.word	0x0800dbf3
 800b3d8:	0800dc04 	.word	0x0800dc04

0800b3dc <__multiply>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	4617      	mov	r7, r2
 800b3e2:	690a      	ldr	r2, [r1, #16]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	bfa8      	it	ge
 800b3ea:	463b      	movge	r3, r7
 800b3ec:	4689      	mov	r9, r1
 800b3ee:	bfa4      	itt	ge
 800b3f0:	460f      	movge	r7, r1
 800b3f2:	4699      	movge	r9, r3
 800b3f4:	693d      	ldr	r5, [r7, #16]
 800b3f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	eb05 060a 	add.w	r6, r5, sl
 800b402:	42b3      	cmp	r3, r6
 800b404:	b085      	sub	sp, #20
 800b406:	bfb8      	it	lt
 800b408:	3101      	addlt	r1, #1
 800b40a:	f7ff fe93 	bl	800b134 <_Balloc>
 800b40e:	b930      	cbnz	r0, 800b41e <__multiply+0x42>
 800b410:	4602      	mov	r2, r0
 800b412:	4b41      	ldr	r3, [pc, #260]	@ (800b518 <__multiply+0x13c>)
 800b414:	4841      	ldr	r0, [pc, #260]	@ (800b51c <__multiply+0x140>)
 800b416:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b41a:	f001 fc01 	bl	800cc20 <__assert_func>
 800b41e:	f100 0414 	add.w	r4, r0, #20
 800b422:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b426:	4623      	mov	r3, r4
 800b428:	2200      	movs	r2, #0
 800b42a:	4573      	cmp	r3, lr
 800b42c:	d320      	bcc.n	800b470 <__multiply+0x94>
 800b42e:	f107 0814 	add.w	r8, r7, #20
 800b432:	f109 0114 	add.w	r1, r9, #20
 800b436:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b43a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	1beb      	subs	r3, r5, r7
 800b442:	3b15      	subs	r3, #21
 800b444:	f023 0303 	bic.w	r3, r3, #3
 800b448:	3304      	adds	r3, #4
 800b44a:	3715      	adds	r7, #21
 800b44c:	42bd      	cmp	r5, r7
 800b44e:	bf38      	it	cc
 800b450:	2304      	movcc	r3, #4
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	9b02      	ldr	r3, [sp, #8]
 800b456:	9103      	str	r1, [sp, #12]
 800b458:	428b      	cmp	r3, r1
 800b45a:	d80c      	bhi.n	800b476 <__multiply+0x9a>
 800b45c:	2e00      	cmp	r6, #0
 800b45e:	dd03      	ble.n	800b468 <__multiply+0x8c>
 800b460:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b464:	2b00      	cmp	r3, #0
 800b466:	d055      	beq.n	800b514 <__multiply+0x138>
 800b468:	6106      	str	r6, [r0, #16]
 800b46a:	b005      	add	sp, #20
 800b46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b470:	f843 2b04 	str.w	r2, [r3], #4
 800b474:	e7d9      	b.n	800b42a <__multiply+0x4e>
 800b476:	f8b1 a000 	ldrh.w	sl, [r1]
 800b47a:	f1ba 0f00 	cmp.w	sl, #0
 800b47e:	d01f      	beq.n	800b4c0 <__multiply+0xe4>
 800b480:	46c4      	mov	ip, r8
 800b482:	46a1      	mov	r9, r4
 800b484:	2700      	movs	r7, #0
 800b486:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b48a:	f8d9 3000 	ldr.w	r3, [r9]
 800b48e:	fa1f fb82 	uxth.w	fp, r2
 800b492:	b29b      	uxth	r3, r3
 800b494:	fb0a 330b 	mla	r3, sl, fp, r3
 800b498:	443b      	add	r3, r7
 800b49a:	f8d9 7000 	ldr.w	r7, [r9]
 800b49e:	0c12      	lsrs	r2, r2, #16
 800b4a0:	0c3f      	lsrs	r7, r7, #16
 800b4a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b4a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b0:	4565      	cmp	r5, ip
 800b4b2:	f849 3b04 	str.w	r3, [r9], #4
 800b4b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b4ba:	d8e4      	bhi.n	800b486 <__multiply+0xaa>
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	50e7      	str	r7, [r4, r3]
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b4c6:	3104      	adds	r1, #4
 800b4c8:	f1b9 0f00 	cmp.w	r9, #0
 800b4cc:	d020      	beq.n	800b510 <__multiply+0x134>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	4647      	mov	r7, r8
 800b4d2:	46a4      	mov	ip, r4
 800b4d4:	f04f 0a00 	mov.w	sl, #0
 800b4d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b4dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b4e0:	fb09 220b 	mla	r2, r9, fp, r2
 800b4e4:	4452      	add	r2, sl
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4ec:	f84c 3b04 	str.w	r3, [ip], #4
 800b4f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b4f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b4fc:	fb09 330a 	mla	r3, r9, sl, r3
 800b500:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b504:	42bd      	cmp	r5, r7
 800b506:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b50a:	d8e5      	bhi.n	800b4d8 <__multiply+0xfc>
 800b50c:	9a01      	ldr	r2, [sp, #4]
 800b50e:	50a3      	str	r3, [r4, r2]
 800b510:	3404      	adds	r4, #4
 800b512:	e79f      	b.n	800b454 <__multiply+0x78>
 800b514:	3e01      	subs	r6, #1
 800b516:	e7a1      	b.n	800b45c <__multiply+0x80>
 800b518:	0800dbf3 	.word	0x0800dbf3
 800b51c:	0800dc04 	.word	0x0800dc04

0800b520 <__pow5mult>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	4615      	mov	r5, r2
 800b526:	f012 0203 	ands.w	r2, r2, #3
 800b52a:	4607      	mov	r7, r0
 800b52c:	460e      	mov	r6, r1
 800b52e:	d007      	beq.n	800b540 <__pow5mult+0x20>
 800b530:	4c25      	ldr	r4, [pc, #148]	@ (800b5c8 <__pow5mult+0xa8>)
 800b532:	3a01      	subs	r2, #1
 800b534:	2300      	movs	r3, #0
 800b536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b53a:	f7ff fe5d 	bl	800b1f8 <__multadd>
 800b53e:	4606      	mov	r6, r0
 800b540:	10ad      	asrs	r5, r5, #2
 800b542:	d03d      	beq.n	800b5c0 <__pow5mult+0xa0>
 800b544:	69fc      	ldr	r4, [r7, #28]
 800b546:	b97c      	cbnz	r4, 800b568 <__pow5mult+0x48>
 800b548:	2010      	movs	r0, #16
 800b54a:	f7fd fe71 	bl	8009230 <malloc>
 800b54e:	4602      	mov	r2, r0
 800b550:	61f8      	str	r0, [r7, #28]
 800b552:	b928      	cbnz	r0, 800b560 <__pow5mult+0x40>
 800b554:	4b1d      	ldr	r3, [pc, #116]	@ (800b5cc <__pow5mult+0xac>)
 800b556:	481e      	ldr	r0, [pc, #120]	@ (800b5d0 <__pow5mult+0xb0>)
 800b558:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b55c:	f001 fb60 	bl	800cc20 <__assert_func>
 800b560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b564:	6004      	str	r4, [r0, #0]
 800b566:	60c4      	str	r4, [r0, #12]
 800b568:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b570:	b94c      	cbnz	r4, 800b586 <__pow5mult+0x66>
 800b572:	f240 2171 	movw	r1, #625	@ 0x271
 800b576:	4638      	mov	r0, r7
 800b578:	f7ff ff1a 	bl	800b3b0 <__i2b>
 800b57c:	2300      	movs	r3, #0
 800b57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b582:	4604      	mov	r4, r0
 800b584:	6003      	str	r3, [r0, #0]
 800b586:	f04f 0900 	mov.w	r9, #0
 800b58a:	07eb      	lsls	r3, r5, #31
 800b58c:	d50a      	bpl.n	800b5a4 <__pow5mult+0x84>
 800b58e:	4631      	mov	r1, r6
 800b590:	4622      	mov	r2, r4
 800b592:	4638      	mov	r0, r7
 800b594:	f7ff ff22 	bl	800b3dc <__multiply>
 800b598:	4631      	mov	r1, r6
 800b59a:	4680      	mov	r8, r0
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff fe09 	bl	800b1b4 <_Bfree>
 800b5a2:	4646      	mov	r6, r8
 800b5a4:	106d      	asrs	r5, r5, #1
 800b5a6:	d00b      	beq.n	800b5c0 <__pow5mult+0xa0>
 800b5a8:	6820      	ldr	r0, [r4, #0]
 800b5aa:	b938      	cbnz	r0, 800b5bc <__pow5mult+0x9c>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff ff13 	bl	800b3dc <__multiply>
 800b5b6:	6020      	str	r0, [r4, #0]
 800b5b8:	f8c0 9000 	str.w	r9, [r0]
 800b5bc:	4604      	mov	r4, r0
 800b5be:	e7e4      	b.n	800b58a <__pow5mult+0x6a>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800dd14 	.word	0x0800dd14
 800b5cc:	0800db84 	.word	0x0800db84
 800b5d0:	0800dc04 	.word	0x0800dc04

0800b5d4 <__lshift>:
 800b5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d8:	460c      	mov	r4, r1
 800b5da:	6849      	ldr	r1, [r1, #4]
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	4607      	mov	r7, r0
 800b5e6:	4691      	mov	r9, r2
 800b5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5ec:	f108 0601 	add.w	r6, r8, #1
 800b5f0:	42b3      	cmp	r3, r6
 800b5f2:	db0b      	blt.n	800b60c <__lshift+0x38>
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff fd9d 	bl	800b134 <_Balloc>
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	b948      	cbnz	r0, 800b612 <__lshift+0x3e>
 800b5fe:	4602      	mov	r2, r0
 800b600:	4b28      	ldr	r3, [pc, #160]	@ (800b6a4 <__lshift+0xd0>)
 800b602:	4829      	ldr	r0, [pc, #164]	@ (800b6a8 <__lshift+0xd4>)
 800b604:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b608:	f001 fb0a 	bl	800cc20 <__assert_func>
 800b60c:	3101      	adds	r1, #1
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	e7ee      	b.n	800b5f0 <__lshift+0x1c>
 800b612:	2300      	movs	r3, #0
 800b614:	f100 0114 	add.w	r1, r0, #20
 800b618:	f100 0210 	add.w	r2, r0, #16
 800b61c:	4618      	mov	r0, r3
 800b61e:	4553      	cmp	r3, sl
 800b620:	db33      	blt.n	800b68a <__lshift+0xb6>
 800b622:	6920      	ldr	r0, [r4, #16]
 800b624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b628:	f104 0314 	add.w	r3, r4, #20
 800b62c:	f019 091f 	ands.w	r9, r9, #31
 800b630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b638:	d02b      	beq.n	800b692 <__lshift+0xbe>
 800b63a:	f1c9 0e20 	rsb	lr, r9, #32
 800b63e:	468a      	mov	sl, r1
 800b640:	2200      	movs	r2, #0
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	fa00 f009 	lsl.w	r0, r0, r9
 800b648:	4310      	orrs	r0, r2
 800b64a:	f84a 0b04 	str.w	r0, [sl], #4
 800b64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b652:	459c      	cmp	ip, r3
 800b654:	fa22 f20e 	lsr.w	r2, r2, lr
 800b658:	d8f3      	bhi.n	800b642 <__lshift+0x6e>
 800b65a:	ebac 0304 	sub.w	r3, ip, r4
 800b65e:	3b15      	subs	r3, #21
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	3304      	adds	r3, #4
 800b666:	f104 0015 	add.w	r0, r4, #21
 800b66a:	4560      	cmp	r0, ip
 800b66c:	bf88      	it	hi
 800b66e:	2304      	movhi	r3, #4
 800b670:	50ca      	str	r2, [r1, r3]
 800b672:	b10a      	cbz	r2, 800b678 <__lshift+0xa4>
 800b674:	f108 0602 	add.w	r6, r8, #2
 800b678:	3e01      	subs	r6, #1
 800b67a:	4638      	mov	r0, r7
 800b67c:	612e      	str	r6, [r5, #16]
 800b67e:	4621      	mov	r1, r4
 800b680:	f7ff fd98 	bl	800b1b4 <_Bfree>
 800b684:	4628      	mov	r0, r5
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b68e:	3301      	adds	r3, #1
 800b690:	e7c5      	b.n	800b61e <__lshift+0x4a>
 800b692:	3904      	subs	r1, #4
 800b694:	f853 2b04 	ldr.w	r2, [r3], #4
 800b698:	f841 2f04 	str.w	r2, [r1, #4]!
 800b69c:	459c      	cmp	ip, r3
 800b69e:	d8f9      	bhi.n	800b694 <__lshift+0xc0>
 800b6a0:	e7ea      	b.n	800b678 <__lshift+0xa4>
 800b6a2:	bf00      	nop
 800b6a4:	0800dbf3 	.word	0x0800dbf3
 800b6a8:	0800dc04 	.word	0x0800dc04

0800b6ac <__mcmp>:
 800b6ac:	690a      	ldr	r2, [r1, #16]
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6900      	ldr	r0, [r0, #16]
 800b6b2:	1a80      	subs	r0, r0, r2
 800b6b4:	b530      	push	{r4, r5, lr}
 800b6b6:	d10e      	bne.n	800b6d6 <__mcmp+0x2a>
 800b6b8:	3314      	adds	r3, #20
 800b6ba:	3114      	adds	r1, #20
 800b6bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6cc:	4295      	cmp	r5, r2
 800b6ce:	d003      	beq.n	800b6d8 <__mcmp+0x2c>
 800b6d0:	d205      	bcs.n	800b6de <__mcmp+0x32>
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	bd30      	pop	{r4, r5, pc}
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	d3f3      	bcc.n	800b6c4 <__mcmp+0x18>
 800b6dc:	e7fb      	b.n	800b6d6 <__mcmp+0x2a>
 800b6de:	2001      	movs	r0, #1
 800b6e0:	e7f9      	b.n	800b6d6 <__mcmp+0x2a>
	...

0800b6e4 <__mdiff>:
 800b6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	4689      	mov	r9, r1
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4648      	mov	r0, r9
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	f7ff ffdb 	bl	800b6ac <__mcmp>
 800b6f6:	1e05      	subs	r5, r0, #0
 800b6f8:	d112      	bne.n	800b720 <__mdiff+0x3c>
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fd19 	bl	800b134 <_Balloc>
 800b702:	4602      	mov	r2, r0
 800b704:	b928      	cbnz	r0, 800b712 <__mdiff+0x2e>
 800b706:	4b3f      	ldr	r3, [pc, #252]	@ (800b804 <__mdiff+0x120>)
 800b708:	f240 2137 	movw	r1, #567	@ 0x237
 800b70c:	483e      	ldr	r0, [pc, #248]	@ (800b808 <__mdiff+0x124>)
 800b70e:	f001 fa87 	bl	800cc20 <__assert_func>
 800b712:	2301      	movs	r3, #1
 800b714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b718:	4610      	mov	r0, r2
 800b71a:	b003      	add	sp, #12
 800b71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b720:	bfbc      	itt	lt
 800b722:	464b      	movlt	r3, r9
 800b724:	46a1      	movlt	r9, r4
 800b726:	4630      	mov	r0, r6
 800b728:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b72c:	bfba      	itte	lt
 800b72e:	461c      	movlt	r4, r3
 800b730:	2501      	movlt	r5, #1
 800b732:	2500      	movge	r5, #0
 800b734:	f7ff fcfe 	bl	800b134 <_Balloc>
 800b738:	4602      	mov	r2, r0
 800b73a:	b918      	cbnz	r0, 800b744 <__mdiff+0x60>
 800b73c:	4b31      	ldr	r3, [pc, #196]	@ (800b804 <__mdiff+0x120>)
 800b73e:	f240 2145 	movw	r1, #581	@ 0x245
 800b742:	e7e3      	b.n	800b70c <__mdiff+0x28>
 800b744:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b748:	6926      	ldr	r6, [r4, #16]
 800b74a:	60c5      	str	r5, [r0, #12]
 800b74c:	f109 0310 	add.w	r3, r9, #16
 800b750:	f109 0514 	add.w	r5, r9, #20
 800b754:	f104 0e14 	add.w	lr, r4, #20
 800b758:	f100 0b14 	add.w	fp, r0, #20
 800b75c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b760:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	46d9      	mov	r9, fp
 800b768:	f04f 0c00 	mov.w	ip, #0
 800b76c:	9b01      	ldr	r3, [sp, #4]
 800b76e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b772:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	fa1f f38a 	uxth.w	r3, sl
 800b77c:	4619      	mov	r1, r3
 800b77e:	b283      	uxth	r3, r0
 800b780:	1acb      	subs	r3, r1, r3
 800b782:	0c00      	lsrs	r0, r0, #16
 800b784:	4463      	add	r3, ip
 800b786:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b78a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b78e:	b29b      	uxth	r3, r3
 800b790:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b794:	4576      	cmp	r6, lr
 800b796:	f849 3b04 	str.w	r3, [r9], #4
 800b79a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b79e:	d8e5      	bhi.n	800b76c <__mdiff+0x88>
 800b7a0:	1b33      	subs	r3, r6, r4
 800b7a2:	3b15      	subs	r3, #21
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	3415      	adds	r4, #21
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	42a6      	cmp	r6, r4
 800b7ae:	bf38      	it	cc
 800b7b0:	2304      	movcc	r3, #4
 800b7b2:	441d      	add	r5, r3
 800b7b4:	445b      	add	r3, fp
 800b7b6:	461e      	mov	r6, r3
 800b7b8:	462c      	mov	r4, r5
 800b7ba:	4544      	cmp	r4, r8
 800b7bc:	d30e      	bcc.n	800b7dc <__mdiff+0xf8>
 800b7be:	f108 0103 	add.w	r1, r8, #3
 800b7c2:	1b49      	subs	r1, r1, r5
 800b7c4:	f021 0103 	bic.w	r1, r1, #3
 800b7c8:	3d03      	subs	r5, #3
 800b7ca:	45a8      	cmp	r8, r5
 800b7cc:	bf38      	it	cc
 800b7ce:	2100      	movcc	r1, #0
 800b7d0:	440b      	add	r3, r1
 800b7d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7d6:	b191      	cbz	r1, 800b7fe <__mdiff+0x11a>
 800b7d8:	6117      	str	r7, [r2, #16]
 800b7da:	e79d      	b.n	800b718 <__mdiff+0x34>
 800b7dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7e0:	46e6      	mov	lr, ip
 800b7e2:	0c08      	lsrs	r0, r1, #16
 800b7e4:	fa1c fc81 	uxtah	ip, ip, r1
 800b7e8:	4471      	add	r1, lr
 800b7ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7ee:	b289      	uxth	r1, r1
 800b7f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7f4:	f846 1b04 	str.w	r1, [r6], #4
 800b7f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7fc:	e7dd      	b.n	800b7ba <__mdiff+0xd6>
 800b7fe:	3f01      	subs	r7, #1
 800b800:	e7e7      	b.n	800b7d2 <__mdiff+0xee>
 800b802:	bf00      	nop
 800b804:	0800dbf3 	.word	0x0800dbf3
 800b808:	0800dc04 	.word	0x0800dc04

0800b80c <__ulp>:
 800b80c:	b082      	sub	sp, #8
 800b80e:	ed8d 0b00 	vstr	d0, [sp]
 800b812:	9a01      	ldr	r2, [sp, #4]
 800b814:	4b0f      	ldr	r3, [pc, #60]	@ (800b854 <__ulp+0x48>)
 800b816:	4013      	ands	r3, r2
 800b818:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dc08      	bgt.n	800b832 <__ulp+0x26>
 800b820:	425b      	negs	r3, r3
 800b822:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b826:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b82a:	da04      	bge.n	800b836 <__ulp+0x2a>
 800b82c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b830:	4113      	asrs	r3, r2
 800b832:	2200      	movs	r2, #0
 800b834:	e008      	b.n	800b848 <__ulp+0x3c>
 800b836:	f1a2 0314 	sub.w	r3, r2, #20
 800b83a:	2b1e      	cmp	r3, #30
 800b83c:	bfda      	itte	le
 800b83e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b842:	40da      	lsrle	r2, r3
 800b844:	2201      	movgt	r2, #1
 800b846:	2300      	movs	r3, #0
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	ec41 0b10 	vmov	d0, r0, r1
 800b850:	b002      	add	sp, #8
 800b852:	4770      	bx	lr
 800b854:	7ff00000 	.word	0x7ff00000

0800b858 <__b2d>:
 800b858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85c:	6906      	ldr	r6, [r0, #16]
 800b85e:	f100 0814 	add.w	r8, r0, #20
 800b862:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b866:	1f37      	subs	r7, r6, #4
 800b868:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7ff fd53 	bl	800b318 <__hi0bits>
 800b872:	f1c0 0320 	rsb	r3, r0, #32
 800b876:	280a      	cmp	r0, #10
 800b878:	600b      	str	r3, [r1, #0]
 800b87a:	491b      	ldr	r1, [pc, #108]	@ (800b8e8 <__b2d+0x90>)
 800b87c:	dc15      	bgt.n	800b8aa <__b2d+0x52>
 800b87e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b882:	fa22 f30c 	lsr.w	r3, r2, ip
 800b886:	45b8      	cmp	r8, r7
 800b888:	ea43 0501 	orr.w	r5, r3, r1
 800b88c:	bf34      	ite	cc
 800b88e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b892:	2300      	movcs	r3, #0
 800b894:	3015      	adds	r0, #21
 800b896:	fa02 f000 	lsl.w	r0, r2, r0
 800b89a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b89e:	4303      	orrs	r3, r0
 800b8a0:	461c      	mov	r4, r3
 800b8a2:	ec45 4b10 	vmov	d0, r4, r5
 800b8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8aa:	45b8      	cmp	r8, r7
 800b8ac:	bf3a      	itte	cc
 800b8ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b8b2:	f1a6 0708 	subcc.w	r7, r6, #8
 800b8b6:	2300      	movcs	r3, #0
 800b8b8:	380b      	subs	r0, #11
 800b8ba:	d012      	beq.n	800b8e2 <__b2d+0x8a>
 800b8bc:	f1c0 0120 	rsb	r1, r0, #32
 800b8c0:	fa23 f401 	lsr.w	r4, r3, r1
 800b8c4:	4082      	lsls	r2, r0
 800b8c6:	4322      	orrs	r2, r4
 800b8c8:	4547      	cmp	r7, r8
 800b8ca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b8ce:	bf8c      	ite	hi
 800b8d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b8d4:	2200      	movls	r2, #0
 800b8d6:	4083      	lsls	r3, r0
 800b8d8:	40ca      	lsrs	r2, r1
 800b8da:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	e7de      	b.n	800b8a0 <__b2d+0x48>
 800b8e2:	ea42 0501 	orr.w	r5, r2, r1
 800b8e6:	e7db      	b.n	800b8a0 <__b2d+0x48>
 800b8e8:	3ff00000 	.word	0x3ff00000

0800b8ec <__d2b>:
 800b8ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	ec59 8b10 	vmov	r8, r9, d0
 800b8f8:	4616      	mov	r6, r2
 800b8fa:	f7ff fc1b 	bl	800b134 <_Balloc>
 800b8fe:	4604      	mov	r4, r0
 800b900:	b930      	cbnz	r0, 800b910 <__d2b+0x24>
 800b902:	4602      	mov	r2, r0
 800b904:	4b23      	ldr	r3, [pc, #140]	@ (800b994 <__d2b+0xa8>)
 800b906:	4824      	ldr	r0, [pc, #144]	@ (800b998 <__d2b+0xac>)
 800b908:	f240 310f 	movw	r1, #783	@ 0x30f
 800b90c:	f001 f988 	bl	800cc20 <__assert_func>
 800b910:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b914:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b918:	b10d      	cbz	r5, 800b91e <__d2b+0x32>
 800b91a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	f1b8 0300 	subs.w	r3, r8, #0
 800b924:	d023      	beq.n	800b96e <__d2b+0x82>
 800b926:	4668      	mov	r0, sp
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	f7ff fd14 	bl	800b356 <__lo0bits>
 800b92e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b932:	b1d0      	cbz	r0, 800b96a <__d2b+0x7e>
 800b934:	f1c0 0320 	rsb	r3, r0, #32
 800b938:	fa02 f303 	lsl.w	r3, r2, r3
 800b93c:	430b      	orrs	r3, r1
 800b93e:	40c2      	lsrs	r2, r0
 800b940:	6163      	str	r3, [r4, #20]
 800b942:	9201      	str	r2, [sp, #4]
 800b944:	9b01      	ldr	r3, [sp, #4]
 800b946:	61a3      	str	r3, [r4, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bf0c      	ite	eq
 800b94c:	2201      	moveq	r2, #1
 800b94e:	2202      	movne	r2, #2
 800b950:	6122      	str	r2, [r4, #16]
 800b952:	b1a5      	cbz	r5, 800b97e <__d2b+0x92>
 800b954:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b958:	4405      	add	r5, r0
 800b95a:	603d      	str	r5, [r7, #0]
 800b95c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b960:	6030      	str	r0, [r6, #0]
 800b962:	4620      	mov	r0, r4
 800b964:	b003      	add	sp, #12
 800b966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b96a:	6161      	str	r1, [r4, #20]
 800b96c:	e7ea      	b.n	800b944 <__d2b+0x58>
 800b96e:	a801      	add	r0, sp, #4
 800b970:	f7ff fcf1 	bl	800b356 <__lo0bits>
 800b974:	9b01      	ldr	r3, [sp, #4]
 800b976:	6163      	str	r3, [r4, #20]
 800b978:	3020      	adds	r0, #32
 800b97a:	2201      	movs	r2, #1
 800b97c:	e7e8      	b.n	800b950 <__d2b+0x64>
 800b97e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b982:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b986:	6038      	str	r0, [r7, #0]
 800b988:	6918      	ldr	r0, [r3, #16]
 800b98a:	f7ff fcc5 	bl	800b318 <__hi0bits>
 800b98e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b992:	e7e5      	b.n	800b960 <__d2b+0x74>
 800b994:	0800dbf3 	.word	0x0800dbf3
 800b998:	0800dc04 	.word	0x0800dc04

0800b99c <__ratio>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	e9cd 1000 	strd	r1, r0, [sp]
 800b9a6:	a902      	add	r1, sp, #8
 800b9a8:	f7ff ff56 	bl	800b858 <__b2d>
 800b9ac:	9800      	ldr	r0, [sp, #0]
 800b9ae:	a903      	add	r1, sp, #12
 800b9b0:	ec55 4b10 	vmov	r4, r5, d0
 800b9b4:	f7ff ff50 	bl	800b858 <__b2d>
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	6919      	ldr	r1, [r3, #16]
 800b9bc:	9b00      	ldr	r3, [sp, #0]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	1ac9      	subs	r1, r1, r3
 800b9c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b9c6:	1a9b      	subs	r3, r3, r2
 800b9c8:	ec5b ab10 	vmov	sl, fp, d0
 800b9cc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfce      	itee	gt
 800b9d4:	462a      	movgt	r2, r5
 800b9d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9da:	465a      	movle	r2, fp
 800b9dc:	462f      	mov	r7, r5
 800b9de:	46d9      	mov	r9, fp
 800b9e0:	bfcc      	ite	gt
 800b9e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9e6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	4652      	mov	r2, sl
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	f7f4 ff3b 	bl	800086c <__aeabi_ddiv>
 800b9f6:	ec41 0b10 	vmov	d0, r0, r1
 800b9fa:	b005      	add	sp, #20
 800b9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba00 <__copybits>:
 800ba00:	3901      	subs	r1, #1
 800ba02:	b570      	push	{r4, r5, r6, lr}
 800ba04:	1149      	asrs	r1, r1, #5
 800ba06:	6914      	ldr	r4, [r2, #16]
 800ba08:	3101      	adds	r1, #1
 800ba0a:	f102 0314 	add.w	r3, r2, #20
 800ba0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba16:	1f05      	subs	r5, r0, #4
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	d30c      	bcc.n	800ba36 <__copybits+0x36>
 800ba1c:	1aa3      	subs	r3, r4, r2
 800ba1e:	3b11      	subs	r3, #17
 800ba20:	f023 0303 	bic.w	r3, r3, #3
 800ba24:	3211      	adds	r2, #17
 800ba26:	42a2      	cmp	r2, r4
 800ba28:	bf88      	it	hi
 800ba2a:	2300      	movhi	r3, #0
 800ba2c:	4418      	add	r0, r3
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4288      	cmp	r0, r1
 800ba32:	d305      	bcc.n	800ba40 <__copybits+0x40>
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba3a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba3e:	e7eb      	b.n	800ba18 <__copybits+0x18>
 800ba40:	f840 3b04 	str.w	r3, [r0], #4
 800ba44:	e7f4      	b.n	800ba30 <__copybits+0x30>

0800ba46 <__any_on>:
 800ba46:	f100 0214 	add.w	r2, r0, #20
 800ba4a:	6900      	ldr	r0, [r0, #16]
 800ba4c:	114b      	asrs	r3, r1, #5
 800ba4e:	4298      	cmp	r0, r3
 800ba50:	b510      	push	{r4, lr}
 800ba52:	db11      	blt.n	800ba78 <__any_on+0x32>
 800ba54:	dd0a      	ble.n	800ba6c <__any_on+0x26>
 800ba56:	f011 011f 	ands.w	r1, r1, #31
 800ba5a:	d007      	beq.n	800ba6c <__any_on+0x26>
 800ba5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba60:	fa24 f001 	lsr.w	r0, r4, r1
 800ba64:	fa00 f101 	lsl.w	r1, r0, r1
 800ba68:	428c      	cmp	r4, r1
 800ba6a:	d10b      	bne.n	800ba84 <__any_on+0x3e>
 800ba6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d803      	bhi.n	800ba7c <__any_on+0x36>
 800ba74:	2000      	movs	r0, #0
 800ba76:	bd10      	pop	{r4, pc}
 800ba78:	4603      	mov	r3, r0
 800ba7a:	e7f7      	b.n	800ba6c <__any_on+0x26>
 800ba7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d0f5      	beq.n	800ba70 <__any_on+0x2a>
 800ba84:	2001      	movs	r0, #1
 800ba86:	e7f6      	b.n	800ba76 <__any_on+0x30>

0800ba88 <sulp>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	ec45 4b10 	vmov	d0, r4, r5
 800ba92:	4616      	mov	r6, r2
 800ba94:	f7ff feba 	bl	800b80c <__ulp>
 800ba98:	ec51 0b10 	vmov	r0, r1, d0
 800ba9c:	b17e      	cbz	r6, 800babe <sulp+0x36>
 800ba9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800baa2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dd09      	ble.n	800babe <sulp+0x36>
 800baaa:	051b      	lsls	r3, r3, #20
 800baac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bab0:	2400      	movs	r4, #0
 800bab2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bab6:	4622      	mov	r2, r4
 800bab8:	462b      	mov	r3, r5
 800baba:	f7f4 fdad 	bl	8000618 <__aeabi_dmul>
 800babe:	ec41 0b10 	vmov	d0, r0, r1
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	0000      	movs	r0, r0
	...

0800bac8 <_strtod_l>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	b09f      	sub	sp, #124	@ 0x7c
 800bace:	460c      	mov	r4, r1
 800bad0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bad2:	2200      	movs	r2, #0
 800bad4:	921a      	str	r2, [sp, #104]	@ 0x68
 800bad6:	9005      	str	r0, [sp, #20]
 800bad8:	f04f 0a00 	mov.w	sl, #0
 800badc:	f04f 0b00 	mov.w	fp, #0
 800bae0:	460a      	mov	r2, r1
 800bae2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bae4:	7811      	ldrb	r1, [r2, #0]
 800bae6:	292b      	cmp	r1, #43	@ 0x2b
 800bae8:	d04a      	beq.n	800bb80 <_strtod_l+0xb8>
 800baea:	d838      	bhi.n	800bb5e <_strtod_l+0x96>
 800baec:	290d      	cmp	r1, #13
 800baee:	d832      	bhi.n	800bb56 <_strtod_l+0x8e>
 800baf0:	2908      	cmp	r1, #8
 800baf2:	d832      	bhi.n	800bb5a <_strtod_l+0x92>
 800baf4:	2900      	cmp	r1, #0
 800baf6:	d03b      	beq.n	800bb70 <_strtod_l+0xa8>
 800baf8:	2200      	movs	r2, #0
 800bafa:	920e      	str	r2, [sp, #56]	@ 0x38
 800bafc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bafe:	782a      	ldrb	r2, [r5, #0]
 800bb00:	2a30      	cmp	r2, #48	@ 0x30
 800bb02:	f040 80b2 	bne.w	800bc6a <_strtod_l+0x1a2>
 800bb06:	786a      	ldrb	r2, [r5, #1]
 800bb08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb0c:	2a58      	cmp	r2, #88	@ 0x58
 800bb0e:	d16e      	bne.n	800bbee <_strtod_l+0x126>
 800bb10:	9302      	str	r3, [sp, #8]
 800bb12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	ab1a      	add	r3, sp, #104	@ 0x68
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	4a8f      	ldr	r2, [pc, #572]	@ (800bd58 <_strtod_l+0x290>)
 800bb1c:	9805      	ldr	r0, [sp, #20]
 800bb1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bb20:	a919      	add	r1, sp, #100	@ 0x64
 800bb22:	f001 f917 	bl	800cd54 <__gethex>
 800bb26:	f010 060f 	ands.w	r6, r0, #15
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	d005      	beq.n	800bb3a <_strtod_l+0x72>
 800bb2e:	2e06      	cmp	r6, #6
 800bb30:	d128      	bne.n	800bb84 <_strtod_l+0xbc>
 800bb32:	3501      	adds	r5, #1
 800bb34:	2300      	movs	r3, #0
 800bb36:	9519      	str	r5, [sp, #100]	@ 0x64
 800bb38:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f040 858e 	bne.w	800c65e <_strtod_l+0xb96>
 800bb42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb44:	b1cb      	cbz	r3, 800bb7a <_strtod_l+0xb2>
 800bb46:	4652      	mov	r2, sl
 800bb48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bb4c:	ec43 2b10 	vmov	d0, r2, r3
 800bb50:	b01f      	add	sp, #124	@ 0x7c
 800bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	2920      	cmp	r1, #32
 800bb58:	d1ce      	bne.n	800baf8 <_strtod_l+0x30>
 800bb5a:	3201      	adds	r2, #1
 800bb5c:	e7c1      	b.n	800bae2 <_strtod_l+0x1a>
 800bb5e:	292d      	cmp	r1, #45	@ 0x2d
 800bb60:	d1ca      	bne.n	800baf8 <_strtod_l+0x30>
 800bb62:	2101      	movs	r1, #1
 800bb64:	910e      	str	r1, [sp, #56]	@ 0x38
 800bb66:	1c51      	adds	r1, r2, #1
 800bb68:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb6a:	7852      	ldrb	r2, [r2, #1]
 800bb6c:	2a00      	cmp	r2, #0
 800bb6e:	d1c5      	bne.n	800bafc <_strtod_l+0x34>
 800bb70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb72:	9419      	str	r4, [sp, #100]	@ 0x64
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f040 8570 	bne.w	800c65a <_strtod_l+0xb92>
 800bb7a:	4652      	mov	r2, sl
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	e7e5      	b.n	800bb4c <_strtod_l+0x84>
 800bb80:	2100      	movs	r1, #0
 800bb82:	e7ef      	b.n	800bb64 <_strtod_l+0x9c>
 800bb84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb86:	b13a      	cbz	r2, 800bb98 <_strtod_l+0xd0>
 800bb88:	2135      	movs	r1, #53	@ 0x35
 800bb8a:	a81c      	add	r0, sp, #112	@ 0x70
 800bb8c:	f7ff ff38 	bl	800ba00 <__copybits>
 800bb90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb92:	9805      	ldr	r0, [sp, #20]
 800bb94:	f7ff fb0e 	bl	800b1b4 <_Bfree>
 800bb98:	3e01      	subs	r6, #1
 800bb9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bb9c:	2e04      	cmp	r6, #4
 800bb9e:	d806      	bhi.n	800bbae <_strtod_l+0xe6>
 800bba0:	e8df f006 	tbb	[pc, r6]
 800bba4:	201d0314 	.word	0x201d0314
 800bba8:	14          	.byte	0x14
 800bba9:	00          	.byte	0x00
 800bbaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bbae:	05e1      	lsls	r1, r4, #23
 800bbb0:	bf48      	it	mi
 800bbb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bbb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbba:	0d1b      	lsrs	r3, r3, #20
 800bbbc:	051b      	lsls	r3, r3, #20
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1bb      	bne.n	800bb3a <_strtod_l+0x72>
 800bbc2:	f7fe fbe1 	bl	800a388 <__errno>
 800bbc6:	2322      	movs	r3, #34	@ 0x22
 800bbc8:	6003      	str	r3, [r0, #0]
 800bbca:	e7b6      	b.n	800bb3a <_strtod_l+0x72>
 800bbcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bbd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bbd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bbd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bbdc:	e7e7      	b.n	800bbae <_strtod_l+0xe6>
 800bbde:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800bd60 <_strtod_l+0x298>
 800bbe2:	e7e4      	b.n	800bbae <_strtod_l+0xe6>
 800bbe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bbe8:	f04f 3aff 	mov.w	sl, #4294967295
 800bbec:	e7df      	b.n	800bbae <_strtod_l+0xe6>
 800bbee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bbf4:	785b      	ldrb	r3, [r3, #1]
 800bbf6:	2b30      	cmp	r3, #48	@ 0x30
 800bbf8:	d0f9      	beq.n	800bbee <_strtod_l+0x126>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d09d      	beq.n	800bb3a <_strtod_l+0x72>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	2700      	movs	r7, #0
 800bc02:	9308      	str	r3, [sp, #32]
 800bc04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc06:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc08:	970b      	str	r7, [sp, #44]	@ 0x2c
 800bc0a:	46b9      	mov	r9, r7
 800bc0c:	220a      	movs	r2, #10
 800bc0e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bc10:	7805      	ldrb	r5, [r0, #0]
 800bc12:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bc16:	b2d9      	uxtb	r1, r3
 800bc18:	2909      	cmp	r1, #9
 800bc1a:	d928      	bls.n	800bc6e <_strtod_l+0x1a6>
 800bc1c:	494f      	ldr	r1, [pc, #316]	@ (800bd5c <_strtod_l+0x294>)
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f000 ffd6 	bl	800cbd0 <strncmp>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d032      	beq.n	800bc8e <_strtod_l+0x1c6>
 800bc28:	2000      	movs	r0, #0
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc2e:	464d      	mov	r5, r9
 800bc30:	4603      	mov	r3, r0
 800bc32:	2a65      	cmp	r2, #101	@ 0x65
 800bc34:	d001      	beq.n	800bc3a <_strtod_l+0x172>
 800bc36:	2a45      	cmp	r2, #69	@ 0x45
 800bc38:	d114      	bne.n	800bc64 <_strtod_l+0x19c>
 800bc3a:	b91d      	cbnz	r5, 800bc44 <_strtod_l+0x17c>
 800bc3c:	9a08      	ldr	r2, [sp, #32]
 800bc3e:	4302      	orrs	r2, r0
 800bc40:	d096      	beq.n	800bb70 <_strtod_l+0xa8>
 800bc42:	2500      	movs	r5, #0
 800bc44:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bc46:	1c62      	adds	r2, r4, #1
 800bc48:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc4a:	7862      	ldrb	r2, [r4, #1]
 800bc4c:	2a2b      	cmp	r2, #43	@ 0x2b
 800bc4e:	d07a      	beq.n	800bd46 <_strtod_l+0x27e>
 800bc50:	2a2d      	cmp	r2, #45	@ 0x2d
 800bc52:	d07e      	beq.n	800bd52 <_strtod_l+0x28a>
 800bc54:	f04f 0c00 	mov.w	ip, #0
 800bc58:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bc5c:	2909      	cmp	r1, #9
 800bc5e:	f240 8085 	bls.w	800bd6c <_strtod_l+0x2a4>
 800bc62:	9419      	str	r4, [sp, #100]	@ 0x64
 800bc64:	f04f 0800 	mov.w	r8, #0
 800bc68:	e0a5      	b.n	800bdb6 <_strtod_l+0x2ee>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e7c8      	b.n	800bc00 <_strtod_l+0x138>
 800bc6e:	f1b9 0f08 	cmp.w	r9, #8
 800bc72:	bfd8      	it	le
 800bc74:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800bc76:	f100 0001 	add.w	r0, r0, #1
 800bc7a:	bfda      	itte	le
 800bc7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800bc82:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bc86:	f109 0901 	add.w	r9, r9, #1
 800bc8a:	9019      	str	r0, [sp, #100]	@ 0x64
 800bc8c:	e7bf      	b.n	800bc0e <_strtod_l+0x146>
 800bc8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc90:	1c5a      	adds	r2, r3, #1
 800bc92:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc94:	785a      	ldrb	r2, [r3, #1]
 800bc96:	f1b9 0f00 	cmp.w	r9, #0
 800bc9a:	d03b      	beq.n	800bd14 <_strtod_l+0x24c>
 800bc9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc9e:	464d      	mov	r5, r9
 800bca0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bca4:	2b09      	cmp	r3, #9
 800bca6:	d912      	bls.n	800bcce <_strtod_l+0x206>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e7c2      	b.n	800bc32 <_strtod_l+0x16a>
 800bcac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	9219      	str	r2, [sp, #100]	@ 0x64
 800bcb2:	785a      	ldrb	r2, [r3, #1]
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	2a30      	cmp	r2, #48	@ 0x30
 800bcb8:	d0f8      	beq.n	800bcac <_strtod_l+0x1e4>
 800bcba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bcbe:	2b08      	cmp	r3, #8
 800bcc0:	f200 84d2 	bhi.w	800c668 <_strtod_l+0xba0>
 800bcc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcc6:	900a      	str	r0, [sp, #40]	@ 0x28
 800bcc8:	2000      	movs	r0, #0
 800bcca:	930c      	str	r3, [sp, #48]	@ 0x30
 800bccc:	4605      	mov	r5, r0
 800bcce:	3a30      	subs	r2, #48	@ 0x30
 800bcd0:	f100 0301 	add.w	r3, r0, #1
 800bcd4:	d018      	beq.n	800bd08 <_strtod_l+0x240>
 800bcd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcd8:	4419      	add	r1, r3
 800bcda:	910a      	str	r1, [sp, #40]	@ 0x28
 800bcdc:	462e      	mov	r6, r5
 800bcde:	f04f 0e0a 	mov.w	lr, #10
 800bce2:	1c71      	adds	r1, r6, #1
 800bce4:	eba1 0c05 	sub.w	ip, r1, r5
 800bce8:	4563      	cmp	r3, ip
 800bcea:	dc15      	bgt.n	800bd18 <_strtod_l+0x250>
 800bcec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bcf0:	182b      	adds	r3, r5, r0
 800bcf2:	2b08      	cmp	r3, #8
 800bcf4:	f105 0501 	add.w	r5, r5, #1
 800bcf8:	4405      	add	r5, r0
 800bcfa:	dc1a      	bgt.n	800bd32 <_strtod_l+0x26a>
 800bcfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcfe:	230a      	movs	r3, #10
 800bd00:	fb03 2301 	mla	r3, r3, r1, r2
 800bd04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd06:	2300      	movs	r3, #0
 800bd08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd0a:	1c51      	adds	r1, r2, #1
 800bd0c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bd0e:	7852      	ldrb	r2, [r2, #1]
 800bd10:	4618      	mov	r0, r3
 800bd12:	e7c5      	b.n	800bca0 <_strtod_l+0x1d8>
 800bd14:	4648      	mov	r0, r9
 800bd16:	e7ce      	b.n	800bcb6 <_strtod_l+0x1ee>
 800bd18:	2e08      	cmp	r6, #8
 800bd1a:	dc05      	bgt.n	800bd28 <_strtod_l+0x260>
 800bd1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bd1e:	fb0e f606 	mul.w	r6, lr, r6
 800bd22:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bd24:	460e      	mov	r6, r1
 800bd26:	e7dc      	b.n	800bce2 <_strtod_l+0x21a>
 800bd28:	2910      	cmp	r1, #16
 800bd2a:	bfd8      	it	le
 800bd2c:	fb0e f707 	mulle.w	r7, lr, r7
 800bd30:	e7f8      	b.n	800bd24 <_strtod_l+0x25c>
 800bd32:	2b0f      	cmp	r3, #15
 800bd34:	bfdc      	itt	le
 800bd36:	230a      	movle	r3, #10
 800bd38:	fb03 2707 	mlale	r7, r3, r7, r2
 800bd3c:	e7e3      	b.n	800bd06 <_strtod_l+0x23e>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd42:	2301      	movs	r3, #1
 800bd44:	e77a      	b.n	800bc3c <_strtod_l+0x174>
 800bd46:	f04f 0c00 	mov.w	ip, #0
 800bd4a:	1ca2      	adds	r2, r4, #2
 800bd4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd4e:	78a2      	ldrb	r2, [r4, #2]
 800bd50:	e782      	b.n	800bc58 <_strtod_l+0x190>
 800bd52:	f04f 0c01 	mov.w	ip, #1
 800bd56:	e7f8      	b.n	800bd4a <_strtod_l+0x282>
 800bd58:	0800de24 	.word	0x0800de24
 800bd5c:	0800dc5d 	.word	0x0800dc5d
 800bd60:	7ff00000 	.word	0x7ff00000
 800bd64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd66:	1c51      	adds	r1, r2, #1
 800bd68:	9119      	str	r1, [sp, #100]	@ 0x64
 800bd6a:	7852      	ldrb	r2, [r2, #1]
 800bd6c:	2a30      	cmp	r2, #48	@ 0x30
 800bd6e:	d0f9      	beq.n	800bd64 <_strtod_l+0x29c>
 800bd70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bd74:	2908      	cmp	r1, #8
 800bd76:	f63f af75 	bhi.w	800bc64 <_strtod_l+0x19c>
 800bd7a:	3a30      	subs	r2, #48	@ 0x30
 800bd7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd80:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bd82:	f04f 080a 	mov.w	r8, #10
 800bd86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd88:	1c56      	adds	r6, r2, #1
 800bd8a:	9619      	str	r6, [sp, #100]	@ 0x64
 800bd8c:	7852      	ldrb	r2, [r2, #1]
 800bd8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bd92:	f1be 0f09 	cmp.w	lr, #9
 800bd96:	d939      	bls.n	800be0c <_strtod_l+0x344>
 800bd98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bd9a:	1a76      	subs	r6, r6, r1
 800bd9c:	2e08      	cmp	r6, #8
 800bd9e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bda2:	dc03      	bgt.n	800bdac <_strtod_l+0x2e4>
 800bda4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bda6:	4588      	cmp	r8, r1
 800bda8:	bfa8      	it	ge
 800bdaa:	4688      	movge	r8, r1
 800bdac:	f1bc 0f00 	cmp.w	ip, #0
 800bdb0:	d001      	beq.n	800bdb6 <_strtod_l+0x2ee>
 800bdb2:	f1c8 0800 	rsb	r8, r8, #0
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	d14e      	bne.n	800be58 <_strtod_l+0x390>
 800bdba:	9908      	ldr	r1, [sp, #32]
 800bdbc:	4308      	orrs	r0, r1
 800bdbe:	f47f aebc 	bne.w	800bb3a <_strtod_l+0x72>
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f47f aed4 	bne.w	800bb70 <_strtod_l+0xa8>
 800bdc8:	2a69      	cmp	r2, #105	@ 0x69
 800bdca:	d028      	beq.n	800be1e <_strtod_l+0x356>
 800bdcc:	dc25      	bgt.n	800be1a <_strtod_l+0x352>
 800bdce:	2a49      	cmp	r2, #73	@ 0x49
 800bdd0:	d025      	beq.n	800be1e <_strtod_l+0x356>
 800bdd2:	2a4e      	cmp	r2, #78	@ 0x4e
 800bdd4:	f47f aecc 	bne.w	800bb70 <_strtod_l+0xa8>
 800bdd8:	499a      	ldr	r1, [pc, #616]	@ (800c044 <_strtod_l+0x57c>)
 800bdda:	a819      	add	r0, sp, #100	@ 0x64
 800bddc:	f001 f9dc 	bl	800d198 <__match>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	f43f aec5 	beq.w	800bb70 <_strtod_l+0xa8>
 800bde6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b28      	cmp	r3, #40	@ 0x28
 800bdec:	d12e      	bne.n	800be4c <_strtod_l+0x384>
 800bdee:	4996      	ldr	r1, [pc, #600]	@ (800c048 <_strtod_l+0x580>)
 800bdf0:	aa1c      	add	r2, sp, #112	@ 0x70
 800bdf2:	a819      	add	r0, sp, #100	@ 0x64
 800bdf4:	f001 f9e4 	bl	800d1c0 <__hexnan>
 800bdf8:	2805      	cmp	r0, #5
 800bdfa:	d127      	bne.n	800be4c <_strtod_l+0x384>
 800bdfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bdfe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800be02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800be06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800be0a:	e696      	b.n	800bb3a <_strtod_l+0x72>
 800be0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be0e:	fb08 2101 	mla	r1, r8, r1, r2
 800be12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800be16:	9209      	str	r2, [sp, #36]	@ 0x24
 800be18:	e7b5      	b.n	800bd86 <_strtod_l+0x2be>
 800be1a:	2a6e      	cmp	r2, #110	@ 0x6e
 800be1c:	e7da      	b.n	800bdd4 <_strtod_l+0x30c>
 800be1e:	498b      	ldr	r1, [pc, #556]	@ (800c04c <_strtod_l+0x584>)
 800be20:	a819      	add	r0, sp, #100	@ 0x64
 800be22:	f001 f9b9 	bl	800d198 <__match>
 800be26:	2800      	cmp	r0, #0
 800be28:	f43f aea2 	beq.w	800bb70 <_strtod_l+0xa8>
 800be2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be2e:	4988      	ldr	r1, [pc, #544]	@ (800c050 <_strtod_l+0x588>)
 800be30:	3b01      	subs	r3, #1
 800be32:	a819      	add	r0, sp, #100	@ 0x64
 800be34:	9319      	str	r3, [sp, #100]	@ 0x64
 800be36:	f001 f9af 	bl	800d198 <__match>
 800be3a:	b910      	cbnz	r0, 800be42 <_strtod_l+0x37a>
 800be3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be3e:	3301      	adds	r3, #1
 800be40:	9319      	str	r3, [sp, #100]	@ 0x64
 800be42:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c060 <_strtod_l+0x598>
 800be46:	f04f 0a00 	mov.w	sl, #0
 800be4a:	e676      	b.n	800bb3a <_strtod_l+0x72>
 800be4c:	4881      	ldr	r0, [pc, #516]	@ (800c054 <_strtod_l+0x58c>)
 800be4e:	f000 fedf 	bl	800cc10 <nan>
 800be52:	ec5b ab10 	vmov	sl, fp, d0
 800be56:	e670      	b.n	800bb3a <_strtod_l+0x72>
 800be58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be5a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800be5c:	eba8 0303 	sub.w	r3, r8, r3
 800be60:	f1b9 0f00 	cmp.w	r9, #0
 800be64:	bf08      	it	eq
 800be66:	46a9      	moveq	r9, r5
 800be68:	2d10      	cmp	r5, #16
 800be6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be6c:	462c      	mov	r4, r5
 800be6e:	bfa8      	it	ge
 800be70:	2410      	movge	r4, #16
 800be72:	f7f4 fb57 	bl	8000524 <__aeabi_ui2d>
 800be76:	2d09      	cmp	r5, #9
 800be78:	4682      	mov	sl, r0
 800be7a:	468b      	mov	fp, r1
 800be7c:	dc13      	bgt.n	800bea6 <_strtod_l+0x3de>
 800be7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	f43f ae5a 	beq.w	800bb3a <_strtod_l+0x72>
 800be86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be88:	dd78      	ble.n	800bf7c <_strtod_l+0x4b4>
 800be8a:	2b16      	cmp	r3, #22
 800be8c:	dc5f      	bgt.n	800bf4e <_strtod_l+0x486>
 800be8e:	4972      	ldr	r1, [pc, #456]	@ (800c058 <_strtod_l+0x590>)
 800be90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be98:	4652      	mov	r2, sl
 800be9a:	465b      	mov	r3, fp
 800be9c:	f7f4 fbbc 	bl	8000618 <__aeabi_dmul>
 800bea0:	4682      	mov	sl, r0
 800bea2:	468b      	mov	fp, r1
 800bea4:	e649      	b.n	800bb3a <_strtod_l+0x72>
 800bea6:	4b6c      	ldr	r3, [pc, #432]	@ (800c058 <_strtod_l+0x590>)
 800bea8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800beac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800beb0:	f7f4 fbb2 	bl	8000618 <__aeabi_dmul>
 800beb4:	4682      	mov	sl, r0
 800beb6:	4638      	mov	r0, r7
 800beb8:	468b      	mov	fp, r1
 800beba:	f7f4 fb33 	bl	8000524 <__aeabi_ui2d>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	4650      	mov	r0, sl
 800bec4:	4659      	mov	r1, fp
 800bec6:	f7f4 f9f1 	bl	80002ac <__adddf3>
 800beca:	2d0f      	cmp	r5, #15
 800becc:	4682      	mov	sl, r0
 800bece:	468b      	mov	fp, r1
 800bed0:	ddd5      	ble.n	800be7e <_strtod_l+0x3b6>
 800bed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed4:	1b2c      	subs	r4, r5, r4
 800bed6:	441c      	add	r4, r3
 800bed8:	2c00      	cmp	r4, #0
 800beda:	f340 8093 	ble.w	800c004 <_strtod_l+0x53c>
 800bede:	f014 030f 	ands.w	r3, r4, #15
 800bee2:	d00a      	beq.n	800befa <_strtod_l+0x432>
 800bee4:	495c      	ldr	r1, [pc, #368]	@ (800c058 <_strtod_l+0x590>)
 800bee6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800beea:	4652      	mov	r2, sl
 800beec:	465b      	mov	r3, fp
 800beee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bef2:	f7f4 fb91 	bl	8000618 <__aeabi_dmul>
 800bef6:	4682      	mov	sl, r0
 800bef8:	468b      	mov	fp, r1
 800befa:	f034 040f 	bics.w	r4, r4, #15
 800befe:	d073      	beq.n	800bfe8 <_strtod_l+0x520>
 800bf00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bf04:	dd49      	ble.n	800bf9a <_strtod_l+0x4d2>
 800bf06:	2400      	movs	r4, #0
 800bf08:	46a0      	mov	r8, r4
 800bf0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf0c:	46a1      	mov	r9, r4
 800bf0e:	9a05      	ldr	r2, [sp, #20]
 800bf10:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c060 <_strtod_l+0x598>
 800bf14:	2322      	movs	r3, #34	@ 0x22
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	f04f 0a00 	mov.w	sl, #0
 800bf1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f43f ae0b 	beq.w	800bb3a <_strtod_l+0x72>
 800bf24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf26:	9805      	ldr	r0, [sp, #20]
 800bf28:	f7ff f944 	bl	800b1b4 <_Bfree>
 800bf2c:	9805      	ldr	r0, [sp, #20]
 800bf2e:	4649      	mov	r1, r9
 800bf30:	f7ff f940 	bl	800b1b4 <_Bfree>
 800bf34:	9805      	ldr	r0, [sp, #20]
 800bf36:	4641      	mov	r1, r8
 800bf38:	f7ff f93c 	bl	800b1b4 <_Bfree>
 800bf3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf3e:	9805      	ldr	r0, [sp, #20]
 800bf40:	f7ff f938 	bl	800b1b4 <_Bfree>
 800bf44:	9805      	ldr	r0, [sp, #20]
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7ff f934 	bl	800b1b4 <_Bfree>
 800bf4c:	e5f5      	b.n	800bb3a <_strtod_l+0x72>
 800bf4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bf54:	4293      	cmp	r3, r2
 800bf56:	dbbc      	blt.n	800bed2 <_strtod_l+0x40a>
 800bf58:	4c3f      	ldr	r4, [pc, #252]	@ (800c058 <_strtod_l+0x590>)
 800bf5a:	f1c5 050f 	rsb	r5, r5, #15
 800bf5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bf62:	4652      	mov	r2, sl
 800bf64:	465b      	mov	r3, fp
 800bf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf6a:	f7f4 fb55 	bl	8000618 <__aeabi_dmul>
 800bf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf70:	1b5d      	subs	r5, r3, r5
 800bf72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bf76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bf7a:	e78f      	b.n	800be9c <_strtod_l+0x3d4>
 800bf7c:	3316      	adds	r3, #22
 800bf7e:	dba8      	blt.n	800bed2 <_strtod_l+0x40a>
 800bf80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf82:	eba3 0808 	sub.w	r8, r3, r8
 800bf86:	4b34      	ldr	r3, [pc, #208]	@ (800c058 <_strtod_l+0x590>)
 800bf88:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bf8c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bf90:	4650      	mov	r0, sl
 800bf92:	4659      	mov	r1, fp
 800bf94:	f7f4 fc6a 	bl	800086c <__aeabi_ddiv>
 800bf98:	e782      	b.n	800bea0 <_strtod_l+0x3d8>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4f2f      	ldr	r7, [pc, #188]	@ (800c05c <_strtod_l+0x594>)
 800bf9e:	1124      	asrs	r4, r4, #4
 800bfa0:	4650      	mov	r0, sl
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	461e      	mov	r6, r3
 800bfa6:	2c01      	cmp	r4, #1
 800bfa8:	dc21      	bgt.n	800bfee <_strtod_l+0x526>
 800bfaa:	b10b      	cbz	r3, 800bfb0 <_strtod_l+0x4e8>
 800bfac:	4682      	mov	sl, r0
 800bfae:	468b      	mov	fp, r1
 800bfb0:	492a      	ldr	r1, [pc, #168]	@ (800c05c <_strtod_l+0x594>)
 800bfb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bfb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bfba:	4652      	mov	r2, sl
 800bfbc:	465b      	mov	r3, fp
 800bfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc2:	f7f4 fb29 	bl	8000618 <__aeabi_dmul>
 800bfc6:	4b26      	ldr	r3, [pc, #152]	@ (800c060 <_strtod_l+0x598>)
 800bfc8:	460a      	mov	r2, r1
 800bfca:	400b      	ands	r3, r1
 800bfcc:	4925      	ldr	r1, [pc, #148]	@ (800c064 <_strtod_l+0x59c>)
 800bfce:	428b      	cmp	r3, r1
 800bfd0:	4682      	mov	sl, r0
 800bfd2:	d898      	bhi.n	800bf06 <_strtod_l+0x43e>
 800bfd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	bf86      	itte	hi
 800bfdc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c068 <_strtod_l+0x5a0>
 800bfe0:	f04f 3aff 	movhi.w	sl, #4294967295
 800bfe4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bfe8:	2300      	movs	r3, #0
 800bfea:	9308      	str	r3, [sp, #32]
 800bfec:	e076      	b.n	800c0dc <_strtod_l+0x614>
 800bfee:	07e2      	lsls	r2, r4, #31
 800bff0:	d504      	bpl.n	800bffc <_strtod_l+0x534>
 800bff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff6:	f7f4 fb0f 	bl	8000618 <__aeabi_dmul>
 800bffa:	2301      	movs	r3, #1
 800bffc:	3601      	adds	r6, #1
 800bffe:	1064      	asrs	r4, r4, #1
 800c000:	3708      	adds	r7, #8
 800c002:	e7d0      	b.n	800bfa6 <_strtod_l+0x4de>
 800c004:	d0f0      	beq.n	800bfe8 <_strtod_l+0x520>
 800c006:	4264      	negs	r4, r4
 800c008:	f014 020f 	ands.w	r2, r4, #15
 800c00c:	d00a      	beq.n	800c024 <_strtod_l+0x55c>
 800c00e:	4b12      	ldr	r3, [pc, #72]	@ (800c058 <_strtod_l+0x590>)
 800c010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c014:	4650      	mov	r0, sl
 800c016:	4659      	mov	r1, fp
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	f7f4 fc26 	bl	800086c <__aeabi_ddiv>
 800c020:	4682      	mov	sl, r0
 800c022:	468b      	mov	fp, r1
 800c024:	1124      	asrs	r4, r4, #4
 800c026:	d0df      	beq.n	800bfe8 <_strtod_l+0x520>
 800c028:	2c1f      	cmp	r4, #31
 800c02a:	dd1f      	ble.n	800c06c <_strtod_l+0x5a4>
 800c02c:	2400      	movs	r4, #0
 800c02e:	46a0      	mov	r8, r4
 800c030:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c032:	46a1      	mov	r9, r4
 800c034:	9a05      	ldr	r2, [sp, #20]
 800c036:	2322      	movs	r3, #34	@ 0x22
 800c038:	f04f 0a00 	mov.w	sl, #0
 800c03c:	f04f 0b00 	mov.w	fp, #0
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	e76b      	b.n	800bf1c <_strtod_l+0x454>
 800c044:	0800db4b 	.word	0x0800db4b
 800c048:	0800de10 	.word	0x0800de10
 800c04c:	0800db43 	.word	0x0800db43
 800c050:	0800db7a 	.word	0x0800db7a
 800c054:	0800dcb3 	.word	0x0800dcb3
 800c058:	0800dd48 	.word	0x0800dd48
 800c05c:	0800dd20 	.word	0x0800dd20
 800c060:	7ff00000 	.word	0x7ff00000
 800c064:	7ca00000 	.word	0x7ca00000
 800c068:	7fefffff 	.word	0x7fefffff
 800c06c:	f014 0310 	ands.w	r3, r4, #16
 800c070:	bf18      	it	ne
 800c072:	236a      	movne	r3, #106	@ 0x6a
 800c074:	4ea9      	ldr	r6, [pc, #676]	@ (800c31c <_strtod_l+0x854>)
 800c076:	9308      	str	r3, [sp, #32]
 800c078:	4650      	mov	r0, sl
 800c07a:	4659      	mov	r1, fp
 800c07c:	2300      	movs	r3, #0
 800c07e:	07e7      	lsls	r7, r4, #31
 800c080:	d504      	bpl.n	800c08c <_strtod_l+0x5c4>
 800c082:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c086:	f7f4 fac7 	bl	8000618 <__aeabi_dmul>
 800c08a:	2301      	movs	r3, #1
 800c08c:	1064      	asrs	r4, r4, #1
 800c08e:	f106 0608 	add.w	r6, r6, #8
 800c092:	d1f4      	bne.n	800c07e <_strtod_l+0x5b6>
 800c094:	b10b      	cbz	r3, 800c09a <_strtod_l+0x5d2>
 800c096:	4682      	mov	sl, r0
 800c098:	468b      	mov	fp, r1
 800c09a:	9b08      	ldr	r3, [sp, #32]
 800c09c:	b1b3      	cbz	r3, 800c0cc <_strtod_l+0x604>
 800c09e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c0a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	4659      	mov	r1, fp
 800c0aa:	dd0f      	ble.n	800c0cc <_strtod_l+0x604>
 800c0ac:	2b1f      	cmp	r3, #31
 800c0ae:	dd56      	ble.n	800c15e <_strtod_l+0x696>
 800c0b0:	2b34      	cmp	r3, #52	@ 0x34
 800c0b2:	bfde      	ittt	le
 800c0b4:	f04f 33ff 	movle.w	r3, #4294967295
 800c0b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c0bc:	4093      	lslle	r3, r2
 800c0be:	f04f 0a00 	mov.w	sl, #0
 800c0c2:	bfcc      	ite	gt
 800c0c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c0c8:	ea03 0b01 	andle.w	fp, r3, r1
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4659      	mov	r1, fp
 800c0d4:	f7f4 fd08 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d1a7      	bne.n	800c02c <_strtod_l+0x564>
 800c0dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c0e2:	9805      	ldr	r0, [sp, #20]
 800c0e4:	462b      	mov	r3, r5
 800c0e6:	464a      	mov	r2, r9
 800c0e8:	f7ff f8cc 	bl	800b284 <__s2b>
 800c0ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f af09 	beq.w	800bf06 <_strtod_l+0x43e>
 800c0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	eba3 0308 	sub.w	r3, r3, r8
 800c0fe:	bfa8      	it	ge
 800c100:	2300      	movge	r3, #0
 800c102:	9312      	str	r3, [sp, #72]	@ 0x48
 800c104:	2400      	movs	r4, #0
 800c106:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c10a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c10c:	46a0      	mov	r8, r4
 800c10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c110:	9805      	ldr	r0, [sp, #20]
 800c112:	6859      	ldr	r1, [r3, #4]
 800c114:	f7ff f80e 	bl	800b134 <_Balloc>
 800c118:	4681      	mov	r9, r0
 800c11a:	2800      	cmp	r0, #0
 800c11c:	f43f aef7 	beq.w	800bf0e <_strtod_l+0x446>
 800c120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c122:	691a      	ldr	r2, [r3, #16]
 800c124:	3202      	adds	r2, #2
 800c126:	f103 010c 	add.w	r1, r3, #12
 800c12a:	0092      	lsls	r2, r2, #2
 800c12c:	300c      	adds	r0, #12
 800c12e:	f000 fd61 	bl	800cbf4 <memcpy>
 800c132:	ec4b ab10 	vmov	d0, sl, fp
 800c136:	9805      	ldr	r0, [sp, #20]
 800c138:	aa1c      	add	r2, sp, #112	@ 0x70
 800c13a:	a91b      	add	r1, sp, #108	@ 0x6c
 800c13c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c140:	f7ff fbd4 	bl	800b8ec <__d2b>
 800c144:	901a      	str	r0, [sp, #104]	@ 0x68
 800c146:	2800      	cmp	r0, #0
 800c148:	f43f aee1 	beq.w	800bf0e <_strtod_l+0x446>
 800c14c:	9805      	ldr	r0, [sp, #20]
 800c14e:	2101      	movs	r1, #1
 800c150:	f7ff f92e 	bl	800b3b0 <__i2b>
 800c154:	4680      	mov	r8, r0
 800c156:	b948      	cbnz	r0, 800c16c <_strtod_l+0x6a4>
 800c158:	f04f 0800 	mov.w	r8, #0
 800c15c:	e6d7      	b.n	800bf0e <_strtod_l+0x446>
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	fa02 f303 	lsl.w	r3, r2, r3
 800c166:	ea03 0a0a 	and.w	sl, r3, sl
 800c16a:	e7af      	b.n	800c0cc <_strtod_l+0x604>
 800c16c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c16e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c170:	2d00      	cmp	r5, #0
 800c172:	bfab      	itete	ge
 800c174:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c176:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c178:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c17a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c17c:	bfac      	ite	ge
 800c17e:	18ef      	addge	r7, r5, r3
 800c180:	1b5e      	sublt	r6, r3, r5
 800c182:	9b08      	ldr	r3, [sp, #32]
 800c184:	1aed      	subs	r5, r5, r3
 800c186:	4415      	add	r5, r2
 800c188:	4b65      	ldr	r3, [pc, #404]	@ (800c320 <_strtod_l+0x858>)
 800c18a:	3d01      	subs	r5, #1
 800c18c:	429d      	cmp	r5, r3
 800c18e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c192:	da50      	bge.n	800c236 <_strtod_l+0x76e>
 800c194:	1b5b      	subs	r3, r3, r5
 800c196:	2b1f      	cmp	r3, #31
 800c198:	eba2 0203 	sub.w	r2, r2, r3
 800c19c:	f04f 0101 	mov.w	r1, #1
 800c1a0:	dc3d      	bgt.n	800c21e <_strtod_l+0x756>
 800c1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800c1ac:	18bd      	adds	r5, r7, r2
 800c1ae:	9b08      	ldr	r3, [sp, #32]
 800c1b0:	42af      	cmp	r7, r5
 800c1b2:	4416      	add	r6, r2
 800c1b4:	441e      	add	r6, r3
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	bfa8      	it	ge
 800c1ba:	462b      	movge	r3, r5
 800c1bc:	42b3      	cmp	r3, r6
 800c1be:	bfa8      	it	ge
 800c1c0:	4633      	movge	r3, r6
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	bfc2      	ittt	gt
 800c1c6:	1aed      	subgt	r5, r5, r3
 800c1c8:	1af6      	subgt	r6, r6, r3
 800c1ca:	1aff      	subgt	r7, r7, r3
 800c1cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dd16      	ble.n	800c200 <_strtod_l+0x738>
 800c1d2:	4641      	mov	r1, r8
 800c1d4:	9805      	ldr	r0, [sp, #20]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f7ff f9a2 	bl	800b520 <__pow5mult>
 800c1dc:	4680      	mov	r8, r0
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d0ba      	beq.n	800c158 <_strtod_l+0x690>
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1e6:	9805      	ldr	r0, [sp, #20]
 800c1e8:	f7ff f8f8 	bl	800b3dc <__multiply>
 800c1ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f43f ae8d 	beq.w	800bf0e <_strtod_l+0x446>
 800c1f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	f7fe ffdc 	bl	800b1b4 <_Bfree>
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800c200:	2d00      	cmp	r5, #0
 800c202:	dc1d      	bgt.n	800c240 <_strtod_l+0x778>
 800c204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c206:	2b00      	cmp	r3, #0
 800c208:	dd23      	ble.n	800c252 <_strtod_l+0x78a>
 800c20a:	4649      	mov	r1, r9
 800c20c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c20e:	9805      	ldr	r0, [sp, #20]
 800c210:	f7ff f986 	bl	800b520 <__pow5mult>
 800c214:	4681      	mov	r9, r0
 800c216:	b9e0      	cbnz	r0, 800c252 <_strtod_l+0x78a>
 800c218:	f04f 0900 	mov.w	r9, #0
 800c21c:	e677      	b.n	800bf0e <_strtod_l+0x446>
 800c21e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c222:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c226:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c22a:	35e2      	adds	r5, #226	@ 0xe2
 800c22c:	fa01 f305 	lsl.w	r3, r1, r5
 800c230:	9310      	str	r3, [sp, #64]	@ 0x40
 800c232:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c234:	e7ba      	b.n	800c1ac <_strtod_l+0x6e4>
 800c236:	2300      	movs	r3, #0
 800c238:	9310      	str	r3, [sp, #64]	@ 0x40
 800c23a:	2301      	movs	r3, #1
 800c23c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c23e:	e7b5      	b.n	800c1ac <_strtod_l+0x6e4>
 800c240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c242:	9805      	ldr	r0, [sp, #20]
 800c244:	462a      	mov	r2, r5
 800c246:	f7ff f9c5 	bl	800b5d4 <__lshift>
 800c24a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d1d9      	bne.n	800c204 <_strtod_l+0x73c>
 800c250:	e65d      	b.n	800bf0e <_strtod_l+0x446>
 800c252:	2e00      	cmp	r6, #0
 800c254:	dd07      	ble.n	800c266 <_strtod_l+0x79e>
 800c256:	4649      	mov	r1, r9
 800c258:	9805      	ldr	r0, [sp, #20]
 800c25a:	4632      	mov	r2, r6
 800c25c:	f7ff f9ba 	bl	800b5d4 <__lshift>
 800c260:	4681      	mov	r9, r0
 800c262:	2800      	cmp	r0, #0
 800c264:	d0d8      	beq.n	800c218 <_strtod_l+0x750>
 800c266:	2f00      	cmp	r7, #0
 800c268:	dd08      	ble.n	800c27c <_strtod_l+0x7b4>
 800c26a:	4641      	mov	r1, r8
 800c26c:	9805      	ldr	r0, [sp, #20]
 800c26e:	463a      	mov	r2, r7
 800c270:	f7ff f9b0 	bl	800b5d4 <__lshift>
 800c274:	4680      	mov	r8, r0
 800c276:	2800      	cmp	r0, #0
 800c278:	f43f ae49 	beq.w	800bf0e <_strtod_l+0x446>
 800c27c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c27e:	9805      	ldr	r0, [sp, #20]
 800c280:	464a      	mov	r2, r9
 800c282:	f7ff fa2f 	bl	800b6e4 <__mdiff>
 800c286:	4604      	mov	r4, r0
 800c288:	2800      	cmp	r0, #0
 800c28a:	f43f ae40 	beq.w	800bf0e <_strtod_l+0x446>
 800c28e:	68c3      	ldr	r3, [r0, #12]
 800c290:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c292:	2300      	movs	r3, #0
 800c294:	60c3      	str	r3, [r0, #12]
 800c296:	4641      	mov	r1, r8
 800c298:	f7ff fa08 	bl	800b6ac <__mcmp>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	da45      	bge.n	800c32c <_strtod_l+0x864>
 800c2a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2a2:	ea53 030a 	orrs.w	r3, r3, sl
 800c2a6:	d16b      	bne.n	800c380 <_strtod_l+0x8b8>
 800c2a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d167      	bne.n	800c380 <_strtod_l+0x8b8>
 800c2b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2b4:	0d1b      	lsrs	r3, r3, #20
 800c2b6:	051b      	lsls	r3, r3, #20
 800c2b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c2bc:	d960      	bls.n	800c380 <_strtod_l+0x8b8>
 800c2be:	6963      	ldr	r3, [r4, #20]
 800c2c0:	b913      	cbnz	r3, 800c2c8 <_strtod_l+0x800>
 800c2c2:	6923      	ldr	r3, [r4, #16]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	dd5b      	ble.n	800c380 <_strtod_l+0x8b8>
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	9805      	ldr	r0, [sp, #20]
 800c2ce:	f7ff f981 	bl	800b5d4 <__lshift>
 800c2d2:	4641      	mov	r1, r8
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	f7ff f9e9 	bl	800b6ac <__mcmp>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	dd50      	ble.n	800c380 <_strtod_l+0x8b8>
 800c2de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2e2:	9a08      	ldr	r2, [sp, #32]
 800c2e4:	0d1b      	lsrs	r3, r3, #20
 800c2e6:	051b      	lsls	r3, r3, #20
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	d06a      	beq.n	800c3c2 <_strtod_l+0x8fa>
 800c2ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c2f0:	d867      	bhi.n	800c3c2 <_strtod_l+0x8fa>
 800c2f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c2f6:	f67f ae9d 	bls.w	800c034 <_strtod_l+0x56c>
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c324 <_strtod_l+0x85c>)
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	4659      	mov	r1, fp
 800c300:	2200      	movs	r2, #0
 800c302:	f7f4 f989 	bl	8000618 <__aeabi_dmul>
 800c306:	4b08      	ldr	r3, [pc, #32]	@ (800c328 <_strtod_l+0x860>)
 800c308:	400b      	ands	r3, r1
 800c30a:	4682      	mov	sl, r0
 800c30c:	468b      	mov	fp, r1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f47f ae08 	bne.w	800bf24 <_strtod_l+0x45c>
 800c314:	9a05      	ldr	r2, [sp, #20]
 800c316:	2322      	movs	r3, #34	@ 0x22
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	e603      	b.n	800bf24 <_strtod_l+0x45c>
 800c31c:	0800de38 	.word	0x0800de38
 800c320:	fffffc02 	.word	0xfffffc02
 800c324:	39500000 	.word	0x39500000
 800c328:	7ff00000 	.word	0x7ff00000
 800c32c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c330:	d165      	bne.n	800c3fe <_strtod_l+0x936>
 800c332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c338:	b35a      	cbz	r2, 800c392 <_strtod_l+0x8ca>
 800c33a:	4a9f      	ldr	r2, [pc, #636]	@ (800c5b8 <_strtod_l+0xaf0>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d12b      	bne.n	800c398 <_strtod_l+0x8d0>
 800c340:	9b08      	ldr	r3, [sp, #32]
 800c342:	4651      	mov	r1, sl
 800c344:	b303      	cbz	r3, 800c388 <_strtod_l+0x8c0>
 800c346:	4b9d      	ldr	r3, [pc, #628]	@ (800c5bc <_strtod_l+0xaf4>)
 800c348:	465a      	mov	r2, fp
 800c34a:	4013      	ands	r3, r2
 800c34c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c350:	f04f 32ff 	mov.w	r2, #4294967295
 800c354:	d81b      	bhi.n	800c38e <_strtod_l+0x8c6>
 800c356:	0d1b      	lsrs	r3, r3, #20
 800c358:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c35c:	fa02 f303 	lsl.w	r3, r2, r3
 800c360:	4299      	cmp	r1, r3
 800c362:	d119      	bne.n	800c398 <_strtod_l+0x8d0>
 800c364:	4b96      	ldr	r3, [pc, #600]	@ (800c5c0 <_strtod_l+0xaf8>)
 800c366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c368:	429a      	cmp	r2, r3
 800c36a:	d102      	bne.n	800c372 <_strtod_l+0x8aa>
 800c36c:	3101      	adds	r1, #1
 800c36e:	f43f adce 	beq.w	800bf0e <_strtod_l+0x446>
 800c372:	4b92      	ldr	r3, [pc, #584]	@ (800c5bc <_strtod_l+0xaf4>)
 800c374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c376:	401a      	ands	r2, r3
 800c378:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c37c:	f04f 0a00 	mov.w	sl, #0
 800c380:	9b08      	ldr	r3, [sp, #32]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1b9      	bne.n	800c2fa <_strtod_l+0x832>
 800c386:	e5cd      	b.n	800bf24 <_strtod_l+0x45c>
 800c388:	f04f 33ff 	mov.w	r3, #4294967295
 800c38c:	e7e8      	b.n	800c360 <_strtod_l+0x898>
 800c38e:	4613      	mov	r3, r2
 800c390:	e7e6      	b.n	800c360 <_strtod_l+0x898>
 800c392:	ea53 030a 	orrs.w	r3, r3, sl
 800c396:	d0a2      	beq.n	800c2de <_strtod_l+0x816>
 800c398:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c39a:	b1db      	cbz	r3, 800c3d4 <_strtod_l+0x90c>
 800c39c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c39e:	4213      	tst	r3, r2
 800c3a0:	d0ee      	beq.n	800c380 <_strtod_l+0x8b8>
 800c3a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3a4:	9a08      	ldr	r2, [sp, #32]
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	4659      	mov	r1, fp
 800c3aa:	b1bb      	cbz	r3, 800c3dc <_strtod_l+0x914>
 800c3ac:	f7ff fb6c 	bl	800ba88 <sulp>
 800c3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3b4:	ec53 2b10 	vmov	r2, r3, d0
 800c3b8:	f7f3 ff78 	bl	80002ac <__adddf3>
 800c3bc:	4682      	mov	sl, r0
 800c3be:	468b      	mov	fp, r1
 800c3c0:	e7de      	b.n	800c380 <_strtod_l+0x8b8>
 800c3c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c3c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c3ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c3ce:	f04f 3aff 	mov.w	sl, #4294967295
 800c3d2:	e7d5      	b.n	800c380 <_strtod_l+0x8b8>
 800c3d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c3d6:	ea13 0f0a 	tst.w	r3, sl
 800c3da:	e7e1      	b.n	800c3a0 <_strtod_l+0x8d8>
 800c3dc:	f7ff fb54 	bl	800ba88 <sulp>
 800c3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3e4:	ec53 2b10 	vmov	r2, r3, d0
 800c3e8:	f7f3 ff5e 	bl	80002a8 <__aeabi_dsub>
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	4682      	mov	sl, r0
 800c3f2:	468b      	mov	fp, r1
 800c3f4:	f7f4 fb78 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d0c1      	beq.n	800c380 <_strtod_l+0x8b8>
 800c3fc:	e61a      	b.n	800c034 <_strtod_l+0x56c>
 800c3fe:	4641      	mov	r1, r8
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff facb 	bl	800b99c <__ratio>
 800c406:	ec57 6b10 	vmov	r6, r7, d0
 800c40a:	2200      	movs	r2, #0
 800c40c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c410:	4630      	mov	r0, r6
 800c412:	4639      	mov	r1, r7
 800c414:	f7f4 fb7c 	bl	8000b10 <__aeabi_dcmple>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d06f      	beq.n	800c4fc <_strtod_l+0xa34>
 800c41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d17a      	bne.n	800c518 <_strtod_l+0xa50>
 800c422:	f1ba 0f00 	cmp.w	sl, #0
 800c426:	d158      	bne.n	800c4da <_strtod_l+0xa12>
 800c428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c42a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d15a      	bne.n	800c4e8 <_strtod_l+0xa20>
 800c432:	4b64      	ldr	r3, [pc, #400]	@ (800c5c4 <_strtod_l+0xafc>)
 800c434:	2200      	movs	r2, #0
 800c436:	4630      	mov	r0, r6
 800c438:	4639      	mov	r1, r7
 800c43a:	f7f4 fb5f 	bl	8000afc <__aeabi_dcmplt>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d159      	bne.n	800c4f6 <_strtod_l+0xa2e>
 800c442:	4630      	mov	r0, r6
 800c444:	4639      	mov	r1, r7
 800c446:	4b60      	ldr	r3, [pc, #384]	@ (800c5c8 <_strtod_l+0xb00>)
 800c448:	2200      	movs	r2, #0
 800c44a:	f7f4 f8e5 	bl	8000618 <__aeabi_dmul>
 800c44e:	4606      	mov	r6, r0
 800c450:	460f      	mov	r7, r1
 800c452:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c456:	9606      	str	r6, [sp, #24]
 800c458:	9307      	str	r3, [sp, #28]
 800c45a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c45e:	4d57      	ldr	r5, [pc, #348]	@ (800c5bc <_strtod_l+0xaf4>)
 800c460:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c466:	401d      	ands	r5, r3
 800c468:	4b58      	ldr	r3, [pc, #352]	@ (800c5cc <_strtod_l+0xb04>)
 800c46a:	429d      	cmp	r5, r3
 800c46c:	f040 80b2 	bne.w	800c5d4 <_strtod_l+0xb0c>
 800c470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c472:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c476:	ec4b ab10 	vmov	d0, sl, fp
 800c47a:	f7ff f9c7 	bl	800b80c <__ulp>
 800c47e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c482:	ec51 0b10 	vmov	r0, r1, d0
 800c486:	f7f4 f8c7 	bl	8000618 <__aeabi_dmul>
 800c48a:	4652      	mov	r2, sl
 800c48c:	465b      	mov	r3, fp
 800c48e:	f7f3 ff0d 	bl	80002ac <__adddf3>
 800c492:	460b      	mov	r3, r1
 800c494:	4949      	ldr	r1, [pc, #292]	@ (800c5bc <_strtod_l+0xaf4>)
 800c496:	4a4e      	ldr	r2, [pc, #312]	@ (800c5d0 <_strtod_l+0xb08>)
 800c498:	4019      	ands	r1, r3
 800c49a:	4291      	cmp	r1, r2
 800c49c:	4682      	mov	sl, r0
 800c49e:	d942      	bls.n	800c526 <_strtod_l+0xa5e>
 800c4a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c4a2:	4b47      	ldr	r3, [pc, #284]	@ (800c5c0 <_strtod_l+0xaf8>)
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d103      	bne.n	800c4b0 <_strtod_l+0x9e8>
 800c4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	f43f ad2f 	beq.w	800bf0e <_strtod_l+0x446>
 800c4b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c5c0 <_strtod_l+0xaf8>
 800c4b4:	f04f 3aff 	mov.w	sl, #4294967295
 800c4b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4ba:	9805      	ldr	r0, [sp, #20]
 800c4bc:	f7fe fe7a 	bl	800b1b4 <_Bfree>
 800c4c0:	9805      	ldr	r0, [sp, #20]
 800c4c2:	4649      	mov	r1, r9
 800c4c4:	f7fe fe76 	bl	800b1b4 <_Bfree>
 800c4c8:	9805      	ldr	r0, [sp, #20]
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	f7fe fe72 	bl	800b1b4 <_Bfree>
 800c4d0:	9805      	ldr	r0, [sp, #20]
 800c4d2:	4621      	mov	r1, r4
 800c4d4:	f7fe fe6e 	bl	800b1b4 <_Bfree>
 800c4d8:	e619      	b.n	800c10e <_strtod_l+0x646>
 800c4da:	f1ba 0f01 	cmp.w	sl, #1
 800c4de:	d103      	bne.n	800c4e8 <_strtod_l+0xa20>
 800c4e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f43f ada6 	beq.w	800c034 <_strtod_l+0x56c>
 800c4e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c598 <_strtod_l+0xad0>
 800c4ec:	4f35      	ldr	r7, [pc, #212]	@ (800c5c4 <_strtod_l+0xafc>)
 800c4ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	e7b1      	b.n	800c45a <_strtod_l+0x992>
 800c4f6:	4f34      	ldr	r7, [pc, #208]	@ (800c5c8 <_strtod_l+0xb00>)
 800c4f8:	2600      	movs	r6, #0
 800c4fa:	e7aa      	b.n	800c452 <_strtod_l+0x98a>
 800c4fc:	4b32      	ldr	r3, [pc, #200]	@ (800c5c8 <_strtod_l+0xb00>)
 800c4fe:	4630      	mov	r0, r6
 800c500:	4639      	mov	r1, r7
 800c502:	2200      	movs	r2, #0
 800c504:	f7f4 f888 	bl	8000618 <__aeabi_dmul>
 800c508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d09f      	beq.n	800c452 <_strtod_l+0x98a>
 800c512:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c516:	e7a0      	b.n	800c45a <_strtod_l+0x992>
 800c518:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c5a0 <_strtod_l+0xad8>
 800c51c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c520:	ec57 6b17 	vmov	r6, r7, d7
 800c524:	e799      	b.n	800c45a <_strtod_l+0x992>
 800c526:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c52a:	9b08      	ldr	r3, [sp, #32]
 800c52c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1c1      	bne.n	800c4b8 <_strtod_l+0x9f0>
 800c534:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c538:	0d1b      	lsrs	r3, r3, #20
 800c53a:	051b      	lsls	r3, r3, #20
 800c53c:	429d      	cmp	r5, r3
 800c53e:	d1bb      	bne.n	800c4b8 <_strtod_l+0x9f0>
 800c540:	4630      	mov	r0, r6
 800c542:	4639      	mov	r1, r7
 800c544:	f7f4 fbb0 	bl	8000ca8 <__aeabi_d2lz>
 800c548:	f7f4 f838 	bl	80005bc <__aeabi_l2d>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f7f3 fea8 	bl	80002a8 <__aeabi_dsub>
 800c558:	460b      	mov	r3, r1
 800c55a:	4602      	mov	r2, r0
 800c55c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c560:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c566:	ea46 060a 	orr.w	r6, r6, sl
 800c56a:	431e      	orrs	r6, r3
 800c56c:	d06f      	beq.n	800c64e <_strtod_l+0xb86>
 800c56e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c5a8 <_strtod_l+0xae0>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f4 fac2 	bl	8000afc <__aeabi_dcmplt>
 800c578:	2800      	cmp	r0, #0
 800c57a:	f47f acd3 	bne.w	800bf24 <_strtod_l+0x45c>
 800c57e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c5b0 <_strtod_l+0xae8>)
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c588:	f7f4 fad6 	bl	8000b38 <__aeabi_dcmpgt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d093      	beq.n	800c4b8 <_strtod_l+0x9f0>
 800c590:	e4c8      	b.n	800bf24 <_strtod_l+0x45c>
 800c592:	bf00      	nop
 800c594:	f3af 8000 	nop.w
 800c598:	00000000 	.word	0x00000000
 800c59c:	bff00000 	.word	0xbff00000
 800c5a0:	00000000 	.word	0x00000000
 800c5a4:	3ff00000 	.word	0x3ff00000
 800c5a8:	94a03595 	.word	0x94a03595
 800c5ac:	3fdfffff 	.word	0x3fdfffff
 800c5b0:	35afe535 	.word	0x35afe535
 800c5b4:	3fe00000 	.word	0x3fe00000
 800c5b8:	000fffff 	.word	0x000fffff
 800c5bc:	7ff00000 	.word	0x7ff00000
 800c5c0:	7fefffff 	.word	0x7fefffff
 800c5c4:	3ff00000 	.word	0x3ff00000
 800c5c8:	3fe00000 	.word	0x3fe00000
 800c5cc:	7fe00000 	.word	0x7fe00000
 800c5d0:	7c9fffff 	.word	0x7c9fffff
 800c5d4:	9b08      	ldr	r3, [sp, #32]
 800c5d6:	b323      	cbz	r3, 800c622 <_strtod_l+0xb5a>
 800c5d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c5dc:	d821      	bhi.n	800c622 <_strtod_l+0xb5a>
 800c5de:	a328      	add	r3, pc, #160	@ (adr r3, 800c680 <_strtod_l+0xbb8>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	4639      	mov	r1, r7
 800c5e8:	f7f4 fa92 	bl	8000b10 <__aeabi_dcmple>
 800c5ec:	b1a0      	cbz	r0, 800c618 <_strtod_l+0xb50>
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7f4 fae9 	bl	8000bc8 <__aeabi_d2uiz>
 800c5f6:	2801      	cmp	r0, #1
 800c5f8:	bf38      	it	cc
 800c5fa:	2001      	movcc	r0, #1
 800c5fc:	f7f3 ff92 	bl	8000524 <__aeabi_ui2d>
 800c600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c602:	4606      	mov	r6, r0
 800c604:	460f      	mov	r7, r1
 800c606:	b9fb      	cbnz	r3, 800c648 <_strtod_l+0xb80>
 800c608:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c60c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c60e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c610:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c614:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c618:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c61a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c61e:	1b5b      	subs	r3, r3, r5
 800c620:	9311      	str	r3, [sp, #68]	@ 0x44
 800c622:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c626:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c62a:	f7ff f8ef 	bl	800b80c <__ulp>
 800c62e:	4650      	mov	r0, sl
 800c630:	ec53 2b10 	vmov	r2, r3, d0
 800c634:	4659      	mov	r1, fp
 800c636:	f7f3 ffef 	bl	8000618 <__aeabi_dmul>
 800c63a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c63e:	f7f3 fe35 	bl	80002ac <__adddf3>
 800c642:	4682      	mov	sl, r0
 800c644:	468b      	mov	fp, r1
 800c646:	e770      	b.n	800c52a <_strtod_l+0xa62>
 800c648:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c64c:	e7e0      	b.n	800c610 <_strtod_l+0xb48>
 800c64e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c688 <_strtod_l+0xbc0>)
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	f7f4 fa52 	bl	8000afc <__aeabi_dcmplt>
 800c658:	e798      	b.n	800c58c <_strtod_l+0xac4>
 800c65a:	2300      	movs	r3, #0
 800c65c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c65e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	f7ff ba6d 	b.w	800bb42 <_strtod_l+0x7a>
 800c668:	2a65      	cmp	r2, #101	@ 0x65
 800c66a:	f43f ab68 	beq.w	800bd3e <_strtod_l+0x276>
 800c66e:	2a45      	cmp	r2, #69	@ 0x45
 800c670:	f43f ab65 	beq.w	800bd3e <_strtod_l+0x276>
 800c674:	2301      	movs	r3, #1
 800c676:	f7ff bba0 	b.w	800bdba <_strtod_l+0x2f2>
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w
 800c680:	ffc00000 	.word	0xffc00000
 800c684:	41dfffff 	.word	0x41dfffff
 800c688:	94a03595 	.word	0x94a03595
 800c68c:	3fcfffff 	.word	0x3fcfffff

0800c690 <_strtod_r>:
 800c690:	4b01      	ldr	r3, [pc, #4]	@ (800c698 <_strtod_r+0x8>)
 800c692:	f7ff ba19 	b.w	800bac8 <_strtod_l>
 800c696:	bf00      	nop
 800c698:	20000234 	.word	0x20000234

0800c69c <_strtol_l.isra.0>:
 800c69c:	2b24      	cmp	r3, #36	@ 0x24
 800c69e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a2:	4686      	mov	lr, r0
 800c6a4:	4690      	mov	r8, r2
 800c6a6:	d801      	bhi.n	800c6ac <_strtol_l.isra.0+0x10>
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d106      	bne.n	800c6ba <_strtol_l.isra.0+0x1e>
 800c6ac:	f7fd fe6c 	bl	800a388 <__errno>
 800c6b0:	2316      	movs	r3, #22
 800c6b2:	6003      	str	r3, [r0, #0]
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ba:	4834      	ldr	r0, [pc, #208]	@ (800c78c <_strtol_l.isra.0+0xf0>)
 800c6bc:	460d      	mov	r5, r1
 800c6be:	462a      	mov	r2, r5
 800c6c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6c4:	5d06      	ldrb	r6, [r0, r4]
 800c6c6:	f016 0608 	ands.w	r6, r6, #8
 800c6ca:	d1f8      	bne.n	800c6be <_strtol_l.isra.0+0x22>
 800c6cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c6ce:	d110      	bne.n	800c6f2 <_strtol_l.isra.0+0x56>
 800c6d0:	782c      	ldrb	r4, [r5, #0]
 800c6d2:	2601      	movs	r6, #1
 800c6d4:	1c95      	adds	r5, r2, #2
 800c6d6:	f033 0210 	bics.w	r2, r3, #16
 800c6da:	d115      	bne.n	800c708 <_strtol_l.isra.0+0x6c>
 800c6dc:	2c30      	cmp	r4, #48	@ 0x30
 800c6de:	d10d      	bne.n	800c6fc <_strtol_l.isra.0+0x60>
 800c6e0:	782a      	ldrb	r2, [r5, #0]
 800c6e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6e6:	2a58      	cmp	r2, #88	@ 0x58
 800c6e8:	d108      	bne.n	800c6fc <_strtol_l.isra.0+0x60>
 800c6ea:	786c      	ldrb	r4, [r5, #1]
 800c6ec:	3502      	adds	r5, #2
 800c6ee:	2310      	movs	r3, #16
 800c6f0:	e00a      	b.n	800c708 <_strtol_l.isra.0+0x6c>
 800c6f2:	2c2b      	cmp	r4, #43	@ 0x2b
 800c6f4:	bf04      	itt	eq
 800c6f6:	782c      	ldrbeq	r4, [r5, #0]
 800c6f8:	1c95      	addeq	r5, r2, #2
 800c6fa:	e7ec      	b.n	800c6d6 <_strtol_l.isra.0+0x3a>
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f6      	bne.n	800c6ee <_strtol_l.isra.0+0x52>
 800c700:	2c30      	cmp	r4, #48	@ 0x30
 800c702:	bf14      	ite	ne
 800c704:	230a      	movne	r3, #10
 800c706:	2308      	moveq	r3, #8
 800c708:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c70c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c710:	2200      	movs	r2, #0
 800c712:	fbbc f9f3 	udiv	r9, ip, r3
 800c716:	4610      	mov	r0, r2
 800c718:	fb03 ca19 	mls	sl, r3, r9, ip
 800c71c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c720:	2f09      	cmp	r7, #9
 800c722:	d80f      	bhi.n	800c744 <_strtol_l.isra.0+0xa8>
 800c724:	463c      	mov	r4, r7
 800c726:	42a3      	cmp	r3, r4
 800c728:	dd1b      	ble.n	800c762 <_strtol_l.isra.0+0xc6>
 800c72a:	1c57      	adds	r7, r2, #1
 800c72c:	d007      	beq.n	800c73e <_strtol_l.isra.0+0xa2>
 800c72e:	4581      	cmp	r9, r0
 800c730:	d314      	bcc.n	800c75c <_strtol_l.isra.0+0xc0>
 800c732:	d101      	bne.n	800c738 <_strtol_l.isra.0+0x9c>
 800c734:	45a2      	cmp	sl, r4
 800c736:	db11      	blt.n	800c75c <_strtol_l.isra.0+0xc0>
 800c738:	fb00 4003 	mla	r0, r0, r3, r4
 800c73c:	2201      	movs	r2, #1
 800c73e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c742:	e7eb      	b.n	800c71c <_strtol_l.isra.0+0x80>
 800c744:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c748:	2f19      	cmp	r7, #25
 800c74a:	d801      	bhi.n	800c750 <_strtol_l.isra.0+0xb4>
 800c74c:	3c37      	subs	r4, #55	@ 0x37
 800c74e:	e7ea      	b.n	800c726 <_strtol_l.isra.0+0x8a>
 800c750:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c754:	2f19      	cmp	r7, #25
 800c756:	d804      	bhi.n	800c762 <_strtol_l.isra.0+0xc6>
 800c758:	3c57      	subs	r4, #87	@ 0x57
 800c75a:	e7e4      	b.n	800c726 <_strtol_l.isra.0+0x8a>
 800c75c:	f04f 32ff 	mov.w	r2, #4294967295
 800c760:	e7ed      	b.n	800c73e <_strtol_l.isra.0+0xa2>
 800c762:	1c53      	adds	r3, r2, #1
 800c764:	d108      	bne.n	800c778 <_strtol_l.isra.0+0xdc>
 800c766:	2322      	movs	r3, #34	@ 0x22
 800c768:	f8ce 3000 	str.w	r3, [lr]
 800c76c:	4660      	mov	r0, ip
 800c76e:	f1b8 0f00 	cmp.w	r8, #0
 800c772:	d0a0      	beq.n	800c6b6 <_strtol_l.isra.0+0x1a>
 800c774:	1e69      	subs	r1, r5, #1
 800c776:	e006      	b.n	800c786 <_strtol_l.isra.0+0xea>
 800c778:	b106      	cbz	r6, 800c77c <_strtol_l.isra.0+0xe0>
 800c77a:	4240      	negs	r0, r0
 800c77c:	f1b8 0f00 	cmp.w	r8, #0
 800c780:	d099      	beq.n	800c6b6 <_strtol_l.isra.0+0x1a>
 800c782:	2a00      	cmp	r2, #0
 800c784:	d1f6      	bne.n	800c774 <_strtol_l.isra.0+0xd8>
 800c786:	f8c8 1000 	str.w	r1, [r8]
 800c78a:	e794      	b.n	800c6b6 <_strtol_l.isra.0+0x1a>
 800c78c:	0800de61 	.word	0x0800de61

0800c790 <_strtol_r>:
 800c790:	f7ff bf84 	b.w	800c69c <_strtol_l.isra.0>

0800c794 <__ssputs_r>:
 800c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	688e      	ldr	r6, [r1, #8]
 800c79a:	461f      	mov	r7, r3
 800c79c:	42be      	cmp	r6, r7
 800c79e:	680b      	ldr	r3, [r1, #0]
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	4690      	mov	r8, r2
 800c7a6:	d82d      	bhi.n	800c804 <__ssputs_r+0x70>
 800c7a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7b0:	d026      	beq.n	800c800 <__ssputs_r+0x6c>
 800c7b2:	6965      	ldr	r5, [r4, #20]
 800c7b4:	6909      	ldr	r1, [r1, #16]
 800c7b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7ba:	eba3 0901 	sub.w	r9, r3, r1
 800c7be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7c2:	1c7b      	adds	r3, r7, #1
 800c7c4:	444b      	add	r3, r9
 800c7c6:	106d      	asrs	r5, r5, #1
 800c7c8:	429d      	cmp	r5, r3
 800c7ca:	bf38      	it	cc
 800c7cc:	461d      	movcc	r5, r3
 800c7ce:	0553      	lsls	r3, r2, #21
 800c7d0:	d527      	bpl.n	800c822 <__ssputs_r+0x8e>
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7fc fd5e 	bl	8009294 <_malloc_r>
 800c7d8:	4606      	mov	r6, r0
 800c7da:	b360      	cbz	r0, 800c836 <__ssputs_r+0xa2>
 800c7dc:	6921      	ldr	r1, [r4, #16]
 800c7de:	464a      	mov	r2, r9
 800c7e0:	f000 fa08 	bl	800cbf4 <memcpy>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	6126      	str	r6, [r4, #16]
 800c7f2:	6165      	str	r5, [r4, #20]
 800c7f4:	444e      	add	r6, r9
 800c7f6:	eba5 0509 	sub.w	r5, r5, r9
 800c7fa:	6026      	str	r6, [r4, #0]
 800c7fc:	60a5      	str	r5, [r4, #8]
 800c7fe:	463e      	mov	r6, r7
 800c800:	42be      	cmp	r6, r7
 800c802:	d900      	bls.n	800c806 <__ssputs_r+0x72>
 800c804:	463e      	mov	r6, r7
 800c806:	6820      	ldr	r0, [r4, #0]
 800c808:	4632      	mov	r2, r6
 800c80a:	4641      	mov	r1, r8
 800c80c:	f000 f9c6 	bl	800cb9c <memmove>
 800c810:	68a3      	ldr	r3, [r4, #8]
 800c812:	1b9b      	subs	r3, r3, r6
 800c814:	60a3      	str	r3, [r4, #8]
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	4433      	add	r3, r6
 800c81a:	6023      	str	r3, [r4, #0]
 800c81c:	2000      	movs	r0, #0
 800c81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c822:	462a      	mov	r2, r5
 800c824:	f000 fd79 	bl	800d31a <_realloc_r>
 800c828:	4606      	mov	r6, r0
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d1e0      	bne.n	800c7f0 <__ssputs_r+0x5c>
 800c82e:	6921      	ldr	r1, [r4, #16]
 800c830:	4650      	mov	r0, sl
 800c832:	f7fe fc35 	bl	800b0a0 <_free_r>
 800c836:	230c      	movs	r3, #12
 800c838:	f8ca 3000 	str.w	r3, [sl]
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c842:	81a3      	strh	r3, [r4, #12]
 800c844:	f04f 30ff 	mov.w	r0, #4294967295
 800c848:	e7e9      	b.n	800c81e <__ssputs_r+0x8a>
	...

0800c84c <_svfiprintf_r>:
 800c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c850:	4698      	mov	r8, r3
 800c852:	898b      	ldrh	r3, [r1, #12]
 800c854:	061b      	lsls	r3, r3, #24
 800c856:	b09d      	sub	sp, #116	@ 0x74
 800c858:	4607      	mov	r7, r0
 800c85a:	460d      	mov	r5, r1
 800c85c:	4614      	mov	r4, r2
 800c85e:	d510      	bpl.n	800c882 <_svfiprintf_r+0x36>
 800c860:	690b      	ldr	r3, [r1, #16]
 800c862:	b973      	cbnz	r3, 800c882 <_svfiprintf_r+0x36>
 800c864:	2140      	movs	r1, #64	@ 0x40
 800c866:	f7fc fd15 	bl	8009294 <_malloc_r>
 800c86a:	6028      	str	r0, [r5, #0]
 800c86c:	6128      	str	r0, [r5, #16]
 800c86e:	b930      	cbnz	r0, 800c87e <_svfiprintf_r+0x32>
 800c870:	230c      	movs	r3, #12
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	b01d      	add	sp, #116	@ 0x74
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	2340      	movs	r3, #64	@ 0x40
 800c880:	616b      	str	r3, [r5, #20]
 800c882:	2300      	movs	r3, #0
 800c884:	9309      	str	r3, [sp, #36]	@ 0x24
 800c886:	2320      	movs	r3, #32
 800c888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c88c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c890:	2330      	movs	r3, #48	@ 0x30
 800c892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ca30 <_svfiprintf_r+0x1e4>
 800c896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c89a:	f04f 0901 	mov.w	r9, #1
 800c89e:	4623      	mov	r3, r4
 800c8a0:	469a      	mov	sl, r3
 800c8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a6:	b10a      	cbz	r2, 800c8ac <_svfiprintf_r+0x60>
 800c8a8:	2a25      	cmp	r2, #37	@ 0x25
 800c8aa:	d1f9      	bne.n	800c8a0 <_svfiprintf_r+0x54>
 800c8ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c8b0:	d00b      	beq.n	800c8ca <_svfiprintf_r+0x7e>
 800c8b2:	465b      	mov	r3, fp
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7ff ff6b 	bl	800c794 <__ssputs_r>
 800c8be:	3001      	adds	r0, #1
 800c8c0:	f000 80a7 	beq.w	800ca12 <_svfiprintf_r+0x1c6>
 800c8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8c6:	445a      	add	r2, fp
 800c8c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 809f 	beq.w	800ca12 <_svfiprintf_r+0x1c6>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8de:	f10a 0a01 	add.w	sl, sl, #1
 800c8e2:	9304      	str	r3, [sp, #16]
 800c8e4:	9307      	str	r3, [sp, #28]
 800c8e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ec:	4654      	mov	r4, sl
 800c8ee:	2205      	movs	r2, #5
 800c8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f4:	484e      	ldr	r0, [pc, #312]	@ (800ca30 <_svfiprintf_r+0x1e4>)
 800c8f6:	f7f3 fc7b 	bl	80001f0 <memchr>
 800c8fa:	9a04      	ldr	r2, [sp, #16]
 800c8fc:	b9d8      	cbnz	r0, 800c936 <_svfiprintf_r+0xea>
 800c8fe:	06d0      	lsls	r0, r2, #27
 800c900:	bf44      	itt	mi
 800c902:	2320      	movmi	r3, #32
 800c904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c908:	0711      	lsls	r1, r2, #28
 800c90a:	bf44      	itt	mi
 800c90c:	232b      	movmi	r3, #43	@ 0x2b
 800c90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c912:	f89a 3000 	ldrb.w	r3, [sl]
 800c916:	2b2a      	cmp	r3, #42	@ 0x2a
 800c918:	d015      	beq.n	800c946 <_svfiprintf_r+0xfa>
 800c91a:	9a07      	ldr	r2, [sp, #28]
 800c91c:	4654      	mov	r4, sl
 800c91e:	2000      	movs	r0, #0
 800c920:	f04f 0c0a 	mov.w	ip, #10
 800c924:	4621      	mov	r1, r4
 800c926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c92a:	3b30      	subs	r3, #48	@ 0x30
 800c92c:	2b09      	cmp	r3, #9
 800c92e:	d94b      	bls.n	800c9c8 <_svfiprintf_r+0x17c>
 800c930:	b1b0      	cbz	r0, 800c960 <_svfiprintf_r+0x114>
 800c932:	9207      	str	r2, [sp, #28]
 800c934:	e014      	b.n	800c960 <_svfiprintf_r+0x114>
 800c936:	eba0 0308 	sub.w	r3, r0, r8
 800c93a:	fa09 f303 	lsl.w	r3, r9, r3
 800c93e:	4313      	orrs	r3, r2
 800c940:	9304      	str	r3, [sp, #16]
 800c942:	46a2      	mov	sl, r4
 800c944:	e7d2      	b.n	800c8ec <_svfiprintf_r+0xa0>
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	1d19      	adds	r1, r3, #4
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	9103      	str	r1, [sp, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfbb      	ittet	lt
 800c952:	425b      	neglt	r3, r3
 800c954:	f042 0202 	orrlt.w	r2, r2, #2
 800c958:	9307      	strge	r3, [sp, #28]
 800c95a:	9307      	strlt	r3, [sp, #28]
 800c95c:	bfb8      	it	lt
 800c95e:	9204      	strlt	r2, [sp, #16]
 800c960:	7823      	ldrb	r3, [r4, #0]
 800c962:	2b2e      	cmp	r3, #46	@ 0x2e
 800c964:	d10a      	bne.n	800c97c <_svfiprintf_r+0x130>
 800c966:	7863      	ldrb	r3, [r4, #1]
 800c968:	2b2a      	cmp	r3, #42	@ 0x2a
 800c96a:	d132      	bne.n	800c9d2 <_svfiprintf_r+0x186>
 800c96c:	9b03      	ldr	r3, [sp, #12]
 800c96e:	1d1a      	adds	r2, r3, #4
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	9203      	str	r2, [sp, #12]
 800c974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c978:	3402      	adds	r4, #2
 800c97a:	9305      	str	r3, [sp, #20]
 800c97c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca40 <_svfiprintf_r+0x1f4>
 800c980:	7821      	ldrb	r1, [r4, #0]
 800c982:	2203      	movs	r2, #3
 800c984:	4650      	mov	r0, sl
 800c986:	f7f3 fc33 	bl	80001f0 <memchr>
 800c98a:	b138      	cbz	r0, 800c99c <_svfiprintf_r+0x150>
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	eba0 000a 	sub.w	r0, r0, sl
 800c992:	2240      	movs	r2, #64	@ 0x40
 800c994:	4082      	lsls	r2, r0
 800c996:	4313      	orrs	r3, r2
 800c998:	3401      	adds	r4, #1
 800c99a:	9304      	str	r3, [sp, #16]
 800c99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a0:	4824      	ldr	r0, [pc, #144]	@ (800ca34 <_svfiprintf_r+0x1e8>)
 800c9a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9a6:	2206      	movs	r2, #6
 800c9a8:	f7f3 fc22 	bl	80001f0 <memchr>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d036      	beq.n	800ca1e <_svfiprintf_r+0x1d2>
 800c9b0:	4b21      	ldr	r3, [pc, #132]	@ (800ca38 <_svfiprintf_r+0x1ec>)
 800c9b2:	bb1b      	cbnz	r3, 800c9fc <_svfiprintf_r+0x1b0>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	3307      	adds	r3, #7
 800c9b8:	f023 0307 	bic.w	r3, r3, #7
 800c9bc:	3308      	adds	r3, #8
 800c9be:	9303      	str	r3, [sp, #12]
 800c9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c2:	4433      	add	r3, r6
 800c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c6:	e76a      	b.n	800c89e <_svfiprintf_r+0x52>
 800c9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	e7a8      	b.n	800c924 <_svfiprintf_r+0xd8>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	3401      	adds	r4, #1
 800c9d6:	9305      	str	r3, [sp, #20]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f04f 0c0a 	mov.w	ip, #10
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9e4:	3a30      	subs	r2, #48	@ 0x30
 800c9e6:	2a09      	cmp	r2, #9
 800c9e8:	d903      	bls.n	800c9f2 <_svfiprintf_r+0x1a6>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0c6      	beq.n	800c97c <_svfiprintf_r+0x130>
 800c9ee:	9105      	str	r1, [sp, #20]
 800c9f0:	e7c4      	b.n	800c97c <_svfiprintf_r+0x130>
 800c9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e7f0      	b.n	800c9de <_svfiprintf_r+0x192>
 800c9fc:	ab03      	add	r3, sp, #12
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	462a      	mov	r2, r5
 800ca02:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <_svfiprintf_r+0x1f0>)
 800ca04:	a904      	add	r1, sp, #16
 800ca06:	4638      	mov	r0, r7
 800ca08:	f7fc fd70 	bl	80094ec <_printf_float>
 800ca0c:	1c42      	adds	r2, r0, #1
 800ca0e:	4606      	mov	r6, r0
 800ca10:	d1d6      	bne.n	800c9c0 <_svfiprintf_r+0x174>
 800ca12:	89ab      	ldrh	r3, [r5, #12]
 800ca14:	065b      	lsls	r3, r3, #25
 800ca16:	f53f af2d 	bmi.w	800c874 <_svfiprintf_r+0x28>
 800ca1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca1c:	e72c      	b.n	800c878 <_svfiprintf_r+0x2c>
 800ca1e:	ab03      	add	r3, sp, #12
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	462a      	mov	r2, r5
 800ca24:	4b05      	ldr	r3, [pc, #20]	@ (800ca3c <_svfiprintf_r+0x1f0>)
 800ca26:	a904      	add	r1, sp, #16
 800ca28:	4638      	mov	r0, r7
 800ca2a:	f7fc fff7 	bl	8009a1c <_printf_i>
 800ca2e:	e7ed      	b.n	800ca0c <_svfiprintf_r+0x1c0>
 800ca30:	0800dc5f 	.word	0x0800dc5f
 800ca34:	0800dc69 	.word	0x0800dc69
 800ca38:	080094ed 	.word	0x080094ed
 800ca3c:	0800c795 	.word	0x0800c795
 800ca40:	0800dc65 	.word	0x0800dc65

0800ca44 <__sflush_r>:
 800ca44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4c:	0716      	lsls	r6, r2, #28
 800ca4e:	4605      	mov	r5, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	d454      	bmi.n	800cafe <__sflush_r+0xba>
 800ca54:	684b      	ldr	r3, [r1, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dc02      	bgt.n	800ca60 <__sflush_r+0x1c>
 800ca5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	dd48      	ble.n	800caf2 <__sflush_r+0xae>
 800ca60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca62:	2e00      	cmp	r6, #0
 800ca64:	d045      	beq.n	800caf2 <__sflush_r+0xae>
 800ca66:	2300      	movs	r3, #0
 800ca68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca6c:	682f      	ldr	r7, [r5, #0]
 800ca6e:	6a21      	ldr	r1, [r4, #32]
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	d030      	beq.n	800cad6 <__sflush_r+0x92>
 800ca74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	0759      	lsls	r1, r3, #29
 800ca7a:	d505      	bpl.n	800ca88 <__sflush_r+0x44>
 800ca7c:	6863      	ldr	r3, [r4, #4]
 800ca7e:	1ad2      	subs	r2, r2, r3
 800ca80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca82:	b10b      	cbz	r3, 800ca88 <__sflush_r+0x44>
 800ca84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca86:	1ad2      	subs	r2, r2, r3
 800ca88:	2300      	movs	r3, #0
 800ca8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca8c:	6a21      	ldr	r1, [r4, #32]
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b0      	blx	r6
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	d106      	bne.n	800caa6 <__sflush_r+0x62>
 800ca98:	6829      	ldr	r1, [r5, #0]
 800ca9a:	291d      	cmp	r1, #29
 800ca9c:	d82b      	bhi.n	800caf6 <__sflush_r+0xb2>
 800ca9e:	4a2a      	ldr	r2, [pc, #168]	@ (800cb48 <__sflush_r+0x104>)
 800caa0:	40ca      	lsrs	r2, r1
 800caa2:	07d6      	lsls	r6, r2, #31
 800caa4:	d527      	bpl.n	800caf6 <__sflush_r+0xb2>
 800caa6:	2200      	movs	r2, #0
 800caa8:	6062      	str	r2, [r4, #4]
 800caaa:	04d9      	lsls	r1, r3, #19
 800caac:	6922      	ldr	r2, [r4, #16]
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	d504      	bpl.n	800cabc <__sflush_r+0x78>
 800cab2:	1c42      	adds	r2, r0, #1
 800cab4:	d101      	bne.n	800caba <__sflush_r+0x76>
 800cab6:	682b      	ldr	r3, [r5, #0]
 800cab8:	b903      	cbnz	r3, 800cabc <__sflush_r+0x78>
 800caba:	6560      	str	r0, [r4, #84]	@ 0x54
 800cabc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cabe:	602f      	str	r7, [r5, #0]
 800cac0:	b1b9      	cbz	r1, 800caf2 <__sflush_r+0xae>
 800cac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cac6:	4299      	cmp	r1, r3
 800cac8:	d002      	beq.n	800cad0 <__sflush_r+0x8c>
 800caca:	4628      	mov	r0, r5
 800cacc:	f7fe fae8 	bl	800b0a0 <_free_r>
 800cad0:	2300      	movs	r3, #0
 800cad2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cad4:	e00d      	b.n	800caf2 <__sflush_r+0xae>
 800cad6:	2301      	movs	r3, #1
 800cad8:	4628      	mov	r0, r5
 800cada:	47b0      	blx	r6
 800cadc:	4602      	mov	r2, r0
 800cade:	1c50      	adds	r0, r2, #1
 800cae0:	d1c9      	bne.n	800ca76 <__sflush_r+0x32>
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d0c6      	beq.n	800ca76 <__sflush_r+0x32>
 800cae8:	2b1d      	cmp	r3, #29
 800caea:	d001      	beq.n	800caf0 <__sflush_r+0xac>
 800caec:	2b16      	cmp	r3, #22
 800caee:	d11e      	bne.n	800cb2e <__sflush_r+0xea>
 800caf0:	602f      	str	r7, [r5, #0]
 800caf2:	2000      	movs	r0, #0
 800caf4:	e022      	b.n	800cb3c <__sflush_r+0xf8>
 800caf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cafa:	b21b      	sxth	r3, r3
 800cafc:	e01b      	b.n	800cb36 <__sflush_r+0xf2>
 800cafe:	690f      	ldr	r7, [r1, #16]
 800cb00:	2f00      	cmp	r7, #0
 800cb02:	d0f6      	beq.n	800caf2 <__sflush_r+0xae>
 800cb04:	0793      	lsls	r3, r2, #30
 800cb06:	680e      	ldr	r6, [r1, #0]
 800cb08:	bf08      	it	eq
 800cb0a:	694b      	ldreq	r3, [r1, #20]
 800cb0c:	600f      	str	r7, [r1, #0]
 800cb0e:	bf18      	it	ne
 800cb10:	2300      	movne	r3, #0
 800cb12:	eba6 0807 	sub.w	r8, r6, r7
 800cb16:	608b      	str	r3, [r1, #8]
 800cb18:	f1b8 0f00 	cmp.w	r8, #0
 800cb1c:	dde9      	ble.n	800caf2 <__sflush_r+0xae>
 800cb1e:	6a21      	ldr	r1, [r4, #32]
 800cb20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb22:	4643      	mov	r3, r8
 800cb24:	463a      	mov	r2, r7
 800cb26:	4628      	mov	r0, r5
 800cb28:	47b0      	blx	r6
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	dc08      	bgt.n	800cb40 <__sflush_r+0xfc>
 800cb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb36:	81a3      	strh	r3, [r4, #12]
 800cb38:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb40:	4407      	add	r7, r0
 800cb42:	eba8 0800 	sub.w	r8, r8, r0
 800cb46:	e7e7      	b.n	800cb18 <__sflush_r+0xd4>
 800cb48:	20400001 	.word	0x20400001

0800cb4c <_fflush_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	690b      	ldr	r3, [r1, #16]
 800cb50:	4605      	mov	r5, r0
 800cb52:	460c      	mov	r4, r1
 800cb54:	b913      	cbnz	r3, 800cb5c <_fflush_r+0x10>
 800cb56:	2500      	movs	r5, #0
 800cb58:	4628      	mov	r0, r5
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	b118      	cbz	r0, 800cb66 <_fflush_r+0x1a>
 800cb5e:	6a03      	ldr	r3, [r0, #32]
 800cb60:	b90b      	cbnz	r3, 800cb66 <_fflush_r+0x1a>
 800cb62:	f7fd fb13 	bl	800a18c <__sinit>
 800cb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0f3      	beq.n	800cb56 <_fflush_r+0xa>
 800cb6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb70:	07d0      	lsls	r0, r2, #31
 800cb72:	d404      	bmi.n	800cb7e <_fflush_r+0x32>
 800cb74:	0599      	lsls	r1, r3, #22
 800cb76:	d402      	bmi.n	800cb7e <_fflush_r+0x32>
 800cb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb7a:	f7fd fc30 	bl	800a3de <__retarget_lock_acquire_recursive>
 800cb7e:	4628      	mov	r0, r5
 800cb80:	4621      	mov	r1, r4
 800cb82:	f7ff ff5f 	bl	800ca44 <__sflush_r>
 800cb86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb88:	07da      	lsls	r2, r3, #31
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	d4e4      	bmi.n	800cb58 <_fflush_r+0xc>
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	059b      	lsls	r3, r3, #22
 800cb92:	d4e1      	bmi.n	800cb58 <_fflush_r+0xc>
 800cb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb96:	f7fd fc23 	bl	800a3e0 <__retarget_lock_release_recursive>
 800cb9a:	e7dd      	b.n	800cb58 <_fflush_r+0xc>

0800cb9c <memmove>:
 800cb9c:	4288      	cmp	r0, r1
 800cb9e:	b510      	push	{r4, lr}
 800cba0:	eb01 0402 	add.w	r4, r1, r2
 800cba4:	d902      	bls.n	800cbac <memmove+0x10>
 800cba6:	4284      	cmp	r4, r0
 800cba8:	4623      	mov	r3, r4
 800cbaa:	d807      	bhi.n	800cbbc <memmove+0x20>
 800cbac:	1e43      	subs	r3, r0, #1
 800cbae:	42a1      	cmp	r1, r4
 800cbb0:	d008      	beq.n	800cbc4 <memmove+0x28>
 800cbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbba:	e7f8      	b.n	800cbae <memmove+0x12>
 800cbbc:	4402      	add	r2, r0
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	428a      	cmp	r2, r1
 800cbc2:	d100      	bne.n	800cbc6 <memmove+0x2a>
 800cbc4:	bd10      	pop	{r4, pc}
 800cbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbce:	e7f7      	b.n	800cbc0 <memmove+0x24>

0800cbd0 <strncmp>:
 800cbd0:	b510      	push	{r4, lr}
 800cbd2:	b16a      	cbz	r2, 800cbf0 <strncmp+0x20>
 800cbd4:	3901      	subs	r1, #1
 800cbd6:	1884      	adds	r4, r0, r2
 800cbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d103      	bne.n	800cbec <strncmp+0x1c>
 800cbe4:	42a0      	cmp	r0, r4
 800cbe6:	d001      	beq.n	800cbec <strncmp+0x1c>
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	d1f5      	bne.n	800cbd8 <strncmp+0x8>
 800cbec:	1ad0      	subs	r0, r2, r3
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	e7fc      	b.n	800cbee <strncmp+0x1e>

0800cbf4 <memcpy>:
 800cbf4:	440a      	add	r2, r1
 800cbf6:	4291      	cmp	r1, r2
 800cbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbfc:	d100      	bne.n	800cc00 <memcpy+0xc>
 800cbfe:	4770      	bx	lr
 800cc00:	b510      	push	{r4, lr}
 800cc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc0a:	4291      	cmp	r1, r2
 800cc0c:	d1f9      	bne.n	800cc02 <memcpy+0xe>
 800cc0e:	bd10      	pop	{r4, pc}

0800cc10 <nan>:
 800cc10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cc18 <nan+0x8>
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	00000000 	.word	0x00000000
 800cc1c:	7ff80000 	.word	0x7ff80000

0800cc20 <__assert_func>:
 800cc20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc22:	4614      	mov	r4, r2
 800cc24:	461a      	mov	r2, r3
 800cc26:	4b09      	ldr	r3, [pc, #36]	@ (800cc4c <__assert_func+0x2c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	68d8      	ldr	r0, [r3, #12]
 800cc2e:	b14c      	cbz	r4, 800cc44 <__assert_func+0x24>
 800cc30:	4b07      	ldr	r3, [pc, #28]	@ (800cc50 <__assert_func+0x30>)
 800cc32:	9100      	str	r1, [sp, #0]
 800cc34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc38:	4906      	ldr	r1, [pc, #24]	@ (800cc54 <__assert_func+0x34>)
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	f000 fba8 	bl	800d390 <fiprintf>
 800cc40:	f000 fbb8 	bl	800d3b4 <abort>
 800cc44:	4b04      	ldr	r3, [pc, #16]	@ (800cc58 <__assert_func+0x38>)
 800cc46:	461c      	mov	r4, r3
 800cc48:	e7f3      	b.n	800cc32 <__assert_func+0x12>
 800cc4a:	bf00      	nop
 800cc4c:	200001e4 	.word	0x200001e4
 800cc50:	0800dc78 	.word	0x0800dc78
 800cc54:	0800dc85 	.word	0x0800dc85
 800cc58:	0800dcb3 	.word	0x0800dcb3

0800cc5c <_calloc_r>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	fba1 5402 	umull	r5, r4, r1, r2
 800cc62:	b934      	cbnz	r4, 800cc72 <_calloc_r+0x16>
 800cc64:	4629      	mov	r1, r5
 800cc66:	f7fc fb15 	bl	8009294 <_malloc_r>
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	b928      	cbnz	r0, 800cc7a <_calloc_r+0x1e>
 800cc6e:	4630      	mov	r0, r6
 800cc70:	bd70      	pop	{r4, r5, r6, pc}
 800cc72:	220c      	movs	r2, #12
 800cc74:	6002      	str	r2, [r0, #0]
 800cc76:	2600      	movs	r6, #0
 800cc78:	e7f9      	b.n	800cc6e <_calloc_r+0x12>
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f7fd fb20 	bl	800a2c2 <memset>
 800cc82:	e7f4      	b.n	800cc6e <_calloc_r+0x12>

0800cc84 <rshift>:
 800cc84:	6903      	ldr	r3, [r0, #16]
 800cc86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc92:	f100 0414 	add.w	r4, r0, #20
 800cc96:	dd45      	ble.n	800cd24 <rshift+0xa0>
 800cc98:	f011 011f 	ands.w	r1, r1, #31
 800cc9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cca0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cca4:	d10c      	bne.n	800ccc0 <rshift+0x3c>
 800cca6:	f100 0710 	add.w	r7, r0, #16
 800ccaa:	4629      	mov	r1, r5
 800ccac:	42b1      	cmp	r1, r6
 800ccae:	d334      	bcc.n	800cd1a <rshift+0x96>
 800ccb0:	1a9b      	subs	r3, r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	1eea      	subs	r2, r5, #3
 800ccb6:	4296      	cmp	r6, r2
 800ccb8:	bf38      	it	cc
 800ccba:	2300      	movcc	r3, #0
 800ccbc:	4423      	add	r3, r4
 800ccbe:	e015      	b.n	800ccec <rshift+0x68>
 800ccc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ccc4:	f1c1 0820 	rsb	r8, r1, #32
 800ccc8:	40cf      	lsrs	r7, r1
 800ccca:	f105 0e04 	add.w	lr, r5, #4
 800ccce:	46a1      	mov	r9, r4
 800ccd0:	4576      	cmp	r6, lr
 800ccd2:	46f4      	mov	ip, lr
 800ccd4:	d815      	bhi.n	800cd02 <rshift+0x7e>
 800ccd6:	1a9a      	subs	r2, r3, r2
 800ccd8:	0092      	lsls	r2, r2, #2
 800ccda:	3a04      	subs	r2, #4
 800ccdc:	3501      	adds	r5, #1
 800ccde:	42ae      	cmp	r6, r5
 800cce0:	bf38      	it	cc
 800cce2:	2200      	movcc	r2, #0
 800cce4:	18a3      	adds	r3, r4, r2
 800cce6:	50a7      	str	r7, [r4, r2]
 800cce8:	b107      	cbz	r7, 800ccec <rshift+0x68>
 800ccea:	3304      	adds	r3, #4
 800ccec:	1b1a      	subs	r2, r3, r4
 800ccee:	42a3      	cmp	r3, r4
 800ccf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ccf4:	bf08      	it	eq
 800ccf6:	2300      	moveq	r3, #0
 800ccf8:	6102      	str	r2, [r0, #16]
 800ccfa:	bf08      	it	eq
 800ccfc:	6143      	streq	r3, [r0, #20]
 800ccfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd02:	f8dc c000 	ldr.w	ip, [ip]
 800cd06:	fa0c fc08 	lsl.w	ip, ip, r8
 800cd0a:	ea4c 0707 	orr.w	r7, ip, r7
 800cd0e:	f849 7b04 	str.w	r7, [r9], #4
 800cd12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd16:	40cf      	lsrs	r7, r1
 800cd18:	e7da      	b.n	800ccd0 <rshift+0x4c>
 800cd1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd22:	e7c3      	b.n	800ccac <rshift+0x28>
 800cd24:	4623      	mov	r3, r4
 800cd26:	e7e1      	b.n	800ccec <rshift+0x68>

0800cd28 <__hexdig_fun>:
 800cd28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cd2c:	2b09      	cmp	r3, #9
 800cd2e:	d802      	bhi.n	800cd36 <__hexdig_fun+0xe>
 800cd30:	3820      	subs	r0, #32
 800cd32:	b2c0      	uxtb	r0, r0
 800cd34:	4770      	bx	lr
 800cd36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	d801      	bhi.n	800cd42 <__hexdig_fun+0x1a>
 800cd3e:	3847      	subs	r0, #71	@ 0x47
 800cd40:	e7f7      	b.n	800cd32 <__hexdig_fun+0xa>
 800cd42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cd46:	2b05      	cmp	r3, #5
 800cd48:	d801      	bhi.n	800cd4e <__hexdig_fun+0x26>
 800cd4a:	3827      	subs	r0, #39	@ 0x27
 800cd4c:	e7f1      	b.n	800cd32 <__hexdig_fun+0xa>
 800cd4e:	2000      	movs	r0, #0
 800cd50:	4770      	bx	lr
	...

0800cd54 <__gethex>:
 800cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd58:	b085      	sub	sp, #20
 800cd5a:	468a      	mov	sl, r1
 800cd5c:	9302      	str	r3, [sp, #8]
 800cd5e:	680b      	ldr	r3, [r1, #0]
 800cd60:	9001      	str	r0, [sp, #4]
 800cd62:	4690      	mov	r8, r2
 800cd64:	1c9c      	adds	r4, r3, #2
 800cd66:	46a1      	mov	r9, r4
 800cd68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cd6c:	2830      	cmp	r0, #48	@ 0x30
 800cd6e:	d0fa      	beq.n	800cd66 <__gethex+0x12>
 800cd70:	eba9 0303 	sub.w	r3, r9, r3
 800cd74:	f1a3 0b02 	sub.w	fp, r3, #2
 800cd78:	f7ff ffd6 	bl	800cd28 <__hexdig_fun>
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d168      	bne.n	800ce54 <__gethex+0x100>
 800cd82:	49a0      	ldr	r1, [pc, #640]	@ (800d004 <__gethex+0x2b0>)
 800cd84:	2201      	movs	r2, #1
 800cd86:	4648      	mov	r0, r9
 800cd88:	f7ff ff22 	bl	800cbd0 <strncmp>
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d167      	bne.n	800ce62 <__gethex+0x10e>
 800cd92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cd96:	4626      	mov	r6, r4
 800cd98:	f7ff ffc6 	bl	800cd28 <__hexdig_fun>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d062      	beq.n	800ce66 <__gethex+0x112>
 800cda0:	4623      	mov	r3, r4
 800cda2:	7818      	ldrb	r0, [r3, #0]
 800cda4:	2830      	cmp	r0, #48	@ 0x30
 800cda6:	4699      	mov	r9, r3
 800cda8:	f103 0301 	add.w	r3, r3, #1
 800cdac:	d0f9      	beq.n	800cda2 <__gethex+0x4e>
 800cdae:	f7ff ffbb 	bl	800cd28 <__hexdig_fun>
 800cdb2:	fab0 f580 	clz	r5, r0
 800cdb6:	096d      	lsrs	r5, r5, #5
 800cdb8:	f04f 0b01 	mov.w	fp, #1
 800cdbc:	464a      	mov	r2, r9
 800cdbe:	4616      	mov	r6, r2
 800cdc0:	3201      	adds	r2, #1
 800cdc2:	7830      	ldrb	r0, [r6, #0]
 800cdc4:	f7ff ffb0 	bl	800cd28 <__hexdig_fun>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d1f8      	bne.n	800cdbe <__gethex+0x6a>
 800cdcc:	498d      	ldr	r1, [pc, #564]	@ (800d004 <__gethex+0x2b0>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff fefd 	bl	800cbd0 <strncmp>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d13f      	bne.n	800ce5a <__gethex+0x106>
 800cdda:	b944      	cbnz	r4, 800cdee <__gethex+0x9a>
 800cddc:	1c74      	adds	r4, r6, #1
 800cdde:	4622      	mov	r2, r4
 800cde0:	4616      	mov	r6, r2
 800cde2:	3201      	adds	r2, #1
 800cde4:	7830      	ldrb	r0, [r6, #0]
 800cde6:	f7ff ff9f 	bl	800cd28 <__hexdig_fun>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d1f8      	bne.n	800cde0 <__gethex+0x8c>
 800cdee:	1ba4      	subs	r4, r4, r6
 800cdf0:	00a7      	lsls	r7, r4, #2
 800cdf2:	7833      	ldrb	r3, [r6, #0]
 800cdf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cdf8:	2b50      	cmp	r3, #80	@ 0x50
 800cdfa:	d13e      	bne.n	800ce7a <__gethex+0x126>
 800cdfc:	7873      	ldrb	r3, [r6, #1]
 800cdfe:	2b2b      	cmp	r3, #43	@ 0x2b
 800ce00:	d033      	beq.n	800ce6a <__gethex+0x116>
 800ce02:	2b2d      	cmp	r3, #45	@ 0x2d
 800ce04:	d034      	beq.n	800ce70 <__gethex+0x11c>
 800ce06:	1c71      	adds	r1, r6, #1
 800ce08:	2400      	movs	r4, #0
 800ce0a:	7808      	ldrb	r0, [r1, #0]
 800ce0c:	f7ff ff8c 	bl	800cd28 <__hexdig_fun>
 800ce10:	1e43      	subs	r3, r0, #1
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b18      	cmp	r3, #24
 800ce16:	d830      	bhi.n	800ce7a <__gethex+0x126>
 800ce18:	f1a0 0210 	sub.w	r2, r0, #16
 800ce1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce20:	f7ff ff82 	bl	800cd28 <__hexdig_fun>
 800ce24:	f100 3cff 	add.w	ip, r0, #4294967295
 800ce28:	fa5f fc8c 	uxtb.w	ip, ip
 800ce2c:	f1bc 0f18 	cmp.w	ip, #24
 800ce30:	f04f 030a 	mov.w	r3, #10
 800ce34:	d91e      	bls.n	800ce74 <__gethex+0x120>
 800ce36:	b104      	cbz	r4, 800ce3a <__gethex+0xe6>
 800ce38:	4252      	negs	r2, r2
 800ce3a:	4417      	add	r7, r2
 800ce3c:	f8ca 1000 	str.w	r1, [sl]
 800ce40:	b1ed      	cbz	r5, 800ce7e <__gethex+0x12a>
 800ce42:	f1bb 0f00 	cmp.w	fp, #0
 800ce46:	bf0c      	ite	eq
 800ce48:	2506      	moveq	r5, #6
 800ce4a:	2500      	movne	r5, #0
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	b005      	add	sp, #20
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	2500      	movs	r5, #0
 800ce56:	462c      	mov	r4, r5
 800ce58:	e7b0      	b.n	800cdbc <__gethex+0x68>
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	d1c7      	bne.n	800cdee <__gethex+0x9a>
 800ce5e:	4627      	mov	r7, r4
 800ce60:	e7c7      	b.n	800cdf2 <__gethex+0x9e>
 800ce62:	464e      	mov	r6, r9
 800ce64:	462f      	mov	r7, r5
 800ce66:	2501      	movs	r5, #1
 800ce68:	e7c3      	b.n	800cdf2 <__gethex+0x9e>
 800ce6a:	2400      	movs	r4, #0
 800ce6c:	1cb1      	adds	r1, r6, #2
 800ce6e:	e7cc      	b.n	800ce0a <__gethex+0xb6>
 800ce70:	2401      	movs	r4, #1
 800ce72:	e7fb      	b.n	800ce6c <__gethex+0x118>
 800ce74:	fb03 0002 	mla	r0, r3, r2, r0
 800ce78:	e7ce      	b.n	800ce18 <__gethex+0xc4>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	e7de      	b.n	800ce3c <__gethex+0xe8>
 800ce7e:	eba6 0309 	sub.w	r3, r6, r9
 800ce82:	3b01      	subs	r3, #1
 800ce84:	4629      	mov	r1, r5
 800ce86:	2b07      	cmp	r3, #7
 800ce88:	dc0a      	bgt.n	800cea0 <__gethex+0x14c>
 800ce8a:	9801      	ldr	r0, [sp, #4]
 800ce8c:	f7fe f952 	bl	800b134 <_Balloc>
 800ce90:	4604      	mov	r4, r0
 800ce92:	b940      	cbnz	r0, 800cea6 <__gethex+0x152>
 800ce94:	4b5c      	ldr	r3, [pc, #368]	@ (800d008 <__gethex+0x2b4>)
 800ce96:	4602      	mov	r2, r0
 800ce98:	21e4      	movs	r1, #228	@ 0xe4
 800ce9a:	485c      	ldr	r0, [pc, #368]	@ (800d00c <__gethex+0x2b8>)
 800ce9c:	f7ff fec0 	bl	800cc20 <__assert_func>
 800cea0:	3101      	adds	r1, #1
 800cea2:	105b      	asrs	r3, r3, #1
 800cea4:	e7ef      	b.n	800ce86 <__gethex+0x132>
 800cea6:	f100 0a14 	add.w	sl, r0, #20
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4655      	mov	r5, sl
 800ceae:	469b      	mov	fp, r3
 800ceb0:	45b1      	cmp	r9, r6
 800ceb2:	d337      	bcc.n	800cf24 <__gethex+0x1d0>
 800ceb4:	f845 bb04 	str.w	fp, [r5], #4
 800ceb8:	eba5 050a 	sub.w	r5, r5, sl
 800cebc:	10ad      	asrs	r5, r5, #2
 800cebe:	6125      	str	r5, [r4, #16]
 800cec0:	4658      	mov	r0, fp
 800cec2:	f7fe fa29 	bl	800b318 <__hi0bits>
 800cec6:	016d      	lsls	r5, r5, #5
 800cec8:	f8d8 6000 	ldr.w	r6, [r8]
 800cecc:	1a2d      	subs	r5, r5, r0
 800cece:	42b5      	cmp	r5, r6
 800ced0:	dd54      	ble.n	800cf7c <__gethex+0x228>
 800ced2:	1bad      	subs	r5, r5, r6
 800ced4:	4629      	mov	r1, r5
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7fe fdb5 	bl	800ba46 <__any_on>
 800cedc:	4681      	mov	r9, r0
 800cede:	b178      	cbz	r0, 800cf00 <__gethex+0x1ac>
 800cee0:	1e6b      	subs	r3, r5, #1
 800cee2:	1159      	asrs	r1, r3, #5
 800cee4:	f003 021f 	and.w	r2, r3, #31
 800cee8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ceec:	f04f 0901 	mov.w	r9, #1
 800cef0:	fa09 f202 	lsl.w	r2, r9, r2
 800cef4:	420a      	tst	r2, r1
 800cef6:	d003      	beq.n	800cf00 <__gethex+0x1ac>
 800cef8:	454b      	cmp	r3, r9
 800cefa:	dc36      	bgt.n	800cf6a <__gethex+0x216>
 800cefc:	f04f 0902 	mov.w	r9, #2
 800cf00:	4629      	mov	r1, r5
 800cf02:	4620      	mov	r0, r4
 800cf04:	f7ff febe 	bl	800cc84 <rshift>
 800cf08:	442f      	add	r7, r5
 800cf0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf0e:	42bb      	cmp	r3, r7
 800cf10:	da42      	bge.n	800cf98 <__gethex+0x244>
 800cf12:	9801      	ldr	r0, [sp, #4]
 800cf14:	4621      	mov	r1, r4
 800cf16:	f7fe f94d 	bl	800b1b4 <_Bfree>
 800cf1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	25a3      	movs	r5, #163	@ 0xa3
 800cf22:	e793      	b.n	800ce4c <__gethex+0xf8>
 800cf24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cf28:	2a2e      	cmp	r2, #46	@ 0x2e
 800cf2a:	d012      	beq.n	800cf52 <__gethex+0x1fe>
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d104      	bne.n	800cf3a <__gethex+0x1e6>
 800cf30:	f845 bb04 	str.w	fp, [r5], #4
 800cf34:	f04f 0b00 	mov.w	fp, #0
 800cf38:	465b      	mov	r3, fp
 800cf3a:	7830      	ldrb	r0, [r6, #0]
 800cf3c:	9303      	str	r3, [sp, #12]
 800cf3e:	f7ff fef3 	bl	800cd28 <__hexdig_fun>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	f000 000f 	and.w	r0, r0, #15
 800cf48:	4098      	lsls	r0, r3
 800cf4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cf4e:	3304      	adds	r3, #4
 800cf50:	e7ae      	b.n	800ceb0 <__gethex+0x15c>
 800cf52:	45b1      	cmp	r9, r6
 800cf54:	d8ea      	bhi.n	800cf2c <__gethex+0x1d8>
 800cf56:	492b      	ldr	r1, [pc, #172]	@ (800d004 <__gethex+0x2b0>)
 800cf58:	9303      	str	r3, [sp, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7ff fe37 	bl	800cbd0 <strncmp>
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d1e1      	bne.n	800cf2c <__gethex+0x1d8>
 800cf68:	e7a2      	b.n	800ceb0 <__gethex+0x15c>
 800cf6a:	1ea9      	subs	r1, r5, #2
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7fe fd6a 	bl	800ba46 <__any_on>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0c2      	beq.n	800cefc <__gethex+0x1a8>
 800cf76:	f04f 0903 	mov.w	r9, #3
 800cf7a:	e7c1      	b.n	800cf00 <__gethex+0x1ac>
 800cf7c:	da09      	bge.n	800cf92 <__gethex+0x23e>
 800cf7e:	1b75      	subs	r5, r6, r5
 800cf80:	4621      	mov	r1, r4
 800cf82:	9801      	ldr	r0, [sp, #4]
 800cf84:	462a      	mov	r2, r5
 800cf86:	f7fe fb25 	bl	800b5d4 <__lshift>
 800cf8a:	1b7f      	subs	r7, r7, r5
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	f100 0a14 	add.w	sl, r0, #20
 800cf92:	f04f 0900 	mov.w	r9, #0
 800cf96:	e7b8      	b.n	800cf0a <__gethex+0x1b6>
 800cf98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf9c:	42bd      	cmp	r5, r7
 800cf9e:	dd6f      	ble.n	800d080 <__gethex+0x32c>
 800cfa0:	1bed      	subs	r5, r5, r7
 800cfa2:	42ae      	cmp	r6, r5
 800cfa4:	dc34      	bgt.n	800d010 <__gethex+0x2bc>
 800cfa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d022      	beq.n	800cff4 <__gethex+0x2a0>
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d024      	beq.n	800cffc <__gethex+0x2a8>
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d115      	bne.n	800cfe2 <__gethex+0x28e>
 800cfb6:	42ae      	cmp	r6, r5
 800cfb8:	d113      	bne.n	800cfe2 <__gethex+0x28e>
 800cfba:	2e01      	cmp	r6, #1
 800cfbc:	d10b      	bne.n	800cfd6 <__gethex+0x282>
 800cfbe:	9a02      	ldr	r2, [sp, #8]
 800cfc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	6123      	str	r3, [r4, #16]
 800cfca:	f8ca 3000 	str.w	r3, [sl]
 800cfce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfd0:	2562      	movs	r5, #98	@ 0x62
 800cfd2:	601c      	str	r4, [r3, #0]
 800cfd4:	e73a      	b.n	800ce4c <__gethex+0xf8>
 800cfd6:	1e71      	subs	r1, r6, #1
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f7fe fd34 	bl	800ba46 <__any_on>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d1ed      	bne.n	800cfbe <__gethex+0x26a>
 800cfe2:	9801      	ldr	r0, [sp, #4]
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	f7fe f8e5 	bl	800b1b4 <_Bfree>
 800cfea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfec:	2300      	movs	r3, #0
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	2550      	movs	r5, #80	@ 0x50
 800cff2:	e72b      	b.n	800ce4c <__gethex+0xf8>
 800cff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f3      	bne.n	800cfe2 <__gethex+0x28e>
 800cffa:	e7e0      	b.n	800cfbe <__gethex+0x26a>
 800cffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1dd      	bne.n	800cfbe <__gethex+0x26a>
 800d002:	e7ee      	b.n	800cfe2 <__gethex+0x28e>
 800d004:	0800dc5d 	.word	0x0800dc5d
 800d008:	0800dbf3 	.word	0x0800dbf3
 800d00c:	0800dcb4 	.word	0x0800dcb4
 800d010:	1e6f      	subs	r7, r5, #1
 800d012:	f1b9 0f00 	cmp.w	r9, #0
 800d016:	d130      	bne.n	800d07a <__gethex+0x326>
 800d018:	b127      	cbz	r7, 800d024 <__gethex+0x2d0>
 800d01a:	4639      	mov	r1, r7
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7fe fd12 	bl	800ba46 <__any_on>
 800d022:	4681      	mov	r9, r0
 800d024:	117a      	asrs	r2, r7, #5
 800d026:	2301      	movs	r3, #1
 800d028:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d02c:	f007 071f 	and.w	r7, r7, #31
 800d030:	40bb      	lsls	r3, r7
 800d032:	4213      	tst	r3, r2
 800d034:	4629      	mov	r1, r5
 800d036:	4620      	mov	r0, r4
 800d038:	bf18      	it	ne
 800d03a:	f049 0902 	orrne.w	r9, r9, #2
 800d03e:	f7ff fe21 	bl	800cc84 <rshift>
 800d042:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d046:	1b76      	subs	r6, r6, r5
 800d048:	2502      	movs	r5, #2
 800d04a:	f1b9 0f00 	cmp.w	r9, #0
 800d04e:	d047      	beq.n	800d0e0 <__gethex+0x38c>
 800d050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d015      	beq.n	800d084 <__gethex+0x330>
 800d058:	2b03      	cmp	r3, #3
 800d05a:	d017      	beq.n	800d08c <__gethex+0x338>
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d109      	bne.n	800d074 <__gethex+0x320>
 800d060:	f019 0f02 	tst.w	r9, #2
 800d064:	d006      	beq.n	800d074 <__gethex+0x320>
 800d066:	f8da 3000 	ldr.w	r3, [sl]
 800d06a:	ea49 0903 	orr.w	r9, r9, r3
 800d06e:	f019 0f01 	tst.w	r9, #1
 800d072:	d10e      	bne.n	800d092 <__gethex+0x33e>
 800d074:	f045 0510 	orr.w	r5, r5, #16
 800d078:	e032      	b.n	800d0e0 <__gethex+0x38c>
 800d07a:	f04f 0901 	mov.w	r9, #1
 800d07e:	e7d1      	b.n	800d024 <__gethex+0x2d0>
 800d080:	2501      	movs	r5, #1
 800d082:	e7e2      	b.n	800d04a <__gethex+0x2f6>
 800d084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d086:	f1c3 0301 	rsb	r3, r3, #1
 800d08a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d0f0      	beq.n	800d074 <__gethex+0x320>
 800d092:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d096:	f104 0314 	add.w	r3, r4, #20
 800d09a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d09e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0a2:	f04f 0c00 	mov.w	ip, #0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0b0:	d01b      	beq.n	800d0ea <__gethex+0x396>
 800d0b2:	3201      	adds	r2, #1
 800d0b4:	6002      	str	r2, [r0, #0]
 800d0b6:	2d02      	cmp	r5, #2
 800d0b8:	f104 0314 	add.w	r3, r4, #20
 800d0bc:	d13c      	bne.n	800d138 <__gethex+0x3e4>
 800d0be:	f8d8 2000 	ldr.w	r2, [r8]
 800d0c2:	3a01      	subs	r2, #1
 800d0c4:	42b2      	cmp	r2, r6
 800d0c6:	d109      	bne.n	800d0dc <__gethex+0x388>
 800d0c8:	1171      	asrs	r1, r6, #5
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0d0:	f006 061f 	and.w	r6, r6, #31
 800d0d4:	fa02 f606 	lsl.w	r6, r2, r6
 800d0d8:	421e      	tst	r6, r3
 800d0da:	d13a      	bne.n	800d152 <__gethex+0x3fe>
 800d0dc:	f045 0520 	orr.w	r5, r5, #32
 800d0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0e2:	601c      	str	r4, [r3, #0]
 800d0e4:	9b02      	ldr	r3, [sp, #8]
 800d0e6:	601f      	str	r7, [r3, #0]
 800d0e8:	e6b0      	b.n	800ce4c <__gethex+0xf8>
 800d0ea:	4299      	cmp	r1, r3
 800d0ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800d0f0:	d8d9      	bhi.n	800d0a6 <__gethex+0x352>
 800d0f2:	68a3      	ldr	r3, [r4, #8]
 800d0f4:	459b      	cmp	fp, r3
 800d0f6:	db17      	blt.n	800d128 <__gethex+0x3d4>
 800d0f8:	6861      	ldr	r1, [r4, #4]
 800d0fa:	9801      	ldr	r0, [sp, #4]
 800d0fc:	3101      	adds	r1, #1
 800d0fe:	f7fe f819 	bl	800b134 <_Balloc>
 800d102:	4681      	mov	r9, r0
 800d104:	b918      	cbnz	r0, 800d10e <__gethex+0x3ba>
 800d106:	4b1a      	ldr	r3, [pc, #104]	@ (800d170 <__gethex+0x41c>)
 800d108:	4602      	mov	r2, r0
 800d10a:	2184      	movs	r1, #132	@ 0x84
 800d10c:	e6c5      	b.n	800ce9a <__gethex+0x146>
 800d10e:	6922      	ldr	r2, [r4, #16]
 800d110:	3202      	adds	r2, #2
 800d112:	f104 010c 	add.w	r1, r4, #12
 800d116:	0092      	lsls	r2, r2, #2
 800d118:	300c      	adds	r0, #12
 800d11a:	f7ff fd6b 	bl	800cbf4 <memcpy>
 800d11e:	4621      	mov	r1, r4
 800d120:	9801      	ldr	r0, [sp, #4]
 800d122:	f7fe f847 	bl	800b1b4 <_Bfree>
 800d126:	464c      	mov	r4, r9
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	1c5a      	adds	r2, r3, #1
 800d12c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d130:	6122      	str	r2, [r4, #16]
 800d132:	2201      	movs	r2, #1
 800d134:	615a      	str	r2, [r3, #20]
 800d136:	e7be      	b.n	800d0b6 <__gethex+0x362>
 800d138:	6922      	ldr	r2, [r4, #16]
 800d13a:	455a      	cmp	r2, fp
 800d13c:	dd0b      	ble.n	800d156 <__gethex+0x402>
 800d13e:	2101      	movs	r1, #1
 800d140:	4620      	mov	r0, r4
 800d142:	f7ff fd9f 	bl	800cc84 <rshift>
 800d146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d14a:	3701      	adds	r7, #1
 800d14c:	42bb      	cmp	r3, r7
 800d14e:	f6ff aee0 	blt.w	800cf12 <__gethex+0x1be>
 800d152:	2501      	movs	r5, #1
 800d154:	e7c2      	b.n	800d0dc <__gethex+0x388>
 800d156:	f016 061f 	ands.w	r6, r6, #31
 800d15a:	d0fa      	beq.n	800d152 <__gethex+0x3fe>
 800d15c:	4453      	add	r3, sl
 800d15e:	f1c6 0620 	rsb	r6, r6, #32
 800d162:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d166:	f7fe f8d7 	bl	800b318 <__hi0bits>
 800d16a:	42b0      	cmp	r0, r6
 800d16c:	dbe7      	blt.n	800d13e <__gethex+0x3ea>
 800d16e:	e7f0      	b.n	800d152 <__gethex+0x3fe>
 800d170:	0800dbf3 	.word	0x0800dbf3

0800d174 <L_shift>:
 800d174:	f1c2 0208 	rsb	r2, r2, #8
 800d178:	0092      	lsls	r2, r2, #2
 800d17a:	b570      	push	{r4, r5, r6, lr}
 800d17c:	f1c2 0620 	rsb	r6, r2, #32
 800d180:	6843      	ldr	r3, [r0, #4]
 800d182:	6804      	ldr	r4, [r0, #0]
 800d184:	fa03 f506 	lsl.w	r5, r3, r6
 800d188:	432c      	orrs	r4, r5
 800d18a:	40d3      	lsrs	r3, r2
 800d18c:	6004      	str	r4, [r0, #0]
 800d18e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d192:	4288      	cmp	r0, r1
 800d194:	d3f4      	bcc.n	800d180 <L_shift+0xc>
 800d196:	bd70      	pop	{r4, r5, r6, pc}

0800d198 <__match>:
 800d198:	b530      	push	{r4, r5, lr}
 800d19a:	6803      	ldr	r3, [r0, #0]
 800d19c:	3301      	adds	r3, #1
 800d19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1a2:	b914      	cbnz	r4, 800d1aa <__match+0x12>
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	bd30      	pop	{r4, r5, pc}
 800d1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d1b2:	2d19      	cmp	r5, #25
 800d1b4:	bf98      	it	ls
 800d1b6:	3220      	addls	r2, #32
 800d1b8:	42a2      	cmp	r2, r4
 800d1ba:	d0f0      	beq.n	800d19e <__match+0x6>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e7f3      	b.n	800d1a8 <__match+0x10>

0800d1c0 <__hexnan>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	680b      	ldr	r3, [r1, #0]
 800d1c6:	6801      	ldr	r1, [r0, #0]
 800d1c8:	115e      	asrs	r6, r3, #5
 800d1ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1ce:	f013 031f 	ands.w	r3, r3, #31
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	bf18      	it	ne
 800d1d6:	3604      	addne	r6, #4
 800d1d8:	2500      	movs	r5, #0
 800d1da:	1f37      	subs	r7, r6, #4
 800d1dc:	4682      	mov	sl, r0
 800d1de:	4690      	mov	r8, r2
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d1e6:	46b9      	mov	r9, r7
 800d1e8:	463c      	mov	r4, r7
 800d1ea:	9502      	str	r5, [sp, #8]
 800d1ec:	46ab      	mov	fp, r5
 800d1ee:	784a      	ldrb	r2, [r1, #1]
 800d1f0:	1c4b      	adds	r3, r1, #1
 800d1f2:	9303      	str	r3, [sp, #12]
 800d1f4:	b342      	cbz	r2, 800d248 <__hexnan+0x88>
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	9105      	str	r1, [sp, #20]
 800d1fa:	9204      	str	r2, [sp, #16]
 800d1fc:	f7ff fd94 	bl	800cd28 <__hexdig_fun>
 800d200:	2800      	cmp	r0, #0
 800d202:	d151      	bne.n	800d2a8 <__hexnan+0xe8>
 800d204:	9a04      	ldr	r2, [sp, #16]
 800d206:	9905      	ldr	r1, [sp, #20]
 800d208:	2a20      	cmp	r2, #32
 800d20a:	d818      	bhi.n	800d23e <__hexnan+0x7e>
 800d20c:	9b02      	ldr	r3, [sp, #8]
 800d20e:	459b      	cmp	fp, r3
 800d210:	dd13      	ble.n	800d23a <__hexnan+0x7a>
 800d212:	454c      	cmp	r4, r9
 800d214:	d206      	bcs.n	800d224 <__hexnan+0x64>
 800d216:	2d07      	cmp	r5, #7
 800d218:	dc04      	bgt.n	800d224 <__hexnan+0x64>
 800d21a:	462a      	mov	r2, r5
 800d21c:	4649      	mov	r1, r9
 800d21e:	4620      	mov	r0, r4
 800d220:	f7ff ffa8 	bl	800d174 <L_shift>
 800d224:	4544      	cmp	r4, r8
 800d226:	d952      	bls.n	800d2ce <__hexnan+0x10e>
 800d228:	2300      	movs	r3, #0
 800d22a:	f1a4 0904 	sub.w	r9, r4, #4
 800d22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d232:	f8cd b008 	str.w	fp, [sp, #8]
 800d236:	464c      	mov	r4, r9
 800d238:	461d      	mov	r5, r3
 800d23a:	9903      	ldr	r1, [sp, #12]
 800d23c:	e7d7      	b.n	800d1ee <__hexnan+0x2e>
 800d23e:	2a29      	cmp	r2, #41	@ 0x29
 800d240:	d157      	bne.n	800d2f2 <__hexnan+0x132>
 800d242:	3102      	adds	r1, #2
 800d244:	f8ca 1000 	str.w	r1, [sl]
 800d248:	f1bb 0f00 	cmp.w	fp, #0
 800d24c:	d051      	beq.n	800d2f2 <__hexnan+0x132>
 800d24e:	454c      	cmp	r4, r9
 800d250:	d206      	bcs.n	800d260 <__hexnan+0xa0>
 800d252:	2d07      	cmp	r5, #7
 800d254:	dc04      	bgt.n	800d260 <__hexnan+0xa0>
 800d256:	462a      	mov	r2, r5
 800d258:	4649      	mov	r1, r9
 800d25a:	4620      	mov	r0, r4
 800d25c:	f7ff ff8a 	bl	800d174 <L_shift>
 800d260:	4544      	cmp	r4, r8
 800d262:	d936      	bls.n	800d2d2 <__hexnan+0x112>
 800d264:	f1a8 0204 	sub.w	r2, r8, #4
 800d268:	4623      	mov	r3, r4
 800d26a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d26e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d272:	429f      	cmp	r7, r3
 800d274:	d2f9      	bcs.n	800d26a <__hexnan+0xaa>
 800d276:	1b3b      	subs	r3, r7, r4
 800d278:	f023 0303 	bic.w	r3, r3, #3
 800d27c:	3304      	adds	r3, #4
 800d27e:	3401      	adds	r4, #1
 800d280:	3e03      	subs	r6, #3
 800d282:	42b4      	cmp	r4, r6
 800d284:	bf88      	it	hi
 800d286:	2304      	movhi	r3, #4
 800d288:	4443      	add	r3, r8
 800d28a:	2200      	movs	r2, #0
 800d28c:	f843 2b04 	str.w	r2, [r3], #4
 800d290:	429f      	cmp	r7, r3
 800d292:	d2fb      	bcs.n	800d28c <__hexnan+0xcc>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	b91b      	cbnz	r3, 800d2a0 <__hexnan+0xe0>
 800d298:	4547      	cmp	r7, r8
 800d29a:	d128      	bne.n	800d2ee <__hexnan+0x12e>
 800d29c:	2301      	movs	r3, #1
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	2005      	movs	r0, #5
 800d2a2:	b007      	add	sp, #28
 800d2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	2d08      	cmp	r5, #8
 800d2ac:	f10b 0b01 	add.w	fp, fp, #1
 800d2b0:	dd06      	ble.n	800d2c0 <__hexnan+0x100>
 800d2b2:	4544      	cmp	r4, r8
 800d2b4:	d9c1      	bls.n	800d23a <__hexnan+0x7a>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2bc:	2501      	movs	r5, #1
 800d2be:	3c04      	subs	r4, #4
 800d2c0:	6822      	ldr	r2, [r4, #0]
 800d2c2:	f000 000f 	and.w	r0, r0, #15
 800d2c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	e7b5      	b.n	800d23a <__hexnan+0x7a>
 800d2ce:	2508      	movs	r5, #8
 800d2d0:	e7b3      	b.n	800d23a <__hexnan+0x7a>
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d0dd      	beq.n	800d294 <__hexnan+0xd4>
 800d2d8:	f1c3 0320 	rsb	r3, r3, #32
 800d2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e0:	40da      	lsrs	r2, r3
 800d2e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d2ec:	e7d2      	b.n	800d294 <__hexnan+0xd4>
 800d2ee:	3f04      	subs	r7, #4
 800d2f0:	e7d0      	b.n	800d294 <__hexnan+0xd4>
 800d2f2:	2004      	movs	r0, #4
 800d2f4:	e7d5      	b.n	800d2a2 <__hexnan+0xe2>

0800d2f6 <__ascii_mbtowc>:
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	b901      	cbnz	r1, 800d2fc <__ascii_mbtowc+0x6>
 800d2fa:	a901      	add	r1, sp, #4
 800d2fc:	b142      	cbz	r2, 800d310 <__ascii_mbtowc+0x1a>
 800d2fe:	b14b      	cbz	r3, 800d314 <__ascii_mbtowc+0x1e>
 800d300:	7813      	ldrb	r3, [r2, #0]
 800d302:	600b      	str	r3, [r1, #0]
 800d304:	7812      	ldrb	r2, [r2, #0]
 800d306:	1e10      	subs	r0, r2, #0
 800d308:	bf18      	it	ne
 800d30a:	2001      	movne	r0, #1
 800d30c:	b002      	add	sp, #8
 800d30e:	4770      	bx	lr
 800d310:	4610      	mov	r0, r2
 800d312:	e7fb      	b.n	800d30c <__ascii_mbtowc+0x16>
 800d314:	f06f 0001 	mvn.w	r0, #1
 800d318:	e7f8      	b.n	800d30c <__ascii_mbtowc+0x16>

0800d31a <_realloc_r>:
 800d31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	4607      	mov	r7, r0
 800d320:	4614      	mov	r4, r2
 800d322:	460d      	mov	r5, r1
 800d324:	b921      	cbnz	r1, 800d330 <_realloc_r+0x16>
 800d326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d32a:	4611      	mov	r1, r2
 800d32c:	f7fb bfb2 	b.w	8009294 <_malloc_r>
 800d330:	b92a      	cbnz	r2, 800d33e <_realloc_r+0x24>
 800d332:	f7fd feb5 	bl	800b0a0 <_free_r>
 800d336:	4625      	mov	r5, r4
 800d338:	4628      	mov	r0, r5
 800d33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d33e:	f000 f840 	bl	800d3c2 <_malloc_usable_size_r>
 800d342:	4284      	cmp	r4, r0
 800d344:	4606      	mov	r6, r0
 800d346:	d802      	bhi.n	800d34e <_realloc_r+0x34>
 800d348:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d34c:	d8f4      	bhi.n	800d338 <_realloc_r+0x1e>
 800d34e:	4621      	mov	r1, r4
 800d350:	4638      	mov	r0, r7
 800d352:	f7fb ff9f 	bl	8009294 <_malloc_r>
 800d356:	4680      	mov	r8, r0
 800d358:	b908      	cbnz	r0, 800d35e <_realloc_r+0x44>
 800d35a:	4645      	mov	r5, r8
 800d35c:	e7ec      	b.n	800d338 <_realloc_r+0x1e>
 800d35e:	42b4      	cmp	r4, r6
 800d360:	4622      	mov	r2, r4
 800d362:	4629      	mov	r1, r5
 800d364:	bf28      	it	cs
 800d366:	4632      	movcs	r2, r6
 800d368:	f7ff fc44 	bl	800cbf4 <memcpy>
 800d36c:	4629      	mov	r1, r5
 800d36e:	4638      	mov	r0, r7
 800d370:	f7fd fe96 	bl	800b0a0 <_free_r>
 800d374:	e7f1      	b.n	800d35a <_realloc_r+0x40>

0800d376 <__ascii_wctomb>:
 800d376:	4603      	mov	r3, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	b141      	cbz	r1, 800d38e <__ascii_wctomb+0x18>
 800d37c:	2aff      	cmp	r2, #255	@ 0xff
 800d37e:	d904      	bls.n	800d38a <__ascii_wctomb+0x14>
 800d380:	228a      	movs	r2, #138	@ 0x8a
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	f04f 30ff 	mov.w	r0, #4294967295
 800d388:	4770      	bx	lr
 800d38a:	700a      	strb	r2, [r1, #0]
 800d38c:	2001      	movs	r0, #1
 800d38e:	4770      	bx	lr

0800d390 <fiprintf>:
 800d390:	b40e      	push	{r1, r2, r3}
 800d392:	b503      	push	{r0, r1, lr}
 800d394:	4601      	mov	r1, r0
 800d396:	ab03      	add	r3, sp, #12
 800d398:	4805      	ldr	r0, [pc, #20]	@ (800d3b0 <fiprintf+0x20>)
 800d39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d39e:	6800      	ldr	r0, [r0, #0]
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	f000 f83f 	bl	800d424 <_vfiprintf_r>
 800d3a6:	b002      	add	sp, #8
 800d3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3ac:	b003      	add	sp, #12
 800d3ae:	4770      	bx	lr
 800d3b0:	200001e4 	.word	0x200001e4

0800d3b4 <abort>:
 800d3b4:	b508      	push	{r3, lr}
 800d3b6:	2006      	movs	r0, #6
 800d3b8:	f000 fa08 	bl	800d7cc <raise>
 800d3bc:	2001      	movs	r0, #1
 800d3be:	f7f4 fce5 	bl	8001d8c <_exit>

0800d3c2 <_malloc_usable_size_r>:
 800d3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3c6:	1f18      	subs	r0, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bfbc      	itt	lt
 800d3cc:	580b      	ldrlt	r3, [r1, r0]
 800d3ce:	18c0      	addlt	r0, r0, r3
 800d3d0:	4770      	bx	lr

0800d3d2 <__sfputc_r>:
 800d3d2:	6893      	ldr	r3, [r2, #8]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	b410      	push	{r4}
 800d3da:	6093      	str	r3, [r2, #8]
 800d3dc:	da08      	bge.n	800d3f0 <__sfputc_r+0x1e>
 800d3de:	6994      	ldr	r4, [r2, #24]
 800d3e0:	42a3      	cmp	r3, r4
 800d3e2:	db01      	blt.n	800d3e8 <__sfputc_r+0x16>
 800d3e4:	290a      	cmp	r1, #10
 800d3e6:	d103      	bne.n	800d3f0 <__sfputc_r+0x1e>
 800d3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ec:	f000 b932 	b.w	800d654 <__swbuf_r>
 800d3f0:	6813      	ldr	r3, [r2, #0]
 800d3f2:	1c58      	adds	r0, r3, #1
 800d3f4:	6010      	str	r0, [r2, #0]
 800d3f6:	7019      	strb	r1, [r3, #0]
 800d3f8:	4608      	mov	r0, r1
 800d3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <__sfputs_r>:
 800d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d402:	4606      	mov	r6, r0
 800d404:	460f      	mov	r7, r1
 800d406:	4614      	mov	r4, r2
 800d408:	18d5      	adds	r5, r2, r3
 800d40a:	42ac      	cmp	r4, r5
 800d40c:	d101      	bne.n	800d412 <__sfputs_r+0x12>
 800d40e:	2000      	movs	r0, #0
 800d410:	e007      	b.n	800d422 <__sfputs_r+0x22>
 800d412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d416:	463a      	mov	r2, r7
 800d418:	4630      	mov	r0, r6
 800d41a:	f7ff ffda 	bl	800d3d2 <__sfputc_r>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d1f3      	bne.n	800d40a <__sfputs_r+0xa>
 800d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d424 <_vfiprintf_r>:
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	460d      	mov	r5, r1
 800d42a:	b09d      	sub	sp, #116	@ 0x74
 800d42c:	4614      	mov	r4, r2
 800d42e:	4698      	mov	r8, r3
 800d430:	4606      	mov	r6, r0
 800d432:	b118      	cbz	r0, 800d43c <_vfiprintf_r+0x18>
 800d434:	6a03      	ldr	r3, [r0, #32]
 800d436:	b90b      	cbnz	r3, 800d43c <_vfiprintf_r+0x18>
 800d438:	f7fc fea8 	bl	800a18c <__sinit>
 800d43c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d43e:	07d9      	lsls	r1, r3, #31
 800d440:	d405      	bmi.n	800d44e <_vfiprintf_r+0x2a>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	059a      	lsls	r2, r3, #22
 800d446:	d402      	bmi.n	800d44e <_vfiprintf_r+0x2a>
 800d448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d44a:	f7fc ffc8 	bl	800a3de <__retarget_lock_acquire_recursive>
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	071b      	lsls	r3, r3, #28
 800d452:	d501      	bpl.n	800d458 <_vfiprintf_r+0x34>
 800d454:	692b      	ldr	r3, [r5, #16]
 800d456:	b99b      	cbnz	r3, 800d480 <_vfiprintf_r+0x5c>
 800d458:	4629      	mov	r1, r5
 800d45a:	4630      	mov	r0, r6
 800d45c:	f000 f938 	bl	800d6d0 <__swsetup_r>
 800d460:	b170      	cbz	r0, 800d480 <_vfiprintf_r+0x5c>
 800d462:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d464:	07dc      	lsls	r4, r3, #31
 800d466:	d504      	bpl.n	800d472 <_vfiprintf_r+0x4e>
 800d468:	f04f 30ff 	mov.w	r0, #4294967295
 800d46c:	b01d      	add	sp, #116	@ 0x74
 800d46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d472:	89ab      	ldrh	r3, [r5, #12]
 800d474:	0598      	lsls	r0, r3, #22
 800d476:	d4f7      	bmi.n	800d468 <_vfiprintf_r+0x44>
 800d478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d47a:	f7fc ffb1 	bl	800a3e0 <__retarget_lock_release_recursive>
 800d47e:	e7f3      	b.n	800d468 <_vfiprintf_r+0x44>
 800d480:	2300      	movs	r3, #0
 800d482:	9309      	str	r3, [sp, #36]	@ 0x24
 800d484:	2320      	movs	r3, #32
 800d486:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d48e:	2330      	movs	r3, #48	@ 0x30
 800d490:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d640 <_vfiprintf_r+0x21c>
 800d494:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d498:	f04f 0901 	mov.w	r9, #1
 800d49c:	4623      	mov	r3, r4
 800d49e:	469a      	mov	sl, r3
 800d4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a4:	b10a      	cbz	r2, 800d4aa <_vfiprintf_r+0x86>
 800d4a6:	2a25      	cmp	r2, #37	@ 0x25
 800d4a8:	d1f9      	bne.n	800d49e <_vfiprintf_r+0x7a>
 800d4aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ae:	d00b      	beq.n	800d4c8 <_vfiprintf_r+0xa4>
 800d4b0:	465b      	mov	r3, fp
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f7ff ffa2 	bl	800d400 <__sfputs_r>
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f000 80a7 	beq.w	800d610 <_vfiprintf_r+0x1ec>
 800d4c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4c4:	445a      	add	r2, fp
 800d4c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 809f 	beq.w	800d610 <_vfiprintf_r+0x1ec>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4dc:	f10a 0a01 	add.w	sl, sl, #1
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	9307      	str	r3, [sp, #28]
 800d4e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4ea:	4654      	mov	r4, sl
 800d4ec:	2205      	movs	r2, #5
 800d4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f2:	4853      	ldr	r0, [pc, #332]	@ (800d640 <_vfiprintf_r+0x21c>)
 800d4f4:	f7f2 fe7c 	bl	80001f0 <memchr>
 800d4f8:	9a04      	ldr	r2, [sp, #16]
 800d4fa:	b9d8      	cbnz	r0, 800d534 <_vfiprintf_r+0x110>
 800d4fc:	06d1      	lsls	r1, r2, #27
 800d4fe:	bf44      	itt	mi
 800d500:	2320      	movmi	r3, #32
 800d502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d506:	0713      	lsls	r3, r2, #28
 800d508:	bf44      	itt	mi
 800d50a:	232b      	movmi	r3, #43	@ 0x2b
 800d50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d510:	f89a 3000 	ldrb.w	r3, [sl]
 800d514:	2b2a      	cmp	r3, #42	@ 0x2a
 800d516:	d015      	beq.n	800d544 <_vfiprintf_r+0x120>
 800d518:	9a07      	ldr	r2, [sp, #28]
 800d51a:	4654      	mov	r4, sl
 800d51c:	2000      	movs	r0, #0
 800d51e:	f04f 0c0a 	mov.w	ip, #10
 800d522:	4621      	mov	r1, r4
 800d524:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d528:	3b30      	subs	r3, #48	@ 0x30
 800d52a:	2b09      	cmp	r3, #9
 800d52c:	d94b      	bls.n	800d5c6 <_vfiprintf_r+0x1a2>
 800d52e:	b1b0      	cbz	r0, 800d55e <_vfiprintf_r+0x13a>
 800d530:	9207      	str	r2, [sp, #28]
 800d532:	e014      	b.n	800d55e <_vfiprintf_r+0x13a>
 800d534:	eba0 0308 	sub.w	r3, r0, r8
 800d538:	fa09 f303 	lsl.w	r3, r9, r3
 800d53c:	4313      	orrs	r3, r2
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	46a2      	mov	sl, r4
 800d542:	e7d2      	b.n	800d4ea <_vfiprintf_r+0xc6>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	1d19      	adds	r1, r3, #4
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	9103      	str	r1, [sp, #12]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfbb      	ittet	lt
 800d550:	425b      	neglt	r3, r3
 800d552:	f042 0202 	orrlt.w	r2, r2, #2
 800d556:	9307      	strge	r3, [sp, #28]
 800d558:	9307      	strlt	r3, [sp, #28]
 800d55a:	bfb8      	it	lt
 800d55c:	9204      	strlt	r2, [sp, #16]
 800d55e:	7823      	ldrb	r3, [r4, #0]
 800d560:	2b2e      	cmp	r3, #46	@ 0x2e
 800d562:	d10a      	bne.n	800d57a <_vfiprintf_r+0x156>
 800d564:	7863      	ldrb	r3, [r4, #1]
 800d566:	2b2a      	cmp	r3, #42	@ 0x2a
 800d568:	d132      	bne.n	800d5d0 <_vfiprintf_r+0x1ac>
 800d56a:	9b03      	ldr	r3, [sp, #12]
 800d56c:	1d1a      	adds	r2, r3, #4
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	9203      	str	r2, [sp, #12]
 800d572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d576:	3402      	adds	r4, #2
 800d578:	9305      	str	r3, [sp, #20]
 800d57a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d650 <_vfiprintf_r+0x22c>
 800d57e:	7821      	ldrb	r1, [r4, #0]
 800d580:	2203      	movs	r2, #3
 800d582:	4650      	mov	r0, sl
 800d584:	f7f2 fe34 	bl	80001f0 <memchr>
 800d588:	b138      	cbz	r0, 800d59a <_vfiprintf_r+0x176>
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	eba0 000a 	sub.w	r0, r0, sl
 800d590:	2240      	movs	r2, #64	@ 0x40
 800d592:	4082      	lsls	r2, r0
 800d594:	4313      	orrs	r3, r2
 800d596:	3401      	adds	r4, #1
 800d598:	9304      	str	r3, [sp, #16]
 800d59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d59e:	4829      	ldr	r0, [pc, #164]	@ (800d644 <_vfiprintf_r+0x220>)
 800d5a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5a4:	2206      	movs	r2, #6
 800d5a6:	f7f2 fe23 	bl	80001f0 <memchr>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d03f      	beq.n	800d62e <_vfiprintf_r+0x20a>
 800d5ae:	4b26      	ldr	r3, [pc, #152]	@ (800d648 <_vfiprintf_r+0x224>)
 800d5b0:	bb1b      	cbnz	r3, 800d5fa <_vfiprintf_r+0x1d6>
 800d5b2:	9b03      	ldr	r3, [sp, #12]
 800d5b4:	3307      	adds	r3, #7
 800d5b6:	f023 0307 	bic.w	r3, r3, #7
 800d5ba:	3308      	adds	r3, #8
 800d5bc:	9303      	str	r3, [sp, #12]
 800d5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c0:	443b      	add	r3, r7
 800d5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c4:	e76a      	b.n	800d49c <_vfiprintf_r+0x78>
 800d5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	e7a8      	b.n	800d522 <_vfiprintf_r+0xfe>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	3401      	adds	r4, #1
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f04f 0c0a 	mov.w	ip, #10
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e2:	3a30      	subs	r2, #48	@ 0x30
 800d5e4:	2a09      	cmp	r2, #9
 800d5e6:	d903      	bls.n	800d5f0 <_vfiprintf_r+0x1cc>
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d0c6      	beq.n	800d57a <_vfiprintf_r+0x156>
 800d5ec:	9105      	str	r1, [sp, #20]
 800d5ee:	e7c4      	b.n	800d57a <_vfiprintf_r+0x156>
 800d5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e7f0      	b.n	800d5dc <_vfiprintf_r+0x1b8>
 800d5fa:	ab03      	add	r3, sp, #12
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	462a      	mov	r2, r5
 800d600:	4b12      	ldr	r3, [pc, #72]	@ (800d64c <_vfiprintf_r+0x228>)
 800d602:	a904      	add	r1, sp, #16
 800d604:	4630      	mov	r0, r6
 800d606:	f7fb ff71 	bl	80094ec <_printf_float>
 800d60a:	4607      	mov	r7, r0
 800d60c:	1c78      	adds	r0, r7, #1
 800d60e:	d1d6      	bne.n	800d5be <_vfiprintf_r+0x19a>
 800d610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d612:	07d9      	lsls	r1, r3, #31
 800d614:	d405      	bmi.n	800d622 <_vfiprintf_r+0x1fe>
 800d616:	89ab      	ldrh	r3, [r5, #12]
 800d618:	059a      	lsls	r2, r3, #22
 800d61a:	d402      	bmi.n	800d622 <_vfiprintf_r+0x1fe>
 800d61c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d61e:	f7fc fedf 	bl	800a3e0 <__retarget_lock_release_recursive>
 800d622:	89ab      	ldrh	r3, [r5, #12]
 800d624:	065b      	lsls	r3, r3, #25
 800d626:	f53f af1f 	bmi.w	800d468 <_vfiprintf_r+0x44>
 800d62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d62c:	e71e      	b.n	800d46c <_vfiprintf_r+0x48>
 800d62e:	ab03      	add	r3, sp, #12
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	462a      	mov	r2, r5
 800d634:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <_vfiprintf_r+0x228>)
 800d636:	a904      	add	r1, sp, #16
 800d638:	4630      	mov	r0, r6
 800d63a:	f7fc f9ef 	bl	8009a1c <_printf_i>
 800d63e:	e7e4      	b.n	800d60a <_vfiprintf_r+0x1e6>
 800d640:	0800dc5f 	.word	0x0800dc5f
 800d644:	0800dc69 	.word	0x0800dc69
 800d648:	080094ed 	.word	0x080094ed
 800d64c:	0800d401 	.word	0x0800d401
 800d650:	0800dc65 	.word	0x0800dc65

0800d654 <__swbuf_r>:
 800d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d656:	460e      	mov	r6, r1
 800d658:	4614      	mov	r4, r2
 800d65a:	4605      	mov	r5, r0
 800d65c:	b118      	cbz	r0, 800d666 <__swbuf_r+0x12>
 800d65e:	6a03      	ldr	r3, [r0, #32]
 800d660:	b90b      	cbnz	r3, 800d666 <__swbuf_r+0x12>
 800d662:	f7fc fd93 	bl	800a18c <__sinit>
 800d666:	69a3      	ldr	r3, [r4, #24]
 800d668:	60a3      	str	r3, [r4, #8]
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	071a      	lsls	r2, r3, #28
 800d66e:	d501      	bpl.n	800d674 <__swbuf_r+0x20>
 800d670:	6923      	ldr	r3, [r4, #16]
 800d672:	b943      	cbnz	r3, 800d686 <__swbuf_r+0x32>
 800d674:	4621      	mov	r1, r4
 800d676:	4628      	mov	r0, r5
 800d678:	f000 f82a 	bl	800d6d0 <__swsetup_r>
 800d67c:	b118      	cbz	r0, 800d686 <__swbuf_r+0x32>
 800d67e:	f04f 37ff 	mov.w	r7, #4294967295
 800d682:	4638      	mov	r0, r7
 800d684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	6922      	ldr	r2, [r4, #16]
 800d68a:	1a98      	subs	r0, r3, r2
 800d68c:	6963      	ldr	r3, [r4, #20]
 800d68e:	b2f6      	uxtb	r6, r6
 800d690:	4283      	cmp	r3, r0
 800d692:	4637      	mov	r7, r6
 800d694:	dc05      	bgt.n	800d6a2 <__swbuf_r+0x4e>
 800d696:	4621      	mov	r1, r4
 800d698:	4628      	mov	r0, r5
 800d69a:	f7ff fa57 	bl	800cb4c <_fflush_r>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d1ed      	bne.n	800d67e <__swbuf_r+0x2a>
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	60a3      	str	r3, [r4, #8]
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	6022      	str	r2, [r4, #0]
 800d6ae:	701e      	strb	r6, [r3, #0]
 800d6b0:	6962      	ldr	r2, [r4, #20]
 800d6b2:	1c43      	adds	r3, r0, #1
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d004      	beq.n	800d6c2 <__swbuf_r+0x6e>
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	07db      	lsls	r3, r3, #31
 800d6bc:	d5e1      	bpl.n	800d682 <__swbuf_r+0x2e>
 800d6be:	2e0a      	cmp	r6, #10
 800d6c0:	d1df      	bne.n	800d682 <__swbuf_r+0x2e>
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f7ff fa41 	bl	800cb4c <_fflush_r>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d0d9      	beq.n	800d682 <__swbuf_r+0x2e>
 800d6ce:	e7d6      	b.n	800d67e <__swbuf_r+0x2a>

0800d6d0 <__swsetup_r>:
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4b29      	ldr	r3, [pc, #164]	@ (800d778 <__swsetup_r+0xa8>)
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	460c      	mov	r4, r1
 800d6da:	b118      	cbz	r0, 800d6e4 <__swsetup_r+0x14>
 800d6dc:	6a03      	ldr	r3, [r0, #32]
 800d6de:	b90b      	cbnz	r3, 800d6e4 <__swsetup_r+0x14>
 800d6e0:	f7fc fd54 	bl	800a18c <__sinit>
 800d6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e8:	0719      	lsls	r1, r3, #28
 800d6ea:	d422      	bmi.n	800d732 <__swsetup_r+0x62>
 800d6ec:	06da      	lsls	r2, r3, #27
 800d6ee:	d407      	bmi.n	800d700 <__swsetup_r+0x30>
 800d6f0:	2209      	movs	r2, #9
 800d6f2:	602a      	str	r2, [r5, #0]
 800d6f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fe:	e033      	b.n	800d768 <__swsetup_r+0x98>
 800d700:	0758      	lsls	r0, r3, #29
 800d702:	d512      	bpl.n	800d72a <__swsetup_r+0x5a>
 800d704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d706:	b141      	cbz	r1, 800d71a <__swsetup_r+0x4a>
 800d708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d70c:	4299      	cmp	r1, r3
 800d70e:	d002      	beq.n	800d716 <__swsetup_r+0x46>
 800d710:	4628      	mov	r0, r5
 800d712:	f7fd fcc5 	bl	800b0a0 <_free_r>
 800d716:	2300      	movs	r3, #0
 800d718:	6363      	str	r3, [r4, #52]	@ 0x34
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d720:	81a3      	strh	r3, [r4, #12]
 800d722:	2300      	movs	r3, #0
 800d724:	6063      	str	r3, [r4, #4]
 800d726:	6923      	ldr	r3, [r4, #16]
 800d728:	6023      	str	r3, [r4, #0]
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f043 0308 	orr.w	r3, r3, #8
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	6923      	ldr	r3, [r4, #16]
 800d734:	b94b      	cbnz	r3, 800d74a <__swsetup_r+0x7a>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d740:	d003      	beq.n	800d74a <__swsetup_r+0x7a>
 800d742:	4621      	mov	r1, r4
 800d744:	4628      	mov	r0, r5
 800d746:	f000 f883 	bl	800d850 <__smakebuf_r>
 800d74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d74e:	f013 0201 	ands.w	r2, r3, #1
 800d752:	d00a      	beq.n	800d76a <__swsetup_r+0x9a>
 800d754:	2200      	movs	r2, #0
 800d756:	60a2      	str	r2, [r4, #8]
 800d758:	6962      	ldr	r2, [r4, #20]
 800d75a:	4252      	negs	r2, r2
 800d75c:	61a2      	str	r2, [r4, #24]
 800d75e:	6922      	ldr	r2, [r4, #16]
 800d760:	b942      	cbnz	r2, 800d774 <__swsetup_r+0xa4>
 800d762:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d766:	d1c5      	bne.n	800d6f4 <__swsetup_r+0x24>
 800d768:	bd38      	pop	{r3, r4, r5, pc}
 800d76a:	0799      	lsls	r1, r3, #30
 800d76c:	bf58      	it	pl
 800d76e:	6962      	ldrpl	r2, [r4, #20]
 800d770:	60a2      	str	r2, [r4, #8]
 800d772:	e7f4      	b.n	800d75e <__swsetup_r+0x8e>
 800d774:	2000      	movs	r0, #0
 800d776:	e7f7      	b.n	800d768 <__swsetup_r+0x98>
 800d778:	200001e4 	.word	0x200001e4

0800d77c <_raise_r>:
 800d77c:	291f      	cmp	r1, #31
 800d77e:	b538      	push	{r3, r4, r5, lr}
 800d780:	4605      	mov	r5, r0
 800d782:	460c      	mov	r4, r1
 800d784:	d904      	bls.n	800d790 <_raise_r+0x14>
 800d786:	2316      	movs	r3, #22
 800d788:	6003      	str	r3, [r0, #0]
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d792:	b112      	cbz	r2, 800d79a <_raise_r+0x1e>
 800d794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d798:	b94b      	cbnz	r3, 800d7ae <_raise_r+0x32>
 800d79a:	4628      	mov	r0, r5
 800d79c:	f000 f830 	bl	800d800 <_getpid_r>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7aa:	f000 b817 	b.w	800d7dc <_kill_r>
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d00a      	beq.n	800d7c8 <_raise_r+0x4c>
 800d7b2:	1c59      	adds	r1, r3, #1
 800d7b4:	d103      	bne.n	800d7be <_raise_r+0x42>
 800d7b6:	2316      	movs	r3, #22
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	e7e7      	b.n	800d78e <_raise_r+0x12>
 800d7be:	2100      	movs	r1, #0
 800d7c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4798      	blx	r3
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e7e0      	b.n	800d78e <_raise_r+0x12>

0800d7cc <raise>:
 800d7cc:	4b02      	ldr	r3, [pc, #8]	@ (800d7d8 <raise+0xc>)
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f7ff bfd3 	b.w	800d77c <_raise_r>
 800d7d6:	bf00      	nop
 800d7d8:	200001e4 	.word	0x200001e4

0800d7dc <_kill_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	@ (800d7fc <_kill_r+0x20>)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	f7f4 fabf 	bl	8001d6c <_kill>
 800d7ee:	1c43      	adds	r3, r0, #1
 800d7f0:	d102      	bne.n	800d7f8 <_kill_r+0x1c>
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	b103      	cbz	r3, 800d7f8 <_kill_r+0x1c>
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	bd38      	pop	{r3, r4, r5, pc}
 800d7fa:	bf00      	nop
 800d7fc:	200008f4 	.word	0x200008f4

0800d800 <_getpid_r>:
 800d800:	f7f4 baac 	b.w	8001d5c <_getpid>

0800d804 <__swhatbuf_r>:
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	460c      	mov	r4, r1
 800d808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80c:	2900      	cmp	r1, #0
 800d80e:	b096      	sub	sp, #88	@ 0x58
 800d810:	4615      	mov	r5, r2
 800d812:	461e      	mov	r6, r3
 800d814:	da0d      	bge.n	800d832 <__swhatbuf_r+0x2e>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d81c:	f04f 0100 	mov.w	r1, #0
 800d820:	bf14      	ite	ne
 800d822:	2340      	movne	r3, #64	@ 0x40
 800d824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d828:	2000      	movs	r0, #0
 800d82a:	6031      	str	r1, [r6, #0]
 800d82c:	602b      	str	r3, [r5, #0]
 800d82e:	b016      	add	sp, #88	@ 0x58
 800d830:	bd70      	pop	{r4, r5, r6, pc}
 800d832:	466a      	mov	r2, sp
 800d834:	f000 f848 	bl	800d8c8 <_fstat_r>
 800d838:	2800      	cmp	r0, #0
 800d83a:	dbec      	blt.n	800d816 <__swhatbuf_r+0x12>
 800d83c:	9901      	ldr	r1, [sp, #4]
 800d83e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d846:	4259      	negs	r1, r3
 800d848:	4159      	adcs	r1, r3
 800d84a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d84e:	e7eb      	b.n	800d828 <__swhatbuf_r+0x24>

0800d850 <__smakebuf_r>:
 800d850:	898b      	ldrh	r3, [r1, #12]
 800d852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d854:	079d      	lsls	r5, r3, #30
 800d856:	4606      	mov	r6, r0
 800d858:	460c      	mov	r4, r1
 800d85a:	d507      	bpl.n	800d86c <__smakebuf_r+0x1c>
 800d85c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d860:	6023      	str	r3, [r4, #0]
 800d862:	6123      	str	r3, [r4, #16]
 800d864:	2301      	movs	r3, #1
 800d866:	6163      	str	r3, [r4, #20]
 800d868:	b003      	add	sp, #12
 800d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86c:	ab01      	add	r3, sp, #4
 800d86e:	466a      	mov	r2, sp
 800d870:	f7ff ffc8 	bl	800d804 <__swhatbuf_r>
 800d874:	9f00      	ldr	r7, [sp, #0]
 800d876:	4605      	mov	r5, r0
 800d878:	4639      	mov	r1, r7
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7fb fd0a 	bl	8009294 <_malloc_r>
 800d880:	b948      	cbnz	r0, 800d896 <__smakebuf_r+0x46>
 800d882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d886:	059a      	lsls	r2, r3, #22
 800d888:	d4ee      	bmi.n	800d868 <__smakebuf_r+0x18>
 800d88a:	f023 0303 	bic.w	r3, r3, #3
 800d88e:	f043 0302 	orr.w	r3, r3, #2
 800d892:	81a3      	strh	r3, [r4, #12]
 800d894:	e7e2      	b.n	800d85c <__smakebuf_r+0xc>
 800d896:	89a3      	ldrh	r3, [r4, #12]
 800d898:	6020      	str	r0, [r4, #0]
 800d89a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d89e:	81a3      	strh	r3, [r4, #12]
 800d8a0:	9b01      	ldr	r3, [sp, #4]
 800d8a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8a6:	b15b      	cbz	r3, 800d8c0 <__smakebuf_r+0x70>
 800d8a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f000 f81d 	bl	800d8ec <_isatty_r>
 800d8b2:	b128      	cbz	r0, 800d8c0 <__smakebuf_r+0x70>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	f023 0303 	bic.w	r3, r3, #3
 800d8ba:	f043 0301 	orr.w	r3, r3, #1
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	431d      	orrs	r5, r3
 800d8c4:	81a5      	strh	r5, [r4, #12]
 800d8c6:	e7cf      	b.n	800d868 <__smakebuf_r+0x18>

0800d8c8 <_fstat_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d07      	ldr	r5, [pc, #28]	@ (800d8e8 <_fstat_r+0x20>)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	f7f4 faa9 	bl	8001e2c <_fstat>
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	d102      	bne.n	800d8e4 <_fstat_r+0x1c>
 800d8de:	682b      	ldr	r3, [r5, #0]
 800d8e0:	b103      	cbz	r3, 800d8e4 <_fstat_r+0x1c>
 800d8e2:	6023      	str	r3, [r4, #0]
 800d8e4:	bd38      	pop	{r3, r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200008f4 	.word	0x200008f4

0800d8ec <_isatty_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4d06      	ldr	r5, [pc, #24]	@ (800d908 <_isatty_r+0x1c>)
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	602b      	str	r3, [r5, #0]
 800d8f8:	f7f4 faa8 	bl	8001e4c <_isatty>
 800d8fc:	1c43      	adds	r3, r0, #1
 800d8fe:	d102      	bne.n	800d906 <_isatty_r+0x1a>
 800d900:	682b      	ldr	r3, [r5, #0]
 800d902:	b103      	cbz	r3, 800d906 <_isatty_r+0x1a>
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	200008f4 	.word	0x200008f4

0800d90c <round>:
 800d90c:	ec51 0b10 	vmov	r0, r1, d0
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d916:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800d91a:	2a13      	cmp	r2, #19
 800d91c:	460b      	mov	r3, r1
 800d91e:	4605      	mov	r5, r0
 800d920:	dc1b      	bgt.n	800d95a <round+0x4e>
 800d922:	2a00      	cmp	r2, #0
 800d924:	da0b      	bge.n	800d93e <round+0x32>
 800d926:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d92a:	3201      	adds	r2, #1
 800d92c:	bf04      	itt	eq
 800d92e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800d932:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800d936:	2200      	movs	r2, #0
 800d938:	4619      	mov	r1, r3
 800d93a:	4610      	mov	r0, r2
 800d93c:	e015      	b.n	800d96a <round+0x5e>
 800d93e:	4c15      	ldr	r4, [pc, #84]	@ (800d994 <round+0x88>)
 800d940:	4114      	asrs	r4, r2
 800d942:	ea04 0601 	and.w	r6, r4, r1
 800d946:	4306      	orrs	r6, r0
 800d948:	d00f      	beq.n	800d96a <round+0x5e>
 800d94a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800d94e:	fa41 f202 	asr.w	r2, r1, r2
 800d952:	4413      	add	r3, r2
 800d954:	ea23 0304 	bic.w	r3, r3, r4
 800d958:	e7ed      	b.n	800d936 <round+0x2a>
 800d95a:	2a33      	cmp	r2, #51	@ 0x33
 800d95c:	dd08      	ble.n	800d970 <round+0x64>
 800d95e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800d962:	d102      	bne.n	800d96a <round+0x5e>
 800d964:	4602      	mov	r2, r0
 800d966:	f7f2 fca1 	bl	80002ac <__adddf3>
 800d96a:	ec41 0b10 	vmov	d0, r0, r1
 800d96e:	bd70      	pop	{r4, r5, r6, pc}
 800d970:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800d974:	f04f 34ff 	mov.w	r4, #4294967295
 800d978:	40f4      	lsrs	r4, r6
 800d97a:	4204      	tst	r4, r0
 800d97c:	d0f5      	beq.n	800d96a <round+0x5e>
 800d97e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800d982:	2201      	movs	r2, #1
 800d984:	408a      	lsls	r2, r1
 800d986:	1952      	adds	r2, r2, r5
 800d988:	bf28      	it	cs
 800d98a:	3301      	addcs	r3, #1
 800d98c:	ea22 0204 	bic.w	r2, r2, r4
 800d990:	e7d2      	b.n	800d938 <round+0x2c>
 800d992:	bf00      	nop
 800d994:	000fffff 	.word	0x000fffff

0800d998 <_init>:
 800d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99a:	bf00      	nop
 800d99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d99e:	bc08      	pop	{r3}
 800d9a0:	469e      	mov	lr, r3
 800d9a2:	4770      	bx	lr

0800d9a4 <_fini>:
 800d9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a6:	bf00      	nop
 800d9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9aa:	bc08      	pop	{r3}
 800d9ac:	469e      	mov	lr, r3
 800d9ae:	4770      	bx	lr
